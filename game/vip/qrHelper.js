const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { createCanvas, loadImage, registerFont } = require('canvas');

// ƒêƒÉng k√Ω font ch·ªØ
try {
    const fontPath = path.join(__dirname, '../../fonts/BeVietnamPro-Medium.ttf');
    registerFont(fontPath, { family: 'BeVietnam' });
} catch (err) {
    console.error('Failed to register font:', err);
}

class QRGenerator {
    constructor() {
        this.tempDir = path.join(__dirname, '../../temp');
        
        // T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!fs.existsSync(this.tempDir)) {
            fs.mkdirSync(this.tempDir, { recursive: true });
        }
    }

    /**
     * T·∫°o h√¨nh ·∫£nh QR cho thanh to√°n VIP
     * @param {Object} options - C√°c t√πy ch·ªçn
     * @param {string} options.bankNumber - S·ªë t√†i kho·∫£n ng√¢n h√†ng
     * @param {string} options.bankName - T√™n ng√¢n h√†ng
     * @param {string} options.accountName - T√™n ch·ªß t√†i kho·∫£n
     * @param {number} options.amount - S·ªë ti·ªÅn thanh to√°n
     * @param {string} options.content - N·ªôi dung thanh to√°n
     * @param {string} options.packageName - T√™n g√≥i VIP
     * @param {string} options.packageIcon - Icon c·ªßa g√≥i VIP
     * @param {boolean} options.isFamily - C√≥ ph·∫£i g√≥i gia ƒë√¨nh kh√¥ng
     * @param {boolean} options.isGroup - C√≥ ph·∫£i g√≥i nh√≥m kh√¥ng
     * @returns {Promise<string>} - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh QR
     */
    async generateQR(options) {
        const {
            bankNumber = '109876048569',
            bankName = 'Vietinbank',  // ƒê·∫£m b·∫£o t√™n ng√¢n h√†ng l√† vi·∫øt t·∫Øt theo VietQR
            accountName = 'HOANG NGOC TU',
            amount,
            content,
            packageName,
            packageIcon,
            isFamily = false,
            isGroup = false
        } = options;

        try {
            // T·∫°o URL VietQR tr·ª±c ti·∫øp
            const vietQrUrl = `https://img.vietqr.io/image/${bankName}-${bankNumber}-compact.png?amount=${amount}&addInfo=${encodeURIComponent(content)}`;
            
            // T·∫£i ·∫£nh QR tr·ª±c ti·∫øp t·ª´ API VietQR
            const qrResponse = await axios({
                method: 'GET',
                url: vietQrUrl,
                responseType: 'arraybuffer',
                headers: {
                    'Accept': 'image/png',
                    'User-Agent': 'Mozilla/5.0'
                }
            });
            
            // L∆∞u ·∫£nh QR t·∫°m th·ªùi
            const tempQrPath = path.join(this.tempDir, `temp_qr_${Date.now()}.png`);
            fs.writeFileSync(tempQrPath, Buffer.from(qrResponse.data));
            
            // T·∫°o canvas v·ªõi k√≠ch th∆∞·ªõc 1000x1200
            const canvas = createCanvas(1000, 1200);
            const ctx = canvas.getContext('2d');

            // V·∫Ω n·ªÅn
            ctx.fillStyle = '#1a1a2e';
            ctx.fillRect(0, 0, 1000, 1200);

            // T·∫°o gradient cho header
            const gradient = ctx.createLinearGradient(0, 0, 1000, 150);
            if (isFamily) {
                gradient.addColorStop(0, '#8E2DE2');
                gradient.addColorStop(1, '#4A00E0');
            } else if (isGroup) {
                gradient.addColorStop(0, '#11998e');
                gradient.addColorStop(1, '#38ef7d');
            } else {
                // Gradient m√†u d·ª±a tr√™n t√™n g√≥i
                if (packageName?.toLowerCase().includes('bronze')) {
                    gradient.addColorStop(0, '#b8751e');
                    gradient.addColorStop(1, '#ffc87c');
                } else if (packageName?.toLowerCase().includes('silver')) {
                    gradient.addColorStop(0, '#757F9A');
                    gradient.addColorStop(1, '#D7DDE8');
                } else if (packageName?.toLowerCase().includes('gold')) {
                    gradient.addColorStop(0, '#FFD700');
                    gradient.addColorStop(1, '#FFA500');
                } else {
                    gradient.addColorStop(0, '#4e54c8');
                    gradient.addColorStop(1, '#8f94fb');
                }
            }

            // V·∫Ω header v·ªõi gradient
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, 1000, 150);

            // V·∫Ω title
            ctx.fillStyle = '#FFFFFF';
            ctx.font = '40px BeVietnam';
            ctx.textAlign = 'center';
            
            let title = `${packageIcon || 'üíé'} THANH TO√ÅN ${packageName || 'VIP'}`;
            if (isFamily) {
                title = 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ THANH TO√ÅN G√ìI GIA ƒê√åNH';
            } else if (isGroup) {
                title = 'üë• THANH TO√ÅN G√ìI NH√ìM';
            }
            
            ctx.fillText(title, 500, 90);

            // V·∫Ω khung QR
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(325, 200, 350, 350);

            // T·∫£i ·∫£nh QR v√† v·∫Ω v√†o canvas
            const qrImage = await loadImage(tempQrPath);
            ctx.drawImage(qrImage, 340, 215, 320, 320);

            // V·∫Ω th√¥ng tin thanh to√°n
            ctx.fillStyle = '#FFFFFF';
            ctx.font = '30px BeVietnam';
            ctx.textAlign = 'center';
            ctx.fillText('TH√îNG TIN THANH TO√ÅN', 500, 600);

            // V·∫Ω ƒë∆∞·ªùng k·∫ª
            ctx.strokeStyle = '#FFFFFF';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(320, 620);
            ctx.lineTo(680, 620);
            ctx.stroke();

            // V·∫Ω th√¥ng tin chi ti·∫øt
            ctx.textAlign = 'left';
            ctx.font = '25px BeVietnam';
            
            // Th√™m icon
            const drawTextWithIcon = (icon, text, y) => {
                ctx.fillText(`${icon} ${text}`, 200, y);
            };

            drawTextWithIcon('üè¶', `Ng√¢n h√†ng: ${bankName}`, 670);
            drawTextWithIcon('üë§', `Ch·ªß TK: ${accountName}`, 710);
            drawTextWithIcon('üí≥', `S·ªë TK: ${bankNumber}`, 750);
            drawTextWithIcon('üí∞', `S·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')}ƒë`, 790);

            // V·∫Ω n·ªôi dung chuy·ªÉn kho·∫£n
            ctx.fillStyle = '#FFD700';
            ctx.font = '25px BeVietnam';
            ctx.textAlign = 'center';
            ctx.fillText('N·ªòI DUNG CHUY·ªÇN KHO·∫¢N', 500, 850);

            // V·∫Ω khung ch·ª©a n·ªôi dung
            ctx.fillStyle = '#2d2d42';
            roundRect(ctx, 150, 870, 700, 100, 10, true);

            // V·∫Ω n·ªôi dung
            ctx.fillStyle = '#FFFFFF';
            ctx.font = '30px BeVietnam';
            ctx.textAlign = 'center';
            
            // C·∫Øt ng·∫Øn n·ªôi dung n·∫øu qu√° d√†i
            let displayContent = content;
            if (content.length > 30) {
                displayContent = content.substring(0, 27) + '...';
            }
            
            ctx.fillText(displayContent, 500, 930);

            // V·∫Ω l∆∞u √Ω
            ctx.fillStyle = '#FF7F50';
            ctx.font = '25px BeVietnam';
            ctx.textAlign = 'center';
            ctx.fillText('‚ö†Ô∏è KH√îNG THAY ƒê·ªîI N·ªòI DUNG CHUY·ªÇN KHO·∫¢N', 500, 1020);
            ctx.fillStyle = '#a0a0a0';
            ctx.font = '22px BeVietnam';
            ctx.fillText('H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t sau khi thanh to√°n', 500, 1060);

            // V·∫Ω URL VietQR b√™n d∆∞·ªõi
            ctx.fillStyle = '#8a8a8a';
            ctx.font = '16px BeVietnam';
            ctx.fillText('Qu√©t m√£ QR b·∫±ng ·ª©ng d·ª•ng ng√¢n h√†ng ho·∫∑c v√≠ ƒëi·ªán t·ª≠', 500, 1100);

            // L∆∞u canvas th√†nh file PNG
            const uniqueId = Date.now();
            const outputPath = path.join(this.tempDir, `vip_qr_${uniqueId}.png`);
            
            const buffer = canvas.toBuffer('image/png');
            fs.writeFileSync(outputPath, buffer);
            
            // X√≥a file QR t·∫°m th·ªùi
            fs.unlinkSync(tempQrPath);
            
            return outputPath;
        } catch (error) {
            console.error('L·ªói t·∫°o QR:', error);
            return null;
        }
    }
}

// H√†m v·∫Ω h√¨nh ch·ªØ nh·∫≠t c√≥ g√≥c bo tr√≤n
function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
    if (typeof radius === 'undefined') {
        radius = 5;
    }
    if (typeof radius === 'number') {
        radius = {tl: radius, tr: radius, br: radius, bl: radius};
    } else {
        const defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0};
        for (let side in defaultRadius) {
            radius[side] = radius[side] || defaultRadius[side];
        }
    }
    ctx.beginPath();
    ctx.moveTo(x + radius.tl, y);
    ctx.lineTo(x + width - radius.tr, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
    ctx.lineTo(x + width, y + height - radius.br);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
    ctx.lineTo(x + radius.bl, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
    ctx.lineTo(x, y + radius.tl);
    ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    ctx.closePath();
    if (fill) {
        ctx.fill();
    }
    if (stroke) {
        ctx.stroke();
    }
}

module.exports = new QRGenerator();