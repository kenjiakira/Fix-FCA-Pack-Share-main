const fs = require('fs');
const path = require('path');

module.exports = {
    name: "leave",
    info: "X·ª≠ l√Ω khi th√†nh vi√™n r·ªùi nh√≥m",

    onEvents: async function({ api, event, Threads }) {
        const { threadID, logMessageType, logMessageData } = event;
        
        if (logMessageType !== "log:unsubscribe") return;

        const antioutPath = path.join(__dirname, '../commands/json/antiout.json');
        if (!fs.existsSync(antioutPath)) return;
        
        const antioutData = JSON.parse(fs.readFileSync(antioutPath));
        if (!antioutData[threadID]) return;

        const leftParticipantFbId = event.logMessageData.leftParticipantFbId || 
                                   event.logMessageData.participantFbId;
        
        try {
            if (leftParticipantFbId == api.getCurrentUserID()) return;
            
            const isKicked = event.author !== leftParticipantFbId;
            if (isKicked) return;

            const userName = event.logMessageData.leftParticipantFbId_name || 
                            event.logMessageData.name ||
                            "Th√†nh vi√™n";
            
            await new Promise(resolve => setTimeout(resolve, 2000));

            let retryCount = 0;
            const maxRetries = 3;
            
            while (retryCount < maxRetries) {
                try {
                    await api.addUserToGroup(leftParticipantFbId, threadID);
                    
                    await api.sendMessage(
                        `üîí ƒê√£ th√™m ${userName} tr·ªü l·∫°i nh√≥m!\n‚ö†Ô∏è Nh√≥m ƒëang b·∫≠t ch·∫ø ƒë·ªô ch·ªëng r·ªùi nh√≥m.`,
                        threadID
                    );
                    return;
                } catch (addError) {
                    retryCount++;
                    if (retryCount < maxRetries) {
                        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
                        continue;
                    }
                    throw addError;
                }
            }
        } catch (error) {
            console.error("Anti-out error:", error);
            let errorMsg = "‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m l·∫°i th√†nh vi√™n v√†o nh√≥m. ";
            
            if (error.error === 6) {
                errorMsg += "Ng∆∞·ªùi d√πng ƒë√£ ch·∫∑n bot.";
            } else if (error.error === 3252001) {
                errorMsg += "Bot ƒëang b·ªã Facebook h·∫°n ch·∫ø t√≠nh nƒÉng.";
            } else {
                errorMsg += "C√≥ th·ªÉ bot kh√¥ng ph·∫£i l√† qu·∫£n tr·ªã vi√™n.";
            }

            api.sendMessage(errorMsg, threadID);
        }
    }
};
