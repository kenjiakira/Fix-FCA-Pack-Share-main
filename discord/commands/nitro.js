const { getBalance, updateBalance } = require('../utils/currencies');
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');

const exchangeLogFile = path.join(__dirname, '../../database/exchange_logs.json');
const linksFile = path.join(__dirname, '../../database/discord_links.json');
const NITRO_CHANNEL_ID = '1341744524338135125';
const EXCHANGE_RATE = 10;

const STATUS = {
    PENDING: 'pending',
    COMPLETED: 'completed',
    FAILED: 'failed',
    EXPIRED: 'expired'
};

function loadExchangeLogs() {
    try {
        if (!fs.existsSync(exchangeLogFile)) {
            fs.writeFileSync(exchangeLogFile, JSON.stringify({ exchanges: [] }));
        }
        return JSON.parse(fs.readFileSync(exchangeLogFile));
    } catch (error) {
        console.error('Error loading exchange logs:', error);
        return { exchanges: [] };
    }
}

function saveExchangeLog(log) {
    try {
        const logs = loadExchangeLogs();
        if (!logs.exchanges) logs.exchanges = [];
        logs.exchanges.push(log);
        fs.writeFileSync(exchangeLogFile, JSON.stringify(logs, null, 2));
        return true;
    } catch (error) {
        console.error('Error saving exchange log:', error);
        return false;
    }
}

function getLinkedMessengerId(discordId) {
    try {
        const links = JSON.parse(fs.readFileSync(linksFile, 'utf8'));
        const link = links.links.find(l => l.discordId === discordId);
        return link ? link.messengerId : null;
    } catch {
        return null;
    }
}

async function processExchange(message, amount, response) {
  
    if (isNaN(amount) || amount <= 0) {
        await response.edit({
            embeds: [
                new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription('‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!')
            ]
        });
        return;
    }

    const userBalance = getBalance(message.author.id);
    if (userBalance < amount) {
        await response.edit({
            embeds: [
                new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription(`‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß! B·∫°n c·∫ßn ${amount} Nitro nh∆∞ng ch·ªâ c√≥ ${userBalance} Nitro`)
            ]
        });
        return;
    }

    const messengerID = getLinkedMessengerId(message.author.id);
    if (!messengerID) {
        const notLinkedEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('‚ùå T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c li√™n k·∫øt')
            .setDescription([
                'B·∫°n c·∫ßn li√™n k·∫øt t√†i kho·∫£n Messenger tr∆∞·ªõc khi ƒë·ªïi Nitro.',
                '',
                '**C√°ch li√™n k·∫øt:**',
                '1. T·∫°o ticket H·ªó Tr·ª£',
                '2. Nh·∫•n n√∫t Li√™n K·∫øt T√†i Kho·∫£n',
                '3. L√†m theo h∆∞·ªõng d·∫´n'
            ].join('\n'));

        const notLinkedMsg = await response.edit({ embeds: [notLinkedEmbed] });
        
        setTimeout(() => {
            notLinkedMsg.delete().catch(() => {});
        }, 30000);
        
        return;
    }

    const xuAmount = amount * EXCHANGE_RATE;
    const transactionId = `EX${Date.now()}${Math.random().toString(36).substr(2, 5)}`;

    try {
       
        updateBalance(message.author.id, -amount);

        const exchangeLog = {
            transactionId,
            timestamp: new Date().toISOString(),
            discordId: message.author.id,
            discordUsername: message.author.tag,
            messengerId: messengerID,
            nitroAmount: amount,
            xuAmount: xuAmount,
            status: STATUS.PENDING,
            createdAt: new Date().toISOString(),
            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
        };

        if (!saveExchangeLog(exchangeLog)) {
            throw new Error('Failed to save exchange log');
        }

        const publicEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setDescription(`‚úÖ ${message.author} ƒë√£ th·ª±c hi·ªán giao d·ªãch ƒë·ªïi Nitro th√†nh c√¥ng!`);

        await message.channel.send({ embeds: [publicEmbed] });

        const dmCopyButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`copy_${transactionId}`)
                    .setLabel('Sao ch√©p m√£ giao d·ªãch')
                    .setStyle(ButtonStyle.Secondary)
            );

        const dmEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('üîÑ Chi ti·∫øt giao d·ªãch c·ªßa b·∫°n')
            .setDescription([
                '**Tr·∫°ng th√°i:** ƒêang x·ª≠ l√Ω',
                '',
                '**Th√¥ng tin giao d·ªãch:**',
                `‚Ä¢ S·ªë Nitro: ${amount}`,
                `‚Ä¢ S·ªë xu: ${xuAmount}`,
                `‚Ä¢ ID Messenger: ${messengerID}`,
                '',
                '**M√£ giao d·ªãch:**',
                `\`${transactionId}\``,
                '',
                '**C√°ch nh·∫≠n xu:**',
                '1. V√†o Messenger chat v·ªõi bot',
                '2. G√µ l·ªánh: `.claim ' + transactionId + '`',
                '',
                '‚ö†Ô∏è **L∆∞u √Ω:**',
                '‚Ä¢ M√£ giao d·ªãch c√≥ hi·ªáu l·ª±c trong 24h',
                '‚Ä¢ Kh√¥ng chia s·∫ª m√£ v·ªõi ng∆∞·ªùi kh√°c'
            ].join('\n'))
            .setTimestamp();

        try {
            await message.author.send({
                embeds: [dmEmbed],
                components: [dmCopyButton]
            });
        } catch (dmError) {
            await message.channel.send({
                content: `${message.author} ‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng. Vui l√≤ng b·∫≠t DM ƒë·ªÉ nh·∫≠n m√£ giao d·ªãch.`,
                ephemeral: true
            });
        }

        await response.delete().catch(() => {});

    } catch (error) {
        console.error('Exchange error:', error);
        updateBalance(message.author.id, amount); 
        
        await response.edit({
            embeds: [
                new EmbedBuilder()
                    .setColor(0xFF0000)
                    .setDescription('‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω giao d·ªãch!')
            ]
        });
    }
}

async function checkMessengerId(id) {
    if (!/^\d{8,16}$/.test(id)) {
        return {
            valid: false,
            message: "ID Messenger ph·∫£i l√† s·ªë v√† c√≥ ƒë·ªô d√†i 8-16 k√Ω t·ª±"
        };
    }

    const currenciesPath = path.join(__dirname, '../../database/currencies.json');
    try {
        const data = JSON.parse(fs.readFileSync(currenciesPath, 'utf8'));
        if (!data.balance || !data.balance.hasOwnProperty(id)) {
            return {
                valid: false,
                message: "ID Messenger kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"
            };
        }
        return {
            valid: true,
            message: "OK"
        };
    } catch (err) {
        console.error('L·ªói ki·ªÉm tra ID:', err);
        return {
            valid: false,
            message: "L·ªói h·ªá th·ªëng khi ki·ªÉm tra ID"
        };
    }
}

async function initNitroChannel(channel) {
    try {
        const messages = await channel.messages.fetch({ limit: 100 });
        await channel.bulkDelete(messages);

        const infoEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('üîÑ H·ªá Th·ªëng ƒê·ªïi Nitro sang Xu')
            .setDescription([
                '**H∆∞·ªõng d·∫´n ƒë·ªïi Nitro:**',
                '',
                '1Ô∏è‚É£ G√µ l·ªánh `.nitro` ƒë·ªÉ b·∫Øt ƒë·∫ßu',
                '2Ô∏è‚É£ Ch·ªçn s·ªë l∆∞·ª£ng Nitro mu·ªën ƒë·ªïi b·∫±ng n√∫t b√™n d∆∞·ªõi', 
                '3Ô∏è‚É£ Bot s·∫Ω g·ª≠i m√£ qua tin nh·∫Øn ri√™ng',
                '4Ô∏è‚É£ Nh·∫≠n v√† gi·ªØ l·∫°i m√£ giao d·ªãch',
                '5Ô∏è‚É£ V√†o Messenger g√µ `.claim <m√£_giao_d·ªãch>` ƒë·ªÉ nh·∫≠n xu',
                '',
                'üìå **L∆∞u √Ω quan tr·ªçng:**',
                '‚Ä¢ T·ªâ l·ªá ƒë·ªïi: 1 Nitro = 10 Xu',
                '‚Ä¢ Giao d·ªãch ho√†n to√†n t·ª± ƒë·ªông v√† an to√†n',
                '‚Ä¢ M√£ giao d·ªãch ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c 1 l·∫ßn',
                '‚Ä¢ Bot s·∫Ω g·ª≠i m√£ giao d·ªãch qua tin nh·∫Øn ri√™ng',
                '‚Ä¢ Vui l√≤ng b·∫≠t nh·∫≠n tin nh·∫Øn t·ª´ server',
                '',
                '‚ö†Ô∏è **Ch√∫ √Ω:**',
                '‚Ä¢ Kh√¥ng chia s·∫ª m√£ giao d·ªãch cho ng∆∞·ªùi kh√°c', 
                '‚Ä¢ Giao d·ªãch kh√¥ng th·ªÉ ho√†n t√°c',
                '',
                '‚ùì C·∫ßn h·ªó tr·ª£? Tag Admin ho·∫∑c m·ªü ticket'
            ].join('\n'))
            .setTimestamp()
            .setFooter({ text: 'Bot Auto Exchange ‚Ä¢ C·∫≠p nh·∫≠t: ' + new Date().toLocaleDateString('vi-VN') });

        await channel.send({ embeds: [infoEmbed] });
        return true;
    } catch (error) {
        console.error('Error initializing Nitro channel:', error);
        return false;
    }
}

module.exports = {
    name: 'nitro',
    description: 'ƒê·ªïi Nitro sang xu Messenger',
    usage: '.nitro',
    NITRO_CHANNEL_ID: NITRO_CHANNEL_ID,
    async execute(message, args) {
        await message.delete().catch(() => {});

        if (message.channel.id !== NITRO_CHANNEL_ID) {
            const replyEmbed = new EmbedBuilder()
                .setColor(0xFF0000)
                .setDescription('‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong k√™nh ƒê·ªïi Nitro');
            
            await message.channel.send({ 
                embeds: [replyEmbed], 
                ephemeral: true 
            });
            return;
        }

        const exchangeEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('üîÑ ƒê·ªïi Nitro sang Xu')
            .setDescription('Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng Nitro mu·ªën ƒë·ªïi')
            .addFields([
                { name: 'T·ªâ l·ªá ƒë·ªïi', value: '1 Nitro = 10 Xu', inline: true },
                { name: 'S·ªë d∆∞ hi·ªán t·∫°i', value: `${getBalance(message.author.id)} Nitro`, inline: true }
            ]);

        const row1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('nitro_100')
                    .setLabel('100 Nitro')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('nitro_500')
                    .setLabel('500 Nitro')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('nitro_1000')
                    .setLabel('1000 Nitro')
                    .setStyle(ButtonStyle.Primary)
            );

        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('nitro_custom')
                    .setLabel('S·ªë kh√°c')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('nitro_cancel')
                    .setLabel('H·ªßy')
                    .setStyle(ButtonStyle.Danger)
            );

        const response = await message.channel.send({
            embeds: [exchangeEmbed],
            components: [row1, row2],
            ephemeral: true
        });

        const filter = i => i.user.id === message.author.id;
        const collector = response.createMessageComponentCollector({ 
            filter, 
            time: 60000 
        });

        collector.on('collect', async i => {
            if (i.customId === 'nitro_cancel') {
                await response.delete();
                return;
            }

            if (i.customId === 'nitro_custom') {
                await i.reply({
                    content: 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng Nitro mu·ªën ƒë·ªïi:',
                    ephemeral: true
                });

                const messageCollector = i.channel.createMessageCollector({
                    filter: m => m.author.id === message.author.id,
                    time: 30000,
                    max: 1
                });

                messageCollector.on('collect', async m => {
                    const amount = parseInt(m.content);
                    await m.delete();
                    await processExchange(message, amount, response);
                });

                return;
            }

            const amount = parseInt(i.customId.split('_')[1]);
            await processExchange(message, amount, response);
        });

        collector.on('end', async collected => {
            if (collected.size === 0) {
                await response.delete();
            }
        });
    },
    initNitroChannel,
    checkMessengerId
};
