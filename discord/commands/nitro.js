const { getBalance, updateBalance } = require('../utils/currencies');
const { EmbedBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');

const exchangeLogFile = path.join(__dirname, '../../database/exchange_logs.json');
const EXCHANGE_RATE = 100; // 1 Nitro = 100 xu

function loadExchangeLogs() {
    try {
        if (fs.existsSync(exchangeLogFile)) {
            return JSON.parse(fs.readFileSync(exchangeLogFile, 'utf8'));
        }
        return {};
    } catch (error) {
        console.error('Error loading exchange logs:', error);
        return {};
    }
}

function saveExchangeLog(log) {
    try {
        const logs = loadExchangeLogs();
        if (!logs.exchanges) logs.exchanges = [];
        logs.exchanges.push(log);
        fs.writeFileSync(exchangeLogFile, JSON.stringify(logs, null, 2));
    } catch (error) {
        console.error('Error saving exchange log:', error);
    }
}

async function checkMessengerId(id) {
    // Ki·ªÉm tra format ID
    if (!/^\d{8,16}$/.test(id)) {
        return {
            valid: false,
            message: "ID Messenger ph·∫£i l√† s·ªë v√† c√≥ ƒë·ªô d√†i 8-16 k√Ω t·ª±"
        };
    }

    // Ki·ªÉm tra ID trong database
    const currenciesPath = path.join(__dirname, '../../database/currencies.json');
    try {
        const data = JSON.parse(fs.readFileSync(currenciesPath, 'utf8'));
        if (!data.balance || !data.balance.hasOwnProperty(id)) {
            return {
                valid: false,
                message: "ID Messenger kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"
            };
        }
        return {
            valid: true,
            message: "OK"
        };
    } catch (err) {
        console.error('L·ªói ki·ªÉm tra ID:', err);
        return {
            valid: false,
            message: "L·ªói h·ªá th·ªëng khi ki·ªÉm tra ID"
        };
    }
}

module.exports = {
    name: 'nitro',
    description: 'ƒê·ªïi Nitro sang xu Messenger',
    usage: '.nitro <ID_Messenger> <s·ªë_l∆∞·ª£ng>',
    async execute(message, args) {
        if (!args.length) {
            return message.reply('‚ùå Vui l√≤ng s·ª≠ d·ª•ng ƒë√∫ng c√∫ ph√°p:\n`.nitro <ID_Messenger> <s·ªë_l∆∞·ª£ng>`\nV√≠ d·ª•: `.nitro 61573427362389 1000`');
        }

        const messengerID = args[0];
        const amount = parseInt(args[1]);

        if (!messengerID || !amount) {
            return message.reply('‚ùå Thi·∫øu th√¥ng tin! Vui l√≤ng nh·∫≠p ƒë·ªß ID Messenger v√† s·ªë l∆∞·ª£ng Nitro\n`.nitro <ID_Messenger> <s·ªë_l∆∞·ª£ng>`');
        }

        if (isNaN(amount) || amount <= 0) {
            return message.reply('‚ùå S·ªë l∆∞·ª£ng Nitro kh√¥ng h·ª£p l·ªá!');
        }

        // Ki·ªÉm tra ID Messenger
        const idCheck = await checkMessengerId(messengerID);
        if (!idCheck.valid) {
            return message.reply(`‚ùå ${idCheck.message}`);
        }

        const userBalance = getBalance(message.author.id);

        if (userBalance < amount) {
            return message.reply('‚ùå S·ªë d∆∞ Nitro kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch!');
        }

        const xuAmount = amount * EXCHANGE_RATE;
        const transactionId = `EX${Date.now()}${Math.random().toString(36).substr(2, 5)}`;

        try {
            // Update Discord balance
            updateBalance(message.author.id, -amount);

            // Create exchange log
            const exchangeLog = {
                transactionId,
                timestamp: new Date().toISOString(),
                discordId: message.author.id,
                discordUsername: message.author.tag,
                messengerId: messengerID,
                nitroAmount: amount,
                xuAmount: xuAmount,
                status: 'pending'
            };

            saveExchangeLog(exchangeLog);

            const embed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('üîÑ Y√™u c·∫ßu ƒë·ªïi ti·ªÅn')
                .setDescription('Giao d·ªãch ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω')
                .addFields([
                    { name: 'üÜî M√£ giao d·ªãch', value: transactionId, inline: false },
                    { name: 'üí∏ S·ªë l∆∞·ª£ng Nitro', value: amount.toString(), inline: true },
                    { name: 'üí∞ S·ªë xu nh·∫≠n ƒë∆∞·ª£c', value: xuAmount.toString(), inline: true },
                    { name: 'üë§ ID Messenger', value: messengerID, inline: false },
                    { name: '‚è≥ Tr·∫°ng th√°i', value: 'ƒêang x·ª≠ l√Ω', inline: false }
                ])
                .setTimestamp();

            message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Exchange error:', error);
            message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω giao d·ªãch!');
        }
    }
};
