const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { getBalance, addBalance } = require('../utils/currencies');

module.exports = {
    name: 'pay',
    description: 'Chuy·ªÉn Nitro cho ng∆∞·ªùi kh√°c',
    usage: 'pay <@ng∆∞·ªùi nh·∫≠n> <s·ªë Nitro>',
    cooldown: 10,

    execute: async function(message, args) {
        try {
            const recipient = message.mentions.users.first();
            if (!recipient) {
                return message.reply('‚ùå Vui l√≤ng tag ng∆∞·ªùi nh·∫≠n!');
            }

            if (recipient.id === message.author.id) {
                return message.reply('‚ùå B·∫°n kh√¥ng th·ªÉ chuy·ªÉn Nitro cho ch√≠nh m√¨nh!');
            }

            if (recipient.bot) {
                return message.reply('‚ùå Kh√¥ng th·ªÉ chuy·ªÉn Nitro cho bot!');
            }

            const amount = parseInt(args[1]);
            if (!amount || isNaN(amount) || amount <= 0) {
                return message.reply('‚ùå S·ªë Nitro kh√¥ng h·ª£p l·ªá!');
            }

            const senderBalance = getBalance(message.author.id);
            if (senderBalance < amount) {
                return message.reply(`‚ùå B·∫°n kh√¥ng ƒë·ªß Nitro! B·∫°n ch·ªâ c√≥ ${senderBalance.toLocaleString('vi-VN')} Nitro`);
            }

            const embed = new EmbedBuilder()
                .setColor(0x2B2D31)
                .setTitle('üí∏ X√°c nh·∫≠n chuy·ªÉn Nitro')
                .setDescription([
                    `**Ng∆∞·ªùi g·ª≠i:** ${message.author}`,
                    `**Ng∆∞·ªùi nh·∫≠n:** ${recipient}`,
                    `**S·ªë Nitro:** ${amount.toLocaleString('vi-VN')} Nitro`,
                    '',
                    '‚ö†Ô∏è B·∫•m n√∫t x√°c nh·∫≠n ƒë·ªÉ chuy·ªÉn Nitro!'
                ].join('\n'))
                .setTimestamp();

            const confirmButton = new ButtonBuilder()
                .setCustomId('confirm_transfer')
                .setLabel('X√°c nh·∫≠n')
                .setStyle(ButtonStyle.Success)
                .setEmoji('‚úÖ');

            const cancelButton = new ButtonBuilder()
                .setCustomId('cancel_transfer')
                .setLabel('H·ªßy')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('‚ùå');

            const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);

            const confirmMsg = await message.reply({
                embeds: [embed],
                components: [row]
            });

            const filter = i => i.user.id === message.author.id;
            const collector = confirmMsg.createMessageComponentCollector({ 
                filter, 
                time: 30000 
            });

            collector.on('collect', async i => {
                if (i.customId === 'confirm_transfer') {
                   
                    const currentBalance = getBalance(message.author.id);
                    if (currentBalance < amount) {
                        await i.update({
                            content: '‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch!',
                            embeds: [],
                            components: []
                        });
                        return;
                    }

                    addBalance(message.author.id, -amount);
                    addBalance(recipient.id, amount);

                    const successEmbed = new EmbedBuilder()
                        .setColor(0x57F287)
                        .setTitle('‚úÖ Chuy·ªÉn Nitro th√†nh c√¥ng!')
                        .setDescription([
                            `**Ng∆∞·ªùi g·ª≠i:** ${message.author}`,
                            `**Ng∆∞·ªùi nh·∫≠n:** ${recipient}`,
                            `**S·ªë Nitro:** ${amount.toLocaleString('vi-VN')} Nitro`,
                            '',
                            `üí∞ S·ªë d∆∞ c√≤n l·∫°i: ${(currentBalance - amount).toLocaleString('vi-VN')} Nitro`
                        ].join('\n'))
                        .setTimestamp();

                    await i.update({
                        embeds: [successEmbed],
                        components: []
                    });

                } else if (i.customId === 'cancel_transfer') {
                    await i.update({
                        content: '‚ùå ƒê√£ h·ªßy giao d·ªãch!',
                        embeds: [],
                        components: []
                    });
                }
            });

            collector.on('end', async collected => {
                if (collected.size === 0) {
                    await confirmMsg.edit({
                        content: '‚è∞ H·∫øt th·ªùi gian x√°c nh·∫≠n!',
                        embeds: [],
                        components: []
                    });
                }
            });

        } catch (error) {
            console.error('[DISCORD] Pay command error:', error);
            return message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh!');
        }
    }
};
