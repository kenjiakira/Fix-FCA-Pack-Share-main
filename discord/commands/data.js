const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { setBalance, getBalance, addBalance, getAllData } = require('../utils/currencies');

module.exports = {
    name: "data",
    description: "Qu·∫£n l√Ω d·ªØ li·ªáu ng∆∞·ªùi d√πng",
    dev: "HNT",
    usages: [
        "data view [@tag]: Xem s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng",
        "data set [@tag] [s·ªë ti·ªÅn] [l√Ω do]: ƒê·∫∑t s·ªë d∆∞ m·ªõi",
        "data add [@tag] [s·ªë ti·ªÅn] [l√Ω do]: Th√™m s·ªë ti·ªÅn",
        "data del [@tag] [s·ªë ti·ªÅn] [l√Ω do]: Tr·ª´ s·ªë ti·ªÅn",
        "data del all: X√≥a to√†n b·ªô ti·ªÅn trong h·ªá th·ªëng"
    ].join('\n'),
    cooldown: 3,
    permissions: ['Administrator'],

    execute: async function(message, args) {  
        if (!message.member.permissions.has('Administrator')) {
            return message.reply('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!');
        }

        const action = args[0];
        if (!action) {
            return message.reply("‚ùå Vui l√≤ng s·ª≠ d·ª•ng: " + this.usages);
        }

        if (action.toLowerCase() === 'del' && args[1]?.toLowerCase() === 'all') {
            const confirmEmbed = new EmbedBuilder()
                .setColor(0xFF0000)
                .setTitle('‚ö†Ô∏è X√°c nh·∫≠n x√≥a to√†n b·ªô')
                .setDescription([
                    '**C·∫£nh b√°o: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!**',
                    '',
                    'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô Nitro trong h·ªá th·ªëng?',
                    'H√†nh ƒë·ªông n√†y s·∫Ω ƒë·∫∑t s·ªë d∆∞ c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng v·ªÅ 0.'
                ].join('\n'))
                .setTimestamp();

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('confirm_reset')
                        .setLabel('X√°c nh·∫≠n x√≥a')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('‚ö†Ô∏è'),
                    new ButtonBuilder()
                        .setCustomId('cancel_reset')
                        .setLabel('H·ªßy')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚ùå')
                );

            const confirmMsg = await message.reply({
                embeds: [confirmEmbed],
                components: [row]
            });

            try {
                const collector = confirmMsg.createMessageComponentCollector({
                    filter: i => i.user.id === message.author.id,
                    time: 30000,
                    max: 1
                });

                collector.on('collect', async (interaction) => {
                    if (interaction.customId === 'confirm_reset') {
                        const allData = getAllData();
                        let totalReset = 0;
                        
                        for (const [userId, balance] of Object.entries(allData)) {
                            if (balance > 0) {
                                setBalance(userId, 0);
                                totalReset++;
                            }
                        }

                        const resultEmbed = new EmbedBuilder()
                            .setColor(0x57F287)
                            .setTitle('‚úÖ X√≥a th√†nh c√¥ng')
                            .setDescription([
                                `ƒê√£ x√≥a to√†n b·ªô Nitro c·ªßa ${totalReset} ng∆∞·ªùi d√πng`,
                                'T·∫•t c·∫£ s·ªë d∆∞ ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ 0.'
                            ].join('\n'))
                            .setTimestamp();

                        await interaction.update({
                            embeds: [resultEmbed],
                            components: []
                        });
                    } else if (interaction.customId === 'cancel_reset') {
                        const cancelEmbed = new EmbedBuilder()
                            .setColor(0x2B2D31)
                            .setTitle('‚ùå ƒê√£ h·ªßy thao t√°c')
                            .setDescription('H√†nh ƒë·ªông x√≥a to√†n b·ªô ƒë√£ ƒë∆∞·ª£c h·ªßy.')
                            .setTimestamp();

                        await interaction.update({
                            embeds: [cancelEmbed],
                            components: []
                        });
                    }
                });

                collector.on('end', async (collected, reason) => {
                    if (reason === 'time' && collected.size === 0) {
                        const timeoutEmbed = new EmbedBuilder()
                            .setColor(0xFF0000)
                            .setTitle('‚è∞ H·∫øt th·ªùi gian')
                            .setDescription('ƒê√£ h·ªßy x√≥a do kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi.')
                            .setTimestamp();

                        await confirmMsg.edit({
                            embeds: [timeoutEmbed],
                            components: []
                        });
                    }
                });

            } catch (error) {
                console.error('[DATA] Error:', error);
                await confirmMsg.edit({
                    content: '‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu!',
                    embeds: [],
                    components: []
                });
            }
            return;
        }

        const user = message.mentions.users.first();
        if (!user) {
            return message.reply("‚ùå Vui l√≤ng tag ng∆∞·ªùi d√πng!");
        }

        const currentBalance = Math.max(0, getBalance(user.id));

        switch (action.toLowerCase()) {
            case 'view': {
                return message.reply(`üí∞ S·ªë d∆∞ c·ªßa ${user.username}: ${currentBalance.toLocaleString('vi-VN')} Nitro`);
            }

            case 'set': {
                if (!args[2]) {
                    return message.reply("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn!");
                }

                const amount = parseInt(args[2]);
                if (isNaN(amount) || amount < 0) {
                    return message.reply("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
                }

                const reason = args.slice(3).join(' ') || 'Kh√¥ng c√≥ l√Ω do';
                
                setBalance(user.id, amount);
                
                return message.reply(
                    `‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë d∆∞ cho ${user.username}\n` +
                    `S·ªë d∆∞ c≈©: ${currentBalance.toLocaleString('vi-VN')} Nitro\n` +
                    `S·ªë d∆∞ m·ªõi: ${amount.toLocaleString('vi-VN')} Nitro\n` +
                    `L√Ω do: ${reason}`
                );
            }

            case 'add': {
                if (!args[2]) {
                    return message.reply("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn!");
                }

                const amount = parseInt(args[2]);
                if (isNaN(amount) || amount <= 0) {
                    return message.reply("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
                }

                const reason = args.slice(3).join(' ') || 'Kh√¥ng c√≥ l√Ω do';
                
                addBalance(user.id, amount);
                const newBalance = getBalance(user.id);
                
                return message.reply(
                    `‚úÖ ƒê√£ c·ªông ti·ªÅn cho ${user.username}\n` +
                    `S·ªë d∆∞ c≈©: ${currentBalance.toLocaleString('vi-VN')} Nitro\n` +
                    `C·ªông th√™m: +${amount.toLocaleString('vi-VN')} Nitro\n` +
                    `S·ªë d∆∞ m·ªõi: ${newBalance.toLocaleString('vi-VN')} Nitro\n` +
                    `L√Ω do: ${reason}`
                );
            }

            case 'del': {
                if (!args[2]) {
                    return message.reply("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn!");
                }

                const amount = parseInt(args[2]);
                if (isNaN(amount) || amount <= 0) {
                    return message.reply("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
                }

                const reason = args.slice(3).join(' ') || 'Kh√¥ng c√≥ l√Ω do';
                
                const deductAmount = Math.min(currentBalance, amount);
                addBalance(user.id, -deductAmount);
                const newBalance = getBalance(user.id);
                
                return message.reply(
                    `‚úÖ ƒê√£ tr·ª´ ti·ªÅn c·ªßa ${user.username}\n` +
                    `S·ªë d∆∞ c≈©: ${currentBalance.toLocaleString('vi-VN')} Nitro\n` +
                    `Tr·ª´ ƒëi: -${deductAmount.toLocaleString('vi-VN')} Nitro\n` +
                    `S·ªë d∆∞ m·ªõi: ${newBalance.toLocaleString('vi-VN')} Nitro\n` +
                    `L√Ω do: ${reason}`
                );
            }

            default:
                return message.reply("‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!\n" + this.usages);
        }
    }
};
