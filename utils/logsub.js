const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { handleNewMember } = require('../commands/groups');

async function sendWelcomeMessage(api, threadID, userName, threadName, memberNumber) {
    try {
        const configPath = path.join(__dirname, '../database/threadSettings.json');
        let settings = {};
        
        try {
            if (fs.existsSync(configPath)) {
                settings = JSON.parse(fs.readFileSync(configPath, 'utf8'));
            }
        } catch (err) {
            console.error("Error loading settings:", err);
        }

        if (settings[threadID] && !settings[threadID].notifications) {
            return;
        }

        let welcomeMessage = "üëã {userName}\nüìù Ch√†o m·ª´ng ƒë·∫øn nh√≥m: {threadName}\nüë• Th√†nh vi√™n th·ª©: {memberNumber}";
        
        if (settings[threadID] && settings[threadID].welcomeMessage) {
            welcomeMessage = settings[threadID].welcomeMessage;
        }

        welcomeMessage = welcomeMessage
            .replace(/{userName}/g, userName)
            .replace(/{threadName}/g, threadName)
            .replace(/{memberNumber}/g, memberNumber);

        await api.sendMessage(welcomeMessage, threadID);
    } catch (error) {
        console.error("Error sending welcome message:", error);
        await api.sendMessage(
            `üëã ${userName}\nüìù Ch√†o m·ª´ng ƒë·∫øn nh√≥m!`,
            threadID
        );
    }
}

async function verifyThreadAdmins(api, threadID) {
    const threadsDBPath = path.join(__dirname, '../database/threads.json');
    const threadsDB = JSON.parse(fs.readFileSync(threadsDBPath, 'utf8') || '{}');
    
    try {
        const threadInfo = await api.getThreadInfo(threadID);
        if (threadInfo && threadInfo.adminIDs && threadInfo.adminIDs.length > 0) {
      
            if (!threadsDB[threadID]) {
                threadsDB[threadID] = {
                    members: threadInfo.participantIDs || [],
                    messageCount: {},
                    lastActivity: Date.now()
                };
            }
            
            threadsDB[threadID].adminIDs = threadInfo.adminIDs;
            threadsDB[threadID].adminLastUpdate = Date.now();
            threadsDB[threadID].adminVerified = true;
            
            fs.writeFileSync(threadsDBPath, JSON.stringify(threadsDB, null, 2));
            console.log(`‚úÖ Successfully verified admins for thread ${threadID}`);
            
            return {
                success: true,
                message: `ƒê√£ x√°c th·ª±c th√†nh c√¥ng ${threadInfo.adminIDs.length} qu·∫£n tr·ªã vi√™n cho nh√≥m n√†y.`,
                adminCount: threadInfo.adminIDs.length
            };
        } else {
            if (!threadsDB[threadID]) {
                threadsDB[threadID] = {
                    members: [],
                    messageCount: {},
                    lastActivity: Date.now(),
                    adminIDs: [],
                    adminLastUpdate: Date.now(),
                    adminVerified: false
                };
            } else {
                threadsDB[threadID].adminVerified = false;
            }
            
            fs.writeFileSync(threadsDBPath, JSON.stringify(threadsDB, null, 2));
            console.log(`‚ö†Ô∏è Failed to verify admins for thread ${threadID}`);
            
        }
    } catch (error) {
        console.error(`Error verifying admins for thread ${threadID}:`, error);
        
        if (!threadsDB[threadID]) {
            threadsDB[threadID] = {
                members: [],
                messageCount: {},
                lastActivity: Date.now(),
                adminIDs: [],
                adminLastUpdate: Date.now(),
                adminVerified: false
            };
        } else {
            threadsDB[threadID].adminVerified = false;
        }
        
        fs.writeFileSync(threadsDBPath, JSON.stringify(threadsDB, null, 2));
        
        return {
            success: false,
            message: "Kh√¥ng th·ªÉ x√°c th·ª±c qu·∫£n tr·ªã vi√™n do Facebook ƒë√£ ch·∫∑n t√≠nh nƒÉng l·∫•y admin. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh .admin setadmin ƒë·ªÉ thi·∫øt l·∫≠p qu·∫£n tr·ªã vi√™n th·ªß c√¥ng.",
            adminCount: 0,
            error: error.message
        };
    }
}

async function notifyAdminGroup(api, threadID, adminConfig) {
    try {
        const ADMIN_GROUP_ID = "6589198804475799";
        
        const threadInfo = await api.getThreadInfo(threadID);
        const threadName = threadInfo?.threadName || `Nh√≥m ${threadID}`;
        const memberCount = threadInfo?.participantIDs?.length || 0;
        
        const notificationMessage = 
            `ü§ñ BOT ƒê√É THAM GIA NH√ìM M·ªöI\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `üë• T√™n nh√≥m: ${threadName}\n` +
            `üÜî Thread ID: ${threadID}\n` +
            `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Th√†nh vi√™n: ${memberCount}\n` +
            `‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}\n\n` +
            `üí° Admin c√≥ th·ªÉ v√†o nh√≥m n√†y ƒë·ªÉ ki·ªÉm tra ho·∫∑c s·ª≠ d·ª•ng l·ªánh:\n` +
            `${adminConfig.prefix}admin checkadmin ${threadID}\n` +
            `ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i admin c·ªßa nh√≥m.`;
        
        await api.sendMessage(notificationMessage, ADMIN_GROUP_ID);
        console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi nh√≥m Admin v·ªÅ vi·ªác bot tham gia nh√≥m ${threadID}`);
        return true;
    } catch (error) {
        console.error(`‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o t·ªõi nh√≥m Admin:`, error);
        return false;
    }
}

const handleLogSubscribe = async (api, event, adminConfig) => {
    try {
        if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {
            try {
                await api.changeNickname(
                    `${adminConfig.botName} ‚Ä¢ [ ${adminConfig.prefix} ]`,
                    event.threadID,
                    api.getCurrentUserID()
                );
                
                const guideMsg = "‚ö°Ô∏è K·∫øt n·ªëi th√†nh c√¥ng!\n" +
                               `üìù Prefix: ${adminConfig.prefix}\n` +
                               "üí° S·ª≠ d·ª•ng help ƒë·ªÉ xem danh s√°ch l·ªánh";

                await api.sendMessage(guideMsg, event.threadID);
                
                notifyAdminGroup(api, event.threadID, adminConfig).then(sent => {
                    if (sent) {
                        console.log(`‚úÖ ƒê√£ th√¥ng b√°o ƒë·∫øn nh√≥m admin v·ªÅ vi·ªác tham gia nh√≥m ${event.threadID}`);
                    }
                });

            } catch (error) {
                console.error("Error setting bot nickname:", error);
            }
            return;
        }

        const threadID = event.threadID;
        let threadInfo;
        
        let retries = 0;
        const maxRetries = 3;
        
        while (retries < maxRetries) {
            try {
                threadInfo = await api.getThreadInfo(threadID);
                break;
            } catch (err) {
                retries++;
                if (retries === maxRetries) {
                    console.error("Failed to get thread info after", maxRetries, "attempts");
                    threadInfo = { participantIDs: [] };
                } else {
                    await new Promise(resolve => setTimeout(resolve, 1000 * retries));
                }
            }
        }

        const threadName = threadInfo?.threadName || `Nh√≥m ${threadID}`;
        const participantIDs = threadInfo?.participantIDs || [];
        const addedParticipants = event.logMessageData.addedParticipants;

        for (let newParticipant of addedParticipants) {
            const userID = newParticipant.userFbId;
            if (userID === api.getCurrentUserID()) continue;

            const userName = newParticipant.fullName || `Th√†nh vi√™n m·ªõi`;
            const memberNumber = participantIDs.length;

            await sendWelcomeMessage(api, threadID, userName, threadName, memberNumber);

            try {
                await handleNewMember(api, {
                    threadID: threadID,
                    participantIDs: [userID]
                });
            } catch (error) {
                console.error("Error handling new member:", error);
            }
        }
    } catch (error) {
        console.error("Error in handleLogSubscribe:", error);
    }
};

module.exports = { handleLogSubscribe, verifyThreadAdmins };
