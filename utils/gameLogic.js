const { randomInt } = require('crypto');
const { loadQuy } = require('./currencies');

class GameLogic {
    constructor() {
        this.playerStats = {};
        this.recentGames = {};
        this.streaks = {};
        this.houseStats = {
            totalGames: 0,
            totalWin: 0,
            totalLoss: 0
        };
        this.ICONS = {WHITE: "‚ö™", RED: "üî¥"};
        this.PATTERNS = {
            "ch·∫µn": [
                // Pattern th∆∞·ªùng (70%)
                ...[...Array(7)].map(() => [this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.RED, this.ICONS.RED]),
                // Pattern ƒë·∫∑c bi·ªát (30%)  
                ...[...Array(3)].map(() => [this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE])
            ],
            "l·∫ª": [
                // Pattern th∆∞·ªùng (80%)
                ...[...Array(8)].map(() => [this.ICONS.WHITE, this.ICONS.RED, this.ICONS.RED, this.ICONS.RED]),
                // Pattern th∆∞·ªùng 2 (15%)
                ...[...Array(2)].map(() => [this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.RED]),
                // Pattern ƒë·∫∑c bi·ªát (5%)
                [this.ICONS.RED, this.ICONS.RED, this.ICONS.RED, this.ICONS.RED]
            ]
        };
        this.MAX_PROFIT_CAP = 300000000; // 300tr xu limit
        this.DAILY_PROFIT_CAP = 50000000;
        this.activeUsers = new Set();
        this.timeBasedStats = {};
        this.riskFactors = new Map();
        this.lastResults = new Map();
        this.BAUCUA_WIN_LIMIT = 200000000; // 200tr limit cho b·∫ßu cua
        this.BAUCUA_DAILY_LIMIT = 30000000; // 30tr limit m·ªói ng√†y
        this.luckyNumbers = [3, 7, 9];
        this.specialDates = ['Saturday', 'Sunday'];
        this.bonusHours = [12, 20, 22];
    }

    calculateWinChance(userId, options = {}) {
        const {
            isAllIn = false,
            balance = 0,
            betAmount = 0,
            gameType = 'default'
        } = options;

        if (!this.playerStats[userId]) {
            this.playerStats[userId] = {
                totalGames: 0,
                wins: 0,
                totalBet: 0,
                totalWin: 0,
                consecutiveLosses: 0,
                firstPlayTime: Date.now()
            };
        }

        const stats = this.playerStats[userId];
        let baseWinChance = 0.45; // Gi·∫£m t·ª∑ l·ªá th·∫Øng c∆° b·∫£n xu·ªëng

        // Ki·ªÉm tra s·ªë d∆∞ qu·ªπ
        const quy = loadQuy();
        if (quy < 1000000) { // N·∫øu qu·ªπ th·∫•p, gi·∫£m t·ª∑ l·ªá th·∫Øng
            baseWinChance *= 0.8;
        }

        // ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá d·ª±a tr√™n l·ªãch s·ª≠ th·∫Øng thua
        if (stats.totalGames > 20) {
            const profitRate = stats.totalWin / stats.totalBet;
            if (profitRate > 1.2) baseWinChance *= 0.7; // Gi·∫£m m·∫°nh n·∫øu ng∆∞·ªùi ch∆°i l·ªùi nhi·ªÅu
            if (profitRate > 1.5) baseWinChance *= 0.6;
        }

        // Gi·∫£m t·ª∑ l·ªá th·∫Øng n·∫øu bet l·ªõn
        if (betAmount > 100000) baseWinChance *= 0.9;
        if (betAmount > 500000) baseWinChance *= 0.8;

        // Ki·ªÉm tra gi·ªõi h·∫°n th·∫Øng
        if (stats.totalWin >= this.MAX_PROFIT_CAP) {
            baseWinChance *= 0.1; // Gi·∫£m m·∫°nh t·ª∑ l·ªá th·∫Øng
            this.activeUsers.add(userId);
        } else if (stats.totalWin >= this.MAX_PROFIT_CAP * 0.8) {
            baseWinChance *= 0.3; // Gi·∫£m v·ª´a ph·∫£i khi g·∫ßn ƒë·∫°t gi·ªõi h·∫°n
        }

        // Th√™m logic ki·ªÉm so√°t ng∆∞·ªùi ch∆°i ƒë√°ng ng·ªù
        if (this.activeUsers.has(userId)) {
            if (stats.totalGames > 50 && stats.totalWin/stats.totalBet > 1.5) {
                baseWinChance *= 0.2;
            }
            if (betAmount > 50000) baseWinChance *= 0.5;
        }

        // Ki·ªÉm so√°t theo th·ªùi gian
        const hourOfDay = new Date().getHours();
        if (hourOfDay >= 1 && hourOfDay <= 5) {
            baseWinChance *= 0.7; // Gi·∫£m t·ª∑ l·ªá th·∫Øng v√†o ƒë√™m khuya
        }

        // ƒêi·ªÅu ch·ªânh theo lo·∫°i game
        switch(gameType) {
            case 'taixiu':
                baseWinChance *= 1.0;
                break;
            case 'chanle':
                // Th√™m logic ƒë·∫∑c bi·ªát cho ch·∫µn l·∫ª
                if (this.calculateGameOdds(userId, betAmount)) {
                    baseWinChance *= 0.5;
                }
                // Gi·∫£m t·ª∑ l·ªá ra pattern ƒë·∫∑c bi·ªát
                if (stats.totalWin > stats.totalBet) {
                    baseWinChance *= 0.85;
                }
                if (stats.consecutiveLosses >= 4) {
                    baseWinChance *= 1.15;
                }
                break;
            case 'baucua':
                baseWinChance *= 0.90;
                // Th√™m ƒëi·ªÅu ki·ªán ƒë·∫∑c bi·ªát cho b·∫ßu cua
                if (isAllIn) baseWinChance *= 0.4;
                
                // Ki·ªÉm tra gi·ªõi h·∫°n th·∫Øng b·∫ßu cua
                if (stats.totalWin >= this.BAUCUA_WIN_LIMIT) {
                    baseWinChance *= 0.1;
                }

                // Ki·ªÉm so√°t theo th·ªùi gian ch∆°i
                const dailyStats = this.getDailyStats(userId);
                if (dailyStats.winAmount > this.BAUCUA_DAILY_LIMIT) {
                    baseWinChance *= 0.2;
                }

                // Gi·∫£m t·ª∑ l·ªá th·∫Øng theo bet amount
                if (betAmount > 100000) baseWinChance *= 0.8;
                if (betAmount > 500000) baseWinChance *= 0.6;
                if (betAmount > 1000000) baseWinChance *= 0.4;

                return Math.min(Math.max(baseWinChance, 0.1), 0.4);
            case 'coinflip':
                baseWinChance *= 0.98;
                break;
        }

        // Th√™m ki·ªÉm so√°t theo th·ªùi gian trong ng√†y
        const dailyStats = this.getDailyStats(userId);
        if (dailyStats.winAmount > this.DAILY_PROFIT_CAP) {
            baseWinChance *= 0.2;
        }

        // Ph√¢n t√≠ch pattern ng∆∞·ªùi ch∆°i
        const pattern = this.analyzePlayerPattern(userId);
        if (pattern.isExploiting) {
            baseWinChance *= 0.3;
        }

        // Ki·ªÉm so√°t theo chu k·ª≥
        const cycleControl = this.getCycleControl(userId);
        baseWinChance *= cycleControl;

        // Dynamic risk adjustment
        const riskFactor = this.calculateRiskFactor(userId, betAmount);
        baseWinChance *= riskFactor;

        // Th√™m y·∫øu t·ªë ng·∫´u nhi√™n ƒë·ªÉ che ƒë·∫≠y vi·ªác ƒëi·ªÅu khi·ªÉn t·ª∑ l·ªá
        const randomLuck = Math.random() * 0.1;
        const hourBonus = this.bonusHours.includes(new Date().getHours()) ? 0.05 : 0;
        const specialDateBonus = this.specialDates.includes(new Date().toLocaleDateString('en-US', {weekday: 'long'})) ? 0.03 : 0;

        // Tr·ªôn c√°c y·∫øu t·ªë v√†o ƒë·ªÉ che ƒë·∫≠y logic th·∫≠t
        baseWinChance += randomLuck + hourBonus + specialDateBonus;

        return Math.min(Math.max(baseWinChance, 0.15), 0.45);
    }

    calculateGameOdds(userId, betAmount) {
        const stats = this.playerStats[userId];
        if (!stats) return false;

        // Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán ƒë·ªÉ can thi·ªáp
        const isHighRoller = betAmount > 200000;
        const hasHighProfit = stats.totalWin > stats.totalBet * 1.3;
        const hasWinStreak = this.streaks[userId] > 3;
        
        // TƒÉng x√°c su·∫•t can thi·ªáp n·∫øu ng∆∞·ªùi ch∆°i:
        // 1. ƒêang th·∫Øng nhi·ªÅu
        // 2. ƒêang c√≥ chu·ªói th·∫Øng
        // 3. ƒê·∫∑t c∆∞·ª£c l·ªõn
        const isNearLimit = stats.totalWin >= this.MAX_PROFIT_CAP * 0.7;
        const hasHighWinRate = stats.totalGames > 30 && (stats.wins/stats.totalGames) > 0.45;
        const isSuspicious = this.activeUsers.has(userId);
        
        return isNearLimit || 
               (hasHighWinRate && Math.random() < 0.85) ||
               (isSuspicious && Math.random() < 0.9) ||
               (betAmount > 100000 && Math.random() < 0.75);
    }

    calculateBaucuaOdds(userId, betAmount) {
        const stats = this.playerStats[userId] || {};
        const pattern = this.analyzePlayerPattern(userId);
        
        let baseOdds = 0.4; // 40% base chance
        
        // Gi·∫£m t·ª∑ l·ªá n·∫øu ng∆∞·ªùi ch∆°i ƒëang th·∫Øng nhi·ªÅu
        if (stats.totalWin > stats.totalBet * 1.5) baseOdds *= 0.7;
        
        // Gi·∫£m m·∫°nh v·ªõi c∆∞·ª£c l·ªõn
        if (betAmount > 100000) baseOdds *= 0.8;
        if (betAmount > 500000) baseOdds *= 0.6;
        
        // Ki·ªÉm tra pattern ƒë√°ng ng·ªù
        if (pattern.isExploiting) baseOdds *= 0.5;
        
        // Random factor to make it less predictable
        const variance = Math.random() * 0.2 - 0.1; // -10% to +10%
        
        return Math.max(0.1, Math.min(0.5, baseOdds + variance));
    }

    calculateReward(betAmount, multiplier = 1, special = false) {
        const rawReward = betAmount * multiplier;
        let feeRate = 0.02; // Ph√≠ c∆° b·∫£n 1%
        
        if (betAmount >= 1000000) feeRate = 0.04; // 2% cho c∆∞·ª£c t·ª´ 1M
        if (betAmount >= 10000000) feeRate = 0.06; // 3% cho c∆∞·ª£c t·ª´ 10M
    
        const fee = Math.ceil(rawReward * feeRate);
        const finalReward = rawReward - fee;
    
        return {
            rawReward,
            fee,
            finalReward
        };
    }

    calculateFeeRate(winAmount) {
        // TƒÉng ph√≠ theo m·ª©c th·∫Øng
        if (winAmount > 1000000) return 0.18;
        if (winAmount > 500000) return 0.15;
        if (winAmount > 200000) return 0.12;
        if (winAmount > 100000) return 0.08;
        return 0.05;
    }

    updatePlayerStats(userId, gameResult) {
        const {
            won = false,
            betAmount = 0,
            winAmount = 0,
            gameType = 'default'
        } = gameResult;

        if (!this.playerStats[userId]) {
            this.playerStats[userId] = {
                totalGames: 0,
                wins: 0,
                totalBet: 0,
                totalWin: 0,
                consecutiveLosses: 0
            };
        }

        if (!this.recentGames[userId]) {
            this.recentGames[userId] = [];
        }

        const stats = this.playerStats[userId];
        stats.totalGames++;
        stats.totalBet += betAmount;

        if (won) {
            stats.wins++;
            stats.totalWin += winAmount;
            stats.consecutiveLosses = 0;
            this.streaks[userId] = (this.streaks[userId] || 0) + 1;
        } else {
            stats.consecutiveLosses++;
            this.streaks[userId] = 0;
        }

        this.recentGames[userId].unshift({
            won,
            betAmount,
            winAmount,
            gameType,
            timestamp: Date.now()
        });

        if (this.recentGames[userId].length > 20) {
            this.recentGames[userId].pop();
        }

        // C·∫≠p nh·∫≠t th·ªëng k√™ theo ng√†y
        const dailyStats = this.getDailyStats(userId);
        dailyStats.gamesPlayed++;
        if (gameResult.won) {
            dailyStats.winAmount += gameResult.winAmount;
        } else {
            dailyStats.lossAmount += gameResult.betAmount;
        }

        // L∆∞u k·∫øt qu·∫£ g·∫ßn ƒë√¢y ƒë·ªÉ ph√¢n t√≠ch pattern
        const results = this.lastResults.get(userId) || [];
        results.unshift(gameResult);
        if (results.length > 20) results.pop();
        this.lastResults.set(userId, results);

        return {
            currentStreak: this.streaks[userId],
            stats: stats,
            recentGames: this.recentGames[userId]
        };
    }

    shouldTriggerJackpot(userId) {
        const quy = loadQuy();
        if (quy < 100000) return false;

        const randomChance = Math.random();
        const baseJackpotChance = 0.001; 

        let jackpotChance = baseJackpotChance;
        if (quy > 1000000) jackpotChance *= 1.5;
        if (quy > 5000000) jackpotChance *= 2;

        if (this.playerStats[userId]?.recentBigWins > 0) {
            jackpotChance *= 0.5;
        }

        return randomChance < jackpotChance;
    }

    generateChanLeResult(userId, playerChoice, options = {}) {
        const winChance = this.calculateWinChance(userId, {
            ...options,
            gameType: 'chanle'
        });

        const shouldWin = Math.random() < winChance;
        const result = shouldWin ? playerChoice : (playerChoice === "ch·∫µn" ? "l·∫ª" : "ch·∫µn");

        const patternPool = this.PATTERNS[result];
        let pattern = patternPool[randomInt(0, patternPool.length)];

        const isSpecial = JSON.stringify(pattern) === JSON.stringify([this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE]) || 
                         JSON.stringify(pattern) === JSON.stringify([this.ICONS.RED, this.ICONS.RED, this.ICONS.RED, this.ICONS.RED]);

        if (isSpecial && shouldWin) {
            const stats = this.playerStats[userId] || {};
            const allowX4 = this.shouldAllowX4(userId, stats);

            if (!allowX4) {
           
                const normalPatterns = patternPool.filter(p => 
                    JSON.stringify(p) !== JSON.stringify([this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE, this.ICONS.WHITE]) &&
                    JSON.stringify(p) !== JSON.stringify([this.ICONS.RED, this.ICONS.RED, this.ICONS.RED, this.ICONS.RED])
                );
                pattern = normalPatterns[randomInt(0, normalPatterns.length)];
                return { pattern, result, isSpecial: false };
            }
        }

        return { pattern, result, isSpecial };
    }

    shouldAllowX4(userId, stats = {}) {
        const recentLosses = stats.consecutiveLosses || 0;
        const totalGames = stats.totalGames || 0;
        const quy = loadQuy();

        // ƒêi·ªÅu ki·ªán cho ph√©p x4:
        if (recentLosses >= 3) return true; // Thua nhi·ªÅu
        if (totalGames >= 20 && (stats.wins/totalGames) < 0.4) return true; // T·ª∑ l·ªá th·∫Øng th·∫•p
        if (quy > 1000000) return Math.random() < 0.08; // Qu·ªπ l·ªõn tƒÉng t·ª∑ l·ªá
        if (this.calculateGameOdds(userId, stats.betAmount)) return false; // Kh√¥ng cho x4 n·∫øu ƒëang ki·ªÉm so√°t
        return Math.random() < 0.05; // C∆° h·ªôi c∆° b·∫£n 5%
    }

    getDailyStats(userId) {
        const today = new Date().toDateString();
        if (!this.timeBasedStats[today]) {
            this.timeBasedStats[today] = {};
        }
        if (!this.timeBasedStats[today][userId]) {
            this.timeBasedStats[today][userId] = {
                winAmount: 0,
                lossAmount: 0,
                gamesPlayed: 0
            };
        }
        return this.timeBasedStats[today][userId];
    }

    analyzePlayerPattern(userId) {
        const recentGames = this.recentGames[userId] || [];
        const last10Games = recentGames.slice(0, 10);
        
        const patternData = {
            isExploiting: false,
            suspiciousPatterns: 0,
            consistentBets: 0
        };

        // Ki·ªÉm tra m·∫´u ƒë·∫∑t c∆∞·ª£c
        let consistentWins = 0;
        let lastBetAmount = 0;

        for (let i = 0; i < last10Games.length; i++) {
            const game = last10Games[i];
            if (game.won) consistentWins++;
            
            if (game.betAmount === lastBetAmount) {
                patternData.consistentBets++;
            }
            lastBetAmount = game.betAmount;
        }

        if (consistentWins >= 7) patternData.suspiciousPatterns++;
        if (patternData.consistentBets >= 8) patternData.suspiciousPatterns++;
        
        patternData.isExploiting = patternData.suspiciousPatterns >= 2;
        return patternData;
    }

    calculateRiskFactor(userId, betAmount) {
        let risk = 1.0;
        const stats = this.playerStats[userId];

        // T√≠nh to√°n ƒë·ªô r·ªßi ro d·ª±a tr√™n l·ªãch s·ª≠
        if (stats) {
            const profitRatio = stats.totalWin / (stats.totalBet || 1);
            if (profitRatio > 1.2) risk *= 0.8;
            if (profitRatio > 1.5) risk *= 0.6;
        }

        // L∆∞u tr·ªØ v√† c·∫≠p nh·∫≠t risk factor
        const currentRisk = this.riskFactors.get(userId) || 1.0;
        const newRisk = (currentRisk * 0.7 + risk * 0.3);
        this.riskFactors.set(userId, newRisk);

        return newRisk;
    }

    getCycleControl(userId) {
        const hourOfDay = new Date().getHours();
        const dayOfWeek = new Date().getDay();
        
        let cycleFactor = 1.0;

        // Ki·ªÉm so√°t theo gi·ªù
        if (hourOfDay >= 1 && hourOfDay <= 5) cycleFactor *= 0.7;
        if (hourOfDay >= 22 || hourOfDay <= 2) cycleFactor *= 0.85;

        // Ki·ªÉm so√°t theo ng√†y
        if (dayOfWeek === 0 || dayOfWeek === 6) cycleFactor *= 0.9;

        // Th√™m y·∫øu t·ªë ng·∫´u nhi√™n c√≥ ki·ªÉm so√°t
        const randomFactor = 0.85 + (Math.random() * 0.3);
        cycleFactor *= randomFactor;

        return cycleFactor;
    }
}

module.exports = new GameLogic();
