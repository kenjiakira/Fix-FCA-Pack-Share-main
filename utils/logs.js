const fs = require('fs');
const adminConfigPath = "./admin.json";
const usersPath = "./database/users.json";
const threadsPath = "./database/threads.json";
const chalk = require('chalk');
const gradient = require('gradient-string');
const moment = require("moment-timezone");

let io = null;

const initializeSocket = (socketIO) => {
    io = socketIO;
};

const time = moment.tz("Asia/Ho_Chi_Minh").format("LLLL");
let adminConfig = { adminUIDs: [], notilogs: true };
let usersData = {};
let threadsData = {};

const gradientText = (text) => gradient('cyan', 'pink')(text);
const boldText = (text) => chalk.bold(text);

try {
    adminConfig = JSON.parse(fs.readFileSync(adminConfigPath, "utf8"));
    usersData = JSON.parse(fs.readFileSync(usersPath, "utf8"));
    threadsData = JSON.parse(fs.readFileSync(threadsPath, "utf8"));
} catch (err) {
    console.error(err);
}

const notifyAdmins = async (api, threadID, action, senderID) => {
    if (adminConfig.notilogs) {  
        const threadInfo = await api.getThreadInfo(threadID);
        const groupName = threadInfo.threadName || "Group Chat";
        const actionUser = senderID === api.getCurrentUserID() 
            ? adminConfig.botName 
            : threadInfo.participants?.find(p => p.userFbId === senderID)?.fullName || "Th√†nh vi√™n";

        const notificationMessage = [
            `üîî ùóßùóµùóºÃÇùóªùó¥ ùóØùóÆÃÅùóº ùóóùòÇÃõÃÉ ùóüùó∂ùó≤Ã£ÃÇùòÇ ùóïùóºùòÅ`,
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`,
            `üìù Bot ƒë√£ ${action} kh·ªèi nh√≥m ${groupName}`,
            `üÜî ID nh√≥m: ${threadID}`,
            `üë• S·ªë th√†nh vi√™n: ${threadInfo.participantIDs.length}`,
            `üë§ Th·ª±c hi·ªán b·ªüi: ${actionUser}`,
            `ü™™ ID ng∆∞·ªùi th·ª±c hi·ªán: ${senderID}`,
            `üïú Th·ªùi gian: ${time}`,
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
        ].join('\n');

        if (io) {
            io.emit('botLog', {
                output: notificationMessage,
                type: 'notification',
                color: '#ff416c'
            });
        }

        if (Array.isArray(adminConfig.adminUIDs) && adminConfig.adminUIDs.length > 0) {
            for (const adminID of adminConfig.adminUIDs) {
                
            }
        } else {
            console.error("ID qu·∫£n tr·ªã vi√™n kh√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh ho·∫∑c kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng.");
        }
    } else {
        console.log(`${boldText(gradientText(`TH√îNG B√ÅO C·ª¶A QU·∫¢N TR·ªä VI√äN: NH·∫¨T K√ù TH√îNG B√ÅO B·ªä T·∫ÆT`))}`);
    }
};

const logChatRecord = async (api, event) => {
    const threadID = event.threadID;
    const senderID = event.senderID;
    const threadInfo = await api.getThreadInfo(threadID);
    const userName = event.senderID === api.getCurrentUserID() 
        ? adminConfig.botName 
        : event.author || "Th√†nh vi√™n";
    const groupName = threadInfo.threadName || "Group Chat";
    const logHeader = gradientText("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[ CHU·ªñI CSDL NH·∫¨T K√ù BOT ]‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");

    if (event.body) {
        const logMessage = [
            logHeader,
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
            `‚î£‚û§ üåê Nh√≥m: ${groupName}`,
            `‚î£‚û§ üÜî ID nh√≥m: ${threadID}`,
            `‚î£‚û§ üë§ Ng∆∞·ªùi g·ª≠i: ${userName}`,
            `‚î£‚û§ ü™™ ID Ng∆∞·ªùi d√πng: ${senderID}`,
            `‚î£‚û§ üë• S·ªë th√†nh vi√™n: ${threadInfo.participantIDs.length}`,
            `‚î£‚û§ ‚úâÔ∏è N·ªôi dung: ${event.body}`,
            `‚î£‚û§ üìù ƒê·ªô d√†i tin nh·∫Øn: ${event.body.length} k√Ω t·ª±`,
            `‚î£‚û§ ‚è∞ V√†o l√∫c: ${time}`,
            `‚î£‚û§ üìä Lo·∫°i tin nh·∫Øn: ${event.type}`,
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        ].join('\n');

        console.log(logMessage);
        
        if (io) {
            io.emit('botLog', { 
                output: logMessage,
                type: 'chat',
                color: '#00f2fe'
            });
        }
    } else if (event.attachments || event.stickers) {
        const attachmentType = event.attachments ? event.attachments[0]?.type : 'sticker';
        const logMessage = [
            logHeader,
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì",
            `‚î£‚û§ üåê Nh√≥m: ${groupName}`,
            `‚î£‚û§ üÜî ID nh√≥m: ${threadID}`,
            `‚î£‚û§ üë§ Ng∆∞·ªùi g·ª≠i: ${userName}`,
            `‚î£‚û§ ü™™ ID Ng∆∞·ªùi d√πng: ${senderID}`,
            `‚î£‚û§ üë• S·ªë th√†nh vi√™n: ${threadInfo.participantIDs.length}`,
            `‚î£‚û§ üìé Lo·∫°i t·ªáp: ${attachmentType}`,
            `‚î£‚û§ üñºÔ∏è N·ªôi dung: ${userName} ƒë√£ g·ª≠i ${event.attachments ? event.attachments.length : 1} t·ªáp ƒë√≠nh k√®m`,
            `‚î£‚û§ ‚è∞ V√†o l√∫c: ${time}`,
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        ].join('\n');

        console.log(logMessage);
        
        if (io) {
            io.emit('commandOutput', { 
                output: logMessage,
                color: '#00f2fe'
            });
        }
    }
};

const handleBotAddition = async (api, threadID, senderID) => {
    const threadInfo = await api.getThreadInfo(threadID);
    const userName = senderID === api.getCurrentUserID() 
        ? adminConfig.botName 
        : threadInfo.participants?.find(p => p.userFbId === senderID)?.fullName || "Th√†nh vi√™n";
    const groupName = threadInfo.threadName || "Group Chat";
    
    const logMessage = [
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[ BOT ƒê∆Ø·ª¢C TH√äM V√ÄO NH√ìM ]‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`,
        `üë• T√™n nh√≥m: ${groupName}`,
        `üÜî ThreadID: ${threadID}`,
        `üë§ Th√™m b·ªüi: ${userName}`,
        `ü™™ ID ng∆∞·ªùi th√™m: ${senderID}`,
        `üë• S·ªë th√†nh vi√™n: ${threadInfo.participantIDs.length}`,
        `‚è∞ Th·ªùi gian: ${time}`,
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`
    ].join('\n');
    
    console.log(logMessage);
};

const handleBotRemoval = async (api, threadID, senderID) => {
    const threadInfo = await api.getThreadInfo(threadID);
    const userName = senderID === api.getCurrentUserID() 
        ? adminConfig.botName 
        : threadInfo.participants?.find(p => p.userFbId === senderID)?.fullName || "Th√†nh vi√™n";
    const groupName = threadInfo.threadName || "Group Chat";
    console.log(`Bot ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m.\nt√™n nh√≥m: ${groupName}\nThreadID: ${threadID}\nb·ªã x√≥a b·ªüi: ${userName}`);
    await removeFromDatabase(threadID, senderID);
};

const removeFromDatabase = (threadID, senderID) => {
    let removed = false;
    if (usersData[senderID]) {
        delete usersData[senderID];
        fs.writeFileSync(usersPath, JSON.stringify(usersData, null, 2));
        console.log(`[DATABASE] x√≥a senderID: ${senderID}`);
        removed = true;
    }
    if (threadsData[threadID]) {
        delete threadsData[threadID];
        fs.writeFileSync(threadsPath, JSON.stringify(threadsData, null, 2));
        console.log(`[DATABASE] x√≥a threadID: ${threadID}`);
        removed = true;
    }
    return removed;
};

module.exports = { 
    logChatRecord, 
    notifyAdmins, 
    handleBotAddition, 
    handleBotRemoval,
    initializeSocket  
};
