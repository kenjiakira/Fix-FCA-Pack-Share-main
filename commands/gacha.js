const genshin = require("genshin");
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const { getBalance, updateBalance } = require("../utils/currencies");
const {
  createPullResultImage,
  createStoneResultImage,
  createInventoryImage,
  createExpItemResultImage,
  createPvPBattleImage,
  createStellaResultImage,
} = require("../game/canvas/gachaCanvas");
const MAX_BACKUPS = 14;
const { getVIPBenefits } = require("../game/vip/vipCheck");
const { getUserName } = require('../utils/userUtils');

const GACHA_DATA_FILE = path.join(__dirname, "./json/gacha/gacha.json");
const PULL_COST = 1000;
const PULL_COOLDOWN = 45;

const PVP_RANKS = [
  { name: "T√¢n binh", threshold: 0, icon: "üî∞", rewards: 500 },
  { name: "Chi·∫øn sƒ©", threshold: 10, icon: "ü•â", rewards: 1000 },
  { name: "Hi·ªáp sƒ©", threshold: 25, icon: "ü•à", rewards: 2000 },
  { name: "ƒê·∫°i √∫y", threshold: 50, icon: "ü•á", rewards: 3000 },
  { name: "Ch·ªâ huy", threshold: 75, icon: "üèÖ", rewards: 5000 },
  { name: "Chi·∫øn t∆∞·ªõng", threshold: 100, icon: "üëë", rewards: 10000 },
  { name: "Huy·ªÅn tho·∫°i", threshold: 150, icon: "üåü", rewards: 20000 }
];
const PVP_SEASONS = {
  current: {
    id: 1,
    name: "Season 1: Phong Kh·ªüi",
    startDate: new Date("2025-01-01").getTime(),
    endDate: new Date("2025-04-01").getTime(),
    rewards: {
      "Huy·ªÅn tho·∫°i": { gold: 500000, items: ["UNIVERSAL_STELLA"] },
      "Chi·∫øn t∆∞·ªõng": { gold: 300000, items: ["STONE_UNIVERSAL"] },
      "Ch·ªâ huy": { gold: 200000, items: ["STONE_PYRO"] },
      "ƒê·∫°i √∫y": { gold: 100000, items: ["EXP_LEGENDARY_GRIMOIRE"] },
      "Hi·ªáp sƒ©": { gold: 50000, items: ["EXP_HEROS_WIT"] },
      "Chi·∫øn sƒ©": { gold: 20000, items: [] },
      "T√¢n binh": { gold: 5000, items: [] }
    }
  },
  next: {
    id: 2,
    name: "Season 2: L√¥i V≈©",
    startDate: new Date("2025-04-01").getTime(),
    endDate: new Date("2025-07-01").getTime()
  },
  history: []
};
const ADMIN_IDS = ['61573427362389'];

let gachaData = {};

const activePvpChallenges = new Map();
const PVP_CHALLENGE_DURATION = 300000;
const PVP_COOLDOWN = 60000;
const PVP_REWARD_WIN = 2000;
const PVP_REWARD_LOSE = 500;

const CHARACTERS_DB_FILE = path.join(
  __dirname,
  "./json/gacha/characters_db.json"
);
const STELLA_PITY_THRESHOLD = 3;
const STELLA_PITY_BOOST_PER_FAIL = 20;

const ELEMENT_ADVANTAGES = {
  Pyro: ["Cryo", "Dendro"],
  Hydro: ["Pyro", "Geo"],
  Electro: ["Hydro", "Anemo"],
  Cryo: ["Hydro", "Electro"],
  Dendro: ["Hydro", "Geo"],
  Geo: ["Electro", "Anemo"],
  Anemo: ["Cryo", "Dendro"],
};
const CUSTOM_CHARACTER_IMAGES = {
  "Raiden Shogun": "https://imgur.com/2l5q6Ib.png",
  Noelle: "https://imgur.com/HvhzDne.png",
  Xinyan: "https://imgur.com/KBX3syb.png",
  Barbara: "https://imgur.com/4C9Dsl0.png",
  DanHeng: "https://imgur.com/qJT9kPZ.png",
  Rosaria: "https://imgur.com/OEt1mvT.png",
  Thoma: "https://imgur.com/wGUtE3a.png",
  Faruzan: "https://imgur.com/5rbs7lf.png",
  Tingyun: "https://imgur.com/xMCkonE.png",
  Gorou: "https://imgur.com/8WFB75F.png",
  Mika: "https://imgur.com/rkihX4u.png",
  Argenti: "https://i.imgur.com/Exej55c.png",
  Jingliu: "https://imgur.com/Ueo3nnj.png",
  Lisa: "https://imgur.com/WyX41nu.png",
  "Kuki Shinobu": "https://imgur.com/QB2OkkW.png",
  Freminet: "https://imgur.com/fh2TcW7.png",
  Tighnari: "https://imgur.com/xVR5BRG.png",
  fugue: "https://imgur.com/HVQOHiJ.png",
  Hutao: "https://imgur.com/9tuCA1v.png",
  Yelan: "https://imgur.com/oiNOdqD.png",
  Furina: "https://imgur.com/Ovo2GXz.png",
  "Yae Miko": "https://imgur.com/dWz5xym.png",
  Luka: "https://imgur.com/A2P2B6c.png",
  Misa: "https://imgur.com/zoZqhpy.png",
  Herta: "https://imgur.com/Y6mUcqt.png",
  RuanMei: "https://imgur.com/iyEIawc.png",
  Nahida: "https://imgur.com/uvEyzJy.png",
  Bennett: "https://imgur.com/D8uVCcI.png",
  yanfei: "https://imgur.com/3UE1s1o.png",
  sayu: "https://imgur.com/sThH2Zu.png",
  dori: "https://imgur.com/JEmUtJP.png",
  aglaea: "https://imgur.com/4dHDuOy.png",
  candace: "https://imgur.com/xEzeWbs.png",
  layla: "https://imgur.com/bG3ksud.png",
  collei: "https://imgur.com/m7TsSPK.png",
  Diona: "https://imgur.com/iPKtes1.png",
  dehya: "https://imgur.com/7tTNdEd.png",
  Ganyu: "https://imgur.com/UNUpMCd.png",
  kaveh: "https://imgur.com/9rragrx.png",
  Eula: "https://imgur.com/MUErJTP.png",
  Shenhe: "https://imgur.com/Hxr7cpc.png",
  Mona: "https://imgur.com/MDdsSaV.png",
  Cyno: "https://imgur.com/mLPFGAL.png",
  albedo: "https://imgur.com/wuLApI0.png",
  "Kamisato Ayato": "https://imgur.com/1XwiqGK.png",
  Baizhu: "https://imgur.com/X7HueP1.png",
  Wanderer: "https://imgur.com/jHyK6Zb.png",
  Arlecchino: "https://imgur.com/vSlnUml.png",
  charlotte: "https://imgur.com/Y3VcZCq.png",
  Lynette: "https://imgur.com/3aiZ7ch.png",
  Yaoyao: "https://imgur.com/EF0dP8U.png",
  Xianyun: "https://imgur.com/OCvTmvN.png",
  Heizou: "https://imgur.com/CZ47DQG.png",
  Chiori: "https://imgur.com/8xQBZkl.png",
  FuXuan: "https://imgur.com/gjun3sf.png",
  kaveh: "https://imgur.com/SLGq7RV.png",
  Sigewinne: "https://imgur.com/6pgv5wb.png",
  Xiao: "https://imgur.com/RLWJINH.png",
  Serval: "https://imgur.com/mCy4CcS.png",
  Bailu: "https://imgur.com/DrjWCBn.png",
  Pela: "https://imgur.com/e94ny9q.png",
  Keqing: "https://imgur.com/KKzZQjn.png",
  Klee: "https://imgur.com/wfF8iua.png",
  Acheron: "https://imgur.com/IcoJBXM.png",
  Kafka: "https://imgur.com/1VYyZU7.png",
  March7th: "https://imgur.com/ComsKbR.png",
  Sampo: "https://imgur.com/OgUfxXK.png",
  Venti: "https://imgur.com/JFL5BdG.png",
  Qiqi: "https://imgur.com/OSYwmfQ.png",
  BlackSwan: "https://imgur.com/hewUVYm.png",
  Sushang: "https://imgur.com/feDecAo.png"
};

const CUSTOM_CHARACTER_DATA = {
  "Raiden Shogun": {
    weapon: "Polearm",
    element: "Electro",
    skills: ["Transcendence: Baleful Omen", "Secret Art: Musou Shinsetsu"],
    quote: "Inazuma Shines Eternal",
  },
  Sushang: {
    weapon: "Sword",
    element: "Geo",
    vision: "Geo",
    constellation: "Crane Ascendant",
    skills: ["Swift Feather Strike", "Crane Dance", "Peerless Blade"],
    quote: "Justice will always prevail! ...Right?"
  },
  Kafka: {
    weapon: "Sword",
    element: "Electro",
    vision: "Electro",
    constellation: "Noctis Aria",
    skills: ["Scarlet Sonata", "Euphonic Shock", "Final Crescendo"],
    quote: "Pain is fleeting, but beauty is eternal."
  },
  Freminet: {
    weapon: "Claymore",
    element: "Cryo",
    skills: ["Pressurized Floe", "Shadowhunter‚Äôs Ambush"],
    quote: "I will protect you.",
  },
  Noelle: {
    weapon: "Claymore",
    element: "Geo",
    skills: ["Breastplate", "Sweeping Time"],
    quote: "Leave it to me!",
  },
  Xinyan: {
    weapon: "Claymore",
    element: "Pyro",
    skills: ["Sweeping Fervor", "Riff Revolution"],
    quote: "Rock and roll!",
  },
  Barbara: {
    weapon: "Catalyst",
    element: "Hydro",
    skills: ["Let the Show Begin", "Shining Miracle"],
    quote: "Ready for your big entrance!",
  },
  Rosaria: {
    weapon: "Polearm",
    element: "Cryo",
    skills: ["Ravaging Confession", "Rites of Termination"],
    quote: "Judgment has come.",
  },
  Thoma: {
    weapon: "Polearm",
    element: "Pyro",
    skills: ["Blazing Blessing", "Crimson Ooyoroi"],
    quote: "I'll do my best.",
  },
  Faruzan: {
    weapon: "Bow",
    element: "Anemo",
    skills: ["Wind Realm of Nasamjnin", "The Wind‚Äôs Secret Ways"],
    quote: "A hundred years have passed... yet there‚Äôs still work to be done.",
  },
  Gorou: {
    weapon: "Bow",
    element: "Geo",
    skills: ["Inuzaka All-Round Defense", "Juuga: Forward Unto Victory"],
    quote: "I am here to serve.",
  },
  Mika: {
    weapon: "Polearm",
    element: "Cryo",
    skills: ["Starfrost Swirl", "Skyfeather Song"],
    quote: "I will fight for you.",
  },
  "Kuki Shinobu": {
    weapon: "Sword",
    element: "Electro",
    skills: ["Sanctifying Ring", "Goei Narukami Kariyama Rite"],
    quote: "I will protect my friends.",
  },
  Tighnari: {
    weapon: "Bow",
    element: "Dendro",
    skills: ["Vijnana-Phala Mine", "Fashioner‚Äôs Tanglevine Shaft"],
    quote: "You should really bring the right medicine for the rainforest.",
  },
  Hutao: {
    weapon: "Polearm",
    element: "Pyro",
    skills: ["Guide to Afterlife", "Spirit Soother"],
    quote: "Hey, don't sleep on me!",
  },
  Yelan: {
    weapon: "Bow",
    element: "Hydro",
    skills: ["Lingering Lifeline", "Depth-Clarion Dice"],
    quote: "Truth is just a matter of perspective.",
  },
  Furina: {
    weapon: "Sword",
    element: "Hydro",
    skills: ["Salon Solitaire", "Let the People Rejoice"],
    quote: "All the world's a stage, and all the men and women merely players.",
  },
  "Yae Miko": {
    weapon: "Catalyst",
    element: "Electro",
    skills: [
      "Yakan Evocation: Sesshou Sakura",
      "Great Secret Art: Tenko Kenshin",
    ],
    quote: "The Kitsune Saiguu watches over us.",
  },
  Nahida: {
    weapon: "Catalyst",
    element: "Dendro",
    skills: ["All Schemes to Know", "Illusory Heart"],
    quote: "Let me show you the wisdom of Sumeru.",
  },
  Mona: {
    weapon: "Catalyst",
    element: "Hydro",
    skills: ["Mirror Reflection of Doom", "Stellaris Phantasm"],
    quote: "Fate is upon you!",
  },
  "Kamisato Ayato": {
    weapon: "Sword",
    element: "Hydro",
    skills: ["Kamisato Art: Kyouka", "Kamisato Art: Suiyuu"],
    quote:
      "A blade is like a tea leaf... only those who sample it may appreciate its true flavor.",
  },
  Baizhu: {
    weapon: "Catalyst",
    element: "Dendro",
    skills: ["Universal Diagnosis", "Holistic Revivification"],
    quote: "Let me ease your pain.",
  },
  Wanderer: {
    weapon: "Catalyst",
    element: "Anemo",
    skills: ["Hanega: Song of the Wind", "Kyougen: Five Ceremonial Plays"],
    quote: "The world holds its breath... waiting for my command.",
  },
  Arlecchino: {
    weapon: "Polearm", // Gi·∫£ ƒë·ªãnh (ch∆∞a c√¥ng b·ªë ch√≠nh th·ª©c)
    element: "Pyro",
    skills: ["Harlequinade", "Fire Dance"],
    quote: "Loyalty is but a means to an end.",
  },
  Lynette: {
    weapon: "Sword",
    element: "Anemo",
    skills: ["Enigmatic Feint", "Magic Trick: Astonishing Shift"],
    quote: "No need to make a fuss.",
  },
  Yaoyao: {
    weapon: "Polearm",
    element: "Dendro",
    skills: ["Raphanus Sky Cluster", "Moonjade Descent"],
    quote: "Come on, let's go play!",
  },
  Xianyun: {
    weapon: "Catalyst",
    element: "Anemo",
    skills: ["Dawn Trail", "Stars Gather at Dusk"], // ƒê√∫ng
    quote: "The path of cultivation is long. Let us go forth together.", // C√¢u tho·∫°i ƒë√∫ng
  },
  Heizou: {
    weapon: "Catalyst",
    element: "Anemo",
    skills: ["Heartstopper Strike", "Windmuster Kick"], // ƒê√∫ng
    quote: "A detective's intuition is rarely wrong.",
  },
  Chiori: {
    weapon: "Sword", // Sai ‚Üí Ch·ªânh l·∫°i th√†nh "Sword" (Chiori d√πng Ki·∫øm)
    element: "Geo", // Sai ‚Üí Ch·ªânh l·∫°i th√†nh "Geo"
    skills: ["Draped in Dusk", "Inticolored Wave"], // Sai ‚Üí ƒê√£ s·ª≠a th√†nh k·ªπ nƒÉng ƒë√∫ng
    quote: "Precision is the soul of elegance.", // C√¢u tho·∫°i ch√≠nh x√°c
  },
  Kaveh: {
    weapon: "Claymore", // Sai ‚Üí Ch·ªânh l·∫°i th√†nh "Claymore" (Kaveh d√πng Tr·ªçng Ki·∫øm)
    element: "Dendro", // Sai ‚Üí Ch·ªânh l·∫°i th√†nh "Dendro"
    skills: ["Artistic Ingenuity", "Painted Dome"], // Sai ‚Üí ƒê√£ s·ª≠a th√†nh k·ªπ nƒÉng ƒë√∫ng
    quote: "True beauty lies in the details.", // C√¢u tho·∫°i ch√≠nh x√°c
  },
  Sigewinne: {
    weapon: "Catalyst", // Sai ‚Üí Ch·ªânh l·∫°i th√†nh "Catalyst" (Sigewinne d√πng Ph√°p Kh√≠)
    element: "Hydro",
    skills: ["Still Waters", "Vitality Flux"], // Sai ‚Üí ƒê√£ s·ª≠a th√†nh k·ªπ nƒÉng ƒë√∫ng
    quote: "Let's get you patched up!", // C√¢u tho·∫°i ch√≠nh x√°c
  },
  Qiqi: {
    weapon: "Sword",
    element: "Cryo",
    skills: [
      "Adeptus Art: Herald of Frost",
      "Adeptus Art: Preserver of Fortune",
    ],
    quote: "I am Qiqi. I am a zombie. And I forgot what comes next.",
  },
  Klee: {
    weapon: "Catalyst",
    element: "Pyro",
    skills: ["Jumpy Dumpty", "Sparks 'n' Splash"],
    quote: "Yay! Let's go fish blasting!",
  },
  Venti: {
    weapon: "Bow",
    element: "Anemo",
    skills: ["Skyward Sonnet", "Wind's Grand Ode"],
    quote: "The wind... it's so nice.",
  },
  Cyno: {
    weapon: "Polearm",
    element: "Electro",
    skills: ["Secret Rite: Chasmic Soulfarer", "Sacred Rite: Wolf‚Äôs Swiftness"], // S·ª≠a l·∫°i ƒë√∫ng k·ªπ nƒÉng
    quote: "You shall face judgment.", // S·ª≠a l·∫°i ƒë√∫ng c√¢u tho·∫°i
  },
  kaveh: {
    weapon: "Claymore",
    element: "Dendro",
    skills: ["Artistic Ingenuity", "Painted Dome"],
    quote: "True beauty lies in the details.",
  },
  collei: {
    weapon: "Bow",
    element: "Dendro",
    skills: ["Ocean's Embrace", "Tidal Surge"],
    quote: "The ocean is vast and unpredictable.",
  },
  sayu: {
    weapon: "Claymore",
    element: "Anemo",
    skills: ["Yoohoo Art: Mujina Flurry", "Yoohoo Art: Silencer"],
    quote: "I'm Sayu, the Shuumatsuban ninja.",
  },
  dehya: {
    weapon: "Claymore",
    element: "Pyro",
    skills: ["Frostflake Arrow", "Snowstorm's Embrace"],
    quote: "The cold is my ally.",
  },
  candace: {
    weapon: "Bow",
    element: "Hydro",
    skills: ["Tidal Wave", "Riptide"],
    quote: "The ocean is my home.",
  },
  layla: {
    weapon: "Sword",
    element: "Sword",
    skills: ["Flamestrike", "Inferno"],
    quote: "The flames will guide us.",
  },
  dori: {
    weapon: "Catalyst",
    element: "Electro",
    skills: ["Thunderstrike", "Lightning Storm"],
    quote: "The storm is coming.",
  },
  albedo: {
    weapon: "Sword",
    element: "Geo",
    skills: [
      "Abiogenesis: Solar Isotoma",
      "Rite of Progeniture: Tectonic Tide",
    ],
    quote: "The future is ours to shape.",
  },
  charlotte: {
    weapon: "Sword",
    element: "Hydro",
    skills: ["Tidal Wave", "Riptide"],
    quote: "The ocean is my home.",
  },
  Eula: {
    weapon: "Claymore",
    element: "Cryo",
    skills: ["Icetide Vortex", "Glacial Illumination"],
    quote: "The cold will not forgive.",
  },
  yanfei: {
    weapon: "Catalyst",
    element: "Pyro",
    skills: ["Signed Edict", "Done Deal"],
    quote: "The law is absolute.",
  },
  Ganyu: {
    weapon: "Bow",
    element: "Cryo",
    skills: ["Trail of the Qilin", "Celestial Shower"],
    quote: "The frost will not forgive.",
  },
  Xiao: {
    weapon: "Polearm",
    element: "Anemo",
    skills: ["Lemniscatic Wind Cycling", "Bane of All Evil"],
    quote: "The wind is my ally.",
  },
  Keqing: {
    weapon: "Sword",
    element: "Electro",
    skills: ["Stellar Restoration", "Starward Sword"],
    quote: "The stars guide us.",
  },
  Shenhe: {
    weapon: "Polearm",
    element: "Cryo",
    skills: ["Spring Spirit Summoning", "Divine Maiden's Deliverance"],
    quote: "The cold is my ally.",
  },
  Diluc: {
    weapon: "Claymore",
    element: "Pyro",
    skills: ["Searing Onslaught", "Dawn"],
    quote: "The dawn is mine to command.",
  },
  Jean: {
    weapon: "Sword",
    element: "Anemo",
    skills: ["Gale Blade", "Dandelion Breeze"],
    quote: "The wind is my ally.",
  },
  BlackSwan: {
    weapon: "Catalyst",
    element: "Anemo",
    skills: ["Erosion", "Withering Plague"],
    quote: "The whispers of fate guide me."
  },
  aglaea: {
    weapon: "Catalyst",
    element: "Anemo",
    vision: "Anemo",
    constellation: "Orbis Fatum",
    skills: ["Erosion", "Withering Plague", "Fate‚Äôs Whisper"],
    quote: "The unseen threads of destiny weave our fate."
  },
  Herta: {
    weapon: "Claymore",
    element: "Cryo",
    vision: "Cryo",
    constellation: "Automata Sapientiae",
    skills: ["Cold Calculation", "Absolute Zero", "Marionette‚Äôs Waltz"],
    quote: "If you can‚Äôt keep up, then you‚Äôre just a waste of processing power."
  },
  RuanMei: {
    weapon: "Catalyst",
    element: "Cryo",
    vision: "Hydro",
    constellation: "Lotus Harmonium",
    skills: ["Melodic Flow", "Lotus Reverie", "Euphonic Cascade"],
    quote: "Wisdom is like water‚Äîit takes the shape of its vessel."
  },
  Fugue: {
    weapon: "Catalyst",
    element: "Pyro",
    vision: "Pyro",
    constellation: "Vulpes Ignis",
    skills: ["Foxfire Waltz", "Phantom Blaze", "Eclipse of Embers"],
    quote: "The flames whisper their secrets to those who listen."
  },
  Luka: {
    weapon: "Polearm",
    element: "Pyro",
    vision: "Pyro",
    constellation: "Pugilis Ignis",
    skills: ["Burning Jab", "Crimson Barrage", "Blazing Spirit"],
    quote: "Keep fighting, no matter what!"
  },
  Misha: {
    weapon: "Sword",
    element: "Cryo",
    vision: "Cryo",
    constellation: "Bellator Glacialis",
    skills: ["Frosted Blade", "Icy Resilience", "Glacial Embrace"],
    quote: "Dreams are the stars guiding our journey."
  },
  DanHeng: {
    weapon: "Polearm",
    element: "Anemo",
    vision: "Anemo",
    constellation: "Draco Nomadis",
    skills: ["Gale Thrust", "Dragon's Tempest", "Windborne Ascent"],
    quote: "The past does not define me. I forge my own path."
  },
  Serval: {
    weapon: "Claymore",
    element: "Electro",
    vision: "Electro",
    constellation: "Thundering Melody",
    skills: ["Electric Riff", "Resonant Shockwave", "Rock & Riot"],
    quote: "Music is the wildest form of rebellion!"
  },
  Sampo: {
    weapon: "Polearm",
    element: "Anemo",
    vision: "Anemo",
    constellation: "Vortex Vagabond",
    skills: ["Twisting Dagger", "Dust Devil", "Windborne Trickster"],
    quote: "Business is all about opportunities... and running fast when needed!"
  },
  March_7th: {
    weapon: "Bow",
    element: "Cryo",
    vision: "Cryo",
    constellation: "Frozen Memory",
    skills: ["Frostsnap Shot", "Snowguard Shield", "Eternal Winter"],
    quote: "Say cheese~! This moment deserves to be remembered!"
  },
  Bailu: {
    weapon: "Catalyst",
    element: "Electro",
    vision: "Electro",
    constellation: "Draco Vitalis",
    skills: ["Soothing Thunder", "Dragon‚Äôs Vitality", "Boundless Surge"],
    quote: "Drink more water, rest well, and you'll be fine!"
  },
  Pela: {
    weapon: "Catalyst",
    element: "Cryo",
    vision: "Cryo",
    constellation: "Glacial Tactician",
    skills: ["Frostbite Analysis", "Tactical Suppression", "Absolute Order"],
    quote: "Knowledge is power. And I have plenty to spare."
  },
  Argenti: {
    weapon: "Claymore",
    element: "Geo",
    vision: "Geo",
    constellation: "Aureum Virtus",
    skills: ["Radiant Smite", "Glorious Crusade", "Knight‚Äôs Honor"],
    quote: "Glory is eternal, and I shall prove it with my blade!"
  },
  Jingliu: {
    weapon: "Sword",
    element: "Cryo",
    vision: "Cryo",
    constellation: "Lunaris Exoria",
    skills: ["Moonlit Slash", "Frozen Nirvana", "Spectral Frost"],
    quote: "The path of the sword is lonely, but I walk it without regret."
  },
  Tingyun: {
    weapon: "Catalyst",
    element: "Electro",
    vision: "Electro",
    constellation: "Lupus Spiritus",
    skills: ["Foxfire Blessing", "Thunderous Enthrall", "Celestial Harmony"],
    quote: "Power is not just in strength, but in how you inspire others to use it."
  },
  FuXuan: {
    weapon: "Catalyst",
    element: "Geo",
    vision: "Geo",
    constellation: "Veritas Divina",
    skills: ["Omniscient Calculation", "Destined Protection", "Clairvoyant Fate"],
    quote: "Destiny is not something to fear. It is something to master."
  },
  Acheron: {
    weapon: "Sword",
    element: "Electro",
    vision: "Electro",
    constellation: "Nihilum Umbra",
    skills: ["Shadowed Slash", "Void's Embrace", "Eclipsed Thunder"],
    quote: "In the void's embrace, I find my path."
  },
  March7th: {
    weapon: "Bow",
    element: "Cryo",
    vision: "Cryo",
    constellation: "Glacies Memoria",
    skills: ["Frigid Snapshot", "Everlasting Ice", "Frostbound Guardian"],
    quote: "A perfect shot! Oh, don‚Äôt forget to take a picture!"
  },
  fugue: {
    weapon: "Catalyst",
    element: "Pyro",
    vision: "Pyro",
    constellation: "Ignis Harmonia",
    skills: ["Flame Waltz", "Inferno Rhapsody", "Blazing Crescendo"],
    quote: "The flames of passion burn bright within me."
  },

};
const RATES = {
  FIVE_STAR: 0.8,         // TƒÉng t·ª´ 0.6 l√™n 0.8 (0.8%)
  EVOLVED_FOUR_STAR: 0.5, // TƒÉng t·ª´ 0.4 l√™n 0.5 (0.5%)
  FOUR_STAR: 14.5,        // TƒÉng nh·∫π t·ª´ 14.0 l√™n 14.5
  THREE_STAR: 84.2,       // Gi·∫£m nh·∫π ƒë·ªÉ b√π l·∫°i c√°c m·ª©c tƒÉng
};

const CHARACTER_RATINGS = {
  FIVE_STAR: [
    "Cyno",
    "Diluc",
    "FuXuan",
    "Jean",
    "Keqing",
    "Klee",
    "Baizhu",
    "Yaoyao",
    "fugue",
    "Acheron",
    "aglaea",
    "Herta",
    "Mona",
    "Qiqi",
    "albedo",
    "RuanMei",
    "Shenhe",
    "Xiao",
    "Tighnari",
    "Arlecchino",
    "Hutao",
    "Wanderer",
    "Yelan",
    "Furina",
    "Zhongli",
    "Jingliu",
    "Tingyun",
    "Kamisato Ayato",
    "Eula",
    "Ganyu",
    "Ayaka",
    "Venti",
    "Raiden Shogun",
    "Yae Miko",
    "Nahida",
  ],
  FOUR_STAR: [
    "Beidou",
    "Bennett",
    "March7th",
    "candace",
    "Chongyun",
    "Bailu",
    "layla",
    "charlotte",
    "Argenti",
    "Fischl",
    "Ningguang",
    "BlackSwan",
    "Razor",
    "Sucrose",
    "Lynette",
    "yanfei",
    "Xianyun",
    "Rosaria",
    "sayu",
    "dori",
    "Pela",
    "Thoma",
    "Xiangling",
    "Heizou",
    "Xingqiu",
    "Kuki Shinobu",
    "Freminet",
  ],
  THREE_STAR: [
    "dehya",
    "Diona",
    "kaveh",
    "collei",
    "Amber",
    "Kaeya",
    "Lisa",
    "Sushang",
    "Sampo",
    "DanHeng",
    "Xinyan",
    "Barbara",
    "Serval",
    "Chiori",
    "Noelle",
    "Faruzan",
    "Gorou",
    "Sigewinne",
    "Luka",
    "Mika",
  ],
};
const EVOLVED_FOUR_STARS = [
  "Bennett",
  "Xingqiu",
  "Xiangling",
  "Fischl",
  "Beidou",
  "Sucrose",
  "Ningguang",
  "Rosaria",
  "Thoma",
  "Misa",
  "Heizou",
  "Faruzan",
  "Kuki Shinobu",
  "Lynette",
  "Xianyun",
];

const PREMIUM_FIVE_STARS = [
  "Ganyu",
  "aglaea",
  "RuanMei",
  "Raiden Shogun",
  "Yae Miko",
];

const CHARACTER_CONSTELLATIONS = {
  "Raiden Shogun": [
    {
      level: 1,
      name: "Ominous Inscription",
      description: "Gi·∫£m 50% th·ªùi gian h·ªìi k·ªπ nƒÉng E",
      effect: "reduceCooldown",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Steelbreaker",
      description: "Musou Shinsetsu ph√° v·ª° 60% DEF c·ªßa k·∫ª ƒë·ªãch",
      effect: "defenseReduction",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Shinkage Bygones",
      description: "TƒÉng c·∫•p k·ªπ nƒÉng Q th√™m 3 c·∫•p",
      effect: "skillLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Pledge of Propriety",
      description: "Nh·∫≠n 30% nƒÉng l∆∞·ª£ng sau khi h·∫øt Burst",
      effect: "energyRestore",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Shogun's Descent",
      description: "TƒÉng stack Resolve th√™m 50%",
      effect: "resolveBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Wishbearer",
      description:
        "T·∫•n c√¥ng trong Burst gi·∫£m 60% CD Elemental Skill c·ªßa ƒë·ªìng ƒë·ªôi",
      effect: "teamCooldownReduction",
      powerBoost: 0.5,
    },
  ],

  Hutao: [
    {
      level: 1,
      name: "Crimson Bouquet",
      description: "X√≥a b·ªè chi ph√≠ stamina c·ªßa Blood Blossom",
      effect: "noStaminaCost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Ominous Rain",
      description: "Blood Blossom g√¢y th√™m 20% s√°t th∆∞∆°ng",
      effect: "increaseDamage",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Blood Embrace",
      description: "TƒÉng c·∫•p k·ªπ nƒÉng E th√™m 3 c·∫•p",
      effect: "skillLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Garden of Eternal Rest",
      description: "TƒÉng CRIT Rate 12% cho ƒë·ªìng ƒë·ªôi g·∫ßn Hu Tao",
      effect: "critRateBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Floral Incense",
      description: "TƒÉng hi·ªáu qu·∫£ Blood Blossom l√™n 40%",
      effect: "bloodBlossomBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Butterfly's Embrace",
      description: "HP d∆∞·ªõi 25%, nh·∫≠n 100% Resist Interruption v√† 200% DEF",
      effect: "survivalBoost",
      powerBoost: 0.5,
    },
  ],
  Diluc: [
    {
      level: 1,
      name: "Steel and Fire",
      description:
        "TƒÉng 15% S√°t Th∆∞∆°ng cho 2 ƒë√≤n ƒë√°nh th∆∞·ªùng ti·∫øp theo sau khi thi tri·ªÉn K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "increaseDamage",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Searing Ember",
      description: "Khi HP d∆∞·ªõi 50%, tƒÉng 30% T·∫•n C√¥ng v√† 30% T·ªëc ƒê·ªô ƒê√°nh.",
      effect: "attackSpeedBoost",
      powerBoost: 0.3,
    },
    {
      level: 3,
      name: "Fire and Steel",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Flowing Flame",
      description:
        "S·ª≠ d·ª•ng K·ªπ NƒÉng Nguy√™n T·ªë trong 2 gi√¢y sau khi s·ª≠ d·ª•ng l·∫ßn ƒë·∫ßu s·∫Ω kh√¥ng b·ªã t√≠nh th·ªùi gian h·ªìi chi√™u.",
      effect: "cooldownReset",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Phoenix, Harbinger of Dawn",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Flaming Sword, Nemesis of Dark",
      description:
        "M·ªói ƒë√≤n ƒë√°nh th∆∞·ªùng gi·∫£m 50% th·ªùi gian h·ªìi chi√™u c·ªßa K·ªπ NƒÉng Nguy√™n T·ªë v√† tƒÉng 15% S√°t Th∆∞∆°ng.",
      effect: "cooldownReduction",
      powerBoost: 0.5,
    },
  ],
  Klee: [
    {
      level: 1,
      name: "Chained Reactions",
      description:
        "ƒê√≤n ƒë√°nh th∆∞·ªùng v√† tr·ªçng k√≠ch c√≥ 50% c∆° h·ªôi t·∫°o ra m·ªôt v·ª• n·ªï nh·ªè g√¢y 120% S√°t Th∆∞∆°ng.",
      effect: "additionalExplosion",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Explosive Frags",
      description:
        "ƒê√°nh tr√∫ng k·∫ª ƒë·ªãch b·∫±ng K·ªπ NƒÉng Nguy√™n T·ªë gi·∫£m 3 gi√¢y th·ªùi gian h·ªìi chi√™u c·ªßa n√≥ v√† t·∫°o ra nƒÉng l∆∞·ª£ng nguy√™n t·ªë.",
      effect: "cooldownReduction",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Exquisite Compound",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Sparkly Explosion",
      description:
        "Khi r·ªùi tr·∫≠n, Klee k√≠ch ho·∫°t m·ªôt v·ª• n·ªï g√¢y 555% S√°t Th∆∞∆°ng Nguy√™n T·ªë H·ªèa cho k·∫ª ƒë·ªãch xung quanh.",
      effect: "exitExplosion",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Nova Burst",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Blazing Delight",
      description:
        "Trong th·ªùi gian K·ªπ NƒÉng N·ªô, c√°c ƒë√≤n ƒë√°nh th∆∞·ªùng c√≥ 100% c∆° h·ªôi k√≠ch ho·∫°t v·ª• n·ªï nh·ªè v√† tƒÉng 10% S√°t Th∆∞∆°ng.",
      effect: "enhancedBurst",
      powerBoost: 0.5,
    },
  ],
  // Nh√¢n v·∫≠t h·ªá Th·ªßy
  Mona: [
    {
      level: 1,
      name: "Prophecy of Submersion",
      description:
        "TƒÉng 15% S√°t Th∆∞∆°ng khi k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi tr·∫°ng th√°i ∆∞·ªõt.",
      effect: "increaseDamage",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Lunar Chain",
      description:
        "ƒê√°nh th∆∞·ªùng c√≥ 20% c∆° h·ªôi t·∫°o ra m·ªôt ƒë√≤n t·∫•n c√¥ng th·ª© hai g√¢y 50% S√°t Th∆∞∆°ng.",
      effect: "additionalAttack",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Restless Revolution",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Prophecy of Oblivion",
      description:
        "TƒÉng 15% T·ª∑ L·ªá B·∫°o K√≠ch khi k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi tr·∫°ng th√°i ∆∞·ªõt.",
      effect: "critRateBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Mockery of Fortuna",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Rhetorics of Calamitas",
      description:
        "Sau khi s·ª≠ d·ª•ng K·ªπ NƒÉng N·ªô, tƒÉng 60% S√°t Th∆∞∆°ng cho ƒë√≤n ƒë√°nh th∆∞·ªùng trong 8 gi√¢y.",
      effect: "enhancedAttack",
      powerBoost: 0.5,
    },
  ],
  Jean: [
    {
      level: 1,
      name: "Spiraling Tempest",
      description: "ƒê√°nh th∆∞·ªùng c√≥ 50% c∆° h·ªôi h·ªìi 20% NƒÉng L∆∞·ª£ng Nguy√™n T·ªë.",
      effect: "energyRestore",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "People's Aegis",
      description:
        "Khi nh·∫≠n ƒë∆∞·ª£c Nguy√™n T·ªë H·ªìi Ph·ª•c, tƒÉng 15% T·∫•n C√¥ng cho to√†n ƒë·ªôi trong 12 gi√¢y.",
      effect: "teamAttackBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "When the West Wind Arises",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Lands of Dandelion",
      description:
        "Gi·∫£m 35% s√°t th∆∞∆°ng nh·∫≠n v√†o trong v√≤ng ·∫£nh h∆∞·ªüng c·ªßa K·ªπ NƒÉng N·ªô.",
      effect: "damageReduction",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Outbursting Gust",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Lion's Fang, Fair Protector of Mondstadt",
      description:
        "T·∫•n c√¥ng trong v√≤ng ·∫£nh h∆∞·ªüng c·ªßa K·ªπ NƒÉng N·ªô gi√∫p h·ªìi 50% l∆∞·ª£ng HP s√°t th∆∞∆°ng g√¢y ra.",
      effect: "lifesteal",
      powerBoost: 0.5,
    },
  ],
  Venti: [
    {
      level: 1,
      name: "Splitting Gales",
      description: "TƒÉng 2 m≈©i t√™n ph·ª• khi d√πng tr·ªçng k√≠ch.",
      effect: "additionalArrow",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Breeze of Reminiscence",
      description:
        "K·∫ª ƒë·ªãch tr√∫ng K·ªπ NƒÉng Nguy√™n T·ªë b·ªã gi·∫£m 12% Kh√°ng Nguy√™n T·ªë Phong.",
      effect: "resistanceReduction",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Ode to Thousand Winds",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Hurricane of Freedom",
      description:
        "Khi tr√∫ng K·ªπ NƒÉng N·ªô, ƒë·ªìng ƒë·ªôi nh·∫≠n 15% s√°t th∆∞∆°ng nguy√™n t·ªë t∆∞∆°ng ·ª©ng trong v√≤ng 12 gi√¢y.",
      effect: "teamElementalBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Concerto dal Cielo",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Storm of Defiance",
      description:
        "K·∫ª ƒë·ªãch tr√∫ng K·ªπ NƒÉng N·ªô m·∫•t 20% Kh√°ng Nguy√™n T·ªë Phong v√† nh·∫≠n 15% s√°t th∆∞∆°ng gia tƒÉng.",
      effect: "debuff",
      powerBoost: 0.5,
    },
  ],
  Xiao: [
    {
      level: 1,
      name: "Dissolution Eon: Destroyer of Worlds",
      description:
        "S·ª≠ d·ª•ng K·ªπ NƒÉng Nguy√™n T·ªë tƒÉng 15% S√°t Th∆∞∆°ng l·∫ßn sau trong 7 gi√¢y.",
      effect: "damageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Annihilation Eon: Blossom of Kaleidos",
      description:
        "Khi Xiao trong tr·∫°ng th√°i Bane of All Evil, tr√∫ng ƒë√≤n s·∫Ω h·ªìi 3 nƒÉng l∆∞·ª£ng.",
      effect: "energyRegen",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Conqueror of Evil: Wrath Deity",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Transcension: Extinction of Suffering",
      description: "Khi HP d∆∞·ªõi 50%, nh·∫≠n 100% hi·ªáu ·ª©ng ch·ªëng gi√°n ƒëo·∫°n.",
      effect: "survivabilityBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Evolution Eon: Origin of Ignorance",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Conqueror of Evil: Guardian Yaksha",
      description:
        "Khi K·ªπ NƒÉng N·ªô ƒë∆∞·ª£c k√≠ch ho·∫°t, ƒë√°nh th∆∞·ªùng t·∫•n c√¥ng tr√∫ng nhi·ªÅu k·∫ª ƒë·ªãch s·∫Ω h·ªìi 3 nƒÉng l∆∞·ª£ng.",
      effect: "energyRegen",
      powerBoost: 0.5,
    },
  ],
  "Yae Miko": [
    {
      level: 1,
      name: "Yakan Offering",
      description: "Khi K·ªπ NƒÉng Nguy√™n T·ªë t·∫°o ra s√°t th∆∞∆°ng, h·ªìi 8 nƒÉng l∆∞·ª£ng.",
      effect: "energyRegen",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Fox's Mooncall",
      description:
        "Khi thi tri·ªÉn K·ªπ NƒÉng N·ªô, m·ªói tr·ª• Sakura Seisho h·ªìi 10% s√°t th∆∞∆°ng t·ªëi ƒëa.",
      effect: "burstBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "The Seven Glamours",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Sakura Channeling",
      description:
        "M·ªói tr·ª• Sakura Seisho tr√∫ng ƒë·ªãch tƒÉng 20% s√°t th∆∞∆°ng K·ªπ NƒÉng N·ªô.",
      effect: "burstDamageBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Mischievous Teasing",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Forbidden Secrets",
      description:
        "S√°t th∆∞∆°ng K·ªπ NƒÉng Nguy√™n T·ªë tƒÉng th√™m 60% t·ª´ ch·ªâ s·ªë Tinh Th√¥ng Nguy√™n T·ªë.",
      effect: "elementalMasteryBoost",
      powerBoost: 0.5,
    },
  ],
  Zhongli: [
    {
      level: 1,
      name: "Rock, the Backbone of Earth",
      description:
        "Khi c√≥ Khi√™n Jade Shield, s√°t th∆∞∆°ng nh·∫≠n v√†o gi·∫£m th√™m 15%.",
      effect: "damageReduction",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Stone, the Cradle of Jade",
      description: "T·∫°o th√™m 1 tr·ª• ƒê·ªãa Th√≠ch.",
      effect: "additionalPillar",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Jade, Shimmering Through Darkness",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Topaz, Unbreakable and Fearless",
      description:
        "Khi c√≥ Khi√™n Jade Shield, ƒë·ªìng ƒë·ªôi trong v√πng l√¢n c·∫≠n nh·∫≠n 20% S√°t Th∆∞∆°ng ƒê·ªãa tƒÉng th√™m.",
      effect: "geoDamageBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Lazuli, Herald of the Order",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Chrysos, Bounty of Dominator",
      description:
        "Khi K·ªπ NƒÉng N·ªô ch·∫°m k·∫ª ƒë·ªãch, t·∫°o ra 2 ƒë·ª£t s√≥ng xung k√≠ch b·ªï sung, m·ªói ƒë·ª£t g√¢y 50% s√°t th∆∞∆°ng ban ƒë·∫ßu.",
      effect: "additionalShockwaves",
      powerBoost: 0.5,
    },
  ],
  Cyno: [
    {
      level: 1,
      name: "Ordinance: Unceasing Vigil",
      description:
        "Khi trong tr·∫°ng th√°i Pactsworn Pathclearer, Cyno nh·∫≠n 20% Elemental Mastery.",
      effect: "elementalMasteryBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Ceremony: Homecoming of Spirits",
      description:
        "Khi K·ªπ NƒÉng Nguy√™n T·ªë k√≠ch ho·∫°t tr·∫°ng th√°i Judgment, n√≥ h·ªìi 3 nƒÉng l∆∞·ª£ng cho Cyno.",
      effect: "energyRegen",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Precept: Lawful Enforcer",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Austerity: Forbidding Guard",
      description:
        "Khi ƒëang trong tr·∫°ng th√°i K·ªπ NƒÉng N·ªô, Cyno nh·∫≠n 35% s√°t th∆∞∆°ng L√¥i tƒÉng th√™m.",
      effect: "electroDamageBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Funerary Rite: The Passing of Starlight",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Raiment: Just Scales",
      description:
        "Khi tr√∫ng ƒë·ªãch trong tr·∫°ng th√°i K·ªπ NƒÉng N·ªô, t·ªâ l·ªá Crit Rate tƒÉng 10% v√† Crit DMG tƒÉng 20%.",
      effect: "critBoost",
      powerBoost: 0.5,
    },
  ],
  Keqing: [
    {
      level: 1,
      name: "Thundering Might",
      description:
        "Sau khi s·ª≠ d·ª•ng K·ªπ NƒÉng Nguy√™n T·ªë, s√°t th∆∞∆°ng ƒë√°nh th∆∞·ªùng tƒÉng 20% trong 5 gi√¢y.",
      effect: "attackBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Keen Extraction",
      description:
        "Khi k·∫ª ƒë·ªãch tr√∫ng K·ªπ NƒÉng N·ªô, gi·∫£m 15% kh√°ng L√¥i c·ªßa ch√∫ng trong 8 gi√¢y.",
      effect: "electroResReduction",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Foreseen Reformation",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Attunement",
      description:
        "Sau khi d√πng K·ªπ NƒÉng N·ªô, Keqing nh·∫≠n 25% s√°t th∆∞∆°ng L√¥i tƒÉng th√™m trong 10 gi√¢y.",
      effect: "electroDamageBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Beckoning Stars",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Tenacious Star",
      description:
        "Trong 8 gi√¢y sau khi Keqing s·ª≠ d·ª•ng K·ªπ NƒÉng N·ªô, ƒë√≤n ƒë√°nh th∆∞·ªùng cu·ªëi c√πng s·∫Ω g√¢y th√™m 100% s√°t th∆∞∆°ng.",
      effect: "bonusDamage",
      powerBoost: 0.5,
    },
  ],
  Baizhu: [
    {
      level: 1,
      name: "Herbal Nourishment",
      description:
        "H·ªìi 2% HP m·ªói gi√¢y cho ƒë·ªìng ƒë·ªôi trong v√≤ng ·∫£nh h∆∞·ªüng c·ªßa K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "healingOverTime",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Lush Vitality",
      description:
        "Sau khi nh·∫≠n h·ªìi m√°u t·ª´ Baizhu, ƒë·ªìng ƒë·ªôi nh·∫≠n 15% kh√°ng Th·∫£o.",
      effect: "dendroResBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Verdant Prescription",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Rejuvenation",
      description:
        "Khi√™n c·ªßa Baizhu t·ªìn t·∫°i l√¢u h∆°n 5 gi√¢y v√† h·∫•p th·ª• th√™m 20% s√°t th∆∞∆°ng.",
      effect: "shieldBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Botanical Expertise",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Pharmacist's Wisdom",
      description:
        "Khi c√≥ khi√™n t·ª´ Baizhu, ƒë·ªìng ƒë·ªôi nh·∫≠n th√™m 20% s√°t th∆∞∆°ng nguy√™n t·ªë Th·∫£o.",
      effect: "dendroDamageBoost",
      powerBoost: 0.5,
    },
  ],
  Yaoyao: [
    {
      level: 1,
      name: "Adeptus' Tutelage",
      description:
        "Sau khi k√≠ch ho·∫°t K·ªπ NƒÉng Nguy√™n T·ªë, tƒÉng 20% Healing Bonus trong 8 gi√¢y.",
      effect: "healingBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Innocent Whispers",
      description: "Nh·∫≠n 15% Energy Recharge khi Yaoyao h·ªìi m√°u cho ƒë·ªìng ƒë·ªôi.",
      effect: "energyRechargeBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Nature's Caress",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Boundless Vitality",
      description:
        "Khi c√≥ khi√™n t·ª´ K·ªπ NƒÉng Nguy√™n T·ªë, s√°t th∆∞∆°ng Th·∫£o tƒÉng th√™m 25%.",
      effect: "dendroDamageBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Springtime Radiance",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Everlasting Bloom",
      description:
        "ƒê·ªìng ƒë·ªôi h·ªìi 20% HP khi trong v√πng ·∫£nh h∆∞·ªüng c·ªßa K·ªπ NƒÉng N·ªô.",
      effect: "teamHealing",
      powerBoost: 0.5,
    },
  ],
  Mona: [
    {
      level: 1,
      name: "Prophecy of Submersion",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng Th·ªßy cho ƒë·ªìng ƒë·ªôi khi k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi tr·∫°ng th√°i Omen.",
      effect: "hydroDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Lunar Chain",
      description:
        "ƒê√≤n ƒë√°nh th∆∞·ªùng c√≥ 20% c∆° h·ªôi k√≠ch ho·∫°t m·ªôt ƒë√≤n ƒë√°nh b·ªï sung.",
      effect: "extraAttack",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Restless Revolution",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Prophecy of Oblivion",
      description: "Gi·∫£m 15% kh√°ng Th·ªßy c·ªßa k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi Omen.",
      effect: "hydroResReduction",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Mockery of Fortuna",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Rhetoric of Calamitas",
      description:
        "Sau khi d√πng K·ªπ NƒÉng N·ªô, Mona nh·∫≠n 60% tƒÉng s√°t th∆∞∆°ng Hydro trong 8 gi√¢y.",
      effect: "massiveHydroBoost",
      powerBoost: 0.5,
    },
  ],
  Qiqi: [
    {
      level: 1,
      name: "Ascetics of Frost",
      description:
        "M·ªói ƒë√≤n ƒë√°nh th∆∞·ªùng h·ªìi 2% HP cho ƒë·ªìng ƒë·ªôi khi ƒëang ch·ªãu ·∫£nh h∆∞·ªüng c·ªßa Herald of Frost.",
      effect: "teamHealing",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Frozen to the Bone",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng BƒÉng khi Qiqi t·∫•n c√¥ng k·∫ª ƒë·ªãch b·ªã ƒë√≥ng bƒÉng.",
      effect: "cryoDamageBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Ascension: Guardian‚Äôs Oath",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Divine Suppression",
      description:
        "K·∫ª ƒë·ªãch b·ªã ƒë√°nh tr√∫ng b·ªüi K·ªπ NƒÉng N·ªô b·ªã gi·∫£m 15% t·∫•n c√¥ng trong 10 gi√¢y.",
      effect: "attackReduction",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Crimson Lotus Bloom",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Rite of Resurrection",
      description:
        "H·ªìi sinh m·ªôt ƒë·ªìng ƒë·ªôi ng·∫´u nhi√™n khi Qiqi s·ª≠ d·ª•ng K·ªπ NƒÉng N·ªô.",
      effect: "teamRevival",
      powerBoost: 0.5,
    },
  ],
  Albedo: [
    {
      level: 1,
      name: "Flower of Eden",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng K·ªπ NƒÉng Nguy√™n T·ªë cho ƒë·ªìng ƒë·ªôi trong v√πng ·∫£nh h∆∞·ªüng c·ªßa Solar Isotoma.",
      effect: "elementalSkillBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Grace of Helios",
      description:
        "Sau khi t·∫°o ra m·ªôt b√¥ng hoa t·ª´ Solar Isotoma, Albedo nh·∫≠n 20% DEF trong 10 gi√¢y.",
      effect: "defenseBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Solar Radiance",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Descent of Divinity",
      description:
        "ƒê·ªìng ƒë·ªôi trong v√πng c·ªßa Solar Isotoma nh·∫≠n 25% s√°t th∆∞∆°ng Nham tƒÉng th√™m.",
      effect: "geoDamageBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Tectonic Tide",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Infinite Alchemy",
      description:
        "ƒê·ªìng ƒë·ªôi trong v√πng ·∫£nh h∆∞·ªüng c·ªßa K·ªπ NƒÉng N·ªô nh·∫≠n 20% s√°t th∆∞∆°ng to√†n b·ªô nguy√™n t·ªë.",
      effect: "elementalDamageBoost",
      powerBoost: 0.5,
    },
  ],
  Shenhe: [
    {
      level: 1,
      name: "Spring Spirit Summoning",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng K·ªπ NƒÉng Nguy√™n T·ªë khi k√≠ch ho·∫°t Icy Quill.",
      effect: "cryoSkillBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Spiritborne Snowfall",
      description:
        "TƒÉng 10% Crit Rate cho ƒë√≤n ƒë√°nh th∆∞·ªùng khi ch·ªãu ·∫£nh h∆∞·ªüng c·ªßa Icy Quill.",
      effect: "critRateBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Divine Subjugation",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Ethereal Presence",
      description: "TƒÉng 25% s·ª©c m·∫°nh Buff c·ªßa Icy Quill.",
      effect: "buffBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Mystic Spirit",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Dharma‚Äôs Perfection",
      description:
        "ƒê·ªìng ƒë·ªôi nh·∫≠n 15% s√°t th∆∞∆°ng BƒÉng tƒÉng th√™m khi c√≥ Buff t·ª´ Icy Quill.",
      effect: "cryoDamageBoost",
      powerBoost: 0.5,
    },
  ],
  Tighnari: [
    {
      level: 1,
      name: "Beginners Mind",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng c·ªßa Wreath Arrow khi c√≥ buff Vijnana Suffusion.",
      effect: "dendroSkillBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Scholarly Blade",
      description: "TƒÉng 20% s√°t th∆∞∆°ng c·ªßa Charged Attack.",
      effect: "chargedAttackBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Hidden Wisdom",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Nature‚Äôs Knowledge",
      description:
        "TƒÉng 25% Crit Rate c·ªßa Charged Attack sau khi s·ª≠ d·ª•ng K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "critRateBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Forest Secrets",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "True Knowledge",
      description:
        "Charged Attack tƒÉng 20% Crit DMG khi tr√∫ng k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi Dendro.",
      effect: "critDamageBoost",
      powerBoost: 0.5,
    },
  ],

  Arlecchino: [
    {
      level: 1,
      name: "Crimson Pact",
      description:
        "Khi Arlecchino m·∫•t HP do k·ªπ nƒÉng c·ªßa b·∫£n th√¢n, s√°t th∆∞∆°ng Pyro tƒÉng 15% trong 8 gi√¢y.",
      effect: "pyroDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Scarlet Vow",
      description:
        "TƒÉng 20% Crit Rate khi t·∫•n c√¥ng k·∫ª ƒë·ªãch c√≥ HP th·∫•p h∆°n 50%.",
      effect: "critRateBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Flames of Betrayal",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Bloodstained Dominion",
      description:
        "Sau khi h·∫° g·ª•c k·∫ª ƒë·ªãch, nh·∫≠n 25% Attack Speed trong 10 gi√¢y.",
      effect: "attackSpeedBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Infernal Wrath",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Endless Carnage",
      description:
        "Khi Arlecchino c√≤n d∆∞·ªõi 50% HP, s√°t th∆∞∆°ng to√†n b·ªô ƒë√≤n ƒë√°nh tƒÉng 30%.",
      effect: "damageBoostLowHP",
      powerBoost: 0.5,
    },
  ],
  Wanderer: [
    {
      level: 1,
      name: "Skybound Zephyr",
      description:
        "Khi ·ªü tr·∫°ng th√°i bay c·ªßa K·ªπ NƒÉng Nguy√™n T·ªë, nh·∫≠n 15% s√°t th∆∞∆°ng Phong.",
      effect: "anemoDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Wind's Whisper",
      description: "T·ªëc ƒë·ªô bay trong tr·∫°ng th√°i K·ªπ NƒÉng Nguy√™n T·ªë tƒÉng 20%.",
      effect: "flightSpeedBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Eternal Sky",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Dancing Gale",
      description:
        "M·ªói l·∫ßn Wanderer ƒë√°nh tr√∫ng k·∫ª ƒë·ªãch tr√™n kh√¥ng, ph·ª•c h·ªìi 3 ƒëi·ªÉm stamina.",
      effect: "staminaRestore",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Azure Tempest",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Skyfall's Revelation",
      description:
        "TƒÉng 25% Crit Rate khi ƒëang ·ªü tr·∫°ng th√°i bay c·ªßa K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "aerialCritBoost",
      powerBoost: 0.5,
    },
  ],
  Yelan: [
    {
      level: 1,
      name: "Silent Pursuit",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng c·ªßa ƒë√≤n ƒë√°nh c∆∞·ªùng h√≥a b·∫±ng Exquisite Throw.",
      effect: "hydroDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Torrential Shot",
      description:
        "M·ªói khi Exquisite Throw t·∫•n c√¥ng k·∫ª ƒë·ªãch, h·ªìi 3 nƒÉng l∆∞·ª£ng.",
      effect: "energyRestore",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Flowing Echo",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Phantom Mirage",
      description: "T·ªëc ƒë·ªô ch·∫°y trong tr·∫≠n chi·∫øn tƒÉng 20%.",
      effect: "movementSpeedBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Tidebringer",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Abyssal Manipulation",
      description:
        "S√°t th∆∞∆°ng c·ªßa Exquisite Throw tƒÉng th√™m 30% khi HP d∆∞·ªõi 50%.",
      effect: "lowHPBoost",
      powerBoost: 0.5,
    },
  ],
  Furina: [
    {
      level: 1,
      name: "Verdant Blessing",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng Hydro cho ƒë·ªìng ƒë·ªôi khi Furina ·ªü tr·∫°ng th√°i Ousia.",
      effect: "hydroDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Melodic Resonance",
      description: "TƒÉng 20% t·ªëc ƒë·ªô h·ªìi HP c·ªßa k·ªπ nƒÉng.",
      effect: "healingBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Echoes of Fontaine",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Sovereign's Grace",
      description:
        "Sau khi d√πng K·ªπ NƒÉng N·ªô, Furina tƒÉng 25% Attack Speed trong 10 gi√¢y.",
      effect: "attackSpeedBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Tide of Blessings",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Celestial Harmony",
      description:
        "M·ªói khi Furina h·ªìi HP cho ƒë·ªìng ƒë·ªôi, s√°t th∆∞∆°ng Hydro to√†n ƒë·ªôi tƒÉng 30% trong 10 gi√¢y.",
      effect: "teamHydroBoost",
      powerBoost: 0.5,
    },
  ],
  "Kamisato Ayato": [
    {
      level: 1,
      name: "Rippling Flow",
      description:
        "Sau khi d√πng K·ªπ NƒÉng Nguy√™n T·ªë, nh·∫≠n 15% s√°t th∆∞∆°ng Hydro trong 10 gi√¢y.",
      effect: "hydroDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Waveform Surge",
      description:
        "TƒÉng 20% Crit Rate khi t·∫•n c√¥ng k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi Hydro.",
      effect: "critRateBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Blue Tempest",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Rising Waters",
      description:
        "Sau khi d√πng K·ªπ NƒÉng N·ªô, Attack Speed tƒÉng 25% trong 10 gi√¢y.",
      effect: "attackSpeedBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Frosted Ripples",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Celestial Cascade",
      description:
        "Khi t·∫•n c√¥ng k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi Hydro, nh·∫≠n th√™m 40% s√°t th∆∞∆°ng.",
      effect: "hydroDamageBonus",
      powerBoost: 0.5,
    },
  ],
  Eula: [
    {
      level: 1,
      name: "Northern Frost",
      description: "TƒÉng 15% s√°t th∆∞∆°ng v·∫≠t l√Ω khi c√≥ 2 stack Grimheart.",
      effect: "physicalDamageBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Glacial Shatter",
      description: "TƒÉng 20% Crit Rate khi d√πng K·ªπ NƒÉng N·ªô.",
      effect: "critRateBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Frozen Blade",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Arctic Dominion",
      description:
        "Sau khi ph√° v·ª° Khi√™n BƒÉng t·ª´ K·ªπ NƒÉng Nguy√™n T·ªë, Attack Speed tƒÉng 25% trong 10 gi√¢y.",
      effect: "attackSpeedBoost",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Icebreaker",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Frostbound Requiem",
      description: "Khi K·ªπ NƒÉng N·ªô ph√°t n·ªï, h·ªìi l·∫°i 50% nƒÉng l∆∞·ª£ng cho Eula.",
      effect: "energyRestore",
      powerBoost: 0.5,
    },
  ],
  Ganyu: [
    {
      level: 1,
      name: "Frostbite",
      description:
        "TƒÉng 15% s√°t th∆∞∆°ng c·ªßa Charged Attack khi k·∫ª ƒë·ªãch b·ªã ·∫£nh h∆∞·ªüng b·ªüi BƒÉng.",
      effect: "chargedAttackBoost",
      powerBoost: 0.15,
    },
    {
      level: 2,
      name: "Snowstorm",
      description:
        "TƒÉng 20% Crit Rate khi t·∫•n c√¥ng k·∫ª ƒë·ªãch trong v√πng K·ªπ NƒÉng N·ªô.",
      effect: "critRateBoost",
      powerBoost: 0.2,
    },
    {
      level: 3,
      name: "Frozen Elegance",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng N·ªô.",
      effect: "burstLevelBoost",
      powerBoost: 0.25,
    },
    {
      level: 4,
      name: "Icy Serenade",
      description: "Gi·∫£m 20% Cryo RES c·ªßa k·∫ª ƒë·ªãch trong v√πng K·ªπ NƒÉng N·ªô.",
      effect: "cryoResReduction",
      powerBoost: 0.3,
    },
    {
      level: 5,
      name: "Frosted Blossom",
      description: "TƒÉng 3 c·∫•p cho K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "skillLevelBoost",
      powerBoost: 0.4,
    },
    {
      level: 6,
      name: "Arctic Requiem",
      description:
        "M·ªói khi Charged Attack tr√∫ng k·∫ª ƒë·ªãch, gi·∫£m 1 gi√¢y h·ªìi chi√™u c·ªßa K·ªπ NƒÉng Nguy√™n T·ªë.",
      effect: "cooldownReduction",
      powerBoost: 0.5,
    },
  ],
};

function createStellaFortuna(characterName = null, isUniversal = false) {
  const stellaId = "STELLA_" + Date.now() + "_" + Math.floor(Math.random() * 10000);

  let stellaValue = 100000;

  if (isUniversal) {
    stellaValue = 500000;
  } else if (characterName) {
    if (PREMIUM_FIVE_STARS.includes(characterName)) {
      stellaValue = 300000;
    } else if (CHARACTER_RATINGS.FIVE_STAR.includes(characterName)) {
      stellaValue = 200000;
    } else if (CHARACTER_RATINGS.FOUR_STAR.includes(characterName)) {
      stellaValue = 50000;
    }
  }

  CHARACTER_IDS[stellaId] = {
    id: stellaId,
    type: "stella", // Kh√¥ng ph·∫£i "character"
    isStella: true, // Flag r√µ r√†ng
    name: isUniversal ? "Universal Stella Fortuna" : `Stella Fortuna (${characterName})`,
    targetCharacter: characterName,
    isUniversal: isUniversal,
    rarity: 5, // ƒê·∫£m b·∫£o rarity ƒë∆∞·ª£c ƒë·∫∑t
    description: isUniversal
      ? "C√≥ th·ªÉ d√πng cho b·∫•t k·ª≥ nh√¢n v·∫≠t n√†o"
      : `D√πng ƒë·ªÉ m·ªü kh√≥a ch√≤m sao cho ${characterName}`,
    obtainedAt: Date.now(),
    value: stellaValue,
    image: "https://imgur.com/n3GBdOq.png"
  };

  saveCharacterDatabase();
  return stellaId;
}
function calculatePvPRank(wins) {
  for (let i = PVP_RANKS.length - 1; i >= 0; i--) {
    if (wins >= PVP_RANKS[i].threshold) {
      return {
        rank: PVP_RANKS[i].name,
        icon: PVP_RANKS[i].icon,
        rewards: PVP_RANKS[i].rewards,
        nextRank: i < PVP_RANKS.length - 1 ? PVP_RANKS[i + 1] : null,
        winsToNext: i < PVP_RANKS.length - 1 ? PVP_RANKS[i + 1].threshold - wins : 0
      };
    }
  }
  return {
    rank: PVP_RANKS[0].name,
    icon: PVP_RANKS[0].icon,
    rewards: PVP_RANKS[0].rewards,
    nextRank: PVP_RANKS[1],
    winsToNext: PVP_RANKS[1].threshold
  };
}

// H√†m ph√°t th∆∞·ªüng khi ng∆∞·ªùi d√πng l√™n rank
async function handleRankPromotion(api, userId, oldRank, newRank, threadID) {
  const userName = getUserName(userId);
  const gachaData = loadGachaData();
  const userData = gachaData[userId];

  if (!userData) return;

  // T√¨m th√¥ng tin rank m·ªõi
  const rankInfo = PVP_RANKS.find(r => r.name === newRank);
  if (!rankInfo) return;

  // Th√™m ph·∫ßn th∆∞·ªüng l√™n rank
  await updateBalance(userId, rankInfo.rewards);

  // Th√¥ng b√°o
  const message = `üèÜ THƒÇNG H·∫†NG PVP üèÜ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Ch√∫c m·ª´ng ${userName} ƒë√£ thƒÉng h·∫°ng!

${oldRank} ‚û°Ô∏è ${rankInfo.icon} ${newRank}

üí∞ Ph·∫ßn th∆∞·ªüng: $${rankInfo.rewards.toLocaleString()}

üí™ Ti·∫øp t·ª•c chi·∫øn ƒë·∫•u ƒë·ªÉ ƒë·∫°t h·∫°ng cao h∆°n!`;

  api.sendMessage(message, threadID);
  api.sendMessage(`üèÜ Ch√∫c m·ª´ng! B·∫°n ƒë√£ thƒÉng h·∫°ng l√™n ${rankInfo.icon} ${newRank} v√† nh·∫≠n ƒë∆∞·ª£c $${rankInfo.rewards.toLocaleString()}!`, userId);
}

function getCurrentSeasonInfo() {
  const now = Date.now();
  const season = PVP_SEASONS.current;

  if (now < season.startDate) {
    return `üîú M√πa gi·∫£i ${season.name} s·∫Øp b·∫Øt ƒë·∫ßu!
‚è≥ C√≤n ${Math.ceil((season.startDate - now) / (1000 * 60 * 60 * 24))} ng√†y n·ªØa`;
  }

  if (now > season.endDate) {
    return `üèÅ M√πa gi·∫£i ${season.name} ƒë√£ k·∫øt th√∫c!
üîú M√πa gi·∫£i m·ªõi s·∫Ω b·∫Øt ƒë·∫ßu v√†o ${new Date(PVP_SEASONS.next.startDate).toLocaleDateString()}`;
  }

  return `üèÜ ${season.name}
‚è≥ K·∫øt th√∫c trong: ${Math.ceil((season.endDate - now) / (1000 * 60 * 60 * 24))} ng√†y
üéÅ Ph·∫ßn th∆∞·ªüng m√πa gi·∫£i s·∫Ω ƒë∆∞·ª£c ph√°t khi k·∫øt th√∫c`;
}

async function showPvPRanking(api, threadID, messageID) {
  const gachaData = loadGachaData();
  const players = [];

  const userDataPath = path.join(__dirname, "../events/cache/rankData.json");
  let userData = {};
  try {
    userData = JSON.parse(fs.readFileSync(userDataPath));
  } catch (error) {
    console.error("Error reading userData:", error);
  }

  // Thu th·∫≠p d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
  for (const [userId, data] of Object.entries(gachaData)) {
    if (!data.pvpStats) continue;

    const wins = data.pvpStats.wins || 0;
    const losses = data.pvpStats.losses || 0;
    const rankInfo = calculatePvPRank(wins);
    const userName = userData[userId]?.name || `Player_${userId.slice(-4)}`;

    players.push({
      userId,
      name: userName,
      wins,
      losses,
      winRate: wins + losses > 0 ? (wins / (wins + losses) * 100).toFixed(1) : "0.0",
      rank: rankInfo.rank,
      icon: rankInfo.icon
    });
  }

  // S·∫Øp x·∫øp theo s·ªë win
  players.sort((a, b) => b.wins - a.wins);

  // Gi·ªõi h·∫°n top 10
  const topPlayers = players.slice(0, 10);

  let message = `üèÜ B·∫¢NG X·∫æP H·∫†NG PVP M√ôA ${PVP_SEASONS.current.id} üèÜ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${getCurrentSeasonInfo()}

`;

  // Hi·ªÉn th·ªã top 10
  topPlayers.forEach((player, index) => {
    const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
    message += `${medal} ${player.icon} ${player.name}
   üéÆ Win: ${player.wins} | Lose: ${player.losses} | T·ªâ l·ªá: ${player.winRate}%
   üèÖ Rank: ${player.rank}
   
`;
  });

  message += `
üí° Xem th·ª© h·∫°ng c·ªßa b·∫°n: .gacha stats
üìä Xem ph·∫ßn th∆∞·ªüng m√πa gi·∫£i: .gacha season`;

  return api.sendMessage(message, threadID, messageID);
}
function endPvPSeason() {
  const gachaData = loadGachaData();
  const currentSeason = PVP_SEASONS.current;

  // T·∫°o b·∫£n sao l∆∞u tr∆∞·ªõc khi k·∫øt th√∫c m√πa
  createBackup("season_end");

  // Thu th·∫≠p ng∆∞·ªùi ch∆°i v√† ph√°t th∆∞·ªüng
  for (const [userId, data] of Object.entries(gachaData)) {
    if (!data.pvpStats || !data.pvpStats.seasonWins) continue;

    const rankInfo = calculatePvPRank(data.pvpStats.wins || 0);
    const rewards = currentSeason.rewards[rankInfo.rank];

    if (rewards) {
      // Th√™m ti·ªÅn th∆∞·ªüng
      updateBalance(userId, rewards.gold);

      // Th√™m v·∫≠t ph·∫©m
      if (rewards.items && rewards.items.length > 0) {
        rewards.items.forEach(itemType => {
          let itemId;
          if (itemType === "UNIVERSAL_STELLA") {
            itemId = createStellaFortuna(null, true);
          } else if (itemType.startsWith("STONE_")) {
            const stoneType = itemType.replace("STONE_", "");
            itemId = createStone(stoneType);
          } else if (itemType.startsWith("EXP_")) {
            const expItemName = itemType.replace("EXP_", "").replace(/_/g, " ");
            itemId = createExpItem(expItemName);
          }

          if (itemId) {
            data.inventory.push(itemId);
          }
        });
      }

      // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi ch∆°i
      api.sendMessage(
        `üèÜ PH·∫¶N TH∆Ø·ªûNG M√ôA GI·∫¢I PVP ${currentSeason.id} üèÜ
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        
        Ch√∫c m·ª´ng! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng cho m√πa gi·∫£i ${currentSeason.name}!
        
        üèÖ H·∫°ng ƒë·∫°t ƒë∆∞·ª£c: ${rankInfo.icon} ${rankInfo.rank}
        üéÆ S·ªë tr·∫≠n th·∫Øng: ${data.pvpStats.seasonWins}
        
        üéÅ Ph·∫ßn th∆∞·ªüng:
        üí∞ $${rewards.gold.toLocaleString()}
        ${rewards.items && rewards.items.length > 0 ?
          `üì¶ V·∫≠t ph·∫©m: ${rewards.items.map(i => i.replace(/^(STONE_|EXP_|UNIVERSAL_)/, "").replace(/_/g, " ")).join(", ")}` :
          ""}
        
        ‚è∞ M√πa gi·∫£i m·ªõi s·∫Ω b·∫Øt ƒë·∫ßu v√†o: ${new Date(PVP_SEASONS.next.startDate).toLocaleDateString()}
        `,
        userId
      );
    }

    // Reset th·ªëng k√™ m√πa gi·∫£i
    data.pvpStats.seasonWins = 0;
  }

  // L∆∞u l·ªãch s·ª≠ m√πa gi·∫£i
  PVP_SEASONS.history.push({ ...currentSeason });

  // C·∫≠p nh·∫≠t m√πa gi·∫£i m·ªõi
  PVP_SEASONS.current = { ...PVP_SEASONS.next };

  // T·∫°o th√¥ng tin cho m√πa ti·∫øp theo
  const nextSeasonId = PVP_SEASONS.current.id + 1;
  const nextSeasonStartDate = new Date(PVP_SEASONS.current.endDate);
  const nextSeasonEndDate = new Date(nextSeasonStartDate);
  nextSeasonEndDate.setMonth(nextSeasonEndDate.getMonth() + 3);

  PVP_SEASONS.next = {
    id: nextSeasonId,
    name: `Season ${nextSeasonId}: ${getSeasonName(nextSeasonId)}`,
    startDate: nextSeasonStartDate.getTime(),
    endDate: nextSeasonEndDate.getTime()
  };

  // L∆∞u d·ªØ li·ªáu m·ªõi
  saveGachaData(gachaData);

  console.log(`ƒê√£ k·∫øt th√∫c m√πa gi·∫£i PVP ${currentSeason.id} v√† ph√°t th∆∞·ªüng cho ng∆∞·ªùi ch∆°i`);
}

// H√†m ƒë·ªÉ l·∫•y t√™n m√πa gi·∫£i
function getSeasonName(id) {
  const seasonNames = [
    "Phong Kh·ªüi",
    "L√¥i V≈©",
    "H·ªèa Di·ªÖm",
    "Th·ªßy Tri·ªÅu",
    "ƒê·ªãa Ch·∫•n",
    "BƒÉng Gi√°",
    "Th·∫£o Nguy√™n",
    "Tinh Kh√¥ng"
  ];

  return seasonNames[(id - 1) % seasonNames.length];
}

// Th√™m interval ki·ªÉm tra k·∫øt th√∫c m√πa gi·∫£i (m·ªói gi·ªù)
setInterval(() => {
  const now = Date.now();
  if (now > PVP_SEASONS.current.endDate) {
    endPvPSeason();
  }
}, 60 * 60 * 1000);
// H√†m ƒë·ªÉ m·ªü kh√≥a constellation cho nh√¢n v·∫≠t
function unlockConstellation(charId, stellaId) {
  const char = CHARACTER_IDS[charId];
  const stella = CHARACTER_IDS[stellaId];

  if (!char || !stella) {
    return { success: false, reason: "invalid_items" };
  }

  if (stella.type !== "constellation_item") {
    return { success: false, reason: "not_constellation_item" };
  }

  // Ki·ªÉm tra kh·∫£ nƒÉng t∆∞∆°ng th√≠ch
  if (!stella.isUniversal && stella.characterName !== char.name) {
    return { success: false, reason: "incompatible_stella" };
  }

  // Ki·ªÉm tra constellation hi·ªán t·∫°i
  const currentCLevel = char.constellation || 0;
  if (currentCLevel >= 6) {
    return { success: false, reason: "max_constellation" };
  }

  const nextCLevel = currentCLevel + 1;
  char.constellation = nextCLevel;

  // √Åp d·ª•ng hi·ªáu ·ª©ng constellation
  const constellationData = CHARACTER_CONSTELLATIONS[char.name];
  if (constellationData && constellationData[currentCLevel]) {
    const constellationEffect = constellationData[currentCLevel];

    // TƒÉng s·ª©c m·∫°nh theo constellation
    char.stats = char.stats || { atk: 100, def: 100, hp: 500 };
    const boost = 1 + constellationEffect.powerBoost;

    char.stats.atk = Math.floor(char.stats.atk * boost);
    char.stats.def = Math.floor(char.stats.def * boost);
    char.stats.hp = Math.floor(char.stats.hp * boost);

    // Th√™m hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
    char.specialEffects = char.specialEffects || [];
    char.specialEffects.push(constellationEffect.effect);

    // TƒÉng gi√° tr·ªã nh√¢n v·∫≠t
    char.value = Math.floor(char.value * (1 + constellationEffect.powerBoost));
  }

  saveCharacterDatabase();

  return {
    success: true,
    character: char.name,
    newConstellation: nextCLevel,
    effect:
      constellationData?.[currentCLevel]?.description ||
      "TƒÉng s·ª©c m·∫°nh t·ªïng th·ªÉ",
  };
}

const ELEMENTAL_STONES = {
  PYRO: {
    name: "AgnidusAgate",
    element: "Pyro",
    description: "Ascension stone for Pyro characters",
    emoji: "üî•",
    image: "https://imgur.com/J0J2lfG.png",
    value: 25000,
  },
  HYDRO: {
    name: "VarunadaLazurite",
    element: "Hydro",
    description: "Ascension stone for Hydro characters",
    emoji: "üíß",
    image: "https://imgur.com/Wr8Udzy.png",
    value: 25000,
  },
  ELECTRO: {
    name: "VajradaAmethyst",
    element: "Electro",
    description: "Ascension stone for Electro characters",
    emoji: "‚ö°",
    image: "https://imgur.com/iJr7tkQ.png",
    value: 25000,
  },
  CRYO: {
    name: "ShivadaJade",
    element: "Cryo",
    description: "Ascension stone for Cryo characters",
    emoji: "‚ùÑÔ∏è",
    image: "https://imgur.com/k7PooZ5.png",
    value: 25000,
  },
  DENDRO: {
    name: "NagadusEmerald",
    element: "Dendro",
    description: "Ascension stone for Dendro characters",
    emoji: "üåø",
    image: "https://imgur.com/YqWMMHO.png",
    value: 25000,
  },
  GEO: {
    name: "PrithivaTopaz",
    element: "Geo",
    description: "Ascension stone for Geo characters",
    emoji: "ü™®",
    image: "https://imgur.com/LCLoXOH.png",
    value: 25000,
  },
  ANEMO: {
    name: "VayudaTurquoise",
    element: "Anemo",
    description: "Ascension stone for Anemo characters",
    emoji: "üå™Ô∏è",
    image: "https://imgur.com/puantrR.png",
    value: 25000,
  },
  UNIVERSAL: {
    name: "BrilliantDiamond",
    element: "Universal",
    description: "Universal ascension stone for any character",
    emoji: "üíé",
    image: "https://imgur.com/oy8zBkt.png",
    value: 500000,
  },
};
const EXP_ITEMS = {
  "Heros Wit": {
    type: "EXP",
    expValue: 10000,
    description:
      "A detailed account of battles past Grants a large amount of EXP",
    image: "https://imgur.com/w9WpGB7.png",
    rarity: "4",
    value: 5000,
  },
  "Adventurers Experience": {
    type: "EXP",
    expValue: 2000,
    description:
      "A record of adventures and discoveries Grants a moderate amount of EXP",
    image: "https://imgur.com/LFkAr11.png",
    rarity: "3",
    value: 1500,
  },
  "Wanderers Advice": {
    type: "EXP",
    expValue: 500,
    description: "Simple advice from a traveler Grants a small amount of EXP",
    image: "https://imgur.com/GSSFx9L.png",
    rarity: "2",
    value: 500,
  },
  "Legendary Grimoire": {
    type: "EXP",
    expValue: 50000,
    description:
      "Ancient knowledge from legendary heroes Grants massive amounts of EXP",
    image: "https://imgur.com/NNSmgia.png",
    rarity: "5",
    value: 25000,
  },
  "Mythical Scroll": {
    type: "EXP",
    expValue: 100000,
    description:
      "Mythical teachings from the gods Grants enormous amounts of EXP",
    image: "https://imgur.com/JWVLXxj.png",
    rarity: "5",
    value: 50000,
  },
};
function calculateExpForLevel(level) {
  const baseExpTable = {
    1: 0,
    2: 1500,
    3: 4000,
    4: 8000,
    5: 15000,
    6: 25000,
    7: 40000,
    8: 60000,
    9: 85000,
    10: 120000,
    11: 170000,
    12: 250000,
  };
  if (baseExpTable[level] !== undefined) {
    return baseExpTable[level];
  }

  // ƒêi·ªÅu ch·ªânh h·ªá s·ªë tƒÉng cho c√°c level cao
  // Gi·∫£m base t·ª´ 250000 -> 175000 v√† gi·∫£m h·ªá s·ªë m≈©
  if (level <= 50) {
    return Math.floor(175000 * Math.pow(1.12, level - 12)); // T·ª´ 1.15 -> 1.12
  } else if (level <= 100) {
    return Math.floor(175000 * Math.pow(1.12, 38) * Math.pow(1.15, level - 50)); // T·ª´ 1.18 -> 1.15
  } else {
    return Math.floor(
      175000 *
      Math.pow(1.12, 38) *
      Math.pow(1.15, 50) *
      Math.pow(1.17, level - 100)
    ); // T·ª´ 1.2 -> 1.17
  }
}

// T·∫°o b·∫£ng EXP m·ªõi
const EXP_PER_LEVEL = {};
for (let i = 1; i <= 200; i++) {
  EXP_PER_LEVEL[i] = calculateExpForLevel(i);
}

const ELEMENTAL_FRAGMENTS = {
  PYRO: {
    name: "AgateFragment",
    element: "Pyro",
    description: "Pyro evolution fragment",
    emoji: "üî•",
    image: "https://imgur.com/Ec9w0A3.png",
    value: 2500,
    isFragment: true,
  },
  HYDRO: {
    name: "LazuriteFragment",
    element: "Hydro",
    description: "Hydro evolution fragment",
    emoji: "üíß",
    image: "https://imgur.com/xUQZRMt.png",
    value: 2500,
    isFragment: true,
  },
  ELECTRO: {
    name: "AmethystFragment",
    element: "Electro",
    description: "Electro evolution fragment",
    emoji: "‚ö°",
    image: "https://imgur.com/JxRxK1i.png",
    value: 2500,
    isFragment: true,
  },
  CRYO: {
    name: "JadeFragment",
    element: "Cryo",
    description: "Cryo evolution fragment",
    emoji: "‚ùÑÔ∏è",
    image: "https://imgur.com/tU6KMBs.png",
    value: 2500,
    isFragment: true,
  },
  DENDRO: {
    name: "EmeraldFragment",
    element: "Dendro",
    description: "Dendro evolution fragment",
    emoji: "üåø",
    image: "https://imgur.com/uVp1eNU.png",
    value: 2500,
    isFragment: true,
  },
  GEO: {
    name: "TopazFragment",
    element: "Geo",
    description: "Geo evolution fragment",
    emoji: "ü™®",
    image: "https://imgur.com/vAfAFli.png",
    value: 2500,
    isFragment: true,
  },
  ANEMO: {
    name: "TurquoiseFragment",
    element: "Anemo",
    description: "Anemo evolution fragment",
    emoji: "üå™Ô∏è",
    image: "https://imgur.com/tl1G3g6.png",
    value: 2500,
    isFragment: true,
  },
  UNIVERSAL: {
    name: "DiamondFragment",
    element: "Universal",
    description: "Universal evolution fragment",
    emoji: "üíé",
    image: "https://imgur.com/8BQY2FS.png",
    value: 50000,
    isFragment: true,
  },
};

let CHARACTER_IDS = {};
let nextCharId = 1;

const activeAuctions = new Map();
const activeTrades = new Map();

const CHARACTER_LEVELS = {
  3: {
    baseStats: { atk: 1.0, def: 1.0, hp: 1.0 },
    maxLevel: 150, // TƒÉng gi·ªõi h·∫°n cho 3‚òÖ
  },
  4: {
    baseStats: { atk: 1.2, def: 1.2, hp: 1.2 },
    maxLevel: 180, // TƒÉng gi·ªõi h·∫°n cho 4‚òÖ
  },
  5: {
    baseStats: { atk: 1.5, def: 1.5, hp: 1.5 },
    maxLevel: 200, // TƒÉng gi·ªõi h·∫°n cho 5‚òÖ
  },
};
function createExpItem(itemName) {
  const expItemId = `EXP_${itemName
    .replace(/\s+/g, "_")
    .toUpperCase()}_${Math.floor(100000000 + Math.random() * 900000000)}`;

  CHARACTER_IDS[expItemId] = {
    type: "exp_item",
    name: itemName,
    ...EXP_ITEMS[itemName],
    obtainedAt: Date.now(),
  };

  saveCharacterDatabase();
  return expItemId;
}
function applyExpItem(charId, expItemId) {
  const char = CHARACTER_IDS[charId];
  const expItem = CHARACTER_IDS[expItemId];

  if (!char || !expItem || !expItem.type === "exp_item") {
    return { success: false, reason: "invalid_items" };
  }

  const currentLevel = char.level || 1;
  const currentExp = char.exp || 0;

  // X√°c ƒë·ªãnh ƒë·ªô hi·∫øm c∆° b·∫£n
  let baseRarity = CHARACTER_RATINGS.FIVE_STAR.includes(char.name)
    ? 5
    : CHARACTER_RATINGS.FOUR_STAR.includes(char.name)
      ? 4
      : 3;

  // T√≠nh maxLevel d·ª±a tr√™n ƒë·ªô hi·∫øm v√† ti·∫øn h√≥a
  const maxLevel = char.starLevel
    ? Math.min(CHARACTER_LEVELS[baseRarity].maxLevel, char.starLevel * 20)
    : CHARACTER_LEVELS[baseRarity].maxLevel * 0.6;

  if (currentLevel >= maxLevel) {
    return { success: false, reason: "max_level_reached" };
  }

  const newExp = currentExp + expItem.expValue;

  // Thu·∫≠t to√°n tƒÉng level
  let newLevel = currentLevel;
  let remainingExp = newExp;

  while (
    newLevel < maxLevel &&
    EXP_PER_LEVEL[newLevel + 1] !== undefined &&
    remainingExp >= EXP_PER_LEVEL[newLevel + 1]
  ) {
    remainingExp -= EXP_PER_LEVEL[newLevel + 1];
    newLevel++;
  }

  if (newLevel >= maxLevel) {
    newLevel = maxLevel;
    remainingExp = 0;
  }

  // C√¢n b·∫±ng l·∫°i c√°ch tƒÉng ch·ªâ s·ªë
  const levelDifference = newLevel - currentLevel;
  if (levelDifference > 0) {
    // T√¨m ch·ªâ s·ªë c∆° b·∫£n c·ªßa nh√¢n v·∫≠t d·ª±a tr√™n ƒë·ªô hi·∫øm g·ªëc
    const baseStatsByRarity = {
      3: { atk: 100, def: 100, hp: 500 },
      4: { atk: 300, def: 300, hp: 1000 },
      5: { atk: 500, def: 500, hp: 2000 }
    };

    // L·∫•y ch·ªâ s·ªë c∆° b·∫£n ban ƒë·∫ßu n·∫øu c√≥, ho·∫∑c d√πng ch·ªâ s·ªë m·∫∑c ƒë·ªãnh theo ƒë·ªô hi·∫øm
    const originalBaseStats = baseStatsByRarity[baseRarity];

    // THAY ƒê·ªîI CH√çNH: D√πng c√¥ng th·ª©c tuy·∫øn t√≠nh thay v√¨ h√†m m≈© ƒë·ªÉ tƒÉng ch·ªâ s·ªë
    // C·∫•p ƒë·ªô c√†ng cao, t·ªëc ƒë·ªô tƒÉng c√†ng ch·∫≠m l·∫°i ƒë·ªÉ c√¢n b·∫±ng
    const growthFactor = Math.min(2.0, 1 + (newLevel - 1) * 0.03);

    // √Åp d·ª•ng hi·ªáu ch·ªânh cho ng√¥i sao ti·∫øn h√≥a
    const starBonus = char.starLevel ? Math.min(1.5, 1 + (char.starLevel - baseRarity) * 0.15) : 1;

    // √Åp d·ª•ng gi·ªõi h·∫°n t·ªëi ƒëa cho c√°c ch·ªâ s·ªë
    const maxStatCaps = {
      atk: baseRarity * 2000 + (char.starLevel || 0) * 1000,
      def: baseRarity * 1500 + (char.starLevel || 0) * 800,
      hp: baseRarity * 10000 + (char.starLevel || 0) * 5000
    };

    char.stats = {
      atk: Math.min(maxStatCaps.atk, Math.floor(originalBaseStats.atk * growthFactor * starBonus * (1 + newLevel * 0.05))),
      def: Math.min(maxStatCaps.def, Math.floor(originalBaseStats.def * growthFactor * starBonus * (1 + newLevel * 0.04))),
      hp: Math.min(maxStatCaps.hp, Math.floor(originalBaseStats.hp * growthFactor * starBonus * (1 + newLevel * 0.06)))
    };

    char.value = Math.floor(
      (char.value || 1000) * (1 + levelDifference * 0.05)
    );

    console.log(`[BALANCE] Character ${char.name} leveled up: ${currentLevel} -> ${newLevel}, Stats: ATK=${char.stats.atk}, DEF=${char.stats.def}, HP=${char.stats.hp}`);
  }

  char.level = newLevel;
  char.exp = remainingExp;

  saveCharacterDatabase();

  return {
    success: true,
    oldLevel: currentLevel,
    newLevel: newLevel,
    expGained: expItem.expValue,
    remainingExpForNextLevel:
      newLevel < maxLevel ? EXP_PER_LEVEL[newLevel + 1] - remainingExp : 0,
  };
}
function rebalanceCharacter(char) {
  if (!char || !char.stats || !char.level) return false;

  const baseRarity = CHARACTER_RATINGS.FIVE_STAR.includes(char.name) ? 5 :
    CHARACTER_RATINGS.FOUR_STAR.includes(char.name) ? 4 : 3;

  const maxHP = baseRarity * 10000 + (char.starLevel || 0) * 5000;
  const maxATK = baseRarity * 2000 + (char.starLevel || 0) * 1000;
  const maxDEF = baseRarity * 1500 + (char.starLevel || 0) * 800;

  if (char.stats.hp > maxHP || char.stats.atk > maxATK || char.stats.def > maxDEF) {
    const originalStats = { ...char.stats };

    char.stats.hp = Math.min(char.stats.hp, maxHP);
    char.stats.atk = Math.min(char.stats.atk, maxATK);
    char.stats.def = Math.min(char.stats.def, maxDEF);

    console.log(`[REBALANCE] Character ${char.name} stats adjusted: ` +
      `HP: ${originalStats.hp} -> ${char.stats.hp}, ` +
      `ATK: ${originalStats.atk} -> ${char.stats.atk}, ` +
      `DEF: ${originalStats.def} -> ${char.stats.def}`);

    return true;
  }

  return false;
}
function calculateRequiredStones(currentStar, rarity) {
  const baseRequirement = Math.max(1, currentStar - rarity + 1);
  const premiumMultiplier = rarity === 5 ? 1.5 : 1;

  return Math.ceil(baseRequirement * premiumMultiplier);
}
function generateStoneId(stoneType) {
  let stoneId;
  do {
    const randomId = Math.floor(100000000 + Math.random() * 900000000);
    stoneId = `STONE_${stoneType}_${randomId}`;
  } while (CHARACTER_IDS[stoneId]);
  return stoneId;
}
function createStone(stoneType) {
  const stoneId = generateStoneId(stoneType);
  CHARACTER_IDS[stoneId] = {
    type: "stone",
    stoneType: stoneType,
    name: ELEMENTAL_STONES[stoneType].name,
    element: ELEMENTAL_STONES[stoneType].element,
    emoji: ELEMENTAL_STONES[stoneType].emoji,
    description: ELEMENTAL_STONES[stoneType].description,
    image: ELEMENTAL_STONES[stoneType].image,
    obtainedAt: Date.now(),
    value: ELEMENTAL_STONES[stoneType].value,
  };
  saveCharacterDatabase();
  return stoneId;
}

function generateCharacterId(characterName) {
  let charId;
  do {
    const randomId = Math.floor(100000000 + Math.random() * 900000000);
    charId = `CHAR_${randomId}`;
  } while (CHARACTER_IDS[charId]);
  return charId;
}

function calculateCharacterPower(charId) {
  const char = CHARACTER_IDS[charId];
  if (!char) return 0;

  // L·∫•y c√°c ch·ªâ s·ªë c∆° b·∫£n
  const stats = char.stats || { atk: 100, def: 100, hp: 500 };
  const level = char.level || 1;
  const stars = char.starLevel ||
    (CHARACTER_RATINGS.FIVE_STAR.includes(char.name) ? 5 :
      CHARACTER_RATINGS.FOUR_STAR.includes(char.name) ? 4 : 3);

  // H·ªá s·ªë c√¢n b·∫±ng m·ªõi cho c√°c ch·ªâ s·ªë
  // Gi·∫£m t·∫ßm quan tr·ªçng c·ªßa HP, tƒÉng t·∫ßm quan tr·ªçng c·ªßa ATK/DEF
  let power = (stats.atk * 2.0 + stats.def * 1.0 + Math.min(stats.hp, 50000) / 20) * Math.pow(level / 10, 0.4);

  // Th√™m h·ªá s·ªë sao
  power *= 1 + (stars - 3) * 0.15;

  // Nh√¢n v·∫≠t premium m·∫°nh h∆°n m·ªôt ch√∫t
  if (char.constellation) {
    // TƒÉng tuy·∫øn t√≠nh theo constellation thay v√¨ l≈©y th·ª´a
    power *= 1 + (char.constellation * 0.1);
  }

  // Nh√¢n v·∫≠t premium m·∫°nh h∆°n m·ªôt ch√∫t, nh∆∞ng kh√¥ng qu√° m·∫°nh
  if (PREMIUM_FIVE_STARS.includes(char.name)) {
    power *= 1.15; // Gi·∫£m t·ª´ 1.2 xu·ªëng 1.15
  }

  return Math.floor(power);
}

// H√†m t√≠nh s·ª©c m·∫°nh c·ªßa ƒë·ªôi
function calculateTeamPower(teamIds) {
  let totalPower = 0;
  for (const charId of teamIds) {
    totalPower += calculateCharacterPower(charId);
  }
  return totalPower;
}

function applyElementalAdvantage(attackerTeam, defenderTeam) {
  // Kh·ªüi t·∫°o ma tr·∫≠n l·ª£i th·∫ø nguy√™n t·ªë
  const elementalMatchups = {};

  // L·∫∑p qua t·ª´ng nh√¢n v·∫≠t trong ƒë·ªôi t·∫•n c√¥ng
  for (const attackerId of attackerTeam) {
    const attacker = CHARACTER_IDS[attackerId];
    if (!attacker) continue;

    const attackerElement = CUSTOM_CHARACTER_DATA[attacker.name]?.element;
    if (!attackerElement) continue;

    // L·∫∑p qua t·ª´ng nh√¢n v·∫≠t trong ƒë·ªôi ph√≤ng th·ªß
    for (const defenderId of defenderTeam) {
      const defender = CHARACTER_IDS[defenderId];
      if (!defender) continue;

      const defenderElement = CUSTOM_CHARACTER_DATA[defender.name]?.element;
      if (!defenderElement) continue;

      // Ghi nh·∫≠n l·ª£i th·∫ø nguy√™n t·ªë c·ª• th·ªÉ t·ª´ng c·∫∑p
      const matchupKey = `${attackerElement}-${defenderElement}`;
      if (!elementalMatchups[matchupKey]) {
        elementalMatchups[matchupKey] = 0;
      }

      // TƒÉng ƒëi·ªÉm n·∫øu c√≥ l·ª£i th·∫ø
      if (ELEMENT_ADVANTAGES[attackerElement]?.includes(defenderElement)) {
        elementalMatchups[matchupKey]++;
      }
    }
  }

  // T√≠nh to√°n t·ªïng l·ª£i th·∫ø nguy√™n t·ªë (c√¢n b·∫±ng h∆°n)
  let advantagePoints = 0;
  Object.values(elementalMatchups).forEach(points => {
    advantagePoints += points;
  });

  // Chuy·ªÉn ƒë·ªïi th√†nh h·ªá s·ªë nh√¢n (c√¢n b·∫±ng h∆°n, gi·∫£m t√°c ƒë·ªông)
  // T·ªëi ƒëa 25% boost t·ª´ l·ª£i th·∫ø nguy√™n t·ªë
  return 1 + Math.min(0.25, advantagePoints * 0.05);
}
function createPvpChallenge(challengerId, targetId, challengerTeam) {
  const challengeId = `PVP_${challengerId}_${targetId}_${Date.now()}`;

  activePvpChallenges.set(challengeId, {
    challenger: challengerId,
    target: targetId,
    challengerTeam: challengerTeam,
    timestamp: Date.now(),
    expiry: Date.now() + PVP_CHALLENGE_DURATION,
  });

  return challengeId;
}

function analyzeTeamComposition(teamIds) {
  const elementCounts = {};
  const roleTypes = {
    dps: 0,
    support: 0,
    healer: 0,
    tank: 0
  };

  // C√°c nh√¢n v·∫≠t theo vai tr√≤
  const characterRoles = {
    // DPS
    "Hutao": "dps",
    "Ganyu": "dps",
    "Eula": "dps",
    "Ayaka": "dps",
    "Raiden Shogun": "dps",
    "Yelan": "dps",
    "Arlecchino": "dps",
    "Keqing": "dps",
    "Xiao": "dps",
    "Wanderer": "dps",
    "Klee": "dps",
    "Cyno": "dps",
    "Diluc": "dps",
    "Jingliu": "dps",
    "Acheron": "dps",
    "Tighnari": "dps",

    // Support
    "Yae Miko": "support",
    "Albedo": "support",
    "Zhongli": "support",
    "Venti": "support",
    "Nahida": "support",
    "Mona": "support",
    "Furina": "support",
    "Bennett": "support",
    "Xingqiu": "support",
    "Fischl": "support",
    "Yaoyao": "support",
    "RuanMei": "support",
    "Tingyun": "support",
    "FuXuan": "support",
    "Aglaea": "support",

    // Healer
    "Jean": "healer",
    "Qiqi": "healer",
    "Baizhu": "healer",
    "Barbara": "healer",
    "Bailu": "healer",
    "Kokomi": "healer",
    "Yaoyao": "healer",

    // Tank
    "Zhongli": "tank",
    "Noelle": "tank",
    "Diona": "tank",
    "Thoma": "tank",
    "Layla": "tank",
    "Beidou": "tank"
  };

  for (const charId of teamIds) {
    const char = CHARACTER_IDS[charId];
    if (!char) continue;

    // ƒê·∫øm nguy√™n t·ªë
    const charInfo = CUSTOM_CHARACTER_DATA[char.name] || {};
    const element = charInfo.element || "Unknown";
    elementCounts[element] = (elementCounts[element] || 0) + 1;

    // ƒê·∫øm vai tr√≤
    const role = characterRoles[char.name] || "dps"; // M·∫∑c ƒë·ªãnh l√† DPS n·∫øu kh√¥ng x√°c ƒë·ªãnh
    roleTypes[role]++;
  }

  // ƒê√°nh gi√° s·ª± c√¢n b·∫±ng c·ªßa ƒë·ªôi h√¨nh
  let teamAnalysis = "";

  // Ki·ªÉm tra s·ª± ƒëa d·∫°ng nguy√™n t·ªë (ƒëi·ªÅu ch·ªânh cho ƒë·ªôi 5 ng∆∞·ªùi)
  const uniqueElements = Object.keys(elementCounts).length;
  if (uniqueElements >= 4) {
    teamAnalysis += "‚úÖ ƒê·ªôi h√¨nh ƒëa d·∫°ng nguy√™n t·ªë r·∫•t t·ªët\n";
  } else if (uniqueElements >= 3) {
    teamAnalysis += "‚úÖ ƒê·ªôi h√¨nh ƒëa d·∫°ng nguy√™n t·ªë\n";
  } else {
    teamAnalysis += "‚ö†Ô∏è Thi·∫øu s·ª± ƒëa d·∫°ng nguy√™n t·ªë\n";
  }

  // Ki·ªÉm tra t√≠nh c√¢n b·∫±ng vai tr√≤ (ƒëi·ªÅu ch·ªânh cho ƒë·ªôi 5 ng∆∞·ªùi)
  if (roleTypes.dps >= 2 && roleTypes.support >= 1 && (roleTypes.healer >= 1 || roleTypes.tank >= 1)) {
    teamAnalysis += "‚úÖ ƒê·ªôi h√¨nh c√¢n b·∫±ng vai tr√≤ r·∫•t t·ªët\n";
  } else if (roleTypes.dps >= 1 && (roleTypes.support >= 1 || roleTypes.healer >= 1)) {
    teamAnalysis += "‚úÖ ƒê·ªôi h√¨nh c√¢n b·∫±ng vai tr√≤ c∆° b·∫£n\n";
  } else {
    teamAnalysis += "‚ö†Ô∏è ƒê·ªôi h√¨nh thi·∫øu c√¢n b·∫±ng v·ªÅ vai tr√≤\n";
  }

  // ƒê·ªÅ xu·∫•t c·∫£i thi·ªán
  let suggestions = "";
  if (!roleTypes.healer && teamIds.length < 5) {
    suggestions += "‚Ä¢ Th√™m nh√¢n v·∫≠t c√≥ kh·∫£ nƒÉng h·ªìi m√°u\n";
  }
  if (roleTypes.dps < 2 && teamIds.length < 5) {
    suggestions += "‚Ä¢ Th√™m nh√¢n v·∫≠t DPS ƒë·ªÉ tƒÉng s√°t th∆∞∆°ng\n";
  }
  if (!roleTypes.support && teamIds.length < 5) {
    suggestions += "‚Ä¢ Th√™m nh√¢n v·∫≠t h·ªó tr·ª£\n";
  }
  if (!roleTypes.tank && teamIds.length < 5) {
    suggestions += "‚Ä¢ Th√™m nh√¢n v·∫≠t tank ƒë·ªÉ tƒÉng kh·∫£ nƒÉng s·ªëng s√≥t\n";
  }

  // Ki·ªÉm tra c·ªông h∆∞·ªüng nguy√™n t·ªë
  const resonances = [];
  if (elementCounts["Pyro"] >= 2) resonances.push("üî• C·ªông h∆∞·ªüng H·ªèa: TƒÉng ATK 25%");
  if (elementCounts["Cryo"] >= 2) resonances.push("‚ùÑÔ∏è C·ªông h∆∞·ªüng BƒÉng: TƒÉng Crit Rate 15%");
  if (elementCounts["Electro"] >= 2) resonances.push("‚ö° C·ªông h∆∞·ªüng L√¥i: TƒÉng t√≠ch l≈©y nƒÉng l∆∞·ª£ng");
  if (elementCounts["Hydro"] >= 2) resonances.push("üíß C·ªông h∆∞·ªüng Th·ªßy: TƒÉng h·ªìi m√°u 30%");
  if (elementCounts["Anemo"] >= 2) resonances.push("üå™Ô∏è C·ªông h∆∞·ªüng Phong: Gi·∫£m stamina, tƒÉng t·ªëc ƒë·ªô");
  if (elementCounts["Geo"] >= 2) resonances.push("ü™® C·ªông h∆∞·ªüng Nham: TƒÉng s·ª©c m·∫°nh khi√™n, tƒÉng DMG Geo");
  if (elementCounts["Dendro"] >= 2) resonances.push("üåø C·ªông h∆∞·ªüng Th·∫£o: TƒÉng Elemental Mastery");

  // ƒê√°nh gi√° ƒë·∫∑c bi·ªát cho ƒë·ªôi 5 ng∆∞·ªùi
  if (teamIds.length >= 4) {
    if (uniqueElements >= 4) {
      teamAnalysis += "‚ú® ƒê·ªôi h√¨nh ƒëa d·∫°ng nguy√™n t·ªë t·ªëi ∆∞u!\n";
    }
    if (resonances.length >= 2) {
      teamAnalysis += "‚ú® K·∫øt h·ª£p nhi·ªÅu c·ªông h∆∞·ªüng nguy√™n t·ªë!\n";
    }
    if (roleTypes.dps >= 2 && roleTypes.support >= 1 && roleTypes.healer >= 1) {
      teamAnalysis += "‚ú® ƒê·ªôi h√¨nh c√¢n b·∫±ng ho√†n h·∫£o!\n";
    }
  }

  return {
    elementCounts,
    roleTypes,
    analysis: teamAnalysis,
    suggestions: suggestions,
    resonances: resonances
  };
}
function isAdmin(userId) {
  return ADMIN_IDS.includes(userId);
}
async function executePvpBattle(api, threadID, messageID, challengeData, targetTeam) {
  const challenger = challengeData.challenger;
  const target = challengeData.target;
  const challengerTeam = challengeData.challengerTeam;

  const challengerPower = calculateTeamPower(challengerTeam);
  const targetPower = calculateTeamPower(targetTeam);

  const challengerAdvantage = applyElementalAdvantage(challengerTeam, targetTeam);
  const targetAdvantage = applyElementalAdvantage(targetTeam, challengerTeam);

  const finalChallengerPower = challengerPower * challengerAdvantage;
  const finalTargetPower = targetPower * targetAdvantage;

  const powerRatio = finalChallengerPower / (finalChallengerPower + finalTargetPower);
  let baseWinChance = powerRatio * 100;

  baseWinChance = Math.max(10, Math.min(90, baseWinChance));

  const randomFactor = Math.random() * 20 - 10;
  const adjustedWinChance = Math.max(5, Math.min(95, baseWinChance + randomFactor));

  const roll = Math.random() * 100;
  const challengerWins = roll < adjustedWinChance;

  const gachaData = loadGachaData();
  const winner = challengerWins ? challenger : target;
  const loser = challengerWins ? target : challenger;

  if (!gachaData[winner].pvpStats) {
    gachaData[winner].pvpStats = { wins: 0, losses: 0, lastBattle: 0, seasonWins: 0 };
  }

  const oldWins = gachaData[winner].pvpStats.wins || 0;
  const oldRankInfo = calculatePvPRank(oldWins);

  gachaData[winner].pvpStats.wins++;
  gachaData[winner].pvpStats.seasonWins = (gachaData[winner].pvpStats.seasonWins || 0) + 1;

  const newWins = gachaData[winner].pvpStats.wins;
  const newRankInfo = calculatePvPRank(newWins);

  if (newRankInfo.rank !== oldRankInfo.rank) {
    handleRankPromotion(api, winner, oldRankInfo.rank, newRankInfo.rank, threadID);
  }

  if (!gachaData[challenger].pvpStats) {
    gachaData[challenger].pvpStats = { wins: 0, losses: 0, lastBattle: 0, seasonWins: 0 };
  }

  if (!gachaData[target].pvpStats) {
    gachaData[target].pvpStats = { wins: 0, losses: 0, lastBattle: 0, seasonWins: 0 };
  }

  if (challengerWins) {
    gachaData[challenger].pvpStats.wins = (gachaData[challenger].pvpStats.wins || 0) + 1;
    gachaData[target].pvpStats.losses = (gachaData[target].pvpStats.losses || 0) + 1;

    let winReward = PVP_REWARD_WIN;
    let loseReward = PVP_REWARD_LOSE;

    if (finalChallengerPower < finalTargetPower) {
      const powerDiffFactor = finalTargetPower / finalChallengerPower;
      winReward = Math.floor(PVP_REWARD_WIN * Math.min(2, 1 + (powerDiffFactor - 1) * 0.5));
    }

    await updateBalance(challenger, winReward);
    await updateBalance(target, loseReward);
  } else {
    gachaData[challenger].pvpStats.losses = (gachaData[challenger].pvpStats.losses || 0) + 1;
    gachaData[target].pvpStats.wins = (gachaData[target].pvpStats.wins || 0) + 1;

    let winReward = PVP_REWARD_WIN;
    let loseReward = PVP_REWARD_LOSE;

    if (finalTargetPower < finalChallengerPower) {
      const powerDiffFactor = finalChallengerPower / finalTargetPower;
      winReward = Math.floor(PVP_REWARD_WIN * Math.min(2, 1 + (powerDiffFactor - 1) * 0.5));
    }

    await updateBalance(challenger, loseReward);
    await updateBalance(target, winReward);
  }

  gachaData[challenger].pvpStats.lastBattle = Date.now();
  gachaData[target].pvpStats.lastBattle = Date.now();
  saveGachaData(gachaData);
  if (!gachaData[challenger].pvpStats) {
    gachaData[challenger].pvpStats = { wins: 0, losses: 0, lastBattle: 0 };
  }
  if (!gachaData[target].pvpStats) {
    gachaData[target].pvpStats = { wins: 0, losses: 0, lastBattle: 0 };
  }

  if (challengerWins) {
    gachaData[challenger].pvpStats.wins++;
    gachaData[target].pvpStats.losses++;
    await updateBalance(challenger, PVP_REWARD_WIN);
    await updateBalance(target, PVP_REWARD_LOSE);
  } else {
    gachaData[challenger].pvpStats.losses++;
    gachaData[target].pvpStats.wins++;
    await updateBalance(challenger, PVP_REWARD_LOSE);
    await updateBalance(target, PVP_REWARD_WIN);
  }

  gachaData[challenger].pvpStats.lastBattle = Date.now();
  gachaData[target].pvpStats.lastBattle = Date.now();
  saveGachaData(gachaData);

  const userDataPath = path.join(__dirname, "../events/cache/rankData.json");
  let userData = {};
  try {
    userData = JSON.parse(fs.readFileSync(userDataPath));
  } catch (error) {
    console.error("Error reading userData:", error);
  }
  const challengerName = userData[challenger]?.name || "Ng∆∞·ªùi ch∆°i 1";
  const targetName = userData[target]?.name || "Ng∆∞·ªùi ch∆°i 2";

  const challengerTeamDetails = await Promise.all(
    challengerTeam.map(async (charId) => {
      const char = CHARACTER_IDS[charId];
      if (!char) return null;

      const baseRarity = CHARACTER_RATINGS.FIVE_STAR.includes(char.name)
        ? 5
        : CHARACTER_RATINGS.FOUR_STAR.includes(char.name)
          ? 4
          : 3;

      const charInfo = CUSTOM_CHARACTER_DATA[char.name] || {};
      const image = CUSTOM_CHARACTER_IMAGES[char.name];

      return {
        name: char.name,
        element: charInfo.element || "Unknown",
        level: char.level || 1,
        rarity: baseRarity,
        image: image,
        isPremium: PREMIUM_FIVE_STARS.includes(char.name),
        starLevel: char.starLevel,
        currentLevel: char.level,
      };
    })
  );

  const targetTeamDetails = await Promise.all(
    targetTeam.map(async (charId) => {
      const char = CHARACTER_IDS[charId];
      if (!char) return null;

      const baseRarity = CHARACTER_RATINGS.FIVE_STAR.includes(char.name)
        ? 5
        : CHARACTER_RATINGS.FOUR_STAR.includes(char.name)
          ? 4
          : 3;

      const charInfo = CUSTOM_CHARACTER_DATA[char.name] || {};
      const image = CUSTOM_CHARACTER_IMAGES[char.name];

      return {
        name: char.name,
        element: charInfo.element || "Unknown",
        level: char.level || 1,
        rarity: baseRarity,
        image: image,
        isPremium: PREMIUM_FIVE_STARS.includes(char.name),
        starLevel: char.starLevel,
        currentLevel: char.level,
      };
    })
  );
  try {
    const battleImage = await createPvPBattleImage({
      challenger,
      target,
      challengerName,
      targetName,
      challengerTeam: challengerTeamDetails.filter(Boolean),
      targetTeam: targetTeamDetails.filter(Boolean),
      challengerPower,
      targetPower,
      challengerAdvantage,
      targetAdvantage,
      winChance: adjustedWinRate,
      winner: challengerWins ? challenger : target,
      result: {
        roll: roll,
        winChance: adjustedWinRate,
        winnerReward: PVP_REWARD_WIN,
        reward: PVP_REWARD_WIN,
      },
      rankInfo: newRankInfo,
      seasonInfo: {
        id: PVP_SEASONS.current.id,
        name: PVP_SEASONS.current.name
      }
    });

    let resultMessage = `‚öîÔ∏è K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U PVP ‚öîÔ∏è\n\n`;
    resultMessage += `üèÜ ${challengerWins ? challengerName : targetName} ƒë√£ chi·∫øn th·∫Øng!\n`;
    resultMessage += `üí∞ Ph·∫ßn th∆∞·ªüng: $${challengerWins ? winReward : PVP_REWARD_WIN}\n`;
    resultMessage += `üìä C∆° h·ªôi th·∫Øng ban ƒë·∫ßu: ${baseWinChance.toFixed(1)}%\n`;
    resultMessage += `üìä C∆° h·ªôi th·∫Øng c√≥ b·ªï tr·ª£: ${adjustedWinChance.toFixed(1)}%\n`;
    resultMessage += `üé≤ K·∫øt qu·∫£ roll: ${roll.toFixed(1)}\n`;
    resultMessage += `${newRankInfo.rank !== oldRankInfo.rank ? `\nüéâ ThƒÉng h·∫°ng: ${oldRankInfo.rank} ‚û°Ô∏è ${newRankInfo.rank}!` : ""}`;

    return api.sendMessage(
      {
        body: resultMessage,
        attachment: fs.createReadStream(battleImage),
      },
      threadID,
      () => {
        fs.unlinkSync(battleImage);
      },
      messageID
    );

  } catch (error) {
    console.error("Error creating PvP battle image:", error);

    let fallbackMessage = `‚öîÔ∏è K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U PVP ‚öîÔ∏è\n`;
    fallbackMessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    fallbackMessage += `üë§ ${challengerName} (${Math.floor(
      finalChallengerPower
    )} s·ª©c m·∫°nh)\n`;
    fallbackMessage += `üë§ ${targetName} (${Math.floor(
      finalTargetPower
    )} s·ª©c m·∫°nh)\n\n`;
    fallbackMessage += `üé≤ T·ª∑ l·ªá th·∫Øng: ${adjustedWinRate.toFixed(1)}%\n`;
    fallbackMessage += `üéØ Roll: ${roll.toFixed(1)}\n\n`;
    fallbackMessage += `üèÜ NG∆Ø·ªúI TH·∫ÆNG: ${challengerWins ? challengerName : targetName
      }\n`;
    fallbackMessage += `üí∞ Ph·∫ßn th∆∞·ªüng: $${PVP_REWARD_WIN.toLocaleString()}`;

    return api.sendMessage(fallbackMessage, threadID, messageID);
  }
}

async function formatTeamInfo(teamIds) {
  let result = "";

  for (let i = 0; i < teamIds.length; i++) {
    const charId = teamIds[i];
    const char = CHARACTER_IDS[charId];
    if (!char) continue;

    const stars =
      char.starLevel ||
      (CHARACTER_RATINGS.FIVE_STAR.includes(char.name)
        ? 5
        : CHARACTER_RATINGS.FOUR_STAR.includes(char.name)
          ? 4
          : 3);

    const starsText =
      "‚≠ê".repeat(Math.min(5, stars)) + (stars > 5 ? ` [${stars}‚òÖ]` : "");
    const level = char.level || 1;
    const charInfo = CUSTOM_CHARACTER_DATA[char.name] || {};
    const element = charInfo.element || "Unknown";

    result += `${i + 1}. ${char.name} ${starsText} Lv${level} (${element})\n`;
  }

  if (result === "") {
    result = "Kh√¥ng c√≥ nh√¢n v·∫≠t n√†o";
  }

  return result;
}

function createStoneFragment(stoneType) {
  const fragmentId = generateFragmentId(stoneType);
  CHARACTER_IDS[fragmentId] = {
    type: "fragment",
    stoneType: stoneType,
    name: ELEMENTAL_FRAGMENTS[stoneType].name,
    element: ELEMENTAL_FRAGMENTS[stoneType].element,
    emoji: ELEMENTAL_FRAGMENTS[stoneType].emoji,
    description: ELEMENTAL_FRAGMENTS[stoneType].description,
    image: ELEMENTAL_FRAGMENTS[stoneType].image,
    obtainedAt: Date.now(),
    value: ELEMENTAL_FRAGMENTS[stoneType].value,
    isFragment: true,
  };
  saveCharacterDatabase();
  return fragmentId;
}

function generateFragmentId(stoneType) {
  let fragmentId;
  do {
    const randomId = Math.floor(100000000 + Math.random() * 900000000);
    fragmentId = `FRAGMENT_${stoneType}_${randomId}`;
  } while (CHARACTER_IDS[fragmentId]);
  return fragmentId;
}

function loadGachaData() {
  try {
    loadCharacterDatabase();

    if (!fs.existsSync(GACHA_DATA_FILE)) {
      const dir = path.dirname(GACHA_DATA_FILE);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      fs.writeFileSync(GACHA_DATA_FILE, JSON.stringify({}));
      return {};
    }
    const data = JSON.parse(fs.readFileSync(GACHA_DATA_FILE));

    gachaData = data;

    return data;
  } catch (error) {
    console.error("Error loading gacha data:", error);
    return {};
  }
}
function generateCharacterStats(rarity) {
  let baseStats = {
    5: { atk: 500, def: 500, hp: 2000 },
    4: { atk: 300, def: 300, hp: 1000 },
    3: { atk: 100, def: 100, hp: 500 },
  }[rarity] || { atk: 100, def: 100, hp: 500 };

  const variation = () => 0.9 + Math.random() * 0.2;

  return {
    atk: Math.floor(baseStats.atk * variation()),
    def: Math.floor(baseStats.def * variation()),
    hp: Math.floor(baseStats.hp * variation()),
  };
}
function verifyInventory(userId) {
  try {
    const fileData = JSON.parse(fs.readFileSync(GACHA_DATA_FILE));
    const fileInventory = fileData[userId]?.inventory || [];

    const memoryData = gachaData[userId]?.inventory || [];

    if (JSON.stringify(fileInventory) !== JSON.stringify(memoryData)) {
      console.log(`‚ö†Ô∏è Ph√°t hi·ªán d·ªØ li·ªáu kh√¥ng kh·ªõp cho ng∆∞·ªùi d√πng ${userId}:`);
      console.log(`- File: ${fileInventory.length} items`);
      console.log(`- Memory: ${memoryData.length} items`);

      if (memoryData.length > fileInventory.length) {
        fileData[userId].inventory = memoryData;
        fs.writeFileSync(GACHA_DATA_FILE, JSON.stringify(fileData, null, 2));
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t file v·ªõi d·ªØ li·ªáu trong b·ªô nh·ªõ`);
      } else if (fileInventory.length > memoryData.length) {
        gachaData[userId].inventory = fileInventory;
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·ªô nh·ªõ v·ªõi d·ªØ li·ªáu t·ª´ file`);
      }
    }
  } catch (error) {
    console.error("Error verifying inventory:", error);
  }
}
function saveGachaData(data) {
  try {
    const tempFile = `${GACHA_DATA_FILE}.tmp`;
    fs.writeFileSync(tempFile, JSON.stringify(data, null, 2));
    fs.renameSync(tempFile, GACHA_DATA_FILE);
    console.log(`ƒê√£ l∆∞u d·ªØ li·ªáu gacha th√†nh c√¥ng`);
  } catch (error) {
    console.error("Error saving gacha data:", error);
  }
}

function generateCharacterStats(rarity, characterName) {
  let baseStats = {
    5: { atk: 500, def: 500, hp: 2000 },
    4: { atk: 300, def: 300, hp: 1000 },
    3: { atk: 100, def: 100, hp: 500 },
  }[rarity] || { atk: 100, def: 100, hp: 500 };

  const isLimited = PREMIUM_FIVE_STARS.includes(characterName);
  const limitedMultiplier = isLimited ? 2.5 : 1;

  const variation = () => (0.9 + Math.random() * 0.2) * limitedMultiplier;

  const specialCharBonus =
    {
      "Raiden Shogun": 1.3,
      Hutao: 1.25,
      Nahida: 1.2,
      Zhongli: 1.3,
      "Yae Miko": 1.25,
    }[characterName] || 1;

  return {
    atk: Math.floor(baseStats.atk * variation() * specialCharBonus),
    def: Math.floor(baseStats.def * variation() * specialCharBonus),
    hp: Math.floor(baseStats.hp * variation() * specialCharBonus),
  };
}

function placeBid(auctionId, bidderId, amount) {
  const auction = activeAuctions.get(auctionId);
  if (!auction || auction.status !== "active")
    return { success: false, reason: "auction_not_found" };
  if (auction.seller === bidderId)
    return { success: false, reason: "self_bid" };
  if (Date.now() > auction.endTime)
    return { success: false, reason: "auction_ended" };

  const minValidBid = auction.currentBid + auction.minIncrement;
  if (amount < minValidBid) {
    return {
      success: false,
      reason: "bid_too_low",
      minRequired: minValidBid,
    };
  }

  const previousBidder = auction.highestBidder;
  const previousBid = auction.currentBid;

  auction.currentBid = amount;
  auction.highestBidder = bidderId;
  auction.bids.push({
    bidderId,
    amount,
    time: Date.now(),
    increment: amount - auction.currentBid,
  });

  const timeLeft = auction.endTime - Date.now();
  if (auction.autoExtend && timeLeft < 60000) {
    auction.endTime = Date.now() + 60000;
  }

  if (!auction.notifications.includes(bidderId)) {
    auction.notifications.push(bidderId);
  }

  return {
    success: true,
    previousBidder,
    previousBid,
    newEndTime: auction.endTime,
  };
}
async function showAuctionList(api, threadID, messageID, filterType = null) {
  const activeList = [...activeAuctions.values()].filter(
    (auction) =>
      auction.status === "active" &&
      auction.endTime > Date.now() &&
      (filterType === null || auction.itemType === filterType)
  );

  if (activeList.length === 0) {
    return api.sendMessage(
      "üìã DANH S√ÅCH ƒê·∫§U GI√Å üìã\n\n" +
      "Hi·ªán kh√¥ng c√≥ phi√™n ƒë·∫•u gi√° n√†o ƒëang di·ªÖn ra!\n\n" +
      "üí° B·∫°n c√≥ th·ªÉ t·∫°o phi√™n ƒë·∫•u gi√° m·ªõi v·ªõi:\n" +
      ".gacha auction #ID <gi√°_kh·ªüi_ƒëi·ªÉm>",
      threadID,
      messageID
    );
  }

  activeList.sort((a, b) => a.endTime - b.endTime);

  const premiumAuctions = activeList.filter((a) => a.highlighted);
  const regularAuctions = activeList.filter((a) => !a.highlighted);

  let message = "üìã DANH S√ÅCH ƒê·∫§U GI√Å üìã\n";
  message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

  if (premiumAuctions.length > 0) {
    message += "üî• PHI√äN ƒê·∫§U GI√Å ƒê·∫∂C BI·ªÜT üî•\n\n";

    premiumAuctions.forEach((auction, index) => {
      const timeLeft = Math.max(0, auction.endTime - Date.now());
      const minutesLeft = Math.floor(timeLeft / 60000);
      const secondsLeft = Math.floor((timeLeft % 60000) / 1000);

      const itemIcon =
        auction.itemType === "character"
          ? "üë§"
          : auction.itemType === "stone"
            ? "üíé"
            : "üß©";

      const rarityStars = "‚≠ê".repeat(Math.min(5, auction.itemRarity));

      message += `${index + 1}. ${itemIcon} ${auction.itemName
        } ${rarityStars}\n`;
      message += `üí∞ Gi√° hi·ªán t·∫°i: $${auction.currentBid.toLocaleString()}\n`;
      message += `‚è∞ C√≤n l·∫°i: ${minutesLeft}m ${secondsLeft}s\n`;
      message += `üîñ ID: ${auction.id}\n\n`;
    });
  }

  if (regularAuctions.length > 0) {
    if (premiumAuctions.length > 0) message += "üì¶ PHI√äN ƒê·∫§U GI√Å KH√ÅC üì¶\n\n";

    regularAuctions.slice(0, 5).forEach((auction, index) => {
      const timeLeft = Math.max(0, auction.endTime - Date.now());
      const minutesLeft = Math.floor(timeLeft / 60000);

      const itemIcon =
        auction.itemType === "character"
          ? "üë§"
          : auction.itemType === "stone"
            ? "üíé"
            : "üß©";

      message += `${premiumAuctions.length + index + 1}. ${itemIcon} ${auction.itemName
        }\n`;
      message += `üí∞ Gi√°: $${auction.currentBid.toLocaleString()} ‚Ä¢ ‚è∞ C√≤n: ${minutesLeft}m\n`;
      message += `üîñ ID: ${auction.id}\n\n`;
    });

    if (regularAuctions.length > 5) {
      message += `... v√† ${regularAuctions.length - 5} phi√™n kh√°c\n\n`;
    }
  }

  message += "üí° L·ªánh h·ªó tr·ª£:\n";
  message += ".gacha ainfo <ID> - Xem chi ti·∫øt phi√™n\n";
  message += ".gacha bid <ID> <gi√°> - ƒê·∫∑t gi√°\n";

  return api.sendMessage(message, threadID, messageID);
}
async function showAuctionInfo(api, threadID, messageID, auctionId) {
  const auction = activeAuctions.get(auctionId);

  if (!auction) {
    return api.sendMessage(
      "‚ùå Kh√¥ng t√¨m th·∫•y phi√™n ƒë·∫•u gi√° v·ªõi ID n√†y!",
      threadID,
      messageID
    );
  }

  const item = CHARACTER_IDS[auction.itemId];
  if (!item) {
    return api.sendMessage(
      "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·∫≠t ph·∫©m ƒë·∫•u gi√°!",
      threadID,
      messageID
    );
  }

  const sellerName = getUserName(auction.seller);
  const bidderName = auction.highestBidder
    ? getUserName(auction.highestBidder)
    : "Ch∆∞a c√≥";

  const timeLeft = Math.max(0, auction.endTime - Date.now());
  const hoursLeft = Math.floor(timeLeft / 3600000);
  const minutesLeft = Math.floor((timeLeft % 3600000) / 60000);
  const secondsLeft = Math.floor((timeLeft % 60000) / 1000);

  let status = "üü¢ ƒêang di·ªÖn ra";
  if (auction.status === "ended") {
    status = "üî¥ ƒê√£ k·∫øt th√∫c";
  } else if (timeLeft <= 0) {
    status = "üü† ƒêang x·ª≠ l√Ω k·∫øt qu·∫£";
  }

  let itemType, rarityText, rarityStars;
  if (auction.itemType === "character") {
    itemType = "Nh√¢n v·∫≠t";
    rarityText =
      auction.itemRarity === 5
        ? "5‚òÖ (Legendary)"
        : auction.itemRarity === 4
          ? "4‚òÖ (Epic)"
          : "3‚òÖ (Rare)";
    rarityStars = "‚≠ê".repeat(Math.min(5, auction.itemRarity));
  } else if (auction.itemType === "stone") {
    itemType = "ƒê√° ti·∫øn h√≥a";
    rarityText =
      item.stoneType === "UNIVERSAL" ? "5‚òÖ (Legendary)" : "4‚òÖ (Rare)";
    rarityStars = item.stoneType === "UNIVERSAL" ? "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê" : "‚≠ê‚≠ê‚≠ê‚≠ê";
  } else {
    itemType = "M·∫£nh ƒë√°";
    rarityText = "3‚òÖ (Uncommon)";
    rarityStars = "‚≠ê‚≠ê‚≠ê";
  }

  let message = `üìú CHI TI·∫æT PHI√äN ƒê·∫§U GI√Å üìú\n`;
  message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

  message += `üîñ ID: ${auction.id}\n`;
  message += `${status}\n\n`;

  message += `üì¶ V·∫¨T PH·∫®M ƒê·∫§U GI√Å:\n`;
  message += `‚Ä¢ Lo·∫°i: ${itemType}\n`;
  message += `‚Ä¢ T√™n: ${item.name}\n`;
  message += `‚Ä¢ ƒê·ªô hi·∫øm: ${rarityText} ${rarityStars}\n`;
  message += `‚Ä¢ Gi√° tr·ªã th·ªã tr∆∞·ªùng: $${item.value?.toLocaleString()}\n\n`;

  message += `üè∑Ô∏è TH√îNG TIN PHI√äN:\n`;
  message += `‚Ä¢ Ng∆∞·ªùi b√°n: ${sellerName}\n`;
  message += `‚Ä¢ Gi√° kh·ªüi ƒëi·ªÉm: $${auction.startingBid.toLocaleString()}\n`;
  message += `‚Ä¢ Gi√° hi·ªán t·∫°i: $${auction.currentBid.toLocaleString()}\n`;
  message += `‚Ä¢ Ng∆∞·ªùi ƒë·∫∑t gi√° cao nh·∫•t: ${bidderName}\n`;
  message += `‚Ä¢ S·ªë l·∫ßn ƒë·∫∑t gi√°: ${auction.bids.length}\n`;

  if (auction.status === "active" && timeLeft > 0) {
    message += `‚Ä¢ Th·ªùi gian c√≤n l·∫°i: ${hoursLeft}h ${minutesLeft}m ${secondsLeft}s\n`;
    message += `‚Ä¢ TƒÉng gi√° t·ªëi thi·ªÉu: $${auction.minIncrement.toLocaleString()}\n`;
    message += `‚Ä¢ Gi√° t·ªëi thi·ªÉu m·ªõi: $${(
      auction.currentBid + auction.minIncrement
    ).toLocaleString()}\n\n`;

    message += `üí° ƒê·ªÉ ƒë·∫∑t gi√°, h√£y g√µ:\n`;
    message += `.gacha bid ${auction.id} <s·ªë_ti·ªÅn>\n`;
  } else {
    message += `‚Ä¢ K·∫øt th√∫c l√∫c: ${new Date(
      auction.endTime
    ).toLocaleString()}\n\n`;
  }

  if (auction.bids.length > 0) {
    message += `üìä L·ªäCH S·ª¨ ƒê·∫∂T GI√Å:\n`;

    const recentBids = [...auction.bids].reverse().slice(0, 5);

    for (const bid of recentBids) {
      const bidderName = getUserName(bid.bidderId);
      const bidTime = new Date(bid.time).toLocaleTimeString();
      message += `‚Ä¢ ${bidderName}: $${bid.amount.toLocaleString()} (${bidTime})\n`;
    }

    if (auction.bids.length > 5) {
      message += `... v√† ${auction.bids.length - 5} l∆∞·ª£t kh√°c\n`;
    }
  }

  return api.sendMessage(message, threadID, messageID);
}
function announceConstellationUnlock(api, threadID, userName, charName, constellationLevel, constellationName, effect) {
  const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(charName) ? "5‚òÖ" :
    CHARACTER_RATINGS.FOUR_STAR.includes(charName) ? "4‚òÖ" : "3‚òÖ";

  const conEffectIcons = {
    1: "üîÆ",
    2: "‚ö°",
    3: "üåÄ",
    4: "üí´",
    5: "üåü",
    6: "‚ú®"
  };

  const message = `${conEffectIcons[constellationLevel]} CONSTELLATION UNLOCK! ${conEffectIcons[constellationLevel]}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üë§ ${userName} ƒë√£ m·ªü kh√≥a ch√≤m sao cho ${charName}!

üìù TH√îNG TIN:
‚Ä¢ Nh√¢n v·∫≠t: ${charName} (${rarity}) 
‚Ä¢ Ch√≤m sao: C${constellationLevel} - ${constellationName}
‚Ä¢ Hi·ªáu ·ª©ng: ${effect}

üí™ S·ª©c m·∫°nh tƒÉng ${constellationLevel >= 5 ? "c·ª±c m·∫°nh" : constellationLevel >= 3 ? "ƒë√°ng k·ªÉ" : "ƒë√°ng k·ªÉ"}!
${constellationLevel === 6 ? "üëë ƒê√É ƒê·∫†T CONSTELLATION T·ªêI ƒêA!" : ""}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° B·∫°n c≈©ng mu·ªën m·ªü kh√≥a? D√πng l·ªánh:
.gacha const #ID_NH√ÇN_V·∫¨T #ID_STELLA`;

  api.sendMessage(message, threadID);
}
// H√†m x·ª≠ l√Ω k·∫øt th√∫c ƒë·∫•u gi√°
async function finalizeAuction(api, auction) {
  if (auction.status !== "active") return;

  auction.status = "ended";
  const item = CHARACTER_IDS[auction.itemId];

  if (!item) {
    console.error(
      `Kh√¥ng t√¨m th·∫•y item ${auction.itemId} khi k·∫øt th√∫c ƒë·∫•u gi√° ${auction.id}`
    );
    return;
  }

  // L·∫•y th√¥ng tin ng∆∞·ªùi b√°n v√† ng∆∞·ªùi th·∫Øng
  const sellerData = gachaData[auction.seller];
  const sellerName = getUserName(auction.seller);

  // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ai ƒë·∫∑t gi√°
  if (!auction.highestBidder) {
    // Tr·∫£ l·∫°i v·∫≠t ph·∫©m cho ng∆∞·ªùi b√°n
    if (sellerData && sellerData.inventory) {
      sellerData.inventory.push(auction.itemId);
      saveGachaData(gachaData);
    }

    // Th√¥ng b√°o cho ng∆∞·ªùi b√°n
    api.sendMessage(
      `üì¢ PHI√äN ƒê·∫§U GI√Å ƒê√É K·∫æT TH√öC!\n\n` +
      `‚ùå Kh√¥ng c√≥ ai ƒë·∫∑t gi√° cho v·∫≠t ph·∫©m c·ªßa b·∫°n!\n` +
      `üì¶ V·∫≠t ph·∫©m: ${item.name}\n` +
      `üîñ ID phi√™n: ${auction.id}\n\n` +
      `üí° V·∫≠t ph·∫©m ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i v√†o kho ƒë·ªì c·ªßa b·∫°n.`,
      auction.seller
    );

    return;
  }

  // Phi√™n ƒë·∫•u gi√° th√†nh c√¥ng
  const winnerData = gachaData[auction.highestBidder];
  const winnerName = getUserName(auction.highestBidder);

  if (!winnerData) {
    if (sellerData && sellerData.inventory) {
      sellerData.inventory.push(auction.itemId);
      saveGachaData(gachaData);
    }

    api.sendMessage(
      `‚ùå L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ ƒë·∫•u gi√°. V·∫≠t ph·∫©m ƒë√£ ƒë∆∞·ª£c tr·∫£ l·∫°i cho ng∆∞·ªùi b√°n.`,
      auction.seller
    );

    return;
  }

  await updateBalance(auction.seller, auction.currentBid);

  if (!winnerData.inventory) winnerData.inventory = [];
  winnerData.inventory.push(auction.itemId);

  saveGachaData(gachaData);

  api.sendMessage(
    `üéâ PHI√äN ƒê·∫§U GI√Å C·ª¶A B·∫†N ƒê√É K·∫æT TH√öC TH√ÄNH C√îNG!\n\n` +
    `üì¶ V·∫≠t ph·∫©m: ${item.name}\n` +
    `üí∞ Gi√° b√°n: $${auction.currentBid.toLocaleString()}\n` +
    `üë§ Ng∆∞·ªùi mua: ${winnerName}\n` +
    `üîñ ID phi√™n: ${auction.id}\n\n` +
    `üíµ S·ªë ti·ªÅn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n c·ªßa b·∫°n.`,
    auction.seller
  );

  // Th√¥ng b√°o cho ng∆∞·ªùi th·∫Øng
  api.sendMessage(
    `üéä CH√öC M·ª™NG! B·∫†N ƒê√É TH·∫ÆNG PHI√äN ƒê·∫§U GI√Å!\n\n` +
    `üì¶ V·∫≠t ph·∫©m: ${item.name}\n` +
    `üí∞ Gi√° mua: $${auction.currentBid.toLocaleString()}\n` +
    `üë§ Ng∆∞·ªùi b√°n: ${sellerName}\n` +
    `üîñ ID phi√™n: ${auction.id}\n\n` +
    `‚úÖ V·∫≠t ph·∫©m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o kho ƒë·ªì c·ªßa b·∫°n.`,
    auction.highestBidder
  );

  const participants = [...new Set(auction.bids.map((b) => b.bidderId))];
  for (const participantId of participants) {
    if (participantId !== auction.highestBidder) {
      api.sendMessage(
        `üì¢ PHI√äN ƒê·∫§U GI√Å ƒê√É K·∫æT TH√öC!\n\n` +
        `üì¶ V·∫≠t ph·∫©m: ${item.name}\n` +
        `üí∞ Gi√° cu·ªëi: $${auction.currentBid.toLocaleString()}\n` +
        `üë§ Ng∆∞·ªùi th·∫Øng: ${winnerName}\n` +
        `üîñ ID phi√™n: ${auction.id}\n\n` +
        `üí° H√£y ti·∫øp t·ª•c tham gia c√°c phi√™n ƒë·∫•u gi√° kh√°c!`,
        participantId
      );
    }
  }
}

function getRandomCharacter(rarity) {
  const pool = CHARACTER_RATINGS[rarity];
  return pool[Math.floor(Math.random() * pool.length)];
}
async function showRanking(api, threadID, messageID, type = "value") {
  try {
    const gachaData = loadGachaData();

    let userData = {};

    try {
      userData = JSON.parse(fs.readFileSync(userDataPath));
    } catch (error) {
      console.error("Error reading userData:", error);
    }

    const playerStats = [];

    for (const [userId, data] of Object.entries(gachaData)) {
      if (!data.inventory || data.inventory.length === 0) continue;

      // T√≠nh to√°n c√°c ch·ªâ s·ªë
      let totalValue = 0;
      let fiveStarCount = 0;
      let fourStarCount = 0;
      let threeStarCount = 0;
      let highestLevel = 0;

      data.inventory.forEach((charId) => {
        const char = CHARACTER_IDS[charId];
        if (!char) return;

        totalValue += char.value || 0;

        if (CHARACTER_RATINGS.FIVE_STAR.includes(char.name)) {
          fiveStarCount++;
        } else if (CHARACTER_RATINGS.FOUR_STAR.includes(char.name)) {
          fourStarCount++;
        } else {
          threeStarCount++;
        }

        const charLevel = char.level || 1;
        if (charLevel > highestLevel) highestLevel = charLevel;
      });

      const userName = userData[userId]?.name || "Unknown";

      playerStats.push({
        userId,
        name: userName,
        totalValue,
        fiveStarCount,
        fourStarCount,
        threeStarCount,
        highestLevel,
        totalPulls: data.totalPulls || 0,
        cardCount: data.inventory.length,
      });
    }

    let sortKey;
    let rankTitle;

    // X√°c ƒë·ªãnh c√°ch s·∫Øp x·∫øp d·ª±a tr√™n lo·∫°i BXH
    switch (type) {
      case "5star":
      case "five":
        sortKey = "fiveStarCount";
        rankTitle = "TOP NG∆Ø·ªúI CH∆†I S·ªû H·ªÆU 5‚òÖ";
        break;
      case "pull":
      case "pulls":
        sortKey = "totalPulls";
        rankTitle = "TOP NG∆Ø·ªúI CH∆†I M·ªû TH·∫∫ NHI·ªÄU NH·∫§T";
        break;
      case "level":
        sortKey = "highestLevel";
        rankTitle = "TOP NG∆Ø·ªúI CH∆†I C√ì NH√ÇN V·∫¨T C·∫§P CAO";
        break;
      case "card":
      case "cards":
        sortKey = "cardCount";
        rankTitle = "TOP NG∆Ø·ªúI CH∆†I C√ì NHI·ªÄU TH·∫∫";
        break;
      case "value":
      default:
        sortKey = "totalValue";
        rankTitle = "TOP NG∆Ø·ªúI CH∆†I GI√ÄU NH·∫§T";
        break;
    }

    // S·∫Øp x·∫øp theo key ƒë√£ ch·ªçn
    playerStats.sort((a, b) => b[sortKey] - a[sortKey]);

    // Gi·ªõi h·∫°n ·ªü top 10
    const topPlayers = playerStats.slice(0, 10);

    // T·∫°o n·ªôi dung message
    let message = `üèÜ ${rankTitle} üèÜ\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

    topPlayers.forEach((player, index) => {
      const medal =
        index === 0
          ? "ü•á"
          : index === 1
            ? "ü•à"
            : index === 2
              ? "ü•â"
              : `${index + 1}.`;

      let details = "";
      if (sortKey === "totalValue") {
        details = `üí∞ T·ªïng gi√° tr·ªã: $${player.totalValue.toLocaleString()}`;
      } else if (sortKey === "fiveStarCount") {
        details = `‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê: ${player.fiveStarCount} nh√¢n v·∫≠t`;
      } else if (sortKey === "totalPulls") {
        details = `üéÆ ƒê√£ m·ªü: ${player.totalPulls} l·∫ßn`;
      } else if (sortKey === "highestLevel") {
        details = `üëë C·∫•p cao nh·∫•t: ${player.highestLevel}`;
      } else if (sortKey === "cardCount") {
        details = `üÉè S·ªë th·∫ª: ${player.cardCount}`;
      }

      message += `${medal} ${player.name}\n${details}\n\n`;
    });

    message += `üí° Xem BXH kh√°c v·ªõi l·ªánh:\n.gacha bxh [value/5star/pull/level/card]`;

    return api.sendMessage(message, threadID, messageID);
  } catch (error) {
    console.error("Error showing ranking:", error);
    return api.sendMessage(
      "‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã BXH!",
      threadID,
      messageID
    );
  }
}
async function getCharacterImage(character) {
  try {
    if (CUSTOM_CHARACTER_IMAGES[character]) {
      const cacheDir = path.join(__dirname, "./cache");
      if (!fs.existsSync(cacheDir)) {
        fs.mkdirSync(cacheDir, { recursive: true });
      }

      const imagePath = path.join(cacheDir, `${character.toLowerCase()}.png`);

      try {
        const response = await axios.get(CUSTOM_CHARACTER_IMAGES[character], {
          responseType: "arraybuffer",
          timeout: 5000,
          validateStatus: (status) => status === 200,
        });

        fs.writeFileSync(imagePath, response.data);
        return imagePath;
      } catch (error) {
        console.warn(
          `Failed to fetch custom image for ${character}, falling back to default`
        );
      }
    }

    const defaultImagePath = path.join(
      __dirname,
      "../assets/default_character.png"
    );

    const charInfo =
      CUSTOM_CHARACTER_DATA[character] ||
      (await genshin.characters(character.toLowerCase()).catch(() => null));

    if (!charInfo) {
      return defaultImagePath;
    }

    const cacheDir = path.join(__dirname, "./cache");
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    const imagePath = path.join(cacheDir, `${character.toLowerCase()}.png`);

    try {
      const response = await axios.get(charInfo.image, {
        responseType: "arraybuffer",
        timeout: 5000,
        validateStatus: (status) => status === 200,
      });

      fs.writeFileSync(imagePath, response.data);
      return imagePath;
    } catch (error) {
      console.warn(`Failed to fetch image for ${character}, using default`);
      return defaultImagePath;
    }
  } catch (error) {
    console.error(`Error getting image for ${character}:`, error);
    return null;
  }
}

function calculateDynamicRates(userData) {
  const pullsWithoutFiveStar = userData.pullsSinceLastFiveStar || 0;
  const pullsWithoutFourStar = userData.pullsSinceLastFourStar || 0;

  const fiveStarBoost = Math.min(5, Math.pow(pullsWithoutFiveStar * 0.1, 1.5));
  const evolvedFourStarBoost = Math.min(5, Math.pow(pullsWithoutFiveStar * 0.08, 1.4));
  const fourStarBoost = Math.min(15, Math.pow(pullsWithoutFourStar * 0.2, 1.3));
  const totalPullsBoost = Math.min(1, (userData.totalPulls || 0) * 0.005);

  const vipBenefits = getVIPBenefits(userData.id);
  const limitedBonus = vipBenefits?.gachaBonus?.limitedRateBonus || 0;

  return {
    FIVE_STAR: RATES.FIVE_STAR + fiveStarBoost + totalPullsBoost + limitedBonus,
    EVOLVED_FOUR_STAR: RATES.EVOLVED_FOUR_STAR + evolvedFourStarBoost + totalPullsBoost * 0.8,
    FOUR_STAR: RATES.FOUR_STAR + fourStarBoost,
    THREE_STAR: 100 -
      (RATES.FIVE_STAR + fiveStarBoost + totalPullsBoost + limitedBonus) -
      (RATES.EVOLVED_FOUR_STAR + evolvedFourStarBoost + totalPullsBoost * 0.8) -
      (RATES.FOUR_STAR + fourStarBoost)
  };
}
function saveCharacterDatabase() {
  try {
    fs.writeFileSync(
      CHARACTERS_DB_FILE,
      JSON.stringify(CHARACTER_IDS, null, 2)
    );
    console.log(
      `Saved ${Object.keys(CHARACTER_IDS).length} characters to database`
    );
  } catch (error) {
    console.error("Error saving character database:", error);
  }
}

function loadCharacterDatabase() {
  try {
    if (!fs.existsSync(CHARACTERS_DB_FILE)) {
      console.log("Character database file not found, creating new one");
      saveCharacterDatabase();
      return;
    }

    const data = JSON.parse(fs.readFileSync(CHARACTERS_DB_FILE));
    CHARACTER_IDS = data;

    console.log(
      `Loaded ${Object.keys(CHARACTER_IDS).length} characters from database`
    );

    const keys = Object.keys(CHARACTER_IDS);
    if (keys.length > 0) {
      const sample = keys.slice(0, Math.min(3, keys.length));
      sample.forEach((id) => {
        console.log(
          `Sample character: ${id} - ${CHARACTER_IDS[id]?.name || "Unknown"}`
        );
      });
    }
  } catch (error) {
    console.error("Error loading character database:", error);
    CHARACTER_IDS = {};
  }
}
function generateCardValue(rarity, characterName) {
  if (rarity === "FIVE_STAR") {
    if (PREMIUM_FIVE_STARS.includes(characterName)) {
      return Math.floor(Math.random() * 500000000) + 100000000;
    }
    return Math.floor(Math.random() * 2000000) + 1000000;
  }
  if (rarity === "FOUR_STAR") {
    return Math.floor(Math.random() * 40000) + 10000;
  }
  return Math.floor(Math.random() * 700) + 100;
}
function doPull(userData) {
  const currentRates = calculateDynamicRates(userData);
  const roll = Math.random() * 100;

  if (userData.pullsSinceLastStone === undefined) userData.pullsSinceLastStone = 0;
  if (userData.pullsSinceLastUniversalStone === undefined) userData.pullsSinceLastUniversalStone = 0;

  const stonePityThreshold = 30;
  const forcedStone = userData.pullsSinceLastStone >= stonePityThreshold;

  const baseUniversalProb = 0.001;
  const universalPityBoost = Math.min(0.02, (userData.pullsSinceLastUniversalStone || 0) * 0.0001);
  const universalProb = baseUniversalProb + universalPityBoost;

  const itemTypeRoll = forcedStone ? 1 : Math.random() * 100;

  if (itemTypeRoll < 10 || forcedStone) {
    const isFragment = !forcedStone && Math.random() < 0.7;
    const elements = Object.keys(
      isFragment ? ELEMENTAL_FRAGMENTS : ELEMENTAL_STONES
    );

    let stoneType;
    if (Math.random() < universalProb) {
      stoneType = "UNIVERSAL";

      userData.pullsSinceLastUniversalStone = 0;
    } else {
      stoneType = elements[Math.floor(Math.random() * (elements.length - 1))];

      userData.pullsSinceLastUniversalStone = (userData.pullsSinceLastUniversalStone || 0) + 1;
    }

    let charId;
    if (isFragment) {
      charId = createStoneFragment(stoneType);
    } else {
      charId = createStone(stoneType);
    }

    userData.pullsSinceLastStone = 0;

    return {
      charId,
      isStone: true,
      isFragment,
      isExpItem: false,
    };
  }
  else if (itemTypeRoll < 20) {
    const expRoll = Math.random() * 100;
    let expItemName;

    if (expRoll < 5) {
      expItemName = "Mythical Scroll";
    } else if (expRoll < 15) {
      expItemName = "Legendary Grimoire";
    } else if (expRoll < 40) {
      expItemName = "Heros Wit";
    } else if (expRoll < 70) {
      expItemName = "Adventurers Experience";
    } else {
      expItemName = "Wanderers Advice";
    }

    const charId = createExpItem(expItemName);

    return {
      charId,
      isStone: false,
      isFragment: false,
      isExpItem: true,
    };
  }

  else {
    let character;
    let rarity;
    let evolvedStars = 0;

    if (roll < currentRates.FIVE_STAR) {

      userData.pullsSinceLastFiveStar = 0;
      userData.pullsSinceLastFourStar = 0;

      const premiumRoll = Math.random() * 100;
      if (premiumRoll < 1) {
        character =
          PREMIUM_FIVE_STARS[
          Math.floor(Math.random() * PREMIUM_FIVE_STARS.length)
          ];
      } else {
        const regularPool = CHARACTER_RATINGS.FIVE_STAR.filter(
          (char) => !PREMIUM_FIVE_STARS.includes(char)
        );
        character = regularPool[Math.floor(Math.random() * regularPool.length)];
      }
      rarity = "FIVE_STAR";

      if (!userData.stellaPity) {
        userData.stellaPity = {};
      }
      let isDuplicate = false;
      for (const existingCharId of userData.inventory || []) {
        const existingChar = CHARACTER_IDS[existingCharId];
        if (
          existingChar &&
          existingChar.type === "character" &&
          existingChar.name === character
        ) {
          isDuplicate = true;
          break;
        }
      }
      if (!userData.stellaPity[character]) {
        userData.stellaPity[character] = 0;
      }
      const stellaPityThreshold = PREMIUM_FIVE_STARS.includes(character) ?
        STELLA_PITY_THRESHOLD + 1 : STELLA_PITY_THRESHOLD;

      const stellaChance = isDuplicate ? 100 : Math.min(95, userData.stellaPity[character] * STELLA_PITY_BOOST_PER_FAIL);
      const stellaRoll = Math.random() * 100;
      const getStellaFortuna = stellaRoll < stellaChance || userData.stellaPity[character] >= stellaPityThreshold;

      userData.stellaPity[character] >= stellaPityThreshold;

      if (isDuplicate || getStellaFortuna) {

        userData.stellaPity[character] = 0;

        const stellaId = createStellaFortuna(character, false);
        userData.inventory.push(stellaId);
        userData.pullsSinceLastStone = (userData.pullsSinceLastStone || 0) + 1;

        return {
          charId: stellaId,
          isStella: true,
          originalChar: character,
          isPremium: PREMIUM_FIVE_STARS.includes(character),
          isPity: !isDuplicate,
          isStone: false,
          isFragment: false,
          isExpItem: false
        };
      } else {
        userData.stellaPity[character]++;
      }
    } else if (roll < currentRates.FIVE_STAR + currentRates.EVOLVED_FOUR_STAR) {

      userData.pullsSinceLastFiveStar++;
      userData.pullsSinceLastFourStar = 0;

      character =
        EVOLVED_FOUR_STARS[
        Math.floor(Math.random() * EVOLVED_FOUR_STARS.length)
        ];
      evolvedStars = Math.floor(Math.random() * 3) + 5;
      rarity = "FOUR_STAR";
    } else if (
      roll <
      currentRates.FIVE_STAR +
      currentRates.EVOLVED_FOUR_STAR +
      currentRates.FOUR_STAR
    ) {
      userData.pullsSinceLastFourStar = 0;
      userData.pullsSinceLastFiveStar++;
      character = getRandomCharacter("FOUR_STAR");
      rarity = "FOUR_STAR";
    } else {
      userData.pullsSinceLastFourStar++;
      userData.pullsSinceLastFiveStar++;
      character = getRandomCharacter("THREE_STAR");
      rarity = "THREE_STAR";
    }

    const charId = generateCharacterId(character);

    if (evolvedStars > 0) {
      const evolutionMultiplier = 1 + (evolvedStars - 4) * 0.5;

      const baseStats = generateCharacterStats(4, character);

      for (const stat in baseStats) {
        baseStats[stat] = Math.floor(baseStats[stat] * evolutionMultiplier);
      }

      const valueMultiplier = evolutionMultiplier * 3;

      CHARACTER_IDS[charId] = {
        type: "character",
        name: character,
        obtainedAt: Date.now(),
        starLevel: evolvedStars,
        level: 1,
        exp: 0,
        isMaxEvolved: evolvedStars >= 7,
        isEvolved: true,
        value: Math.floor(
          (rarity === "FOUR_STAR" ? 50000 : 500000) * valueMultiplier
        ),
        stats: baseStats,
      };
    } else {
      CHARACTER_IDS[charId] = {
        type: "character",
        name: character,
        obtainedAt: Date.now(),
        value: generateCardValue(rarity, character),
        level: 1,
        exp: 0,
        stats: generateCharacterStats(
          rarity === "FIVE_STAR" ? 5 : rarity === "FOUR_STAR" ? 4 : 3,
          character
        ),
      };
    }
    userData.pullsSinceLastStone = (userData.pullsSinceLastStone || 0) + 1;
    saveCharacterDatabase();
    return {
      charId,
      isStone: false,
      isFragment: false,
      isExpItem: false,
      isEvolved: evolvedStars > 0,
      evolvedStars,
    };
  }
}

function createBackup(type = "daily") {
  try {
    const backupDir = path.join(__dirname, "./json/backups");
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }

    const now = new Date();
    const date = now.toISOString().split("T")[0];
    const timestamp = Math.floor(now.getTime() / 1000);

    // T·∫°o t√™n file backup v·ªõi prefix kh√°c nhau d·ª±a tr√™n lo·∫°i sao l∆∞u
    let prefix = "";
    switch (type) {
      case "manual":
        prefix = "manual_";
        break;
      case "auto":
        prefix = "auto_";
        break;
      case "pre_update":
        prefix = "update_";
        break;
      default:
        prefix = "daily_";
    }

    const backupFilename = `gacha_${prefix}${date}_${timestamp}.json`;
    const charactersBackupFilename = `characters_${prefix}${date}_${timestamp}.json`;

    // Sao l∆∞u d·ªØ li·ªáu
    fs.copyFileSync(GACHA_DATA_FILE, path.join(backupDir, backupFilename));
    fs.copyFileSync(
      CHARACTERS_DB_FILE,
      path.join(backupDir, charactersBackupFilename)
    );

    console.log(`‚úÖ ƒê√£ t·∫°o b·∫£n sao l∆∞u ${type}: ${backupFilename}`);

    // Xoay v√≤ng c√°c b·∫£n sao l∆∞u c≈©
    rotateBackups(backupDir);

    return { success: true, filename: backupFilename };
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o b·∫£n sao l∆∞u:", error);
    return { success: false, error };
  }
}
function rotateBackups(backupDir) {
  try {
    const files = fs.readdirSync(backupDir);

    // Nh√≥m c√°c file theo ng√†y
    const backupsByDate = {};
    files.forEach((file) => {
      if (
        file.startsWith("gacha_daily_") ||
        file.startsWith("characters_daily_")
      ) {
        const dateMatch = file.match(/\d{4}-\d{2}-\d{2}/);
        if (dateMatch) {
          const date = dateMatch[0];
          if (!backupsByDate[date]) backupsByDate[date] = [];
          backupsByDate[date].push(file);
        }
      }
    });

    // S·∫Øp x·∫øp c√°c ng√†y v√† gi·ªØ l·∫°i MAX_BACKUPS ng√†y g·∫ßn nh·∫•t
    const dates = Object.keys(backupsByDate).sort().reverse();
    if (dates.length > MAX_BACKUPS) {
      const datesToDelete = dates.slice(MAX_BACKUPS);
      datesToDelete.forEach((date) => {
        backupsByDate[date].forEach((file) => {
          fs.unlinkSync(path.join(backupDir, file));
          console.log(`üóëÔ∏è ƒê√£ x√≥a backup c≈©: ${file}`);
        });
      });
    }
  } catch (error) {
    console.error("L·ªói khi xoay v√≤ng backups:", error);
  }
}

function restoreFromBackup(backupId = null) {
  try {
    const backupDir = path.join(__dirname, "./json/backups");
    if (!fs.existsSync(backupDir)) {
      console.log("Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup");
      return { success: false, reason: "no_backup_dir" };
    }

    const files = fs.readdirSync(backupDir);
    if (files.length === 0) {
      console.log("Kh√¥ng t√¨m th·∫•y file backup n√†o");
      return { success: false, reason: "no_backups" };
    }

    let gachaBackupFile, charactersBackupFile;

    if (backupId) {
      gachaBackupFile = files.find(
        (f) => f.startsWith("gacha_") && f.includes(backupId)
      );
      if (gachaBackupFile) {
        const timestamp = gachaBackupFile.match(/\d+(?=\.json)/)[0];
        charactersBackupFile = files.find(
          (f) => f.startsWith("characters_") && f.includes(timestamp)
        );
      }
    } else {
      const gachaFiles = files.filter((f) => f.startsWith("gacha_"));
      const characterFiles = files.filter((f) => f.startsWith("characters_"));

      if (gachaFiles.length === 0 || characterFiles.length === 0) {
        console.log("Thi·∫øu file backup c·∫ßn thi·∫øt");
        return { success: false, reason: "incomplete_backups" };
      }

      gachaFiles.sort().reverse();
      characterFiles.sort().reverse();

      gachaBackupFile = gachaFiles[0];
      charactersBackupFile = characterFiles[0];
    }

    if (!gachaBackupFile || !charactersBackupFile) {
      console.log(`Kh√¥ng t√¨m th·∫•y file backup ph√π h·ª£p v·ªõi ID: ${backupId}`);
      return { success: false, reason: "backup_not_found" };
    }

    createBackup("pre_restore");

    const gachaBackupPath = path.join(backupDir, gachaBackupFile);
    const charactersBackupPath = path.join(backupDir, charactersBackupFile);

    fs.copyFileSync(gachaBackupPath, GACHA_DATA_FILE);
    fs.copyFileSync(charactersBackupPath, CHARACTERS_DB_FILE);

    console.log(
      `‚úÖ ƒê√£ ph·ª•c h·ªìi t·ª´ backup: ${gachaBackupFile}, ${charactersBackupFile}`
    );

    loadCharacterDatabase();
    gachaData = loadGachaData();

    return {
      success: true,
      gachaFile: gachaBackupFile,
      charactersFile: charactersBackupFile,
    };
  } catch (error) {
    console.error("‚ùå L·ªói khi ph·ª•c h·ªìi backup:", error);
    return { success: false, error };
  }
}

function autoConvertFragments(userData) {
  if (!userData.inventory || !Array.isArray(userData.inventory)) return false;

  const fragmentsMap = {};
  const fragmentIds = [];

  userData.inventory.forEach((itemId) => {
    if (typeof itemId !== "string" || !itemId.startsWith("FRAGMENT_")) return;

    const stoneType = itemId.split("_")[1];
    if (!stoneType || !ELEMENTAL_FRAGMENTS[stoneType]) return;

    if (!fragmentsMap[stoneType]) fragmentsMap[stoneType] = [];
    fragmentsMap[stoneType].push(itemId);
    fragmentIds.push(itemId);
  });

  let changed = false;

  Object.entries(fragmentsMap).forEach(([stoneType, ids]) => {
    const fullStoneCount = Math.floor(ids.length / 10);
    if (fullStoneCount > 0) {
      const fragmentsToRemove = ids.slice(0, fullStoneCount * 10);
      userData.inventory = userData.inventory.filter(
        (id) => !fragmentsToRemove.includes(id)
      );

      for (let i = 0; i < fullStoneCount; i++) {
        const stoneId = createStone(stoneType);
        userData.inventory.push(stoneId);

        console.log(
          `Auto-combined 10 ${stoneType} fragments into a complete stone: ${stoneId}`
        );
        changed = true;
      }
    }
  });

  return changed;
}
function listBackups() {
  try {
    const backupDir = path.join(__dirname, "./json/backups");
    if (!fs.existsSync(backupDir)) {
      return { success: false, reason: "no_backup_dir" };
    }

    const files = fs.readdirSync(backupDir);

    // L·ªçc v√† nh√≥m c√°c file backup theo c·∫∑p
    const backups = [];
    const gachaFiles = files.filter((f) => f.startsWith("gacha_"));

    gachaFiles.forEach((gachaFile) => {
      const timestamp = gachaFile.match(/\d+(?=\.json)/);
      if (!timestamp) return;

      const charactersFile = files.find(
        (f) => f.startsWith("characters_") && f.includes(timestamp[0])
      );

      if (charactersFile) {
        const dateMatch = gachaFile.match(/\d{4}-\d{2}-\d{2}/);
        const type = gachaFile.startsWith("gacha_manual_")
          ? "Th·ªß c√¥ng"
          : gachaFile.startsWith("gacha_auto_")
            ? "T·ª± ƒë·ªông"
            : gachaFile.startsWith("gacha_update_")
              ? "C·∫≠p nh·∫≠t"
              : "H√†ng ng√†y";

        backups.push({
          id: timestamp[0],
          date: dateMatch ? dateMatch[0] : "Unknown",
          time: new Date(parseInt(timestamp[0]) * 1000).toLocaleTimeString(),
          type: type,
          files: [gachaFile, charactersFile],
        });
      }
    });

    // S·∫Øp x·∫øp theo th·ªùi gian, m·ªõi nh·∫•t l√™n ƒë·∫ßu
    backups.sort((a, b) => parseInt(b.id) - parseInt(a.id));

    return { success: true, backups };
  } catch (error) {
    console.error("L·ªói khi li·ªát k√™ backups:", error);
    return { success: false, error };
  }
}

function upgradeCharacter(charId1, charId2, userData, forceType = null) {
  const char1 = CHARACTER_IDS[charId1];
  const char2 = CHARACTER_IDS[charId2];

  if (!char1 || !char2) {
    return { success: false, reason: "character_not_found" };
  }

  if (char1.name !== char2.name) {
    return { success: false, reason: "different_characters" };
  }

  const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(char1.name)
    ? 5
    : CHARACTER_RATINGS.FOUR_STAR.includes(char1.name)
      ? 4
      : 3;

  if (rarity === 3) {
    return { success: false, reason: "cannot_upgrade_3star" };
  }

  const currentStar = char1.starLevel || parseInt(rarity);
  const maxStar = rarity === 5 ? 12 : 8;

  const level1 = char1.level || 1;
  const maxLevel = CHARACTER_LEVELS[rarity]?.maxLevel || 10;

  // Determine upgrade type
  let upgradeType = forceType;
  if (!upgradeType) {
    upgradeType = level1 >= maxLevel ? "star" : "level";
  }

  userData.inventory = userData.inventory.filter(
    (id) => id !== charId1 && id !== charId2
  );

  if (upgradeType === "star" && currentStar < maxStar) {
    const newCharId = generateCharacterId();
    const newStar = currentStar + 1;
    const baseStats = char1.stats || { atk: 100, def: 100, hp: 500 };
    const isLimited = PREMIUM_FIVE_STARS.includes(char1.name);

    // Reduce multiplier growth factor from 0.5/0.8 to 0.25/0.4
    const bonusMultiplier = isLimited
      ? 1 + (newStar - rarity) * 0.3  // Gi·∫£m t·ª´ 0.4 xu·ªëng 0.3
      : 1 + (newStar - rarity) * 0.2;

    const maxStats = {
      atk: rarity * 1000 + (newStar - rarity) * 500,
      def: rarity * 800 + (newStar - rarity) * 400,
      hp: rarity * 5000 + (newStar - rarity) * 2500
    };

    CHARACTER_IDS[newCharId] = {
      name: char1.name,
      obtainedAt: Date.now(),
      starLevel: newStar,
      level: Math.max(char1.level || 1, char2.level || 1),
      value:
        (char1.value || (rarity === 5 ? 1000000 : 10000)) *
        (isLimited ? 2 : 1.5) *
        bonusMultiplier,
      stats: {
        atk: Math.min(maxStats.atk, Math.floor(
          Math.max(char1.stats?.atk || 100, char2.stats?.atk || 100) *
          (1 + (Math.min(char1.stats?.atk || 100, char2.stats?.atk || 100) * 0.3) / 100) *
          bonusMultiplier
        )),
        def: Math.min(maxStats.def, Math.floor(
          Math.max(char1.stats?.def || 100, char2.stats?.def || 100) *
          (1 + (Math.min(char1.stats?.def || 100, char2.stats?.def || 100) * 0.3) / 100) *
          bonusMultiplier
        )),
        hp: Math.min(maxStats.hp, Math.floor(
          Math.max(char1.stats?.hp || 500, char2.stats?.hp || 500) *
          (1 + (Math.min(char1.stats?.hp || 500, char2.stats?.hp || 500) * 0.3) / 100) *
          bonusMultiplier
        )),
      },
    };

    userData.inventory.push(newCharId);
    saveCharacterDatabase();

    return {
      success: true,
      type: "evolved",
      charId: newCharId,
      oldStar: currentStar,
      newStar: newStar,
    };
  }

  if (upgradeType === "level" && level1 < maxLevel) {
    const newCharId = generateCharacterId();
    const level2 = char2.level || 1;
    const bonusLevel = Math.floor(level2 * 0.3);
    const newLevel = Math.min(maxLevel, level1 + 1 + bonusLevel);

    const statMultiplier = CHARACTER_LEVELS[rarity].baseStats;
    const baseStats = char1.stats || { atk: 100, def: 100, hp: 500 };
    const bonusStats =
      level2 > 1 ? { atk: 50, def: 30, hp: 100 } : { atk: 0, def: 0, hp: 0 };

    CHARACTER_IDS[newCharId] = {
      name: char1.name,
      obtainedAt: Date.now(),
      starLevel: currentStar,
      level: newLevel,
      value: char1.value * (1 + (newLevel - level1) * 0.2),
      stats: {
        atk: Math.floor(
          baseStats.atk * statMultiplier.atk * newLevel + bonusStats.atk
        ),
        def: Math.floor(
          baseStats.def * statMultiplier.def * newLevel + bonusStats.def
        ),
        hp: Math.floor(
          baseStats.hp * statMultiplier.hp * newLevel + bonusStats.hp
        ),
      },
    };

    userData.inventory.push(newCharId);
    saveCharacterDatabase();

    return {
      success: true,
      type: "fused",
      charId: newCharId,
      oldLevel: level1,
      newLevel: newLevel,
    };
  }

  // Return characters if upgrade not possible
  userData.inventory.push(charId1);
  userData.inventory.push(charId2);

  if (currentStar >= maxStar && level1 >= maxLevel) {
    return { success: false, reason: "max_upgrade_reached" };
  } else if (currentStar >= maxStar) {
    return { success: false, reason: "max_star_reached" };
  } else {
    return { success: false, reason: "max_level_reached" };
  }
}
function getDetailedHelp() {
  return {
    basic: `üéÆ H∆Ø·ªöNG D·∫™N GENSHIN GACHA üéÆ
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üëâ L·ªánh c∆° b·∫£n:
.gacha pull - M·ªü th·∫ª nh√¢n v·∫≠t
.gacha info - Xem t·ªâ l·ªá ra nh√¢n v·∫≠t
.gacha card - Xem chi ti·∫øt nh√¢n v·∫≠t
.gacha inv - Xem nh√¢n v·∫≠t ƒëang c√≥
.gacha PVP - Th√°ch ƒë·∫•u PVP
.gacha rank - Xem Rank
.gacha stats - xem m√πa gi·∫£i
.gacha bxh - Xem BXH ng∆∞·ªùi ch∆°i
.gacha trade - Giao d·ªãch nh√¢n v·∫≠t
.gacha upgrade <ID1> <ID2> - N√¢ng c·∫•p nh√¢n v·∫≠t
.gacha levelup - TƒÉng c·∫•p nh√¢n v·∫≠t
.gacha const - m·ªü kh√≥a ch√≤m sao
.gacha spity - Xem th√¥ng tin pity
üí∞ Gi√° m·ªü: ${PULL_COST}$ /l·∫ßn
‚≠ê T·ªâ l·ªá: 5‚òÖ (${RATES.FIVE_STAR}%) | 4‚òÖ (${RATES.FOUR_STAR}%) | 3‚òÖ (${RATES.THREE_STAR}%)
üî• TH√îNG TIN H·∫§P D·∫™N üî•
‚Ä¢ Nh√¢n v·∫≠t 5‚òÖ hi·∫øm c√≥ gi√° tr·ªã l√™n ƒë·∫øn 500 TRI·ªÜU $
‚Ä¢ Nh√¢n v·∫≠t 4‚òÖ c√≥ gi√° tr·ªã t·ª´ 10.000 - 40.000 $`,

    auction: `üî® H∆Ø·ªöNG D·∫™N ƒê·∫§U GI√Å NH√ÇN V·∫¨T üî®
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1Ô∏è‚É£ ƒêƒÇNG B√ÅN ƒê·∫§U GI√Å:
- L·ªánh: .gacha auction #ID <gi√°_kh·ªüi_ƒëi·ªÉm> [th·ªùi_gian]
- V√≠ d·ª•: .gacha auction #1234 50000 60
- Th·ªùi gian t√πy ch·ªçn (ph√∫t), m·∫∑c ƒë·ªãnh 60 ph√∫t

2Ô∏è‚É£ ƒê·∫∂T GI√Å:
- L·ªánh: .gacha bid <ID_phi√™n> <s·ªë_ti·ªÅn>
- V√≠ d·ª•: .gacha bid abc123 55000

3Ô∏è‚É£ XEM CHI TI·∫æT PHI√äN:
- L·ªánh: .gacha ainfo <ID_phi√™n>
- Xem th√¥ng tin chi ti·∫øt phi√™n ƒë·∫•u gi√°

4Ô∏è‚É£ XEM DANH S√ÅCH PHI√äN ƒêANG DI·ªÑN RA:
- L·ªánh: .gacha alist
- Hi·ªÉn th·ªã c√°c phi√™n ƒë·∫•u gi√° ƒëang ho·∫°t ƒë·ªông

üí∞ Gi√° kh·ªüi ƒëi·ªÉm t·ªëi thi·ªÉu: 1,000$
‚ö†Ô∏è Ng∆∞·ªùi th·∫Øng ph·∫£i tr·∫£ ti·ªÅn trong th·ªùi h·∫°n 5 ph√∫t
üíé M·ªói l·∫ßn ƒë·∫∑t gi√° ph·∫£i cao h∆°n gi√° hi·ªán t·∫°i √≠t nh·∫•t 5%
üî• C√≥ h·ªá th·ªëng gia h·∫°n t·ª± ƒë·ªông khi ƒë·∫•u gi√° s√¥i n·ªïi`,

    upgrade: `üåü H∆Ø·ªöNG D·∫™N TI·∫æN H√ìA NH√ÇN V·∫¨T üåü
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìã C√°c b∆∞·ªõc ti·∫øn h√≥a:
1‚É£ Ch·ªçn hai nh√¢n v·∫≠t C√ôNG LO·∫†I
2‚É£ Ch·ªçn ƒë√° ti·∫øn h√≥a C√ôNG NGUY√äN T·ªê v·ªõi nh√¢n v·∫≠t
3‚É£ S·ª≠ d·ª•ng l·ªánh: .gacha upgrade #ID1 #ID2 #ID_ƒê√Å

üîÑ V√≠ d·ª•: .gacha upgrade #1234 #5678 #9012

üíé Y√äU C·∫¶U ƒê√Å TI·∫æN H√ìA:
‚Ä¢ S·ªë ƒë√° c·∫ßn thi·∫øt = (C·∫•p sao hi·ªán t·∫°i - ƒê·ªô hi·∫øm c∆° b·∫£n + 1)
‚Ä¢ V√≠ d·ª•: Nh√¢n v·∫≠t 5‚òÖ ti·∫øn l√™n 6‚òÖ c·∫ßn 2 ƒë√°
‚Ä¢ V√≠ d·ª•: Nh√¢n v·∫≠t 5‚òÖ ti·∫øn l√™n 8‚òÖ c·∫ßn 4 ƒë√°
‚Ä¢ Nh√¢n v·∫≠t Limited/Premium c·∫ßn nhi·ªÅu ƒë√° h∆°n

üíé V·ªÄ ƒê√Å TI·∫æN H√ìA:
‚Ä¢ M·ªói nh√¢n v·∫≠t c·∫ßn ƒë√° c√πng nguy√™n t·ªë (üî• Pyro, üíß Hydro...)
‚Ä¢ Brilliant Diamond üíé d√πng ƒë∆∞·ª£c cho M·ªåI nh√¢n v·∫≠t
‚Ä¢ ƒê√° c√≥ th·ªÉ k·∫øt h·ª£p t·ª´ 10 m·∫£nh ƒë√°

‚¨ÜÔ∏è GI·ªöI H·∫†N TI·∫æN H√ìA:
‚Ä¢ Nh√¢n v·∫≠t 4‚òÖ: T·ªëi ƒëa 8 sao ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
‚Ä¢ Nh√¢n v·∫≠t 5‚òÖ: T·ªëi ƒëa 10 sao ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
‚Ä¢ M·ªói l·∫ßn ti·∫øn h√≥a tƒÉng th√™m 1 sao

üßÆ L·ª¢I √çCH TI·∫æN H√ìA:
‚Ä¢ Ch·ªâ s·ªë tƒÉng x1.5 m·ªói sao
‚Ä¢ Gi√° tr·ªã tƒÉng x2 m·ªói sao
‚Ä¢ S·ª©c m·∫°nh PVP tƒÉng ƒë√°ng k·ªÉ

‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG: C·∫£ hai nh√¢n v·∫≠t v√† ƒë√° ti·∫øn h√≥a ƒë·ªÅu s·∫Ω b·ªã m·∫•t sau khi ti·∫øn h√≥a th√†nh c√¥ng!`,
    levelup: `üìä H∆Ø·ªöNG D·∫™N N√ÇNG C·∫§P NH√ÇN V·∫¨T üìä
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üëæ V·∫¨T PH·∫®M KINH NGHI·ªÜM:
‚Ä¢ Hero's Wit - Cung c·∫•p 20,000 EXP (Hi·∫øm)
‚Ä¢ Adventurer's Experience - Cung c·∫•p 5,000 EXP (Ph·ªï bi·∫øn)
‚Ä¢ Wanderer's Advice - Cung c·∫•p 1,000 EXP (Th∆∞·ªùng g·∫∑p)

üîÑ C√ÅCH N√ÇNG C·∫§P:
1. Thu th·∫≠p v·∫≠t ph·∫©m kinh nghi·ªám t·ª´ gacha (10% t·ªâ l·ªá)
2. D√πng l·ªánh: .gacha levelup #ID_NH√ÇN_V·∫¨T #ID_KINH_NGHI·ªÜM

üìà SO S√ÅNH V·ªöI TI·∫æN H√ìA SAO:
‚Ä¢ N√¢ng c·∫•p: TƒÉng ch·ªâ s·ªë nh·∫π (+10% m·ªói c·∫•p)
‚Ä¢ Ti·∫øn h√≥a: TƒÉng ch·ªâ s·ªë m·∫°nh (+50% m·ªói sao)

‚ö†Ô∏è GI·ªöI H·∫†N C·∫§P ƒê·ªò:
‚Ä¢ Nh√¢n v·∫≠t 3‚òÖ: T·ªëi ƒëa c·∫•p 8
‚Ä¢ Nh√¢n v·∫≠t 4‚òÖ: T·ªëi ƒëa c·∫•p 8
‚Ä¢ Nh√¢n v·∫≠t 5‚òÖ: T·ªëi ƒëa c·∫•p 10
‚Ä¢ Nh√¢n v·∫≠t ti·∫øn h√≥a: C·∫•p t·ªëi ƒëa = S·ªë sao + 5

üí° M·∫∏O:
‚Ä¢ N√¢ng c·∫•p tr∆∞·ªõc khi ti·∫øn h√≥a ƒë·ªÉ t·ªëi ∆∞u ch·ªâ s·ªë
‚Ä¢ T·ªâ l·ªá nh·∫≠n EXP t∆∞∆°ng t·ª± m·∫£nh ƒë√° ti·∫øn h√≥a`,
    trading: `ü§ù H∆Ø·ªöNG D·∫™N TRAO ƒê·ªîI V·∫¨T PH·∫®M ü§ù
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1Ô∏è‚É£ T·∫†NG QU√Ä / ƒê·ªÄ NGH·ªä TRAO ƒê·ªîI:
- L·ªánh: .gacha trade #ID_c·ªßa_b·∫°n [#ID_mu·ªën_ƒë·ªïi] @t√™n
- V√≠ d·ª• t·∫∑ng qu√†: .gacha trade #1234 @NguoiNhan
- V√≠ d·ª• trao ƒë·ªïi: .gacha trade #1234 #5678 @NguoiNhan

2Ô∏è‚É£ CH·∫§P NH·∫¨N / T·ª™ CH·ªêI:
- Ch·∫•p nh·∫≠n: .gacha accept <m√£_giao_d·ªãch>
- T·ª´ ch·ªëi: .gacha decline <m√£_giao_d·ªãch>

üìù C√ÅC LO·∫†I V·∫¨T PH·∫®M C√ì TH·ªÇ TRAO ƒê·ªîI:
‚Ä¢ Nh√¢n v·∫≠t (m·ªçi ƒë·ªô hi·∫øm)
‚Ä¢ ƒê√° ti·∫øn h√≥a v√† m·∫£nh ƒë√°
‚Ä¢ V·∫≠t ph·∫©m kinh nghi·ªám

‚ö†Ô∏è H·∫†N CH·∫æ:
‚Ä¢ Th·∫ª Limited/Premium ch·ªâ c√≥ th·ªÉ b√°n qua ƒë·∫•u gi√°

‚è±Ô∏è TH·ªúI H·∫†N CH·∫§P NH·∫¨N:
‚Ä¢ M·ªói ƒë·ªÅ ngh·ªã trao ƒë·ªïi c√≥ hi·ªáu l·ª±c trong 5 ph√∫t
‚Ä¢ Sau th·ªùi gian n√†y, ƒë·ªÅ ngh·ªã s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n

‚ö†Ô∏è L∆ØU √ù:
‚Ä¢ Trao ƒë·ªïi v·ªõi ch√™nh l·ªách gi√° tr·ªã l·ªõn s·∫Ω c√≥ c·∫£nh b√°o
‚Ä¢ V·∫≠t ph·∫©m s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ngay khi giao d·ªãch ho√†n t·∫•t
‚Ä¢ Kh√¥ng th·ªÉ h·ªßy sau khi ƒë√£ ch·∫•p nh·∫≠n
‚Ä¢ N√™n xem k·ªπ c√°c v·∫≠t ph·∫©m tr∆∞·ªõc khi trao ƒë·ªïi`,
    constellation: `üåü H∆Ø·ªöNG D·∫™N CONSTELLATION (CH√íM SAO) üåü
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìù GI·ªöI THI·ªÜU:
‚Ä¢ Constellation l√† h·ªá th·ªëng n√¢ng c·∫•p ƒë·∫∑c bi·ªát cho nh√¢n v·∫≠t
‚Ä¢ M·ªü kh√≥a constellation tƒÉng s·ª©c m·∫°nh v√† m·ªü k·ªπ nƒÉng ƒë·∫∑c bi·ªát
‚Ä¢ M·ªói nh√¢n v·∫≠t c√≥ t·ªëi ƒëa 6 constellation (C1-C6)

üíé STELLA FORTUNA:
‚Ä¢ Stella Fortuna l√† v·∫≠t ph·∫©m d√πng ƒë·ªÉ m·ªü kh√≥a constellation
‚Ä¢ Nh·∫≠n ƒë∆∞·ª£c khi pull nh√¢n v·∫≠t tr√πng ho·∫∑c t·ª´ h·ªá th·ªëng pity
‚Ä¢ C√≥ 2 lo·∫°i: Stella Fortuna th∆∞·ªùng v√† Universal Stella hi·∫øm

üìä L·ª¢I √çCH:
‚Ä¢ C1-C2: TƒÉng hi·ªáu su·∫•t chi·∫øn ƒë·∫•u c∆° b·∫£n (+15-20%)
‚Ä¢ C3-C4: TƒÉng c·∫•p k·ªπ nƒÉng v√† m·ªü kh√≥a hi·ªáu ·ª©ng m·∫°nh (+25-30%)
‚Ä¢ C5-C6: TƒÉng s·ª©c m·∫°nh ƒë√°ng k·ªÉ v√† m·ªü kh√≥a ti·ªÅm nƒÉng t·ªëi ƒëa (+40-50%)

‚öîÔ∏è S·ª®C M·∫†NH:
‚Ä¢ ATK, DEF, HP tƒÉng theo ph·∫ßn trƒÉm t∆∞∆°ng ·ª©ng
‚Ä¢ Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát d·ª±a tr√™n nh√¢n v·∫≠t
‚Ä¢ Gi√° tr·ªã nh√¢n v·∫≠t tƒÉng ƒë√°ng k·ªÉ

‚ùì C√ÅCH S·ª¨ D·ª§NG:
1. Ki·ªÉm tra kho ƒë·ªì: .gacha inv
2. X√°c ƒë·ªãnh ID nh√¢n v·∫≠t (#1234) v√† ID Stella (#5678)
3. M·ªü kh√≥a constellation: .gacha const #1234 #5678

‚ö†Ô∏è L∆ØU √ù:
‚Ä¢ M·ªói constellation ch·ªâ c√≥ th·ªÉ m·ªü kh√≥a theo th·ª© t·ª± (C1‚ÜíC2‚ÜíC3...)
‚Ä¢ Stella ƒë∆∞·ª£c d√πng s·∫Ω bi·∫øn m·∫•t sau khi m·ªü kh√≥a
‚Ä¢ M·ªói nh√¢n v·∫≠t ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c Stella c·ªßa ch√≠nh n√≥ ho·∫∑c Universal Stella
‚Ä¢ Xem th√¥ng tin pity Stella v·ªõi l·ªánh: .gacha spity`,
  };
}
module.exports = {
  name: "gacha",
  dev: "HNT",
  usedby: 0,
  info: "game Gacha m·ªü th·∫ª",
  onPrefix: true,
  category: "Games",
  usages: ".gacha [pull/auction/info/help]",
  cooldowns: 5,
  onLoad: function () {
    createBackup("startup");

    if (Object.keys(CHARACTER_IDS).length === 0) {
      console.log("‚ö†Ô∏è C·∫¢NH B√ÅO: CHARACTER_IDS tr·ªëng, th·ª≠ ph·ª•c h·ªìi t·ª´ backup");
      const result = restoreFromBackup();
      if (result.success) {
        console.log("‚úÖ ƒê√£ t·ª± ƒë·ªông ph·ª•c h·ªìi d·ªØ li·ªáu t·ª´ backup");
      } else {
        console.error("‚ùå Kh√¥ng th·ªÉ t·ª± ƒë·ªông ph·ª•c h·ªìi d·ªØ li·ªáu");
      }
    }

    setInterval(() => createBackup("daily"), 24 * 60 * 60 * 1000);
    setInterval(() => createBackup("auto"), 4 * 60 * 60 * 1000);
  },
  onLaunch: async function ({ api, event, target }) {
    const { threadID, messageID, senderID } = event;
    const gachaData = loadGachaData();

    const userDataPath = path.join(__dirname, "../events/cache/rankData.json");
    let userName = "Unknown";
    try {
      const userData = JSON.parse(fs.readFileSync(userDataPath));
      userName = userData[senderID]?.name || "Unknown";
    } catch (error) {
      console.error("Error reading userData:", error);
    }

    if (!gachaData[senderID] || !gachaData[senderID].inventory) {
      gachaData[senderID] = {
        inventory: [],
        pullsSinceLastFiveStar: 0,
        pullsSinceLastFourStar: 0,
        totalPulls: 0,
        lastPull: 0,
      };
      saveGachaData(gachaData);
    }

    const userData = gachaData[senderID];

    if (!target[0]) {
      const help = getDetailedHelp();
      return api.sendMessage(
        `${help.basic}\n\n` +
        "üí° G√µ c√°c l·ªánh sau ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt:\n" +
        ".gacha help auction - H∆∞·ªõng d·∫´n ƒë·∫•u gi√°\n" +
        ".gacha help upgrade - H∆∞·ªõng d·∫´n n√¢ng c·∫•p\n" +
        ".gacha help levelup - H∆∞·ªõng d·∫´n n√¢ng c·∫•p b·∫±ng EXP\n" +
        ".gacha help trade - H∆∞·ªõng d·∫´n trao ƒë·ªïi v·∫≠t ph·∫©m\n" +
        ".gacha help const - H∆∞·ªõng d·∫´n h·ªá th·ªëng constellation\n",
        threadID,
        messageID
      );
    }
    const action =
      {
        m·ªü: "pull",
        mo: "pull",
        pull: "pull",
        trade: "trade",
        auction: "auction",
        dau: "auction",
        bid: "bid",
        info: "info",
        inv: "inventory",
        kho: "inventory",
        bxh: "bxh",
        rank: "rank",
        levelup: "levelup",
        level: "levelup",
      }[target[0]?.toLowerCase()] || target[0];

    switch (action) {
      case "pull": {
        const balance = await getBalance(senderID);
        const lastPull = userData.lastPull || 0;
        const now = Date.now();
        const cooldownLeft = PULL_COOLDOWN * 1000 - (now - lastPull);
        if (cooldownLeft > 0) {
          return api.sendMessage(
            `‚è≥ Vui l√≤ng ƒë·ª£i ${Math.ceil(cooldownLeft / 1000)} gi√¢y n·ªØa!`,
            threadID,
            messageID
          );
        }

        if (balance < PULL_COST) {
          return api.sendMessage(
            "‚ùå Kh√¥ng ƒë·ªß Ti·ªÅn!\n" +
            `üí∞ Gi√°: ${PULL_COST}\n` +
            `üíµ Hi·ªán c√≥: ${balance}`,
            threadID,
            messageID
          );
        }
        const pullResult = doPull(userData);
        const currentRates = calculateDynamicRates(userData);
        await updateBalance(senderID, -PULL_COST);

        userData.totalPulls++;
        userData.lastPull = now;
        saveGachaData(gachaData);

        if (pullResult.isStone) {
          userData.inventory.push(pullResult.charId);
          saveGachaData(gachaData);

          const stone = CHARACTER_IDS[pullResult.charId];

          try {
            // X√°c ƒë·ªãnh xem ƒë√¢y l√† ƒë√° hay m·∫£nh ƒë√°
            const isFragment = pullResult.isFragment || stone.isFragment;
            const stoneImage = await createStoneResultImage({
              userId: senderID,
              userName,
              stone: stone,
              stoneRarity: stone.stoneType === "UNIVERSAL" ? 5 : 4,
              isFragment: isFragment,
            });

            return api.sendMessage(
              {
                body:
                  `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
                  `${stone.emoji} ${stone.name}\n` +
                  `üìù ${stone.description}\n` +
                  `üíé ${isFragment ? "M·∫£nh ƒë√°" : "ƒê√°"} ti·∫øn h√≥a nguy√™n t·ªë ${stone.element
                  }\n` +
                  `${isFragment
                    ? "üß© C·∫ßn 10 m·∫£nh ƒë·ªÉ gh√©p th√†nh ƒë√° ho√†n ch·ªânh\n"
                    : ""
                  }` +
                  `üí∞ Gi√° tr·ªã: $${stone.value.toLocaleString()}\n\n` +
                  `üîÆ ID: #${pullResult.charId
                    .replace(isFragment ? "FRAGMENT_" : "STONE_", "")
                    .slice(-4)}\n` +
                  `‚ùì D√πng .gacha inv ƒë·ªÉ xem c√°c ${isFragment ? "m·∫£nh ƒë√°" : "ƒë√°"
                  } ti·∫øn h√≥a`,
                attachment: fs.createReadStream(stoneImage),
              },
              threadID,
              () => {
                fs.unlinkSync(stoneImage);
              },
              messageID
            );
          } catch (error) {
            console.error("Error displaying stone:", error);
            return api.sendMessage(
              `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
              `${stone.emoji} ${stone.name}\n` +
              `üìù ${stone.description}\n` +
              `üíé ƒê√° ti·∫øn h√≥a nguy√™n t·ªë ${stone.element}\n` +
              `üí∞ Gi√° tr·ªã: $${stone.value.toLocaleString()}`,
              threadID,
              messageID
            );
          }
        }
        if (pullResult.isExpItem) {
          const expItem = CHARACTER_IDS[pullResult.charId];
          if (!expItem)
            return api.sendMessage(
              "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m!",
              threadID,
              messageID
            );

          userData.inventory.push(pullResult.charId);
          saveGachaData(gachaData);

          try {
            const expItemImage = await createExpItemResultImage({
              userId: senderID,
              userName,
              expItem: expItem,
              expValue: expItem.expValue,
              description: expItem.description,
              itemRarity: expItem.rarity,
              itemValue: expItem.value,
            });

            return api.sendMessage(
              {
                body:
                  `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
                  `üìö ${expItem.name}\n` +
                  `üìù ${expItem.description}\n` +
                  `‚≠ê ƒê·ªô hi·∫øm: ${expItem.rarity}‚òÖ\n` +
                  `üìä EXP: +${expItem.expValue.toLocaleString()}\n` +
                  `üí∞ Gi√° tr·ªã: $${expItem.value.toLocaleString()}\n\n` +
                  `üîÆ ID: #${pullResult.charId
                    .replace("EXP_", "")
                    .slice(-4)}\n` +
                  `‚ùì D√πng .gacha levelup #ID_NH√ÇN_V·∫¨T #${pullResult.charId.slice(
                    -4
                  )} ƒë·ªÉ n√¢ng c·∫•p nh√¢n v·∫≠t`,
                attachment: fs.createReadStream(expItemImage),
              },
              threadID,
              () => fs.unlinkSync(expItemImage),
              messageID
            );
          } catch (error) {
            console.error("Error displaying EXP item:", error);
            return api.sendMessage(
              `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
              `üìö ${expItem.name}\n` +
              `üìù ${expItem.description}\n` +
              `‚≠ê ƒê·ªô hi·∫øm: ${expItem.rarity}‚òÖ\n` +
              `üìä EXP: +${expItem.expValue.toLocaleString()}\n` +
              `üí∞ Gi√° tr·ªã: $${expItem.value.toLocaleString()}\n\n` +
              `üîÆ ID: #${pullResult.charId.replace("EXP_", "").slice(-4)}\n` +
              `‚ùì D√πng .gacha levelup #ID_NH√ÇN_V·∫¨T #${pullResult.charId.slice(
                -4
              )} ƒë·ªÉ n√¢ng c·∫•p nh√¢n v·∫≠t`,
              threadID,
              messageID
            );
          }
        }
        // N·∫øu kh√¥ng ph·∫£i ƒë√° (l√† nh√¢n v·∫≠t)
        const charId = pullResult.charId;
        const characterName = CHARACTER_IDS[charId].name;
        const is3Star = CHARACTER_RATINGS.THREE_STAR.includes(characterName);

        if (is3Star) {
          if (!userData.threeStarCount) {
            userData.threeStarCount = 0;
          }
          userData.threeStarCount++;
          await updateBalance(senderID, 200);
          if (userData.threeStarCount >= 20) {
            userData.threeStarCount = 0;
            const elements = Object.keys(ELEMENTAL_FRAGMENTS).filter(
              (e) => e !== "UNIVERSAL"
            );
            const randomElement =
              elements[Math.floor(Math.random() * elements.length)];
            const fragmentId = createStoneFragment(randomElement);
            userData.inventory.push(fragmentId);
            setTimeout(() => {
              const fragment = CHARACTER_IDS[fragmentId];
              api.sendMessage(
                `üéÅ PH·∫¶N TH∆Ø·ªûNG ƒê·∫∂C BI·ªÜT! üéÅ\n\n` +
                `B·∫°n ƒë√£ nh·∫≠n ƒë·ªß 20 nh√¢n v·∫≠t 3‚òÖ!\n` +
                `Nh·∫≠n ƒë∆∞·ª£c: 1 ${fragment.emoji} ${fragment.name}\n` +
                `M√¥ t·∫£: ${fragment.description}\n` +
                `ID: #${fragmentId.slice(-4)}\n\n` +
                `üí° H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠ch l≈©y ti·∫øp t·ª•c`,
                threadID
              );
            }, 2000);
            if (pullResult.isStella) {
              userData.inventory.push(pullResult.charId);
              saveGachaData(gachaData);

              const stellaItem = CHARACTER_IDS[pullResult.charId];
              if (!stellaItem) {
                return api.sendMessage(
                  "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m Stella Fortuna!",
                  threadID,
                  messageID
                );
              }

              // Ph·∫ßn m·ªõi: T√¨m nh√¢n v·∫≠t t∆∞∆°ng ·ª©ng trong inventory ƒë·ªÉ t·ª± ƒë·ªông n√¢ng c·∫•p
              const targetCharacterName = stellaItem.targetCharacter || pullResult.originalChar;
              let foundCharId = null;
              let foundChar = null;

              // T√¨m nh√¢n v·∫≠t ph√π h·ª£p ƒë·ªÉ n√¢ng c·∫•p (character c√πng t√™n, ch∆∞a max constellation)
              for (const id of userData.inventory) {
                const char = CHARACTER_IDS[id];
                if (char && char.type === "character" && char.name === targetCharacterName) {
                  // Ki·ªÉm tra nh√¢n v·∫≠t ƒë√£ max constellation ch∆∞a (t·ªëi ƒëa C6)
                  const currentConstellation = char.constellation || 0;
                  if (currentConstellation < 6) {
                    foundCharId = id;
                    foundChar = char;
                    break;
                  }
                }
              }

              // N·∫øu t√¨m th·∫•y nh√¢n v·∫≠t ph√π h·ª£p, t·ª± ƒë·ªông n√¢ng c·∫•p constellation
              if (foundCharId && foundChar) {
                const currentLevel = foundChar.constellation || 0;
                const nextLevel = currentLevel + 1;
                foundChar.constellation = nextLevel;

                // L·∫•y th√¥ng tin constellation t∆∞∆°ng ·ª©ng
                const constellationData = CHARACTER_CONSTELLATIONS[foundChar.name];
                let constellationName = "Unknown";
                let constellationEffect = "TƒÉng s·ª©c m·∫°nh t·ªïng th·ªÉ";

                if (constellationData && constellationData[currentLevel]) {
                  const constellationInfo = constellationData[currentLevel];
                  constellationName = constellationInfo.name;
                  constellationEffect = constellationInfo.description;

                  // TƒÉng s·ª©c m·∫°nh theo constellation
                  foundChar.stats = foundChar.stats || { atk: 100, def: 100, hp: 500 };
                  const boost = 1 + constellationInfo.powerBoost;

                  foundChar.stats.atk = Math.floor(foundChar.stats.atk * boost);
                  foundChar.stats.def = Math.floor(foundChar.stats.def * boost);
                  foundChar.stats.hp = Math.floor(foundChar.stats.hp * boost);

                  // Th√™m hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát
                  foundChar.specialEffects = foundChar.specialEffects || [];
                  foundChar.specialEffects.push(constellationInfo.effect);

                  // TƒÉng gi√° tr·ªã nh√¢n v·∫≠t
                  foundChar.value = Math.floor(foundChar.value * (1 + constellationInfo.powerBoost));
                }

                // X√≥a Stella Fortuna kh·ªèi inventory sau khi ƒë√£ s·ª≠ d·ª•ng
                userData.inventory = userData.inventory.filter(id => id !== pullResult.charId);
                saveGachaData(gachaData);
                saveCharacterDatabase();

                // Ch·ªâ g·ª≠i th√¥ng b√°o vƒÉn b·∫£n, kh√¥ng g·ª≠i ·∫£nh
                announceConstellationUnlock(
                  api,
                  threadID,
                  userName,
                  foundChar.name,
                  nextLevel,
                  constellationName,
                  constellationEffect
                );

                // Tr·∫£ v·ªÅ th√¥ng b√°o k·∫øt qu·∫£ pull d·∫°ng vƒÉn b·∫£n
                return api.sendMessage(
                  `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
                  `‚ú® B·∫†N ƒê√É NH·∫¨N ƒê∆Ø·ª¢C STELLA FORTUNA! ${pullResult.isPity ? '(PITY)' : ''}\n` +
                  `üìù ƒê√£ t·ª± ƒë·ªông m·ªü kh√≥a ch√≤m sao C${nextLevel} cho ${foundChar.name}\n` +
                  `${pullResult.isPity ? 'üéØ K√≠ch ho·∫°t t·ª´ h·ªá th·ªëng pity!\n' : ''}` +
                  `üí™ S·ª©c m·∫°nh nh√¢n v·∫≠t ƒë√£ tƒÉng ${Math.round(constellationData[currentLevel].powerBoost * 100)}%\n\n` +
                  `‚≠ê ƒê·ªô hi·∫øm: 5‚òÖ\n` +
                  `üîÆ ID nh√¢n v·∫≠t: #${foundCharId.slice(-4)}`,
                  threadID,
                  messageID
                );
              }

              // Tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t ph√π h·ª£p ho·∫∑c t·∫•t c·∫£ ƒë√£ max constellation
              try {
                const stellaImage = await createStellaResultImage({
                  userId: senderID,
                  userName,
                  stella: stellaItem,
                  originalChar: pullResult.originalChar,
                  isUniversal: stellaItem.isUniversal
                });

                return api.sendMessage(
                  {
                    body: `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
                      `‚ú® B·∫†N ƒê√É NH·∫¨N ƒê∆Ø·ª¢C STELLA FORTUNA! ${pullResult.isPity ? '(PITY)' : ''}\n` +
                      `üìù Ch√¨a kh√≥a cho ch√≤m sao: ${pullResult.originalChar}\n` +
                      `${pullResult.isPity ? 'üéØ K√≠ch ho·∫°t t·ª´ h·ªá th·ªëng pity!\n' : ''}` +
                      `üí° ${!foundChar ? 'B·∫°n ch∆∞a c√≥ nh√¢n v·∫≠t n√†y trong kho ƒë·ªì' : 'Nh√¢n v·∫≠t n√†y ƒë√£ ƒë·∫°t C6 (max)'}\n` +
                      `üí° D√πng l·ªánh ".gacha const #ID-NH√ÇN-V·∫¨T #ID-STELLA" ƒë·ªÉ m·ªü kh√≥a ch√≤m sao\n\n` +
                      `‚≠ê ƒê·ªô hi·∫øm: 5‚òÖ\n` +
                      `üí∞ Gi√° tr·ªã: $${stellaItem.value.toLocaleString()}\n` +
                      `üîÆ ID: #${pullResult.charId.slice(-4)}`,
                    attachment: fs.createReadStream(stellaImage),
                  },
                  threadID,
                  () => fs.unlinkSync(stellaImage),
                  messageID
                );
              } catch (error) {
                console.error("Error creating Stella Fortuna image:", error);
                return api.sendMessage(
                  `üéÆ K·∫æT QU·∫¢ GACHA üéÆ\n\n` +
                  `‚ú® B·∫†N ƒê√É NH·∫¨N ƒê∆Ø·ª¢C STELLA FORTUNA!\n` +
                  `üìù Ch√¨a kh√≥a cho ch√≤m sao: ${pullResult.originalChar}\n` +
                  `üí° ${!foundChar ? 'B·∫°n ch∆∞a c√≥ nh√¢n v·∫≠t n√†y trong kho ƒë·ªì' : 'Nh√¢n v·∫≠t n√†y ƒë√£ ƒë·∫°t C6 (max)'}\n` +
                  `üí° D√πng l·ªánh ".gacha const #ID-NH√ÇN-V·∫¨T #ID-STELLA" ƒë·ªÉ m·ªü kh√≥a ch√≤m sao\n\n` +
                  `‚≠ê ƒê·ªô hi·∫øm: 5‚òÖ\n` +
                  `üí∞ Gi√° tr·ªã: $${stellaItem.value.toLocaleString()}`,
                  threadID,
                  messageID
                );
              }
            }
          }
        } else {
          console.log(
            `ƒêang th√™m nh√¢n v·∫≠t ${characterName} (${charId}) v√†o inventory c·ªßa ${senderID}`
          );
          console.log(
            `Inventory tr∆∞·ªõc khi th√™m: ${userData.inventory.length} items`
          );

          userData.inventory.push(charId);

          saveGachaData(gachaData);

          console.log(
            `ƒê√£ th√™m ${characterName} (${charId}) v√†o inventory c·ªßa ${senderID}`
          );
          console.log(
            `Inventory sau khi th√™m: ${userData.inventory.length} items`
          );
        }

        let rarity = "‚≠ê‚≠ê‚≠ê";
        if (CHARACTER_RATINGS.FIVE_STAR.includes(characterName))
          rarity = "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê";
        else if (CHARACTER_RATINGS.FOUR_STAR.includes(characterName))
          rarity = "‚≠ê‚≠ê‚≠ê‚≠ê";

        const charInfo = CUSTOM_CHARACTER_DATA[CHARACTER_IDS[charId].name] ||
          (await genshin.characters(CHARACTER_IDS[charId].name.toLowerCase()).catch(() => null));
        const imagePath = await getCharacterImage(CHARACTER_IDS[charId].name);

        const charRarity = CHARACTER_RATINGS.FIVE_STAR.includes(
          CHARACTER_IDS[charId].name
        )
          ? "5"
          : CHARACTER_RATINGS.FOUR_STAR.includes(CHARACTER_IDS[charId].name)
            ? "4"
            : "3";

        const resultImage = await createPullResultImage({
          userId: senderID,
          userName,
          character: {
            name: CHARACTER_IDS[charId].name,
            image: imagePath,
            id: charId,
            isPremium: PREMIUM_FIVE_STARS.includes(CHARACTER_IDS[charId].name),
            isEvolved: CHARACTER_IDS[charId].isEvolved || false,
            isMaxEvolved: CHARACTER_IDS[charId].isMaxEvolved || false,
          },
          rarity: charRarity,
          starLevel: CHARACTER_IDS[charId].starLevel,
          evolvedStars: pullResult.evolvedStars,
          stats: {
            element: charInfo?.element || "Unknown",
            weapon: charInfo?.weapon || "Unknown",
            quote: charInfo?.quote || "...",
            skills: charInfo?.skills || [],
          },
          currentRates,
          cardValue: CHARACTER_IDS[charId].value,
        });

        return api.sendMessage(
          {
            attachment: fs.createReadStream(resultImage),
          },
          threadID,
          () => {
            fs.unlinkSync(resultImage);
            if (imagePath) fs.unlinkSync(imagePath);
          },
          messageID
        );
      }
      case "help": {
        const type = target[1]?.toLowerCase();
        const help = getDetailedHelp();

        if (type === "trade" || type === "trading") {
          return api.sendMessage(help.trading, threadID, messageID);
        } else if (type === "auction") {
          return api.sendMessage(help.auction, threadID, messageID);
        } else if (type === "upgrade" || type === "evolve") {
          return api.sendMessage(help.upgrade, threadID, messageID);
        } else if (type === "levelup" || type === "level" || type === "exp") {
          return api.sendMessage(help.levelup, threadID, messageID);
        } else if (type === "constellation" || type === "const") {
          return api.sendMessage(help.constellation, threadID, messageID);
        } else {
          return api.sendMessage(help.basic, threadID, messageID);
        }
      }
      case "info": {
        const currentRates = calculateDynamicRates(userData);
        const stonePityCount = userData.pullsSinceLastStone || 0;
        const stonePityThreshold = 30;
        const universalPityCount = userData.pullsSinceLastUniversalStone || 0;
        const universalPityThreshold = 300;
        return api.sendMessage(
          "üìä TH√îNG TIN T·ªà L·ªÜ GACHA üìä\n" +
          "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
          `üí∞ Gi√°: ${PULL_COST} $/l·∫ßn m·ªü\n\n` +
          "üéØ T·ªâ l·ªá hi·ªán t·∫°i:\n" +
          `5‚≠ê: ${currentRates.FIVE_STAR.toFixed(2)}%\n` +
          `4‚≠ê Ti·∫øn h√≥a: ${currentRates.EVOLVED_FOUR_STAR.toFixed(2)}%\n` +
          `4‚≠ê: ${currentRates.FOUR_STAR.toFixed(2)}%\n` +
          `3‚≠ê: ${currentRates.THREE_STAR.toFixed(2)}%\n\n` +
          "üí´ H·ªá th·ªëng tƒÉng t·ªâ l·ªá:\n" +
          "‚Ä¢ T·ªâ l·ªá tƒÉng theo s·ªë l·∫ßn kh√¥ng ra item hi·∫øm\n" +
          "‚Ä¢ T·ªâ l·ªá tƒÉng theo t·ªïng s·ªë l·∫ßn m·ªü\n" +
          `‚Ä¢ ƒê√£ m·ªü: ${userData.totalPulls} l·∫ßn\n` +
          `‚Ä¢ S·ªë l·∫ßn ch∆∞a ra 5‚≠ê: ${userData.pullsSinceLastFiveStar} l·∫ßn\n` +
          `‚Ä¢ S·ªë l·∫ßn ch∆∞a ra 4‚≠ê: ${userData.pullsSinceLastFourStar} l·∫ßn\n` +
          `‚Ä¢ S·ªë l·∫ßn ch∆∞a ra ƒë√°: ${stonePityCount} l·∫ßn\n\n` +
          (stonePityCount >= stonePityThreshold ? "üíé ƒê·∫¢M B·∫¢O NH·∫¨N ƒê√Å ·ªû L·∫¶N M·ªû TI·∫æP THEO!\n\n" : "") +
          "üíé H·ªÜ TH·ªêNG PITY ƒê√Å üíé\n" +
          "‚Ä¢ M·ªói 30 l·∫ßn m·ªü kh√¥ng ra ƒë√°: ƒê·∫£m b·∫£o nh·∫≠n ƒë√°\n" +
          `‚Ä¢ ƒê√° v≈© tr·ª• pity: ${universalPityCount}/${universalPityThreshold} pull\n` +
          "‚Ä¢ T·ªâ l·ªá ƒë√° v≈© tr·ª• tƒÉng d·∫ßn theo s·ªë l·∫ßn m·ªü",
          threadID,
          messageID
        );
      }
      case "trade": {
        const mention = Object.keys(event.mentions)[0];
        if (!mention) {
          return api.sendMessage(
            "‚ùå B·∫°n ph·∫£i tag ng∆∞·ªùi ƒë·ªÉ trao ƒë·ªïi!\n\n" +
            "C√°ch d√πng ƒë√∫ng:\n" +
            ".gacha trade #ID_c·ªßa_b·∫°n #ID_mu·ªën_ƒë·ªïi @t√™n\n" +
            "V√≠ d·ª•: .gacha trade #1234 #5678 @MinhAnh\n\n" +
            "üí° ƒê·ªÉ t·∫∑ng qu√† (kh√¥ng y√™u c·∫ßu v·∫≠t ph·∫©m), b·ªè qua #ID_mu·ªën_ƒë·ªïi",
            threadID,
            messageID
          );
        }

        if (mention === senderID) {
          return api.sendMessage(
            "‚ùå B·∫°n kh√¥ng th·ªÉ trao ƒë·ªïi v·ªõi ch√≠nh m√¨nh!",
            threadID,
            messageID
          );
        }

        if (!target[1]) {
          return api.sendMessage(
            "‚ùå B·∫°n ph·∫£i ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m mu·ªën ƒë∆∞a ra!\n\n" +
            "C√°ch d√πng ƒë√∫ng:\n" +
            ".gacha trade #ID_c·ªßa_b·∫°n [#ID_mu·ªën_ƒë·ªïi] @t√™n\n\n" +
            "üí° D√πng .gacha inv ƒë·ªÉ xem ID v·∫≠t ph·∫©m c·ªßa b·∫°n",
            threadID,
            messageID
          );
        }

        if (!gachaData[mention]) {
          return api.sendMessage(
            "‚ùå Ng∆∞·ªùi ƒë∆∞·ª£c tag ch∆∞a tham gia h·ªá th·ªëng gacha!",
            threadID,
            messageID
          );
        }

        const targetUserData = gachaData[mention];

        const offerInputId = target[1].replace(/[^\d]/g, "");
        let foundOfferId = null;
        for (const itemId of userData.inventory) {
          if (itemId.endsWith(offerInputId) || itemId.includes(offerInputId)) {
            foundOfferId = itemId;
            break;
          }
        }

        if (!foundOfferId) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID #${offerInputId} trong kho ƒë·ªì c·ªßa b·∫°n!\n\n` +
            "üí° D√πng .gacha inv ƒë·ªÉ xem l·∫°i danh s√°ch v·∫≠t ph·∫©m",
            threadID,
            messageID
          );
        }

        let requestedItemId = null;
        if (target[2] && target[2].startsWith("#")) {
          const requestInputId = target[2].replace(/[^\d]/g, "");
          for (const itemId of targetUserData.inventory) {
            if (
              itemId.endsWith(requestInputId) ||
              itemId.includes(requestInputId)
            ) {
              requestedItemId = itemId;
              break;
            }
          }

          if (!requestedItemId) {
            return api.sendMessage(
              `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID #${requestInputId} trong kho ƒë·ªì c·ªßa ƒë·ªëi ph∆∞∆°ng!\n\n` +
              "üí° H·ªç c√≥ th·ªÉ ch∆∞a s·ªü h·ªØu v·∫≠t ph·∫©m n√†y",
              threadID,
              messageID
            );
          }
        }

        const offerItem = CHARACTER_IDS[foundOfferId];
        const requestItem = requestedItemId
          ? CHARACTER_IDS[requestedItemId]
          : null;

        if (
          foundOfferId.startsWith("CHAR_") &&
          PREMIUM_FIVE_STARS.includes(offerItem.name)
        ) {
          return api.sendMessage(
            "‚ùå KH√îNG TH·ªÇ TRAO ƒê·ªîI TH·∫∫ LIMITED!\n\n" +
            `Nh√¢n v·∫≠t ${offerItem.name} l√† th·∫ª Limited/Premium ƒë·∫∑c bi·ªát.\n` +
            `Th·∫ª Limited ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c b√°n th√¥ng qua h·ªá th·ªëng ƒë·∫•u gi√°.\n\n` +
            "üí° S·ª≠ d·ª•ng: .gacha auction #ID <gi√°_kh·ªüi_ƒëi·ªÉm> ƒë·ªÉ ƒë·∫•u gi√° th·∫ª n√†y.",
            threadID,
            messageID
          );
        }

        if (requestedItemId) {
          const requestItem = CHARACTER_IDS[requestedItemId];
          if (
            requestedItemId.startsWith("CHAR_") &&
            PREMIUM_FIVE_STARS.includes(requestItem.name)
          ) {
            return api.sendMessage(
              "‚ùå KH√îNG TH·ªÇ Y√äU C·∫¶U TH·∫∫ LIMITED!\n\n" +
              `Nh√¢n v·∫≠t ${requestItem.name} l√† th·∫ª Limited/Premium ƒë·∫∑c bi·ªát.\n` +
              `Th·∫ª Limited ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c mua th√¥ng qua h·ªá th·ªëng ƒë·∫•u gi√°.\n\n` +
              "üí° H√£y tham gia c√°c phi√™n ƒë·∫•u gi√° ƒë·ªÉ c√≥ c∆° h·ªôi s·ªü h·ªØu th·∫ª n√†y.",
              threadID,
              messageID
            );
          }
        }
        if (!offerItem) {
          return api.sendMessage(
            "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin v·∫≠t ph·∫©m!",
            threadID,
            messageID
          );
        }

        const targetUserName = getUserName(mention);

        let offerDescription = "";
        if (foundOfferId.startsWith("CHAR_")) {
          const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(offerItem.name)
            ? "5‚òÖ"
            : CHARACTER_RATINGS.FOUR_STAR.includes(offerItem.name)
              ? "4‚òÖ"
              : "3‚òÖ";
          offerDescription = `‚Ä¢ Nh√¢n v·∫≠t: ${offerItem.name} (${rarity})\n`;
        } else if (foundOfferId.startsWith("STONE_")) {
          offerDescription = `‚Ä¢ ƒê√° ti·∫øn h√≥a: ${offerItem.name}\n`;
        } else if (foundOfferId.startsWith("FRAGMENT_")) {
          offerDescription = `‚Ä¢ M·∫£nh ƒë√°: ${offerItem.name}\n`;
        } else if (foundOfferId.startsWith("EXP_")) {
          offerDescription = `‚Ä¢ V·∫≠t ph·∫©m EXP: ${offerItem.name}\n`;
        }
        offerDescription += `‚Ä¢ ID: #${foundOfferId.slice(-4)}\n`;
        offerDescription += `‚Ä¢ Gi√° tr·ªã: $${offerItem.value.toLocaleString()}\n`;

        let requestDescription = "";
        if (requestItem) {
          if (requestedItemId.startsWith("CHAR_")) {
            const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(
              requestItem.name
            )
              ? "5‚òÖ"
              : CHARACTER_RATINGS.FOUR_STAR.includes(requestItem.name)
                ? "4‚òÖ"
                : "3‚òÖ";
            requestDescription = `‚Ä¢ Nh√¢n v·∫≠t: ${requestItem.name} (${rarity})\n`;
          } else if (requestedItemId.startsWith("STONE_")) {
            requestDescription = `‚Ä¢ ƒê√° ti·∫øn h√≥a: ${requestItem.name}\n`;
          } else if (requestedItemId.startsWith("FRAGMENT_")) {
            requestDescription = `‚Ä¢ M·∫£nh ƒë√°: ${requestItem.name}\n`;
          } else if (requestedItemId.startsWith("EXP_")) {
            requestDescription = `‚Ä¢ V·∫≠t ph·∫©m EXP: ${requestItem.name}\n`;
          }
          requestDescription += `‚Ä¢ ID: #${requestedItemId.slice(-4)}\n`;
          requestDescription += `‚Ä¢ Gi√° tr·ªã: $${requestItem.value.toLocaleString()}\n\n`;
        }

        let warningMessage = "";
        if (
          requestItem &&
          Math.abs(offerItem.value - requestItem.value) > 100000
        ) {
          warningMessage =
            "‚ö†Ô∏è C·∫¢NH B√ÅO: Giao d·ªãch c√≥ ch√™nh l·ªách gi√° tr·ªã ƒë√°ng k·ªÉ!\n\n";
        }

        const tradeId = `TRADE_${Date.now()}_${Math.floor(
          Math.random() * 1000
        )}`;
        const shortId = String(Math.floor(Math.random() * 1000)).padStart(
          3,
          "0"
        );

        activeTrades.set(tradeId, {
          id: tradeId,
          shortId: shortId,
          from: senderID,
          to: mention,
          offer: foundOfferId,
          request: requestedItemId,
          timestamp: Date.now(),
          expiry: Date.now() + 5 * 60 * 1000,
          status: "pending",
        });

        api.sendMessage(
          `${warningMessage}ü§ù ƒê·ªÄ NGH·ªä TRAO ƒê·ªîI ü§ù\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üë§ Ng∆∞·ªùi ƒë·ªÅ ngh·ªã: ${userName}\n` +
          `üë§ Ng∆∞·ªùi nh·∫≠n: ${targetUserName}\n\n` +
          `üì¶ B·∫†N S·∫º T·∫∂NG:\n` +
          (requestDescription || "‚Ä¢ Kh√¥ng c√≥\n\n") +
          `üì¶ B·∫†N S·∫º NH·∫¨N:\n` +
          offerDescription +
          "\n" +
          `‚è∞ Th·ªùi h·∫°n: 5 ph√∫t\n` +
          `üîñ M√£ giao d·ªãch: ${shortId}\n\n` +
          `üí° ƒê·ªÉ ch·∫•p nh·∫≠n, h√£y g√µ:\n` +
          `.gacha accept ${shortId}\n\n` +
          `‚ùå ƒê·ªÉ t·ª´ ch·ªëi, h√£y g√µ:\n` +
          `.gacha decline ${shortId}`,
          mention
        );

        return api.sendMessage(
          `‚úÖ ƒê√É G·ª¨I ƒê·ªÄ NGH·ªä TRAO ƒê·ªîI!\n\n` +
          `üì¶ V·∫≠t ph·∫©m ƒë·ªÅ ngh·ªã: ${offerItem.name}\n` +
          `üì¶ V·∫≠t ph·∫©m y√™u c·∫ßu: ${requestItem ? requestItem.name : "Kh√¥ng c√≥ (qu√† t·∫∑ng)"
          }\n` +
          `üë§ ƒê·∫øn ng∆∞·ªùi ch∆°i: ${targetUserName}\n\n` +
          `‚è∞ Th·ªùi h·∫°n: 5 ph√∫t\n` +
          `üîñ M√£ giao d·ªãch: ${shortId}\n\n` +
          `üí° ƒê·ªÅ ngh·ªã s·∫Ω t·ª± ƒë·ªông h·ªßy sau th·ªùi h·∫°n.`,
          threadID,
          messageID
        );
      }

      case "accept": {
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå B·∫°n ph·∫£i cung c·∫•p m√£ giao d·ªãch!\n" +
            "C√°ch d√πng: .gacha accept M√É_GIAO_D·ªäCH",
            threadID,
            messageID
          );
        }

        const shortId = target[1];
        const tradeId = [...activeTrades.keys()].find(
          (id) => activeTrades.get(id).shortId === shortId
        );

        if (!tradeId) {
          return api.sendMessage(
            "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi m√£ n√†y ho·∫∑c giao d·ªãch ƒë√£ h·∫øt h·∫°n!",
            threadID,
            messageID
          );
        }

        const trade = activeTrades.get(tradeId);

        if (trade.to !== senderID) {
          return api.sendMessage(
            "‚ùå B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c ƒë·ªÅ ngh·ªã trao ƒë·ªïi!",
            threadID,
            messageID
          );
        }

        if (trade.expiry < Date.now()) {
          activeTrades.delete(tradeId);
          return api.sendMessage(
            "‚ùå Giao d·ªãch ƒë√£ h·∫øt h·∫°n!",
            threadID,
            messageID
          );
        }

        const fromUserData = gachaData[trade.from];
        const toUserData = gachaData[trade.to];

        if (!fromUserData.inventory.includes(trade.offer)) {
          activeTrades.delete(tradeId);
          return api.sendMessage(
            "‚ùå V·∫≠t ph·∫©m ƒë√£ kh√¥ng c√≤n trong kho ƒë·ªì c·ªßa ng∆∞·ªùi ƒë·ªÅ ngh·ªã!",
            threadID,
            messageID
          );
        }

        if (trade.request && !toUserData.inventory.includes(trade.request)) {
          activeTrades.delete(tradeId);
          return api.sendMessage(
            "‚ùå V·∫≠t ph·∫©m y√™u c·∫ßu kh√¥ng c√≤n trong kho ƒë·ªì c·ªßa b·∫°n!",
            threadID,
            messageID
          );
        }

        const [fromUserName, toUserName] = await Promise.all([
          getUserName(trade.from),
          getUserName(trade.to),
        ]);

        fromUserData.inventory = fromUserData.inventory.filter(
          (id) => id !== trade.offer
        );
        toUserData.inventory.push(trade.offer);

        if (trade.request) {
          toUserData.inventory = toUserData.inventory.filter(
            (id) => id !== trade.request
          );
          fromUserData.inventory.push(trade.request);
        }

        trade.status = "accepted";
        trade.completedAt = Date.now();
        saveGachaData(gachaData);

        let offerDescription = "";
        const offerItem = CHARACTER_IDS[trade.offer];
        if (trade.offer.startsWith("CHAR_")) {
          const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(offerItem.name)
            ? "5‚òÖ"
            : CHARACTER_RATINGS.FOUR_STAR.includes(offerItem.name)
              ? "4‚òÖ"
              : "3‚òÖ";
          offerDescription = `‚Ä¢ Nh√¢n v·∫≠t: ${offerItem.name} (${rarity})\n`;
        } else if (trade.offer.startsWith("STONE_")) {
          offerDescription = `‚Ä¢ ƒê√° ti·∫øn h√≥a: ${offerItem.name}\n`;
        } else if (trade.offer.startsWith("FRAGMENT_")) {
          offerDescription = `‚Ä¢ M·∫£nh ƒë√°: ${offerItem.name}\n`;
        } else {
          offerDescription = `‚Ä¢ V·∫≠t ph·∫©m: ${offerItem.name}\n`;
        }
        offerDescription += `‚Ä¢ ID: #${trade.offer.slice(-4)}\n`;
        offerDescription += `‚Ä¢ Gi√° tr·ªã: $${offerItem.value.toLocaleString()}\n\n`;

        let requestDescription = "";
        if (trade.request) {
          const requestItem = CHARACTER_IDS[trade.request];
          if (trade.request.startsWith("CHAR_")) {
            const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(
              requestItem.name
            )
              ? "5‚òÖ"
              : CHARACTER_RATINGS.FOUR_STAR.includes(requestItem.name)
                ? "4‚òÖ"
                : "3‚òÖ";
            requestDescription = `‚Ä¢ Nh√¢n v·∫≠t: ${requestItem.name} (${rarity})\n`;
          } else if (trade.request.startsWith("STONE_")) {
            requestDescription = `‚Ä¢ ƒê√° ti·∫øn h√≥a: ${requestItem.name}\n`;
          } else if (trade.request.startsWith("FRAGMENT_")) {
            requestDescription = `‚Ä¢ M·∫£nh ƒë√°: ${requestItem.name}\n`;
          } else {
            requestDescription = `‚Ä¢ V·∫≠t ph·∫©m: ${requestItem.name}\n`;
          }
          requestDescription += `‚Ä¢ ID: #${trade.request.slice(-4)}\n`;
          requestDescription += `‚Ä¢ Gi√° tr·ªã: $${requestItem.value.toLocaleString()}\n\n`;
        }

        api.sendMessage(
          `‚úÖ TRAO ƒê·ªîI TH√ÄNH C√îNG! ‚úÖ\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üë§ ${fromUserName} ƒë√£ nh·∫≠n ƒë∆∞·ª£c:\n` +
          (requestDescription || "‚Ä¢ Kh√¥ng c√≥\n\n") +
          `üë§ ${toUserName} ƒë√£ nh·∫≠n ƒë∆∞·ª£c:\n` +
          offerDescription +
          `ü§ù Giao d·ªãch ho√†n t·∫•t!`,
          threadID,
          messageID
        );

        api.sendMessage(
          `‚úÖ GIAO D·ªäCH C·ª¶A B·∫†N ƒê√É ƒê∆Ø·ª¢C CH·∫§P NH·∫¨N!\n\n` +
          `üë§ ${toUserName} ƒë√£ ch·∫•p nh·∫≠n ƒë·ªÅ ngh·ªã trao ƒë·ªïi c·ªßa b·∫°n\n\n` +
          `üì¶ B·∫°n ƒë√£ nh·∫≠n: ${trade.request ? CHARACTER_IDS[trade.request].name : "Kh√¥ng c√≥"
          }\n` +
          `üì¶ B·∫°n ƒë√£ t·∫∑ng: ${offerItem.name}\n\n` +
          `‚è±Ô∏è Th·ªùi gian: ${new Date().toLocaleString()}`,
          trade.from
        );

        activeTrades.delete(tradeId);
        return;
      }

      case "decline": {
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå B·∫°n ph·∫£i cung c·∫•p m√£ giao d·ªãch!\n" +
            "C√°ch d√πng: .gacha decline M√É_GIAO_D·ªäCH",
            threadID,
            messageID
          );
        }

        const shortId = target[1];
        const tradeId = [...activeTrades.keys()].find(
          (id) => activeTrades.get(id).shortId === shortId
        );

        if (!tradeId) {
          return api.sendMessage(
            "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi m√£ n√†y ho·∫∑c giao d·ªãch ƒë√£ h·∫øt h·∫°n!",
            threadID,
            messageID
          );
        }

        const trade = activeTrades.get(tradeId);

        if (trade.to !== senderID && trade.from !== senderID) {
          return api.sendMessage(
            "‚ùå B·∫°n kh√¥ng li√™n quan ƒë·∫øn giao d·ªãch n√†y!",
            threadID,
            messageID
          );
        }

        api.sendMessage("‚ùå Giao d·ªãch ƒë√£ b·ªã t·ª´ ch·ªëi.", threadID, messageID);

        if (senderID !== trade.from) {
          api.sendMessage(
            `‚ùå ${userName} ƒë√£ t·ª´ ch·ªëi ƒë·ªÅ ngh·ªã trao ƒë·ªïi c·ªßa b·∫°n.`,
            trade.from
          );
        }

        activeTrades.delete(tradeId);
        return;
      }
      case "rank": {
        return showPvPRanking(api, threadID, messageID);
      }

      case "bxh": {
        const rankType = target[1]?.toLowerCase() || "value";
        return showRanking(api, threadID, messageID, rankType);
      }
      case "pvp": {
        const pvpAction = target[1]?.toLowerCase();

        if (!pvpAction) {
          return api.sendMessage(
            "‚öîÔ∏è H·ªÜ TH·ªêNG PVP C·∫¢I TI·∫æN ‚öîÔ∏è\n" +
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
            "1Ô∏è‚É£ Thi·∫øt l·∫≠p ƒë·ªôi h√¨nh (t·ªëi ƒëa 5 nh√¢n v·∫≠t):\n" +
            ".gacha pvp team #ID1 #ID2 #ID3 #ID4 #ID5\n\n" +
            "2Ô∏è‚É£ Ph√¢n t√≠ch ƒë·ªôi h√¨nh:\n" +
            ".gacha analyze\n\n" +
            "3Ô∏è‚É£ Th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i:\n" +
            ".gacha pvp challenge @t√™n\n\n" +
            "4Ô∏è‚É£ Ch·∫•p nh·∫≠n/t·ª´ ch·ªëi:\n" +
            ".gacha pvp accept #ID_TH√ÅCH_ƒê·∫§U\n" +
            ".gacha pvp decline #ID_TH√ÅCH_ƒê·∫§U\n\n" +
            "5Ô∏è‚É£ Xem th·ªëng k√™ PVP:\n" +
            ".gacha pvp stats\n\n" +
            "üí° ƒê·ªôi h√¨nh l·ªõn h∆°n (5 nh√¢n v·∫≠t) gi√∫p t·∫≠n d·ª•ng c·ªông h∆∞·ªüng nguy√™n t·ªë v√† vai tr√≤ t·ªët h∆°n!",
            threadID,
            messageID
          );
        }

        switch (pvpAction) {
          case "team": {
            if (!target[2]) {
              return api.sendMessage(
                "‚ùå Vui l√≤ng cung c·∫•p ID nh√¢n v·∫≠t cho ƒë·ªôi h√¨nh PVP!\n\n" +
                "üìù C√∫ ph√°p:\n.gacha pvp team #ID1 #ID2 ... #ID5\n" +
                "üí° B·∫°n c√≥ th·ªÉ ch·ªçn t·ª´ 1-5 nh√¢n v·∫≠t cho ƒë·ªôi h√¨nh\n" +
                "‚ö†Ô∏è Ch·ªâ nh√¢n v·∫≠t m·ªõi c√≥ th·ªÉ tham gia (kh√¥ng d√πng ƒë∆∞·ª£c ƒë√°, m·∫£nh ƒë√°, ho·∫∑c v·∫≠t ph·∫©m)",
                threadID,
                messageID
              );
            }

            const characterIds = [];
            const maxTeamSize = 5;

            for (let i = 2; i < 2 + maxTeamSize && i < target.length; i++) {
              const inputId = target[i].replace(/[^\d]/g, "");
              if (inputId) {
                let foundId = null;

                for (const charId of userData.inventory) {
                  if (charId.startsWith("CHAR_") && (charId.endsWith(inputId) || charId.includes(inputId))) {
                    foundId = charId;
                    break;
                  }
                }

                if (foundId) {
                  if (!characterIds.includes(foundId)) {
                    characterIds.push(foundId);
                  }
                } else {
                  return api.sendMessage(
                    `‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t v·ªõi ID #${inputId}!\n\n` +
                    "üí° D√πng .gacha inv ƒë·ªÉ xem danh s√°ch nh√¢n v·∫≠t",
                    threadID,
                    messageID
                  );
                }
              }
            }

            if (characterIds.length === 0) {
              return api.sendMessage(
                "‚ùå B·∫°n ph·∫£i ch·ªçn √≠t nh·∫•t 1 nh√¢n v·∫≠t cho ƒë·ªôi h√¨nh PVP!",
                threadID,
                messageID
              );
            }

            // C·∫≠p nh·∫≠t ƒë·ªôi h√¨nh PVP
            userData.pvpTeam = characterIds;
            saveGachaData(gachaData);

            // T·∫°o th√¥ng tin v·ªÅ ƒë·ªôi h√¨nh
            const teamInfo = await formatTeamInfo(characterIds);
            const teamPower = calculateTeamPower(characterIds);

            // Th√™m ph√¢n t√≠ch ƒë·ªôi h√¨nh
            const analysis = analyzeTeamComposition(characterIds);
            let resonanceInfo = "";
            if (analysis.resonances.length > 0) {
              resonanceInfo = "\n\n‚ú® C·ªòNG H∆Ø·ªûNG NGUY√äN T·ªê:\n" + analysis.resonances.join("\n");
            }

            return api.sendMessage(
              "‚úÖ ƒê√É THI·∫æT L·∫¨P ƒê·ªòI H√åNH PVP! ‚úÖ\n" +
              "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
              "üë• ƒê·ªôi h√¨nh c·ªßa b·∫°n:\n" +
              teamInfo + "\n" +
              `üí™ S·ª©c m·∫°nh: ${teamPower.toLocaleString()}\n` +
              `üõ°Ô∏è S·ªë nh√¢n v·∫≠t: ${characterIds.length}/5` + resonanceInfo + "\n\n" +
              "üí° B·∫°n c√≥ th·ªÉ ph√¢n t√≠ch ƒë·ªôi h√¨nh v·ªõi:\n.gacha analyze\n" +
              "‚öîÔ∏è Th√°ch ƒë·∫•u v·ªõi:\n.gacha pvp challenge @t√™n",
              threadID,
              messageID
            );
          }

          case "challenge": {
            // Ki·ªÉm tra ƒë·ªôi h√¨nh
            if (!userData.pvpTeam || userData.pvpTeam.length === 0) {
              return api.sendMessage(
                "‚ùå B·∫°n ch∆∞a thi·∫øt l·∫≠p ƒë·ªôi h√¨nh PVP!\n" +
                "H√£y d√πng l·ªánh '.gacha pvp team' tr∆∞·ªõc.",
                threadID,
                messageID
              );
            }

            // Ki·ªÉm tra cooldown
            if (userData.pvpStats?.lastBattle) {
              const cooldownLeft =
                PVP_COOLDOWN - (Date.now() - userData.pvpStats.lastBattle);
              if (cooldownLeft > 0) {
                return api.sendMessage(
                  `‚è≥ Vui l√≤ng ƒë·ª£i ${Math.ceil(
                    cooldownLeft / 1000
                  )} gi√¢y n·ªØa ƒë·ªÉ th√°ch ƒë·∫•u ti·∫øp!`,
                  threadID,
                  messageID
                );
              }
            }

            // Ki·ªÉm tra ng∆∞·ªùi ƒë∆∞·ª£c tag
            const mention = Object.keys(event.mentions)[0];
            if (!mention) {
              return api.sendMessage(
                "‚ùå B·∫°n ph·∫£i tag ng∆∞·ªùi mu·ªën th√°ch ƒë·∫•u!\n" +
                "C√°ch d√πng: .gacha pvp challenge @t√™n",
                threadID,
                messageID
              );
            }

            // Ki·ªÉm tra kh√¥ng th·ªÉ t·ª± th√°ch ƒë·∫•u ch√≠nh m√¨nh
            if (mention === senderID) {
              return api.sendMessage(
                "‚ùå B·∫°n kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh!",
                threadID,
                messageID
              );
            }

            // T·∫°o th√°ch ƒë·∫•u
            const challengeId = createPvpChallenge(
              senderID,
              mention,
              userData.pvpTeam
            );

            const mentionName = event.mentions[mention].replace("@", "");

            return api.sendMessage(
              `‚öîÔ∏è TH√ÅCH ƒê·∫§U PVP ‚öîÔ∏è\n\n` +
              `üë§ ${userName} ƒë√£ th√°ch ƒë·∫•u ${mentionName}!\n` +
              `üí™ S·ª©c m·∫°nh ƒë·ªôi h√¨nh: ${calculateTeamPower(
                userData.pvpTeam
              )}\n\n` +
              `‚è∞ Th·ªùi h·∫°n ch·∫•p nh·∫≠n: 5 ph√∫t\n` +
              `üîñ ID th√°ch ƒë·∫•u: ${challengeId.slice(-8)}\n\n` +
              `ƒê·ªÉ ch·∫•p nh·∫≠n, h√£y thi·∫øt l·∫≠p ƒë·ªôi h√¨nh v√† g√µ:\n` +
              `.gacha pvp accept ${challengeId.slice(-8)}`,
              threadID,
              messageID
            );
          }

          case "accept": {
            if (!target[2]) {
              return api.sendMessage(
                "‚ùå B·∫°n ph·∫£i cung c·∫•p ID th√°ch ƒë·∫•u!\n" +
                "C√°ch d√πng: .gacha pvp accept ID_TH√ÅCH_ƒê·∫§U",
                threadID,
                messageID
              );
            }

            // T√¨m th√°ch ƒë·∫•u
            const challengeId = [...activePvpChallenges.keys()].find((id) =>
              id.endsWith(target[2])
            );
            if (!challengeId) {
              return api.sendMessage(
                "‚ùå Kh√¥ng t√¨m th·∫•y th√°ch ƒë·∫•u v·ªõi ID n√†y ho·∫∑c th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n!",
                threadID,
                messageID
              );
            }

            const challengeData = activePvpChallenges.get(challengeId);

            // Ki·ªÉm tra xem ng∆∞·ªùi ch·∫•p nh·∫≠n c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u
            if (challengeData.target !== senderID) {
              return api.sendMessage(
                "‚ùå B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!",
                threadID,
                messageID
              );
            }

            // Ki·ªÉm tra th·ªùi h·∫°n
            if (challengeData.expiry < Date.now()) {
              activePvpChallenges.delete(challengeId);
              return api.sendMessage(
                "‚ùå Th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n!",
                threadID,
                messageID
              );
            }

            // Ki·ªÉm tra ƒë·ªôi h√¨nh ng∆∞·ªùi ch·∫•p nh·∫≠n
            if (!userData.pvpTeam || userData.pvpTeam.length === 0) {
              return api.sendMessage(
                "‚ùå B·∫°n ch∆∞a thi·∫øt l·∫≠p ƒë·ªôi h√¨nh PVP!\n" +
                "H√£y d√πng l·ªánh '.gacha pvp team' tr∆∞·ªõc khi ch·∫•p nh·∫≠n th√°ch ƒë·∫•u.",
                threadID,
                messageID
              );
            }

            // B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u
            setTimeout(() => {
              api.sendMessage(
                "‚öîÔ∏è TR·∫¨N ƒê·∫§U PVP B·∫ÆT ƒê·∫¶U! ‚öîÔ∏è\n" + "ƒêang t√≠nh to√°n k·∫øt qu·∫£...",
                threadID,
                messageID
              );
            }, 5000);

            // X√≥a th√°ch ƒë·∫•u
            activePvpChallenges.delete(challengeId);

            // Ti·∫øn h√†nh tr·∫≠n ƒë·∫•u v√† hi·ªÉn th·ªã k·∫øt qu·∫£
            return executePvpBattle(
              api,
              threadID,
              messageID,
              challengeData,
              userData.pvpTeam
            );
          }

          case "decline": {
            // Ki·ªÉm tra ID th√°ch ƒë·∫•u
            if (!target[2]) {
              return api.sendMessage(
                "‚ùå B·∫°n ph·∫£i cung c·∫•p ID th√°ch ƒë·∫•u!\n" +
                "C√°ch d√πng: .gacha pvp decline ID_TH√ÅCH_ƒê·∫§U",
                threadID,
                messageID
              );
            }

            // T√¨m th√°ch ƒë·∫•u
            const challengeId = [...activePvpChallenges.keys()].find((id) =>
              id.endsWith(target[2])
            );
            if (!challengeId) {
              return api.sendMessage(
                "‚ùå Kh√¥ng t√¨m th·∫•y th√°ch ƒë·∫•u v·ªõi ID n√†y ho·∫∑c th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n!",
                threadID,
                messageID
              );
            }

            const challengeData = activePvpChallenges.get(challengeId);

            // Ki·ªÉm tra xem ng∆∞·ªùi t·ª´ ch·ªëi c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u
            if (challengeData.target !== senderID) {
              return api.sendMessage(
                "‚ùå B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c th√°ch ƒë·∫•u!",
                threadID,
                messageID
              );
            }

            // X√≥a th√°ch ƒë·∫•u
            activePvpChallenges.delete(challengeId);

            return api.sendMessage(
              "üö´ B·∫°n ƒë√£ t·ª´ ch·ªëi th√°ch ƒë·∫•u PVP!",
              threadID,
              messageID
            );
          }

          case "stats": {
            // Hi·ªÉn th·ªã th·ªëng k√™ PVP
            if (!userData.pvpStats) {
              return api.sendMessage(
                "üìä TH·ªêNG K√ä PVP üìä\n\n" +
                "B·∫°n ch∆∞a tham gia tr·∫≠n ƒë·∫•u PVP n√†o!",
                threadID,
                messageID
              );
            }

            const wins = userData.pvpStats.wins || 0;
            const losses = userData.pvpStats.losses || 0;
            const total = wins + losses;
            const winRate = total > 0 ? ((wins / total) * 100).toFixed(1) : 0;

            // T√≠nh h·∫°ng PVP
            let pvpRank = "T√¢n binh";
            if (wins >= 100) pvpRank = "Huy·ªÅn tho·∫°i";
            else if (wins >= 50) pvpRank = "B·∫≠c th·∫ßy";
            else if (wins >= 20) pvpRank = "Chuy√™n gia";
            else if (wins >= 10) pvpRank = "Chi·∫øn binh";
            else if (wins >= 5) pvpRank = "Kinh nghi·ªám";

            // T√≠nh s·ª©c m·∫°nh ƒë·ªôi h√¨nh
            const teamPower = userData.pvpTeam
              ? calculateTeamPower(userData.pvpTeam)
              : 0;

            return api.sendMessage(
              "üìä TH·ªêNG K√ä PVP üìä\n" +
              "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
              `üë§ ${userName}\n` +
              `üèÜ H·∫°ng: ${pvpRank}\n` +
              `üí™ S·ª©c m·∫°nh ƒë·ªôi h√¨nh: ${teamPower.toLocaleString()}\n\n` +
              `‚úÖ Th·∫Øng: ${wins} tr·∫≠n\n` +
              `‚ùå Thua: ${losses} tr·∫≠n\n` +
              `üìà T·ªâ l·ªá th·∫Øng: ${winRate}%\n\n` +
              `üí° S·ª≠ d·ª•ng '.gacha pvp team' ƒë·ªÉ thi·∫øt l·∫≠p ƒë·ªôi h√¨nh m·∫°nh h∆°n!`,
              threadID,
              messageID
            );
          }

          default: {
            return api.sendMessage(
              "‚ùå L·ªánh PVP kh√¥ng h·ª£p l·ªá!\n" +
              "S·ª≠ d·ª•ng '.gacha pvp' ƒë·ªÉ xem h∆∞·ªõng d·∫´n.",
              threadID,
              messageID
            );
          }
        }
      }
      case "analyze": {

        if (!userData.pvpTeam || userData.pvpTeam.length === 0) {
          return api.sendMessage(
            "‚ùå B·∫°n ch∆∞a thi·∫øt l·∫≠p ƒë·ªôi h√¨nh PVP!\n" +
            "S·ª≠ d·ª•ng l·ªánh: .gacha pvp team #ID1 #ID2 #ID3",
            threadID,
            messageID
          );
        }

        const teamPower = calculateTeamPower(userData.pvpTeam);
        const teamInfo = await formatTeamInfo(userData.pvpTeam);
        const analysis = analyzeTeamComposition(userData.pvpTeam);

        let elementText = "üìä Ph√¢n b·ªë nguy√™n t·ªë:\n";
        for (const [element, count] of Object.entries(analysis.elementCounts)) {
          const elementEmoji = {
            "Pyro": "üî•",
            "Hydro": "üíß",
            "Anemo": "üå™Ô∏è",
            "Electro": "‚ö°",
            "Cryo": "‚ùÑÔ∏è",
            "Geo": "ü™®",
            "Dendro": "üåø",
            "Unknown": "‚ùì"
          }[element] || "‚ùì";

          elementText += `${elementEmoji} ${element}: ${count}\n`;
        }

        let roleText = "üë• Ph√¢n b·ªë vai tr√≤:\n";
        roleText += `‚öîÔ∏è DPS: ${analysis.roleTypes.dps}\n`;
        roleText += `üõ°Ô∏è Tank: ${analysis.roleTypes.tank}\n`;
        roleText += `üí´ Support: ${analysis.roleTypes.support}\n`;
        roleText += `üíö Healer: ${analysis.roleTypes.healer}\n`;

        let resonanceText = "";
        if (analysis.resonances.length > 0) {
          resonanceText = "‚ú® C·ªông h∆∞·ªüng nguy√™n t·ªë:\n";
          resonanceText += analysis.resonances.join("\n");
        }

        let suggestionText = "";
        if (analysis.suggestions) {
          suggestionText = "üí° ƒê·ªÅ xu·∫•t c·∫£i thi·ªán:\n";
          suggestionText += analysis.suggestions;
        }

        return api.sendMessage(
          "üìã PH√ÇN T√çCH ƒê·ªòI H√åNH PVP üìã\n" +
          "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
          "üë• ƒê·ªôi h√¨nh c·ªßa b·∫°n:\n" +
          teamInfo + "\n" +
          `üí™ S·ª©c m·∫°nh t·ªïng: ${teamPower.toLocaleString()}\n\n` +
          elementText + "\n" +
          roleText + "\n" +
          (resonanceText ? resonanceText + "\n\n" : "\n") +
          "üìä ƒê√°nh gi√° ƒë·ªôi h√¨nh:\n" +
          analysis.analysis + "\n" +
          (suggestionText ? suggestionText : ""),
          threadID,
          messageID
        );
      }

      case "const":
      case "constellation": {
        if (!target[1] || !target[2]) {
          return api.sendMessage(
            "üåü M·ªû KH√ìA CH√íM SAO - CONSTELLATION üåü\n" +
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
            "C√°ch d√πng: .gacha const #ID_NH√ÇN_V·∫¨T #ID_STELLA\n" +
            "V√≠ d·ª•: .gacha const #1234 #5678\n\n" +
            "üí° Xem kho ƒë·ªì: .gacha inv",
            threadID,
            messageID
          );
        }

        const charInputId = target[1].replace(/[^\d]/g, "");
        let foundCharId = null;
        for (const id of userData.inventory) {
          if (
            id.startsWith("CHAR_") &&
            (id.endsWith(charInputId) || id.includes(charInputId))
          ) {
            foundCharId = id;
            break;
          }
        }

        const stellaInputId = target[2].replace(/[^\d]/g, "");
        let foundStellaId = null;
        for (const id of userData.inventory) {
          if (
            id.startsWith("STELLA_") &&
            (id.endsWith(stellaInputId) || id.includes(stellaInputId))
          ) {
            foundStellaId = id;
            break;
          }
        }

        if (!foundCharId) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t v·ªõi ID #${charInputId}!\n\nüí° D√πng .gacha inv ƒë·ªÉ xem ID nh√¢n v·∫≠t`,
            threadID,
            messageID
          );
        }

        if (!foundStellaId) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y Stella Fortuna v·ªõi ID #${stellaInputId}!\n\nüí° D√πng .gacha inv ƒë·ªÉ xem ID Stella`,
            threadID,
            messageID
          );
        }

        // Ti·∫øn h√†nh unlock constellation
        const result = unlockConstellation(foundCharId, foundStellaId);

        if (!result.success) {
          let errorMessage = "‚ùå Kh√¥ng th·ªÉ m·ªü kh√≥a ch√≤m sao!";

          if (result.reason === "invalid_items") {
            errorMessage = "‚ùå V·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá!";
          } else if (result.reason === "not_constellation_item") {
            errorMessage = "‚ùå V·∫≠t ph·∫©m kh√¥ng ph·∫£i Stella Fortuna!";
          } else if (result.reason === "incompatible_stella") {
            errorMessage =
              "‚ùå Stella Fortuna kh√¥ng t∆∞∆°ng th√≠ch v·ªõi nh√¢n v·∫≠t n√†y!";
          } else if (result.reason === "max_constellation") {
            errorMessage = "‚ùå Nh√¢n v·∫≠t ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô ch√≤m sao t·ªëi ƒëa (C6)!";
          }

          return api.sendMessage(errorMessage, threadID, messageID);
        }

        // X√≥a Stella Fortuna kh·ªèi inventory sau khi unlock th√†nh c√¥ng
        userData.inventory = userData.inventory.filter((id) => id !== foundStellaId);
        saveGachaData(gachaData);

        const char = CHARACTER_IDS[foundCharId];
        const constellationData = CHARACTER_CONSTELLATIONS[char.name];
        const currentCLevel = result.newConstellation;
        const constellationName = constellationData && constellationData[currentCLevel - 1] ?
          constellationData[currentCLevel - 1].name : "Constellation " + currentCLevel;

        // Ch·ªâ th√¥ng b√°o b·∫±ng vƒÉn b·∫£n, kh√¥ng g·ª≠i ·∫£nh
        api.sendMessage(
          "üåü M·ªû KH√ìA CH√íM SAO TH√ÄNH C√îNG! üåü\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `üë§ Nh√¢n v·∫≠t: ${result.character}\n` +
          `üå† C·∫•p ƒë·ªô ch√≤m sao: C${result.newConstellation}\n` +
          `‚ú® Hi·ªáu ·ª©ng m·ªõi: ${result.effect}\n\n` +
          `üìä CH·ªà S·ªê M·ªöI:\n` +
          `‚öîÔ∏è ATK: ${char.stats.atk}\n` +
          `üõ°Ô∏è DEF: ${char.stats.def}\n` +
          `‚ù§Ô∏è HP: ${char.stats.hp}\n\n` +
          `üí∞ Gi√° tr·ªã m·ªõi: $${char.value.toLocaleString()}\n\n` +
          `üí° Stella Fortuna ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.`,
          threadID,
          messageID
        );

        // Th√¥ng b√°o c√¥ng khai trong nh√≥m
        announceConstellationUnlock(
          api,
          threadID,
          userName,
          char.name,
          result.newConstellation,
          constellationName,
          result.effect
        );

        return;
      }
      case "stellastats":
      case "spity": {
        if (
          !userData.stellaPity ||
          Object.keys(userData.stellaPity).length === 0
        ) {
          return api.sendMessage(
            "üîÆ TH·ªêNG K√ä STELLA PITY üîÆ\n" +
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
            "‚ùå B·∫°n ch∆∞a c√≥ d·ªØ li·ªáu pity cho Stella Fortuna!\n\n" +
            "üí° Pull th√™m nh√¢n v·∫≠t 5‚òÖ ƒë·ªÉ t√≠ch l≈©y pity",
            threadID,
            messageID
          );
        }

        // Hi·ªÉn th·ªã th·ªëng k√™ pity cho t·ª´ng nh√¢n v·∫≠t
        let message = "üîÆ TH·ªêNG K√ä STELLA PITY üîÆ\n";
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        message += "üë§ Nh√¢n v·∫≠t ƒëang t√≠ch l≈©y:\n\n";

        Object.entries(userData.stellaPity).forEach(([charName, pityCount]) => {
          const isPremium = PREMIUM_FIVE_STARS.includes(charName);
          const pityThreshold = isPremium
            ? STELLA_PITY_THRESHOLD + 1
            : STELLA_PITY_THRESHOLD;
          const stellaChance = Math.min(
            95,
            pityCount * STELLA_PITY_BOOST_PER_FAIL
          );

          message += `‚Ä¢ ${charName}: ${pityCount}/${pityThreshold} pulls\n`;
          message += `  üí´ T·ªâ l·ªá Stella: ${stellaChance.toFixed(1)}%\n`;
          if (pityCount >= pityThreshold) {
            message += `  ‚ú® ƒê·∫¢M B·∫¢O STELLA KHI PULL 5‚òÖ TI·∫æP THEO!\n`;
          }
          message += "\n";
        });

        message +=
          "üí° M·ªói pull 5‚òÖ kh√¥ng ƒë∆∞·ª£c Stella s·∫Ω tƒÉng " +
          `${STELLA_PITY_BOOST_PER_FAIL}% t·ªâ l·ªá ra Stella ·ªü pull ti·∫øp theo\n\n` +
          `üíé T√≠ch l≈©y ƒë·ªß ${STELLA_PITY_THRESHOLD} pulls s·∫Ω ƒë·∫£m b·∫£o ra Stella`;

        return api.sendMessage(message, threadID, messageID);
      }
      case "bag":
      case "inventory": {
        verifyInventory(senderID);

        const autoConverted = autoConvertFragments(userData);
        if (autoConverted) {
          saveGachaData(gachaData);
        }

        const characters = [];
        const stones = [];
        const fragments = [];
        let totalValue = 0;
        let page = 1;
        const expItems = [];

        if (target[1] && !isNaN(target[1])) {
          page = parseInt(target[1]);
        }

        if (
          target[1]?.toLowerCase() === "del" ||
          target[1]?.toLowerCase() === "delete"
        ) {
          if (!target[2]) {
            return api.sendMessage(
              "‚ùå Thi·∫øu th√¥ng tin x√≥a v·∫≠t ph·∫©m!\n\n" +
              "üìù C√°ch d√πng:\n" +
              "‚Ä¢ X√≥a 1 v·∫≠t ph·∫©m: .gacha inv del #ID\n" +
              "‚Ä¢ X√≥a nhi·ªÅu v·∫≠t ph·∫©m: .gacha inv del #ID1 #ID2...\n" +
              "‚Ä¢ X√≥a theo sao: .gacha inv del 3s/4s/5s all\n" +
              "‚Ä¢ X√≥a t·∫•t c·∫£: .gacha inv del all\n\n" +
              "‚ö†Ô∏è L∆∞u √Ω: B·∫°n s·∫Ω nh·∫≠n l·∫°i 30% gi√° tr·ªã v·∫≠t ph·∫©m",
              threadID,
              messageID
            );
          }

          if (
            target[2].toLowerCase().endsWith("s") &&
            target[3]?.toLowerCase() === "all"
          ) {
            const rarity = parseInt(target[2].charAt(0));
            if (![3, 4, 5].includes(rarity)) {
              return api.sendMessage(
                "‚ùå ƒê·ªô hi·∫øm kh√¥ng h·ª£p l·ªá! Ch·ªâ h·ªó tr·ª£ 3‚òÖ, 4‚òÖ v√† 5‚òÖ",
                threadID,
                messageID
              );
            }

            // T√¨m c√°c v·∫≠t ph·∫©m theo ƒë·ªô hi·∫øm
            const itemsToDelete = [];
            let totalRefund = 0;

            userData.inventory.forEach((id) => {
              const item = CHARACTER_IDS[id];
              if (!item || !item.name) return;

              let itemRarity;
              if (id.startsWith("CHAR_")) {
                if (CHARACTER_RATINGS.FIVE_STAR.includes(item.name))
                  itemRarity = 5;
                else if (CHARACTER_RATINGS.FOUR_STAR.includes(item.name))
                  itemRarity = 4;
                else itemRarity = 3;
              }

              if (itemRarity === rarity) {
                itemsToDelete.push({
                  id: id,
                  name: item.name,
                  value: item.value || 0,
                });
                totalRefund += Math.floor((item.value || 0) * 0.3);
              }
            });

            if (itemsToDelete.length === 0) {
              return api.sendMessage(
                `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m ${rarity}‚òÖ n√†o trong kho ƒë·ªì!`,
                threadID,
                messageID
              );
            }

            // X√°c nh·∫≠n x√≥a
            return api.sendMessage(
              `‚ö†Ô∏è X√ÅC NH·∫¨N X√ìA T·∫§T C·∫¢ V·∫¨T PH·∫®M ${rarity}‚òÖ?\n\n` +
              `üì¶ S·ªë l∆∞·ª£ng: ${itemsToDelete.length} v·∫≠t ph·∫©m\n` +
              `üí∞ T·ªïng gi√° tr·ªã: $${itemsToDelete
                .reduce((sum, item) => sum + item.value, 0)
                .toLocaleString()}\n` +
              `üíµ Nh·∫≠n l·∫°i: $${totalRefund.toLocaleString()}\n\n` +
              `üëâ ƒê·ªÉ x√°c nh·∫≠n, g√µ: .gacha inv del ${rarity}s confirm`,
              threadID,
              messageID
            );
          }

          // X·ª≠ l√Ω x√°c nh·∫≠n x√≥a theo ƒë·ªô hi·∫øm
          if (
            target[2].toLowerCase().endsWith("s") &&
            target[3]?.toLowerCase() === "confirm"
          ) {
            const rarity = parseInt(target[2].charAt(0));
            if (![3, 4, 5].includes(rarity)) return;

            const itemsToDelete = [];
            let totalRefund = 0;

            userData.inventory = userData.inventory.filter((id) => {
              const item = CHARACTER_IDS[id];
              if (!item || !item.name) return true;

              let itemRarity;
              if (id.startsWith("CHAR_")) {
                if (CHARACTER_RATINGS.FIVE_STAR.includes(item.name))
                  itemRarity = 5;
                else if (CHARACTER_RATINGS.FOUR_STAR.includes(item.name))
                  itemRarity = 4;
                else itemRarity = 3;
              }

              if (itemRarity === rarity) {
                itemsToDelete.push({
                  id: id,
                  name: item.name,
                  value: item.value || 0,
                });
                totalRefund += Math.floor((item.value || 0) * 0.3);
                return false;
              }
              return true;
            });

            await updateBalance(senderID, totalRefund);
            saveGachaData(gachaData);

            return api.sendMessage(
              `‚úÖ ƒê√É X√ìA TH√ÄNH C√îNG!\n\n` +
              `üì¶ ƒê√£ x√≥a: ${itemsToDelete.length} v·∫≠t ph·∫©m ${rarity}‚òÖ\n` +
              `üí∞ T·ªïng gi√° tr·ªã: $${itemsToDelete
                .reduce((sum, item) => sum + item.value, 0)
                .toLocaleString()}\n` +
              `üíµ ƒê√£ ho√†n l·∫°i: $${totalRefund.toLocaleString()}\n\n` +
              `üìä C√≤n l·∫°i: ${userData.inventory.length} v·∫≠t ph·∫©m`,
              threadID,
              messageID
            );
          }
          // X·ª≠ l√Ω x√≥a nhi·ªÅu v·∫≠t ph·∫©m
          const itemsToDelete = [];
          let totalRefund = 0;
          const failedIds = [];

          // Thu th·∫≠p c√°c ID c·∫ßn x√≥a
          for (let i = 2; i < target.length; i++) {
            const inputId = target[i].replace(/[^\d]/g, "");
            let found = false;

            for (const itemId of userData.inventory) {
              if (itemId.endsWith(inputId) || itemId.includes(inputId)) {
                const item = CHARACTER_IDS[itemId];
                if (item) {
                  itemsToDelete.push({
                    id: itemId,
                    name: item.name,
                    type: itemId.startsWith("CHAR_")
                      ? "Nh√¢n v·∫≠t"
                      : itemId.startsWith("STONE_")
                        ? "ƒê√° ti·∫øn h√≥a"
                        : "M·∫£nh ƒë√°",
                    value: item.value || 0,
                  });
                  totalRefund += Math.floor((item.value || 0) * 0.3);
                  found = true;
                  break;
                }
              }
            }

            if (!found) {
              failedIds.push(inputId);
            }
          }

          if (itemsToDelete.length === 0) {
            return api.sendMessage(
              "‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m n√†o ƒë·ªÉ x√≥a!\n" +
              (failedIds.length > 0
                ? `‚ö†Ô∏è ID kh√¥ng h·ª£p l·ªá: ${failedIds
                  .map((id) => "#" + id)
                  .join(", ")}\n`
                : "") +
              "\nüí° D√πng .gacha inv ƒë·ªÉ xem ID v·∫≠t ph·∫©m",
              threadID,
              messageID
            );
          }

          // X√≥a c√°c v·∫≠t ph·∫©m v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu
          userData.inventory = userData.inventory.filter(
            (id) => !itemsToDelete.some((item) => item.id === id)
          );
          await updateBalance(senderID, totalRefund);
          saveGachaData(gachaData);

          // T·∫°o th√¥ng b√°o k·∫øt qu·∫£
          let message = "üóëÔ∏è ƒê√É X√ìA V·∫¨T PH·∫®M TH√ÄNH C√îNG!\n";
          message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
          message += "üì¶ C√°c v·∫≠t ph·∫©m ƒë√£ x√≥a:\n";

          itemsToDelete.forEach((item, index) => {
            message += `${index + 1}. ${item.type}: ${item.name}\n`;
            message += `üí∞ Gi√° tr·ªã: $${item.value.toLocaleString()}\n`;
            message += `üîñ ID: #${item.id.slice(-4)}\n\n`;
          });

          message += `üíµ T·ªïng ho√†n l·∫°i: $${totalRefund.toLocaleString()} (30%)\n`;
          message += `üìä C√≤n l·∫°i: ${userData.inventory.length} v·∫≠t ph·∫©m`;

          if (failedIds.length > 0) {
            message += `\n\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: ${failedIds
              .map((id) => "#" + id)
              .join(", ")}`;
          }

          return api.sendMessage(message, threadID, messageID);
        }
        if (userData.inventory && Array.isArray(userData.inventory)) {
          for (const itemId of userData.inventory) {
            const item = CHARACTER_IDS[itemId];
            if (!item) continue;

            if (itemId.startsWith("CHAR_")) {
              characters.push({
                id: itemId,
                ...item,
                type: "character",
                rarity: CHARACTER_RATINGS.FIVE_STAR.includes(item.name)
                  ? 5
                  : CHARACTER_RATINGS.FOUR_STAR.includes(item.name)
                    ? 4
                    : 3,
              });
            } else if (itemId.startsWith("STONE_")) {

              stones.push({
                id: itemId,
                ...item,
                type: "stone"
              });
            } else if (itemId.startsWith("FRAGMENT_")) {

              fragments.push({
                id: itemId,
                ...item,
                type: "fragment"
              });
            } else if (itemId.startsWith("EXP_")) {
              expItems.push({
                id: itemId,
                ...item,
                type: "exp"
              });
            }
            totalValue += item.value || 0;
          }
        }

        const characterCounts = {
          5: characters.filter((char) => char.rarity === 5).length,
          4: characters.filter((char) => char.rarity === 4).length,
          3: characters.filter((char) => char.rarity === 3).length,
        };

        const totalItems = characters.length + stones.length + fragments.length;

        let inventoryMessage = "";
        if (autoConverted) {
          inventoryMessage = "‚ú® ƒê√£ t·ª± ƒë·ªông gh√©p m·∫£nh th√†nh ƒë√° ti·∫øn h√≥a!\n\n";
        }
        const inventoryImage = await createInventoryImage({
          userId: senderID,
          userName,
          characters,
          stones,
          expItems,
          fragments,
          totalValue,
          characterCounts,
          totalItems,
          currentPage: page,
          itemsPerPage: 20,
        });

        return api.sendMessage(
          {
            body: inventoryMessage +
              "\n‚ö†Ô∏è CH√ö √ù: Nh√¢n v·∫≠t sao c√†ng cao c√†ng c·∫ßn nhi·ªÅu ƒë√° ti·∫øn h√≥a!\n" +
              "üíé C√¥ng th·ª©c: C·∫ßn (S·ªë sao hi·ªán t·∫°i - ƒê·ªô hi·∫øm c∆° b·∫£n + 1) ƒë√° ti·∫øn h√≥a",
            attachment: fs.createReadStream(inventoryImage),
          },
          threadID,
          () => fs.unlinkSync(inventoryImage),
          messageID
        );
      }

      case "ainfo":
      case "auctioninfo": {
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå Vui l√≤ng cung c·∫•p ID phi√™n ƒë·∫•u gi√°!\n" +
            "C√°ch d√πng: .gacha ainfo ID_PHI√äN",
            threadID,
            messageID
          );
        }

        return showAuctionInfo(api, threadID, messageID, target[1]);
      }

      case "alist":
      case "auctionlist": {
        let filterType = null;
        if (target[1]) {
          const type = target[1].toLowerCase();
          if (type === "char" || type === "character") filterType = "character";
          else if (type === "stone") filterType = "stone";
          else if (type === "fragment") filterType = "fragment";
        }

        return showAuctionList(api, threadID, messageID, filterType);
      }

      case "myauctions": {
        const userAuctions = [...activeAuctions.values()].filter(
          (a) =>
            (a.seller === senderID || a.highestBidder === senderID) &&
            a.status === "active" &&
            a.endTime > Date.now()
        );

        if (userAuctions.length === 0) {
          return api.sendMessage(
            "üìã PHI√äN ƒê·∫§U GI√Å C·ª¶A B·∫†N üìã\n\n" +
            "‚ùå B·∫°n kh√¥ng c√≥ phi√™n ƒë·∫•u gi√° n√†o ƒëang di·ªÖn ra!\n\n" +
            "üí° B·∫°n c√≥ th·ªÉ:\n" +
            "‚Ä¢ T·∫°o phi√™n ƒë·∫•u gi√° m·ªõi: .gacha auction #ID <gi√°>\n" +
            "‚Ä¢ Tham gia c√°c phi√™n kh√°c: .gacha alist",
            threadID,
            messageID
          );
        }

        const selling = userAuctions.filter((a) => a.seller === senderID);
        const bidding = userAuctions.filter(
          (a) => a.highestBidder === senderID
        );

        let message = "üìã PHI√äN ƒê·∫§U GI√Å C·ª¶A B·∫†N üìã\n";
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

        if (selling.length > 0) {
          message += "üì§ ƒêANG B√ÅN:\n\n";

          selling.forEach((auction, index) => {
            const timeLeft = Math.max(0, auction.endTime - Date.now());
            const minutesLeft = Math.floor(timeLeft / 60000);

            const itemIcon =
              auction.itemType === "character"
                ? "üë§"
                : auction.itemType === "stone"
                  ? "üíé"
                  : "üß©";

            message += `${index + 1}. ${itemIcon} ${auction.itemName}\n`;
            message += `üí∞ Gi√° hi·ªán t·∫°i: $${auction.currentBid.toLocaleString()}\n`;
            message += `üë§ Ng∆∞·ªùi tr·∫£ gi√° cao nh·∫•t: ${auction.highestBidder
                ? getUserName(auction.highestBidder)
                : "Ch∆∞a c√≥"
              }\n`;
            message += `‚è∞ C√≤n l·∫°i: ${minutesLeft} ph√∫t\n`;
            message += `üîñ ID: ${auction.id}\n\n`;
          });
        }

        if (bidding.length > 0) {
          message += "üì• ƒêANG ƒê·∫∂T GI√Å CAO NH·∫§T:\n\n";

          bidding.forEach((auction, index) => {
            const timeLeft = Math.max(0, auction.endTime - Date.now());
            const minutesLeft = Math.floor(timeLeft / 60000);

            const itemIcon =
              auction.itemType === "character"
                ? "üë§"
                : auction.itemType === "stone"
                  ? "üíé"
                  : "üß©";

            message += `${index + 1}. ${itemIcon} ${auction.itemName}\n`;
            message += `üí∞ Gi√° hi·ªán t·∫°i: $${auction.currentBid.toLocaleString()}\n`;
            message += `üë§ Ng∆∞·ªùi b√°n: ${getUserName(auction.seller)}\n`;
            message += `‚è∞ C√≤n l·∫°i: ${minutesLeft} ph√∫t\n`;
            message += `üîñ ID: ${auction.id}\n\n`;
          });
        }

        message += "üí° ƒê·ªÉ xem chi ti·∫øt, h√£y d√πng:\n";
        message += ".gacha ainfo <ID>";

        return api.sendMessage(message, threadID, messageID);
      }
      case "card":
      case "view": {
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå Thi·∫øu ID nh√¢n v·∫≠t!\n\n" +
            "C√°ch d√πng: .gacha card #ID\n" +
            "VD: .gacha card #1234",
            threadID,
            messageID
          );
        }

        const inputId = target[1].replace(/[^\d]/g, "");

        let foundItemId = null;
        for (const itemId of userData.inventory) {
          const lastFourDigits = itemId.slice(-4);
          if (lastFourDigits === inputId) {
            foundItemId = itemId;
            break;
          }
        }

        if (!foundItemId) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t v·ªõi ID #${inputId}!`,
            threadID,
            messageID
          );
        }

        const char = CHARACTER_IDS[foundItemId];
        if (!char) {
          return api.sendMessage(
            "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n v·∫≠t!",
            threadID,
            messageID
          );
        }

        const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(char.name)
          ? "5"
          : CHARACTER_RATINGS.FOUR_STAR.includes(char.name)
            ? "4"
            : "3";

        const charInfo =
          CUSTOM_CHARACTER_DATA[char.name] ||
          (await genshin.characters(char.name.toLowerCase()).catch(() => null));

        const imagePath = await getCharacterImage(char.name);

        const cardImage = await createPullResultImage({
          userId: senderID,
          userName: userName,
          character: {
            name: char.name,
            image: imagePath,
            id: foundItemId,
            isPremium: PREMIUM_FIVE_STARS.includes(char.name),
          },
          rarity: rarity,
          stats: {
            element: charInfo?.element || "Unknown",
            weapon: charInfo?.weapon || "Unknown",
            quote: charInfo?.quote || "...",
            skills: charInfo?.skills || [],
          },
          cardValue: char.value,
          level: char.level || 1,
          starLevel: char.starLevel || parseInt(rarity),
          attributes: char.stats || {
            atk:
              char.stats?.atk ||
              (rarity === "5" ? 500 : rarity === "4" ? 300 : 100),
            def:
              char.stats?.def ||
              (rarity === "5" ? 500 : rarity === "4" ? 300 : 100),
            hp:
              char.stats?.hp ||
              (rarity === "5" ? 2000 : rarity === "4" ? 1000 : 500),
          },
        });

        return api.sendMessage(
          {
            body:
              `üìä TH√îNG TIN NH√ÇN V·∫¨T üìä\n\n` +
              `üë§ ${char.name} (ID: ${target[1]})\n` +
              `‚≠ê ƒê·ªô hi·∫øm: ${char.starLevel || rarity}‚òÖ\n` +
              `üìà C·∫•p ƒë·ªô: ${char.level || 1}\n` +
              (char.special ? "‚ú® ƒê·∫∑c bi·ªát: C√≥\n" : "") +
              `üí∞ Gi√° tr·ªã: $${char.value?.toLocaleString()}`,
            attachment: fs.createReadStream(cardImage),
          },
          threadID,
          () => {
            fs.unlinkSync(cardImage);
            if (imagePath) fs.unlinkSync(imagePath);
          },
          messageID
        );
      }
      case "stats": {
        // Hi·ªÉn th·ªã th·ªëng k√™ PVP
        if (!userData.pvpStats) {
          return api.sendMessage(
            "üìä TH·ªêNG K√ä PVP üìä\n\n" +
            "B·∫°n ch∆∞a tham gia tr·∫≠n ƒë·∫•u PVP n√†o!",
            threadID,
            messageID
          );
        }

        const wins = userData.pvpStats.wins || 0;
        const losses = userData.pvpStats.losses || 0;
        const seasonWins = userData.pvpStats.seasonWins || 0;
        const total = wins + losses;
        const winRate = total > 0 ? ((wins / total) * 100).toFixed(1) : 0;

        // T√≠nh h·∫°ng PVP s·ª≠ d·ª•ng h√†m m·ªõi
        const rankInfo = calculatePvPRank(wins);

        // T√≠nh s·ª©c m·∫°nh ƒë·ªôi h√¨nh
        const teamPower = userData.pvpTeam
          ? calculateTeamPower(userData.pvpTeam)
          : 0;

        return api.sendMessage(
          "üìä TH·ªêNG K√ä PVP üìä\n" +
          "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
          `üë§ ${userName}\n` +
          `üèÜ H·∫°ng: ${rankInfo.icon} ${rankInfo.rank}\n` +
          (rankInfo.nextRank ?
            `üìà C·∫ßn th√™m ${rankInfo.winsToNext} tr·∫≠n th·∫Øng ƒë·ªÉ l√™n h·∫°ng ${rankInfo.nextRank.name}\n` :
            "üåü ƒê√£ ƒë·∫°t h·∫°ng cao nh·∫•t!\n") +
          `üî∂ M√πa ${PVP_SEASONS.current.id}: ${seasonWins} tr·∫≠n th·∫Øng\n` +
          `üí™ S·ª©c m·∫°nh ƒë·ªôi h√¨nh: ${teamPower.toLocaleString()}\n\n` +
          `‚úÖ Th·∫Øng: ${wins} tr·∫≠n\n` +
          `‚ùå Thua: ${losses} tr·∫≠n\n` +
          `üìà T·ªâ l·ªá th·∫Øng: ${winRate}%\n\n` +
          `üí° S·ª≠ d·ª•ng '.gacha pvp team' ƒë·ªÉ thi·∫øt l·∫≠p ƒë·ªôi h√¨nh\n` +
          `üèÜ S·ª≠ d·ª•ng '.gacha pvp bxh' ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng`,
          threadID,
          messageID
        );
      }

      case "season": {
        const season = PVP_SEASONS.current;
        const now = Date.now();

        let message = `üèÜ M√ôA GI·∫¢I PVP ${season.id}: ${season.name} üèÜ
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        
        `;

        if (now < season.startDate) {
          message += `‚è≥ M√πa gi·∫£i s·∫Ω b·∫Øt ƒë·∫ßu v√†o: ${new Date(season.startDate).toLocaleDateString()}\n\n`;
        } else if (now > season.endDate) {
          message += `üèÅ M√πa gi·∫£i ƒë√£ k·∫øt th√∫c v√†o: ${new Date(season.endDate).toLocaleDateString()}\n`;
          message += `üîú M√πa gi·∫£i ti·∫øp theo: ${PVP_SEASONS.next.name}\n`;
          message += `‚è∞ B·∫Øt ƒë·∫ßu v√†o: ${new Date(PVP_SEASONS.next.startDate).toLocaleDateString()}\n\n`;
        } else {
          const daysLeft = Math.ceil((season.endDate - now) / (1000 * 60 * 60 * 24));
          message += `‚è≥ Th·ªùi gian c√≤n l·∫°i: ${daysLeft} ng√†y\n\n`;
        }

        const seasonWins = userData.pvpStats?.seasonWins || 0;
        message += `üë§ ${userName}\n`;
        message += `üéÆ S·ªë tr·∫≠n th·∫Øng m√πa n√†y: ${seasonWins}\n`;
        message += `üèÖ X·∫øp h·∫°ng hi·ªán t·∫°i: ${calculatePvPRank(userData.pvpStats?.wins || 0).rank}\n\n`;

        message += `üéÅ PH·∫¶N TH∆Ø·ªûNG K·∫æT M√ôA üéÅ\n`;
        Object.entries(season.rewards).forEach(([rank, reward]) => {
          const icon = PVP_RANKS.find(r => r.name === rank)?.icon || "";
          message += `${icon} ${rank}: $${reward.gold.toLocaleString()}`;

          if (reward.items && reward.items.length > 0) {
            message += ` + ${reward.items.length} v·∫≠t ph·∫©m qu√Ω`;
          }

          message += "\n";
        });

        message += `\nüí° Th√¥ng th∆∞·ªùng m√πa gi·∫£i k√©o d√†i 3 th√°ng\n`;
        message += `üìä H·∫°ng v√† s·ªë tr·∫≠n th·∫Øng c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c gi·ªØ qua c√°c m√πa`;

        return api.sendMessage(message, threadID, messageID);
      }

      case "levelup":
      case "level":
      case "exp": {
        if (!target[1]) {
          return api.sendMessage(
            "üîÑ N√ÇNG C·∫§P NH√ÇN V·∫¨T üîÑ\n" +
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
            "C√°ch d√πng: .gacha levelup #ID_NH√ÇN_V·∫¨T #ID_V·∫¨T_PH·∫®M_EXP\n" +
            "D√πng nhi·ªÅu v·∫≠t ph·∫©m: .gacha levelup #ID_NH√ÇN_V·∫¨T all\n" +
            "V√≠ d·ª•: .gacha levelup #1234 #5678\n\n" +
            "üí° D√πng .gacha inv ƒë·ªÉ xem ID nh√¢n v·∫≠t v√† v·∫≠t ph·∫©m kinh nghi·ªám",
            threadID,
            messageID
          );
        }

        const charInputId = target[1].replace(/[^\d]/g, "");
        let foundCharId = null;
        for (const id of userData.inventory) {
          if (
            id.startsWith("CHAR_") &&
            (id.endsWith(charInputId) || id.includes(charInputId))
          ) {
            foundCharId = id;
            break;
          }
        }

        if (!foundCharId) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t v·ªõi ID #${charInputId}!\n\nüí° D√πng .gacha inv ƒë·ªÉ xem ID nh√¢n v·∫≠t`,
            threadID,
            messageID
          );
        }

        if (target[2]?.toLowerCase() === "all") {
          const expItems = userData.inventory.filter(id => id.startsWith("EXP_"));

          if (expItems.length === 0) {
            return api.sendMessage(
              "‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m kinh nghi·ªám n√†o trong kho ƒë·ªì c·ªßa b·∫°n!",
              threadID,
              messageID
            );
          }

          const char = CHARACTER_IDS[foundCharId];
          let startLevel = char.level || 1;
          let totalExpGained = 0;
          let appliedItems = 0;
          let failedItems = 0;

          for (const expItemId of expItems) {

            userData.inventory = userData.inventory.filter(id => id !== expItemId);

            const result = applyExpItem(foundCharId, expItemId);

            if (result.success) {
              totalExpGained += CHARACTER_IDS[expItemId].expValue;
              appliedItems++;
            } else {
              userData.inventory.push(expItemId);
              failedItems++;
              if (result.reason === "max_level_reached") {
                break;
              }
            }
          }

          saveGachaData(gachaData);

          const finalChar = CHARACTER_IDS[foundCharId];
          const endLevel = finalChar.level || 1;

          if (appliedItems === 0) {
            return api.sendMessage(
              `‚ùå Kh√¥ng th·ªÉ √°p d·ª•ng v·∫≠t ph·∫©m EXP n√†o!\nNh√¢n v·∫≠t ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa.`,
              threadID,
              messageID
            );
          }

          return api.sendMessage(
            "‚úÖ N√ÇNG C·∫§P H√ÄNG LO·∫†T TH√ÄNH C√îNG! ‚úÖ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üë§ Nh√¢n v·∫≠t: ${finalChar.name}\n` +
            `üìä C·∫•p ƒë·ªô: ${startLevel} ‚û°Ô∏è ${endLevel} (+${endLevel - startLevel} c·∫•p)\n` +
            `üìà S·ªë EXP ƒë√£ d√πng: +${totalExpGained.toLocaleString()}\n` +
            `üß™ V·∫≠t ph·∫©m ƒë√£ s·ª≠ d·ª•ng: ${appliedItems}\n` +
            (failedItems > 0 ? `‚ö†Ô∏è V·∫≠t ph·∫©m kh√¥ng s·ª≠ d·ª•ng ƒë∆∞·ª£c: ${failedItems}\n\n` : "\n") +
            `üìä CH·ªà S·ªê M·ªöI:\n` +
            `‚öîÔ∏è ATK: ${finalChar.stats.atk}\n` +
            `üõ°Ô∏è DEF: ${finalChar.stats.def}\n` +
            `‚ù§Ô∏è HP: ${finalChar.stats.hp}\n\n` +
            `üí∞ Gi√° tr·ªã m·ªõi: $${Math.floor(finalChar.value).toLocaleString()}`,
            threadID,
            messageID
          );
        } else if (!target[2]) {
          return api.sendMessage(
            "‚ùå Vui l√≤ng cung c·∫•p ID v·∫≠t ph·∫©m EXP ho·∫∑c d√πng 'all' ƒë·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£!\n" +
            "V√≠ d·ª•: .gacha levelup #1234 #5678\n" +
            "Ho·∫∑c: .gacha levelup #1234 all",
            threadID,
            messageID
          );
        } else {
          const expInputId = target[2].replace(/[^\d]/g, "");
          let foundExpId = null;
          for (const id of userData.inventory) {
            if (
              id.startsWith("EXP_") &&
              (id.endsWith(expInputId) || id.includes(expInputId))
            ) {
              foundExpId = id;
              break;
            }
          }

          if (!foundExpId) {
            return api.sendMessage(
              `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m kinh nghi·ªám v·ªõi ID #${expInputId}!\n\nüí° D√πng .gacha inv ƒë·ªÉ xem ID v·∫≠t ph·∫©m`,
              threadID,
              messageID
            );
          }

          userData.inventory = userData.inventory.filter((id) => id !== foundExpId);
          const result = applyExpItem(foundCharId, foundExpId);

          if (!result.success) {
            userData.inventory.push(foundExpId);
            saveGachaData(gachaData);

            let errorMessage = "‚ùå Kh√¥ng th·ªÉ n√¢ng c·∫•p nh√¢n v·∫≠t!";
            if (result.reason === "max_level_reached") {
              errorMessage = "‚ùå Nh√¢n v·∫≠t ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!";
            } else if (result.reason === "invalid_items") {
              errorMessage = "‚ùå V·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá!";
            }

            return api.sendMessage(errorMessage, threadID, messageID);
          }

          saveGachaData(gachaData);

          const char = CHARACTER_IDS[foundCharId];
          const expItem = CHARACTER_IDS[foundExpId];

          return api.sendMessage(
            "‚úÖ N√ÇNG C·∫§P TH√ÄNH C√îNG! ‚úÖ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üë§ Nh√¢n v·∫≠t: ${char.name}\n` +
            `üìä C·∫•p ƒë·ªô: ${result.oldLevel} ‚û°Ô∏è ${result.newLevel}\n` +
            `üìà EXP ƒë√£ d√πng: ${expItem.name
            } (+${expItem.expValue.toLocaleString()} EXP)\n\n` +
            (result.oldLevel !== result.newLevel
              ? `üéâ Ch√∫c m·ª´ng! Nh√¢n v·∫≠t ƒë√£ l√™n c·∫•p!\n\n` +
              `üìä CH·ªà S·ªê M·ªöI:\n` +
              `‚öîÔ∏è ATK: ${char.stats.atk}\n` +
              `üõ°Ô∏è DEF: ${char.stats.def}\n` +
              `‚ù§Ô∏è HP: ${char.stats.hp}\n\n`
              : `üìù EXP c·∫ßn ƒë·ªÉ l√™n c·∫•p ti·∫øp: ${result.remainingExpForNextLevel.toLocaleString()}\n\n`) +
            `üí∞ Gi√° tr·ªã m·ªõi: $${Math.floor(char.value).toLocaleString()}\n` +
            `üí° V·∫≠t ph·∫©m kinh nghi·ªám ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.`,
            threadID,
            messageID
          );
        }
      }
      case "upgrade":
      case "up":
      case "evolve": {
        // Ki·ªÉm tra ƒë·∫ßu v√†o c∆° b·∫£n
        if (!target[1] || !target[2]) {
          return api.sendMessage(
            "üåü TI·∫æN H√ìA NH√ÇN V·∫¨T - H∆Ø·ªöNG D·∫™N NHANH üåü\n\n" +
            "üìã C√∫ ph√°p: .gacha upgrade #ID1 #ID2\n\n" +
            "1Ô∏è‚É£ #ID1, #ID2: Hai nh√¢n v·∫≠t c√πng lo·∫°i\n" +
            "üí° H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m ƒë√° ti·∫øn h√≥a ph√π h·ª£p!\n\n" +
            "üí° Xem h∆∞·ªõng d·∫´n chi ti·∫øt: .gacha help upgrade\n" +
            "üì¶ Xem kho ƒë·ªì: .gacha inv",
            threadID,
            messageID
          );
        }

        // T√¨m nh√¢n v·∫≠t t·ª´ ID
        const inputId1 = target[1].replace(/[^\d]/g, "");
        let foundCharId1 = null;
        for (const charId of userData.inventory) {
          if (
            charId.startsWith("CHAR_") &&
            (charId.endsWith(inputId1) || charId.includes(inputId1))
          ) {
            foundCharId1 = charId;
            break;
          }
        }

        const inputId2 = target[2].replace(/[^\d]/g, "");
        let foundCharId2 = null;
        for (const charId of userData.inventory) {
          if (
            charId.startsWith("CHAR_") &&
            (charId.endsWith(inputId2) || charId.includes(inputId2))
          ) {
            foundCharId2 = charId;
            break;
          }
        }

        // Ki·ªÉm tra t·ªìn t·∫°i nh√¢n v·∫≠t
        if (!foundCharId1 || !foundCharId2) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t!\n\nüí° D√πng .gacha inv ƒë·ªÉ xem ID nh√¢n v·∫≠t`,
            threadID,
            messageID
          );
        }

        const char1 = CHARACTER_IDS[foundCharId1];
        const char2 = CHARACTER_IDS[foundCharId2];

        // Ki·ªÉm tra nh√¢n v·∫≠t c√πng lo·∫°i
        if (char1.name !== char2.name) {
          return api.sendMessage(
            `‚ùå Hai nh√¢n v·∫≠t ph·∫£i C√ôNG LO·∫†I!\n\n` +
            `‚Ä¢ Nh√¢n v·∫≠t 1: ${char1.name}\n` +
            `‚Ä¢ Nh√¢n v·∫≠t 2: ${char2.name}\n\n`,
            threadID,
            messageID
          );
        }

        // Ki·ªÉm tra ƒë·ªô hi·∫øm v√† nguy√™n t·ªë
        const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(char1.name) ? 5 : 4;
        const star1 = char1.starLevel || rarity;
        const star2 = char2.starLevel || rarity;

        // Ki·ªÉm tra c√πng s·ªë sao
        if (star1 !== star2) {
          return api.sendMessage(
            `‚ùå Hai nh√¢n v·∫≠t ph·∫£i c√≥ C√ôNG S·ªê SAO!\n\n` +
            `‚Ä¢ ${char1.name}: ${star1}‚òÖ\n` +
            `‚Ä¢ ${char2.name}: ${star2}‚òÖ\n\n`,
            threadID,
            messageID
          );
        }

        // X√°c ƒë·ªãnh nguy√™n t·ªë tr∆∞·ªõc khi t√≠nh to√°n ƒë√° c·∫ßn thi·∫øt
        const charInfo = CUSTOM_CHARACTER_DATA[char1.name];
        const charElement = charInfo?.element?.toUpperCase() || "UNKNOWN";

        // T√≠nh s·ªë ƒë√° c·∫ßn thi·∫øt
        const requiredStones = calculateRequiredStones(star1, rarity);

        // ƒê·∫øm s·ªë ƒë√° ph√π h·ª£p trong kho ƒë·ªì
        let matchingStones = [];
        let universalStones = [];

        for (const id of userData.inventory) {
          if (id.startsWith("STONE_")) {
            const stone = CHARACTER_IDS[id];
            if (stone.stoneType === charElement) {
              matchingStones.push(id);
            } else if (stone.stoneType === "UNIVERSAL") {
              universalStones.push(id);
            }
          }
        }

        // Ki·ªÉm tra xem c√≥ ƒë·ªß ƒë√° kh√¥ng
        const totalAvailableStones = matchingStones.length + universalStones.length;

        if (totalAvailableStones < requiredStones) {
          return api.sendMessage(
            `‚ùå KH√îNG ƒê·ª¶ ƒê√Å TI·∫æN H√ìA!\n\n` +
            `‚Ä¢ Nh√¢n v·∫≠t: ${char1.name} (${star1}‚òÖ)\n` +
            `‚Ä¢ C·∫ßn: ${requiredStones} ƒë√° ${ELEMENTAL_STONES[charElement]?.name || "ph√π h·ª£p"}\n` +
            `‚Ä¢ Hi·ªán c√≥: ${matchingStones.length} ƒë√° ${charElement}, ${universalStones.length} ƒë√° Universe\n\n` +
            `üí° S·ªë ƒë√° c·∫ßn thi·∫øt tƒÉng theo c·∫•p sao c·ªßa nh√¢n v·∫≠t\n` +
            `üíé C√¥ng th·ª©c: (S·ªë sao hi·ªán t·∫°i - ƒê·ªô hi·∫øm c∆° b·∫£n + 1) ƒë√°`,
            threadID,
            messageID
          );
        }

        // Ki·ªÉm tra ƒë·∫°t c·∫•p t·ªëi ƒëa ch∆∞a
        const maxStar = rarity === 5 ? 12 : 8;
        if (star1 >= maxStar) {
          return api.sendMessage(
            `‚ùå NH√ÇN V·∫¨T ƒê√É ƒê·∫†T T·ªêI ƒêA!\n\n` +
            `‚Ä¢ ${char1.name} ƒë√£ ƒë·∫°t ${star1}‚òÖ/${maxStar}‚òÖ\n` +
            `‚Ä¢ Kh√¥ng th·ªÉ ti·∫øn h√≥a th√™m\n\n`,
            threadID,
            messageID
          );
        }

        // S·ª≠ d·ª•ng ƒë√° ti·∫øn h√≥a
        const elemStonesToUse = Math.min(matchingStones.length, requiredStones);
        const universalStonesToUse = requiredStones - elemStonesToUse;
        const stonesToUse = [
          ...matchingStones.slice(0, elemStonesToUse),
          ...universalStones.slice(0, universalStonesToUse)
        ];

        // X·ª≠ l√Ω ti·∫øn h√≥a
        const newCharId = generateCharacterId();
        const newStar = star1 + 1;
        const baseStats = char1.stats || { atk: 100, def: 100, hp: 500 };
        const isLimited = PREMIUM_FIVE_STARS.includes(char1.name);
        const bonusMultiplier = isLimited ? 1 + (newStar - rarity) * 0.4 : 1 + (newStar - rarity) * 0.25;

        CHARACTER_IDS[newCharId] = {
          type: "character",
          name: char1.name,
          obtainedAt: Date.now(),
          starLevel: newStar,
          level: Math.max(char1.level || 1, char2.level || 1),
          value: (char1.value || (rarity === 5 ? 1000000 : 10000)) * (isLimited ? 2 : 1.5) * bonusMultiplier,
          stats: {
            atk: Math.floor(Math.max(char1.stats?.atk || 100, char2.stats?.atk || 100) *
              (1 + (Math.min(char1.stats?.atk || 100, char2.stats?.atk || 100) * 0.3) / 100) *
              bonusMultiplier),
            def: Math.floor(Math.max(char1.stats?.def || 100, char2.stats?.def || 100) *
              (1 + (Math.min(char1.stats?.def || 100, char2.stats?.def || 100) * 0.3) / 100) *
              bonusMultiplier),
            hp: Math.floor(Math.max(char1.stats?.hp || 500, char2.stats?.hp || 500) *
              (1 + (Math.min(char1.stats?.hp || 500, char2.stats?.hp || 500) * 0.3) / 100) *
              bonusMultiplier),
          },
        };

        // X√≥a nh√¢n v·∫≠t v√† ƒë√° kh·ªèi inventory
        userData.inventory = userData.inventory.filter(
          (id) => id !== foundCharId1 && id !== foundCharId2 && !stonesToUse.includes(id)
        );

        // Th√™m nh√¢n v·∫≠t m·ªõi v√†o inventory
        userData.inventory.push(newCharId);

        // L∆∞u d·ªØ li·ªáu
        saveCharacterDatabase();
        saveGachaData(gachaData);

        // T√≠nh % tƒÉng ch·ªâ s·ªë
        const atkIncrease = Math.floor(((CHARACTER_IDS[newCharId].stats.atk - baseStats.atk) / baseStats.atk) * 100);
        const defIncrease = Math.floor(((CHARACTER_IDS[newCharId].stats.def - baseStats.def) / baseStats.def) * 100);
        const hpIncrease = Math.floor(((CHARACTER_IDS[newCharId].stats.hp - baseStats.hp) / baseStats.hp) * 100);

        // Hi·ªÉn th·ªã th√¥ng b√°o v·ªõi th√¥ng tin v·ªÅ ƒë√° ƒë√£ d√πng
        return api.sendMessage(
          "üåü TI·∫æN H√ìA TH√ÄNH C√îNG! üåü\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `üë§ Nh√¢n v·∫≠t: ${char1.name}\n` +
          `‚≠ê Sao: ${star1}‚òÖ ‚û°Ô∏è ${newStar}‚òÖ\n\n` +
          `üìä CH·ªà S·ªê M·ªöI:\n` +
          `‚öîÔ∏è ATK: ${CHARACTER_IDS[newCharId].stats.atk} (+${atkIncrease}%)\n` +
          `üõ°Ô∏è DEF: ${CHARACTER_IDS[newCharId].stats.def} (+${defIncrease}%)\n` +
          `‚ù§Ô∏è HP: ${CHARACTER_IDS[newCharId].stats.hp} (+${hpIncrease}%)\n\n` +
          `üí∞ Gi√° tr·ªã: $${CHARACTER_IDS[newCharId].value.toLocaleString()}\n` +
          `üÜî ID m·ªõi: #${newCharId.slice(-4)}\n\n` +
          `üíé ƒê√£ s·ª≠ d·ª•ng: ${requiredStones} ƒë√° ti·∫øn h√≥a\n` +
          `‚ö†Ô∏è Nh√¢n v·∫≠t sao c√†ng cao c√†ng c·∫ßn nhi·ªÅu ƒë√° ƒë·ªÉ ti·∫øn h√≥a`,
          threadID,
          messageID
        );
      }

      case "admin": {
        if (!isAdmin(senderID)) {
          return api.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y!", threadID, messageID);
        }

        if (!target[1]) {
          return api.sendMessage(
            "üëë B·∫¢NG ƒêI·ªÄU KHI·ªÇN ADMIN üëë\n" +
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
            "üìã DANH S√ÅCH L·ªÜNH:\n" +
            "‚Ä¢ .gacha admin give <@user> <type> <id/name> [s·ªë l∆∞·ª£ng]\n" +
            "‚Ä¢ .gacha admin create <character/item>\n" +
            "‚Ä¢ .gacha admin stats\n" +
            "‚Ä¢ .gacha admin reset <@user>\n" +
            "‚Ä¢ .gacha admin modify <@user> <parameter> <value>\n" +
            "‚Ä¢ .gacha admin backup\n" +
            "‚Ä¢ .gacha admin restore <backupId>\n" +
            "‚Ä¢ .gacha admin money <@user> <+/-> <amount>\n" +
            "‚Ä¢ .gacha admin event <start/end> <eventType>\n\n" +
            "üí° G√µ .gacha admin help <l·ªánh> ƒë·ªÉ xem chi ti·∫øt c√°ch s·ª≠ d·ª•ng",
            threadID,
            messageID
          );
        }

        const adminAction = target[1].toLowerCase();

        switch (adminAction) {
          case "give": {
            // Ki·ªÉm tra ƒë·∫ßy ƒë·ªß th√¥ng tin
            if (!target[2]) {
              return api.sendMessage(
                "‚ùå Thi·∫øu th√¥ng tin! C√°ch d√πng:\n" +
                ".gacha admin give @user <type> <id/name> [s·ªë l∆∞·ª£ng] [value=X] [stats=atk:X,def:X,hp:X]\n\n" +
                "Trong ƒë√≥:\n" +
                "‚Ä¢ type: character, stone, fragment, exp, stella\n" +
                "‚Ä¢ id/name: ID ho·∫∑c t√™n v·∫≠t ph·∫©m\n" +
                "‚Ä¢ s·ªë l∆∞·ª£ng: s·ªë l∆∞·ª£ng mu·ªën t·∫∑ng (m·∫∑c ƒë·ªãnh: 1)\n" +
                "‚Ä¢ value: gi√° tr·ªã v·∫≠t ph·∫©m (v√≠ d·ª•: value=1000000)\n" +
                "‚Ä¢ stats: ch·ªâ s·ªë nh√¢n v·∫≠t (v√≠ d·ª•: stats=atk:1000,def:800,hp:5000)",
                threadID, messageID
              );
            }

            const mention = Object.keys(event.mentions)[0];
            if (!mention) {
              return api.sendMessage("‚ùå B·∫°n ph·∫£i tag ng∆∞·ªùi nh·∫≠n!", threadID, messageID);
            }

            if (!gachaData[mention]) {
              gachaData[mention] = {
                inventory: [],
                pullsSinceLastFiveStar: 0,
                pullsSinceLastFourStar: 0,
                totalPulls: 0,
                lastPull: 0,
              };
            }

            // Make a clean array of all arguments as a string
            const fullCommand = target.slice(2).join(" ");

            // Extract command parts after the mention
            const mentionPart = Object.values(event.mentions)[0]; // Get the actual mention string
            const afterMention = fullCommand.replace(mentionPart, "").trim();

            // Parse the command with complex parameters
            let commandParts = [];
            let currentPart = "";
            let inQuotes = false;

            for (let i = 0; i < afterMention.length; i++) {
              const char = afterMention[i];
              if (char === '"' || char === "'") {
                inQuotes = !inQuotes;
                continue;
              }

              if (char === ' ' && !inQuotes) {
                if (currentPart) {
                  commandParts.push(currentPart);
                  currentPart = "";
                }
              } else {
                currentPart += char;
              }
            }

            if (currentPart) {
              commandParts.push(currentPart);
            }

            if (commandParts.length < 2) {
              return api.sendMessage(
                "‚ùå Thi·∫øu th√¥ng tin! C·∫ßn ch·ªâ ƒë·ªãnh lo·∫°i v√† t√™n/ID v·∫≠t ph·∫©m.\n" +
                "V√≠ d·ª•: .gacha admin give @user character Hutao 1",
                threadID, messageID
              );
            }

            const itemType = commandParts[0].toLowerCase();
            const itemIdentifier = commandParts[1];

            // Parse additional parameters
            let quantity = 1;
            let customValue = null;
            let customStats = null;

            for (let i = 2; i < commandParts.length; i++) {
              const part = commandParts[i];

              if (!isNaN(parseInt(part))) {
                // If it's a number, treat as quantity
                quantity = parseInt(part);
              } else if (part.startsWith('value=')) {
                // Parse custom value
                const valueStr = part.substring('value='.length);
                customValue = parseInt(valueStr);
              } else if (part.startsWith('stats=')) {
                // Parse custom stats
                const statsStr = part.substring('stats='.length);
                customStats = {};

                statsStr.split(',').forEach(stat => {
                  const [key, val] = stat.split(':');
                  if (key && val) {
                    customStats[key.trim()] = parseInt(val.trim());
                  }
                });
              }
            }

            const targetUserData = gachaData[mention];

            // Process by item type
            if (itemType === "character" || itemType === "char" || itemType === "c") {
              // Character handling logic
              const characterName = itemIdentifier.charAt(0).toUpperCase() + itemIdentifier.slice(1);

              let foundCharacter = null;
              for (const category in CHARACTER_RATINGS) {
                const chars = CHARACTER_RATINGS[category];
                for (const char of chars) {
                  if (char.toLowerCase() === characterName.toLowerCase()) {
                    foundCharacter = char;
                    break;
                  }
                }
                if (foundCharacter) break;
              }

              if (!foundCharacter) {
                return api.sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t: ${characterName}`, threadID, messageID);
              }

              // T·∫°o nh√¢n v·∫≠t v√† th√™m v√†o inventory
              const charIds = [];
              for (let i = 0; i < quantity; i++) {
                const charId = generateCharacterId(foundCharacter);

                // X√°c ƒë·ªãnh ƒë·ªô hi·∫øm
                const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(foundCharacter) ?
                  "FIVE_STAR" : CHARACTER_RATINGS.FOUR_STAR.includes(foundCharacter) ?
                    "FOUR_STAR" : "THREE_STAR";

                // Generate base stats
                const stats = customStats || generateCharacterStats(
                  rarity === "FIVE_STAR" ? 5 : rarity === "FOUR_STAR" ? 4 : 3,
                  foundCharacter
                );

                // Determine character value
                const value = customValue || generateCardValue(rarity, foundCharacter);

                CHARACTER_IDS[charId] = {
                  type: "character",
                  name: foundCharacter,
                  obtainedAt: Date.now(),
                  value: value,
                  level: 1,
                  exp: 0,
                  stats: stats,
                };

                targetUserData.inventory.push(charId);
                charIds.push(charId);
              }

              saveCharacterDatabase();
              saveGachaData(gachaData);

              return api.sendMessage(
                `‚úÖ ƒê√£ t·∫∑ng ${quantity} ${foundCharacter} cho ${event.mentions[mention].replace("@", "")}!\n` +
                `üîñ ID: ${charIds.map(id => '#' + id.slice(-4)).join(', ')}\n` +
                (customValue ? `üí∞ Gi√° tr·ªã: $${customValue.toLocaleString()}\n` : '') +
                (customStats ? `‚öîÔ∏è ATK: ${customStats.atk} | üõ°Ô∏è DEF: ${customStats.def} | ‚ù§Ô∏è HP: ${customStats.hp}\n` : ''),
                threadID, messageID
              );
            }
            else if (itemType === "stone") {
              // T·∫°o ƒë√° ti·∫øn h√≥a
              const stoneElement = itemIdentifier.toUpperCase();
              if (!ELEMENTAL_STONES[stoneElement]) {
                return api.sendMessage(
                  `‚ùå Lo·∫°i ƒë√° kh√¥ng h·ª£p l·ªá! C√°c lo·∫°i ƒë√°: ${Object.keys(ELEMENTAL_STONES).join(", ")}`,
                  threadID, messageID
                );
              }

              const stoneIds = [];
              for (let i = 0; i < quantity; i++) {
                const stoneId = createStone(stoneElement);
                targetUserData.inventory.push(stoneId);
                stoneIds.push(stoneId);
              }

              saveGachaData(gachaData);

              return api.sendMessage(
                `‚úÖ ƒê√£ t·∫∑ng ${quantity} ${ELEMENTAL_STONES[stoneElement].name} cho ${event.mentions[mention].replace("@", "")}!`,
                threadID, messageID
              );
            }
            else if (itemType === "stella") {
              // T·∫°o Stella Fortuna
              const charName = itemIdentifier.charAt(0).toUpperCase() + itemIdentifier.slice(1);
              const isUniversal = charName.toLowerCase() === "universal";

              const stellaIds = [];
              for (let i = 0; i < quantity; i++) {
                const stellaId = createStellaFortuna(isUniversal ? null : charName, isUniversal);
                targetUserData.inventory.push(stellaId);
                stellaIds.push(stellaId);
              }

              saveGachaData(gachaData);

              return api.sendMessage(
                `‚úÖ ƒê√£ t·∫∑ng ${quantity} ${isUniversal ? "Universal Stella" : `Stella Fortuna (${charName})`} cho ${event.mentions[mention].replace("@", "")}!`,
                threadID, messageID
              );
            }
            else if (itemType === "exp") {
              // T·∫°o item EXP
              if (!EXP_ITEMS[itemIdentifier]) {
                return api.sendMessage(
                  `‚ùå Item EXP kh√¥ng h·ª£p l·ªá! C√°c item: ${Object.keys(EXP_ITEMS).join(", ")}`,
                  threadID, messageID
                );
              }

              const expIds = [];
              for (let i = 0; i < quantity; i++) {
                const expId = createExpItem(itemIdentifier);
                targetUserData.inventory.push(expId);
                expIds.push(expId);
              }

              saveGachaData(gachaData);

              return api.sendMessage(
                `‚úÖ ƒê√£ t·∫∑ng ${quantity} ${itemIdentifier} cho ${event.mentions[mention].replace("@", "")}!`,
                threadID, messageID
              );
            }

            return api.sendMessage(
              "‚ùå Lo·∫°i v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá! C√°c lo·∫°i: character, stone, stella, exp",
              threadID, messageID
            );
          }

          case "money":
          case "balance": {
            if (!target[2] || !target[3] || !target[4]) {
              return api.sendMessage(
                "‚ùå Thi·∫øu th√¥ng tin! C√°ch d√πng:\n" +
                ".gacha admin money @user <+/-> <s·ªë ti·ªÅn>",
                threadID, messageID
              );
            }

            // L·∫•y ID ng∆∞·ªùi d√πng ƒë∆∞·ª£c tag
            const mention = Object.keys(event.mentions)[0];
            if (!mention) {
              return api.sendMessage("‚ùå B·∫°n ph·∫£i tag ng∆∞·ªùi d√πng!", threadID, messageID);
            }

            const operation = target[3];
            const amount = parseInt(target[4]);

            if (isNaN(amount) || amount <= 0) {
              return api.sendMessage("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", threadID, messageID);
            }

            const currentBalance = await getBalance(mention);
            let newBalance;

            if (operation === "+" || operation === "add") {
              await updateBalance(mention, amount);
              newBalance = currentBalance + amount;
            } else if (operation === "-" || operation === "sub") {
              await updateBalance(mention, -amount);
              newBalance = currentBalance - amount;
            } else {
              return api.sendMessage("‚ùå Ph√©p to√°n kh√¥ng h·ª£p l·ªá! Ch·ªâ d√πng + ho·∫∑c -", threadID, messageID);
            }

            return api.sendMessage(
              `‚úÖ ƒê√£ ${operation === "+" ? "th√™m" : "tr·ª´"} $${amount.toLocaleString()} ${operation === "+" ? "cho" : "t·ª´"} ${event.mentions[mention].replace("@", "")}!\n` +
              `üí∞ S·ªë d∆∞ m·ªõi: $${newBalance.toLocaleString()}`,
              threadID, messageID
            );
          }

          case "stats": {
            // Th·ªëng k√™ to√†n b·ªô h·ªá th·ªëng
            const totalUsers = Object.keys(gachaData).length;
            const totalCharacters = Object.values(CHARACTER_IDS).filter(item => item.type === "character").length;
            const totalItems = Object.keys(CHARACTER_IDS).length;

            const totalPulls = Object.values(gachaData).reduce((sum, userData) => sum + (userData.totalPulls || 0), 0);

            const characterStats = {
              "5‚òÖ": 0,
              "4‚òÖ": 0,
              "3‚òÖ": 0,
              "Limited": 0
            };

            Object.values(CHARACTER_IDS).forEach(item => {
              if (item.type === "character") {
                if (CHARACTER_RATINGS.FIVE_STAR.includes(item.name)) {
                  characterStats["5‚òÖ"]++;
                  if (PREMIUM_FIVE_STARS.includes(item.name)) {
                    characterStats["Limited"]++;
                  }
                } else if (CHARACTER_RATINGS.FOUR_STAR.includes(item.name)) {
                  characterStats["4‚òÖ"]++;
                } else {
                  characterStats["3‚òÖ"]++;
                }
              }
            });

            return api.sendMessage(
              "üìä TH·ªêNG K√ä H·ªÜ TH·ªêNG üìä\n" +
              "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
              `üë• T·ªïng ng∆∞·ªùi ch∆°i: ${totalUsers}\n` +
              `üéÆ T·ªïng l∆∞·ª£t pull: ${totalPulls.toLocaleString()}\n\n` +
              `üì¶ TH·ªêNG K√ä V·∫¨T PH·∫®M:\n` +
              `‚Ä¢ T·ªïng v·∫≠t ph·∫©m: ${totalItems.toLocaleString()}\n` +
              `‚Ä¢ T·ªïng nh√¢n v·∫≠t: ${totalCharacters.toLocaleString()}\n` +
              `‚Ä¢ 5‚òÖ: ${characterStats["5‚òÖ"].toLocaleString()}\n` +
              `‚Ä¢ 4‚òÖ: ${characterStats["4‚òÖ"].toLocaleString()}\n` +
              `‚Ä¢ 3‚òÖ: ${characterStats["3‚òÖ"].toLocaleString()}\n` +
              `‚Ä¢ Limited: ${characterStats["Limited"].toLocaleString()}\n\n` +
              `üíæ K√≠ch th∆∞·ªõc database: ${Math.round(JSON.stringify(gachaData).length / 1024).toLocaleString()} KB`,
              threadID, messageID
            );
          }

          case "backup":
          case "sao":
          case "saoluu": {
            // Thay th·∫ø ki·ªÉm tra config.ADMIN b·∫±ng h√†m isAdmin ƒë√£ c√≥
            if (!isAdmin(senderID)) {
              return api.sendMessage(
                "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!",
                threadID,
                messageID
              );
            }

            const action = target[1]?.toLowerCase();

            if (!action || action === "help") {
              return api.sendMessage(
                "üîÑ H·ªÜ TH·ªêNG SAO L∆ØU D·ªÆ LI·ªÜU üîÑ\n" +
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
                "üìã C√°c l·ªánh h·ªó tr·ª£:\n" +
                "‚Ä¢ .gacha backup list - Xem danh s√°ch backup\n" +
                "‚Ä¢ .gacha backup create - T·∫°o backup th·ªß c√¥ng\n" +
                "‚Ä¢ .gacha backup restore [ID] - Ph·ª•c h·ªìi backup\n\n" +
                "‚è±Ô∏è Th√¥ng tin:\n" +
                "‚Ä¢ H·ªá th·ªëng t·ª± ƒë·ªông sao l∆∞u m·ªói 4 gi·ªù\n" +
                "‚Ä¢ Gi·ªØ l·∫°i t·ªëi ƒëa 14 ng√†y backup h√†ng ng√†y\n" +
                "‚Ä¢ Backup th·ªß c√¥ng ƒë∆∞·ª£c gi·ªØ vƒ©nh vi·ªÖn\n\n" +
                "‚ö†Ô∏è L∆∞u √Ω: Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn ph·ª•c h·ªìi d·ªØ li·ªáu",
                threadID,
                messageID
              );
            }

            const result = createBackup("manual");

            if (!result.success) {
              return api.sendMessage(
                "‚ùå T·∫°o backup th·∫•t b·∫°i: " + (result.error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"),
                threadID, messageID
              );
            }

            return api.sendMessage(
              "‚úÖ T·∫†O BACKUP TH√ÄNH C√îNG!\n\n" +
              `üìÇ T√™n file: ${result.filename}\n` +
              `‚è∞ Th·ªùi gian: ${new Date().toLocaleString()}\n\n` +
              `üíæ S·ª≠ d·ª•ng '.gacha admin restore' ƒë·ªÉ kh√¥i ph·ª•c t·ª´ backup n√†y n·∫øu c·∫ßn.`,
              threadID, messageID
            );
          }

          case "restore": {
            // Ph·ª•c h·ªìi t·ª´ backup
            if (!target[2]) {
              // Li·ªát k√™ c√°c backup
              const backups = listBackups();

              if (!backups.success || backups.backups.length === 0) {
                return api.sendMessage(
                  "‚ùå Kh√¥ng t√¨m th·∫•y backup n√†o trong h·ªá th·ªëng!",
                  threadID, messageID
                );
              }

              let message = "üìã DANH S√ÅCH BACKUP üìã\n";
              message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

              backups.backups.slice(0, 10).forEach(backup => {
                message += `üÜî ${backup.id}\n`;
                message += `üìÖ ${backup.date} (${backup.time})\n`;
                message += `üìù Lo·∫°i: ${backup.type}\n\n`;
              });

              message += `T·ªïng c·ªông: ${backups.backups.length} backups\n\n`;
              message += `üí° ƒê·ªÉ kh√¥i ph·ª•c, h√£y d√πng:\n.gacha admin restore <backup_id>`;

              return api.sendMessage(message, threadID, messageID);
            }

            const backupId = target[2];
            const result = restoreFromBackup(backupId);

            if (!result.success) {
              return api.sendMessage(
                "‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i: " + (result.reason || "L·ªói kh√¥ng x√°c ƒë·ªãnh"),
                threadID, messageID
              );
            }

            return api.sendMessage(
              "‚úÖ KH√îI PH·ª§C BACKUP TH√ÄNH C√îNG!\n\n" +
              `üìÇ ƒê√£ kh√¥i ph·ª•c t·ª´:\n‚Ä¢ ${result.gachaFile}\n‚Ä¢ ${result.charactersFile}\n\n` +
              `‚ö†Ô∏è H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c ƒë∆∞a v·ªÅ tr·∫°ng th√°i c·ªßa backup.\n` +
              `‚è∞ Th·ªùi gian kh√¥i ph·ª•c: ${new Date().toLocaleString()}`,
              threadID, messageID
            );
          }

          case "create": {
            if (!target[2] || !target[3]) {
              return api.sendMessage(
                "‚ùå Thi·∫øu th√¥ng tin! ƒê·ªÉ t·∫°o nh√¢n v·∫≠t t√πy ch·ªânh:\n" +
                ".gacha admin create character [t√™n] [element] [weapon] [rarity]",
                threadID, messageID
              );
            }

            if (target[2].toLowerCase() === "character") {
              const charName = target[3];
              const element = target[4] || "Anemo";
              const weapon = target[5] || "Sword";
              const rarity = parseInt(target[6]) || 5;

              // Th√™m nh√¢n v·∫≠t v√†o danh s√°ch
              if (rarity === 5) {
                if (!CHARACTER_RATINGS.FIVE_STAR.includes(charName)) {
                  CHARACTER_RATINGS.FIVE_STAR.push(charName);
                }
              } else if (rarity === 4) {
                if (!CHARACTER_RATINGS.FOUR_STAR.includes(charName)) {
                  CHARACTER_RATINGS.FOUR_STAR.push(charName);
                }
              } else {
                if (!CHARACTER_RATINGS.THREE_STAR.includes(charName)) {
                  CHARACTER_RATINGS.THREE_STAR.push(charName);
                }
              }

              // Th√™m th√¥ng tin nh√¢n v·∫≠t
              CUSTOM_CHARACTER_DATA[charName] = {
                weapon: weapon,
                element: element,
                skills: ["Skill 1", "Ultimate"],
                quote: "Custom character"
              };

              return api.sendMessage(
                "‚úÖ ƒê√É T·∫†O NH√ÇN V·∫¨T T√ôY CH·ªàNH!\n\n" +
                `üë§ T√™n: ${charName}\n` +
                `üîÆ Nguy√™n t·ªë: ${element}\n` +
                `‚öîÔ∏è V≈© kh√≠: ${weapon}\n` +
                `‚≠ê ƒê·ªô hi·∫øm: ${rarity}‚òÖ\n\n` +
                `üí° Nh√¢n v·∫≠t ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng v√† c√≥ th·ªÉ pull ƒë∆∞·ª£c.`,
                threadID, messageID
              );
            }

            return api.sendMessage(
              "‚ùå Lo·∫°i kh√¥ng h·ª£p l·ªá! Hi·ªán ch·ªâ h·ªó tr·ª£: character",
              threadID, messageID
            );
          }

          case "reset": {
            // Reset d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
            if (!target[2]) {
              return api.sendMessage(
                "‚ùå Thi·∫øu th√¥ng tin! C√°ch d√πng:\n" +
                ".gacha admin reset @user [keep_balance]",
                threadID, messageID
              );
            }

            const mention = Object.keys(event.mentions)[0];
            if (!mention) {
              return api.sendMessage("‚ùå B·∫°n ph·∫£i tag ng∆∞·ªùi d√πng!", threadID, messageID);
            }

            if (!gachaData[mention]) {
              return api.sendMessage("‚ùå Ng∆∞·ªùi d√πng ch∆∞a tham gia h·ªá th·ªëng gacha!", threadID, messageID);
            }

            const keepBalance = target[3]?.toLowerCase() === "true" || target[3]?.toLowerCase() === "keep";

            // L∆∞u tr·ªØ danh s√°ch ID item c≈© ƒë·ªÉ x√≥a
            const oldItems = [...(gachaData[mention].inventory || [])];

            // Reset d·ªØ li·ªáu
            gachaData[mention] = {
              inventory: [],
              pullsSinceLastFiveStar: 0,
              pullsSinceLastFourStar: 0,
              totalPulls: 0,
              lastPull: 0
            };

            saveGachaData(gachaData);

            // X√≥a c√°c item c≈© kh√¥ng s·ª≠ d·ª•ng
            for (const itemId of oldItems) {
              if (CHARACTER_IDS[itemId]) {
                delete CHARACTER_IDS[itemId];
              }
            }
            saveCharacterDatabase();

            if (!keepBalance) {
              await updateBalance(mention, -await getBalance(mention));
            }

            return api.sendMessage(
              `‚úÖ ƒê√É RESET D·ªÆ LI·ªÜU NG∆Ø·ªúI CH∆†I ${event.mentions[mention].replace("@", "")}!\n\n` +
              `‚Ä¢ ƒê√£ x√≥a: ${oldItems.length} v·∫≠t ph·∫©m\n` +
              `‚Ä¢ D·ªØ li·ªáu gacha ƒë√£ reset\n` +
              `‚Ä¢ Gi·ªØ ti·ªÅn: ${keepBalance ? "C√≥" : "Kh√¥ng"}`,
              threadID, messageID
            );
          }

          case "event": {
            if (!target[2] || !target[3]) {
              return api.sendMessage(
                "‚ùå Thi·∫øu th√¥ng tin! C√°ch d√πng:\n" +
                ".gacha admin event <start/end> <eventType>\n\n" +
                "C√°c lo·∫°i s·ª± ki·ªán:\n" +
                "‚Ä¢ doubleodds - TƒÉng g·∫•p ƒë√¥i t·ªâ l·ªá 5‚òÖ\n" +
                "‚Ä¢ costreduce - Gi·∫£m 50% chi ph√≠ pull\n" +
                "‚Ä¢ premiumpull - TƒÉng t·ªâ l·ªá ra Premium 5‚òÖ\n" +
                "‚Ä¢ bonusreward - TƒÉng ph·∫ßn th∆∞·ªüng PVP",
                threadID, messageID
              );
            }

            const action = target[2].toLowerCase();
            const eventType = target[3].toLowerCase();

            // ƒê·∫£m b·∫£o c√≥ thu·ªôc t√≠nh events
            if (!gachaData.systemEvents) {
              gachaData.systemEvents = {};
            }

            if (action === "start") {
              // B·∫Øt ƒë·∫ßu s·ª± ki·ªán
              gachaData.systemEvents[eventType] = {
                active: true,
                startTime: Date.now(),
                endTime: Date.now() + 86400000, // 24 gi·ªù m·∫∑c ƒë·ªãnh
                createdBy: senderID
              };
              saveGachaData(gachaData);

              // Th√¥ng b√°o to√†n server
              return api.sendMessage(
                "üéâ S·ª∞ KI·ªÜN ƒê·∫∂C BI·ªÜT! üéâ\n" +
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
                getEventDescription(eventType) + "\n\n" +
                "‚è±Ô∏è Th·ªùi gian: 24 gi·ªù\n\n" +
                "üéÆ H√£y tham gia ngay v·ªõi l·ªánh .gacha pull!",
                threadID, messageID
              );
            }
            else if (action === "end") {
              // K·∫øt th√∫c s·ª± ki·ªán
              if (!gachaData.systemEvents[eventType] || !gachaData.systemEvents[eventType].active) {
                return api.sendMessage(
                  "‚ùå Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒëang di·ªÖn ra v·ªõi lo·∫°i n√†y!",
                  threadID, messageID
                );
              }

              gachaData.systemEvents[eventType].active = false;
              gachaData.systemEvents[eventType].endTime = Date.now();
              saveGachaData(gachaData);

              return api.sendMessage(
                "üì¢ TH√îNG B√ÅO K·∫æT TH√öC S·ª∞ KI·ªÜN!\n" +
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
                `S·ª± ki·ªán ${getEventDescription(eventType)} ƒë√£ k·∫øt th√∫c.\n\n` +
                "C·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ tham gia!",
                threadID, messageID
              );
            }

            return api.sendMessage(
              "‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! Ch·ªâ h·ªó tr·ª£: start, end",
              threadID, messageID
            );
          }

          default:
            return api.sendMessage(
              "‚ùå L·ªánh admin kh√¥ng h·ª£p l·ªá! G√µ .gacha admin ƒë·ªÉ xem danh s√°ch l·ªánh.",
              threadID, messageID
            );
        }
      }

        function getEventDescription(eventType) {
          switch (eventType) {
            case "doubleodds":
              return "üåü T·ª∂ L·ªÜ K√âP: TƒÉng g·∫•p ƒë√¥i t·ªâ l·ªá ra nh√¢n v·∫≠t 5‚òÖ!";
            case "costreduce":
              return "üí∞ GI·∫¢M GI√Å: Chi ph√≠ pull gi·∫£m 50%!";
            case "premiumpull":
              return "‚ú® PREMIUM BOOST: TƒÉng t·ªâ l·ªá ra nh√¢n v·∫≠t Premium 5‚òÖ!";
            case "bonusreward":
              return "üèÜ PH·∫¶N TH∆Ø·ªûNG X2: Nh·∫≠n g·∫•p ƒë√¥i ph·∫ßn th∆∞·ªüng t·ª´ PVP!";
            default:
              return "S·ª± ki·ªán ƒë·∫∑c bi·ªát";
          }
        }
      case "backup":
      case "sao":
      case "saoluu": {
        if (!isAdmin(senderID)) {
          return api.sendMessage(
            "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!",
            threadID,
            messageID
          );
        }

        const action = target[1]?.toLowerCase();

        if (!action || action === "help") {
          return api.sendMessage(
            "üîÑ H·ªÜ TH·ªêNG SAO L∆ØU D·ªÆ LI·ªÜU üîÑ\n" +
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n" +
            "üìã C√°c l·ªánh h·ªó tr·ª£:\n" +
            "‚Ä¢ .gacha backup list - Xem danh s√°ch backup\n" +
            "‚Ä¢ .gacha backup create - T·∫°o backup th·ªß c√¥ng\n" +
            "‚Ä¢ .gacha backup restore [ID] - Ph·ª•c h·ªìi backup\n\n" +
            "‚è±Ô∏è Th√¥ng tin:\n" +
            "‚Ä¢ H·ªá th·ªëng t·ª± ƒë·ªông sao l∆∞u m·ªói 4 gi·ªù\n" +
            "‚Ä¢ Gi·ªØ l·∫°i t·ªëi ƒëa 14 ng√†y backup h√†ng ng√†y\n" +
            "‚Ä¢ Backup th·ªß c√¥ng ƒë∆∞·ª£c gi·ªØ vƒ©nh vi·ªÖn\n\n" +
            "‚ö†Ô∏è L∆∞u √Ω: Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn ph·ª•c h·ªìi d·ªØ li·ªáu",
            threadID,
            messageID
          );
        }

        if (action === "list") {
          const result = listBackups();

          if (!result.success) {
            return api.sendMessage(
              "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch backup!\n" +
              `L·ªói: ${result.reason || "Unknown"}`,
              threadID,
              messageID
            );
          }

          if (result.backups.length === 0) {
            return api.sendMessage(
              "‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n sao l∆∞u n√†o!",
              threadID,
              messageID
            );
          }

          let message = "üìã DANH S√ÅCH B·∫¢N SAO L∆ØU üìã\n";
          message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

          // Hi·ªÉn th·ªã t·ªëi ƒëa 10 b·∫£n sao l∆∞u g·∫ßn nh·∫•t
          result.backups.slice(0, 10).forEach((backup, index) => {
            message += `${index + 1}. [${backup.type}] ${backup.date} ${backup.time
              }\n`;
            message += `üîñ ID: ${backup.id}\n\n`;
          });

          if (result.backups.length > 10) {
            message += `... v√† ${result.backups.length - 10
              } b·∫£n sao l∆∞u kh√°c\n\n`;
          }

          message += "üí° ƒê·ªÉ ph·ª•c h·ªìi, s·ª≠ d·ª•ng:\n";
          message += ".gacha backup restore [ID]\n";
          message += "V√≠ d·ª•: .gacha backup restore " + result.backups[0].id;

          return api.sendMessage(message, threadID, messageID);
        }

        if (action === "create") {
          const result = createBackup("manual");

          if (result.success) {
            return api.sendMessage(
              "‚úÖ ƒê√É T·∫†O B·∫¢N SAO L∆ØU TH√ÄNH C√îNG!\n\n" +
              `üìÅ T√™n file: ${result.filename}\n` +
              `‚è±Ô∏è Th·ªùi gian: ${new Date().toLocaleString()}`,
              threadID,
              messageID
            );
          } else {
            return api.sendMessage(
              "‚ùå Kh√¥ng th·ªÉ t·∫°o b·∫£n sao l∆∞u!\n" +
              "Vui l√≤ng ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
              threadID,
              messageID
            );
          }
        }

        if (action === "restore") {

          if (!isAdmin(senderID)) {
            return api.sendMessage(
              "‚ùå Ch·ªâ ADMIN m·ªõi c√≥ th·ªÉ ph·ª•c h·ªìi d·ªØ li·ªáu!",
              threadID,
              messageID
            );
          }


          const backupId = target[2];
          if (!backupId) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng cung c·∫•p ID b·∫£n sao l∆∞u!\n" +
              "V√≠ d·ª•: .gacha backup restore 1679823456\n\n" +
              "üí° D√πng '.gacha backup list' ƒë·ªÉ xem danh s√°ch ID",
              threadID,
              messageID
            );
          }

          return api.sendMessage(
            "‚ö†Ô∏è X√ÅC NH·∫¨N PH·ª§C H·ªíI D·ªÆ LI·ªÜU ‚ö†Ô∏è\n\n" +
            "H√†nh ƒë·ªông n√†y s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu hi·ªán t·∫°i v√† thay th·∫ø b·∫±ng b·∫£n sao l∆∞u.\n\n" +
            "‚ö†Ô∏è T·∫§T C·∫¢ D·ªÆ LI·ªÜU SAU B·∫¢N SAO L∆ØU S·∫º B·ªä M·∫§T!\n\n" +
            `ƒê·ªÉ x√°c nh·∫≠n, h√£y g√µ: .gacha backup confirm ${backupId}`,
            threadID,
            messageID
          );
        }

        if (action === "confirm") {

          if (!isAdmin(senderID)) {
            return api.sendMessage(
              "‚ùå Ch·ªâ ADMIN m·ªõi c√≥ th·ªÉ ph·ª•c h·ªìi d·ªØ li·ªáu!",
              threadID,
              messageID
            );
          }


          const backupId = target[2];
          if (!backupId) {
            return api.sendMessage(
              "‚ùå Thi·∫øu ID b·∫£n sao l∆∞u!",
              threadID,
              messageID
            );
          }

          api.sendMessage(
            "‚è≥ ƒêang ti·∫øn h√†nh ph·ª•c h·ªìi d·ªØ li·ªáu...\n" +
            "Vui l√≤ng ch·ªù trong gi√¢y l√°t.",
            threadID,
            messageID
          );

          const result = restoreFromBackup(backupId);

          if (result.success) {
            return api.sendMessage(
              "‚úÖ PH·ª§C H·ªíI D·ªÆ LI·ªÜU TH√ÄNH C√îNG!\n\n" +
              `üìÅ ƒê√£ ph·ª•c h·ªìi t·ª´: ${result.gachaFile}\n` +
              `üìÅ Database nh√¢n v·∫≠t: ${result.charactersFile}\n` +
              `‚è±Ô∏è Th·ªùi gian: ${new Date().toLocaleString()}\n\n` +
              "üîÑ H·ªá th·ªëng ƒë√£ t·∫£i l·∫°i to√†n b·ªô d·ªØ li·ªáu.",
              threadID
            );
          } else {
            return api.sendMessage(
              "‚ùå PH·ª§C H·ªíI D·ªÆ LI·ªÜU TH·∫§T B·∫†I!\n\n" +
              `L·ªói: ${result.reason || "Unknown"}\n` +
              "Vui l√≤ng ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
              threadID
            );
          }
        }

        return api.sendMessage(
          "‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!\n" +
          "G√µ '.gacha backup help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n.",
          threadID,
          messageID
        );
      }
      case "auction": {
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå Thi·∫øu th√¥ng tin ƒë·∫•u gi√°!\n\n" +
            "C√°ch d√πng ƒë√∫ng:\n" +
            ".gacha auction #ID <gi√°_kh·ªüi_ƒëi·ªÉm> [th·ªùi_gian]\n" +
            "V√≠ d·ª•: .gacha auction #1234 50000 60\n\n" +
            "üí° G√µ '.gacha help auction' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt",
            threadID,
            messageID
          );
        }

        // X·ª≠ l√Ω ID v·∫≠t ph·∫©m
        const inputId = target[1].replace(/[^\d]/g, "");

        let foundItemId = null;
        for (const itemId of userData.inventory) {
          const lastFourDigits = itemId.slice(-4);
          if (lastFourDigits === inputId) {
            foundItemId = itemId;
            break;
          }
        }

        if (!foundItemId) {
          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID #${inputId} trong kho ƒë·ªì c·ªßa b·∫°n!`,
            threadID,
            messageID
          );
        }

        // X·ª≠ l√Ω gi√° kh·ªüi ƒëi·ªÉm
        if (!target[2] || isNaN(parseInt(target[2]))) {
          return api.sendMessage(
            "‚ùå Vui l√≤ng nh·∫≠p gi√° kh·ªüi ƒëi·ªÉm h·ª£p l·ªá!\n" +
            "V√≠ d·ª•: .gacha auction #1234 50000",
            threadID,
            messageID
          );
        }

        const startingBid = parseInt(target[2]);
        if (startingBid < 1000) {
          return api.sendMessage(
            "‚ùå Gi√° kh·ªüi ƒëi·ªÉm t·ªëi thi·ªÉu l√† 1,000$!",
            threadID,
            messageID
          );
        }

        // X·ª≠ l√Ω th·ªùi gian (t√πy ch·ªçn)
        let duration = 60; // M·∫∑c ƒë·ªãnh 60 ph√∫t
        if (target[3] && !isNaN(parseInt(target[3]))) {
          const requestedDuration = parseInt(target[3]);
          // Gi·ªõi h·∫°n th·ªùi gian t·ª´ 10 ph√∫t ƒë·∫øn 24 gi·ªù
          duration = Math.min(24 * 60, Math.max(10, requestedDuration));
        }

        // X√≥a v·∫≠t ph·∫©m kh·ªèi inventory ng∆∞·ªùi b√°n
        userData.inventory = userData.inventory.filter(
          (id) => id !== foundItemId
        );
        saveGachaData(gachaData);

        if (!auctionId) {
          // Tr·∫£ l·∫°i v·∫≠t ph·∫©m n·∫øu c√≥ l·ªói
          userData.inventory.push(foundItemId);
          saveGachaData(gachaData);

          return api.sendMessage(
            "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o phi√™n ƒë·∫•u gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.",
            threadID,
            messageID
          );
        }

        // L·∫•y th√¥ng tin v·∫≠t ph·∫©m
        const item = CHARACTER_IDS[foundItemId];

        // X√°c ƒë·ªãnh lo·∫°i v·∫≠t ph·∫©m v√† ƒë·ªô hi·∫øm
        let itemType, rarityText;
        if (foundItemId.startsWith("CHAR_")) {
          itemType = "Nh√¢n v·∫≠t";
          const rarity = CHARACTER_RATINGS.FIVE_STAR.includes(item.name)
            ? 5
            : CHARACTER_RATINGS.FOUR_STAR.includes(item.name)
              ? 4
              : 3;
          rarityText = `${rarity}‚òÖ`;
        } else if (foundItemId.startsWith("STONE_")) {
          itemType = "ƒê√° ti·∫øn h√≥a";
          rarityText = item.stoneType === "UNIVERSAL" ? "5‚òÖ" : "4‚òÖ";
        } else {
          itemType = "M·∫£nh ƒë√°";
          rarityText = "3‚òÖ";
        }

        // Th·ªùi gian k·∫øt th√∫c
        const endTimeText = new Date(
          Date.now() + duration * 60000
        ).toLocaleString();

        return api.sendMessage(
          `üî® PHI√äN ƒê·∫§U GI√Å M·ªöI! üî®\n` +
          `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
          `üë§ Ng∆∞·ªùi b√°n: ${userName}\n` +
          `üì¶ V·∫≠t ph·∫©m: ${item.name} (${rarityText})\n` +
          `üìù Lo·∫°i: ${itemType}\n` +
          `üí∞ Gi√° kh·ªüi ƒëi·ªÉm: $${startingBid.toLocaleString()}\n` +
          `üíé Gi√° tr·ªã th·ªã tr∆∞·ªùng: $${item.value?.toLocaleString()}\n\n` +
          `‚è∞ Th·ªùi gian: ${duration} ph√∫t\n` +
          `üóìÔ∏è K·∫øt th√∫c l√∫c: ${endTimeText}\n` +
          `üîñ ID phi√™n ƒë·∫•u gi√°: ${auctionId}\n\n` +
          `üí° ƒê·ªÉ ƒë·∫∑t gi√°, h√£y g√µ:\n` +
          `.gacha bid ${auctionId} <s·ªë_ti·ªÅn>\n\n` +
          `üíº ƒê·ªÉ xem chi ti·∫øt phi√™n ƒë·∫•u gi√°:\n` +
          `.gacha ainfo ${auctionId}`,
          threadID,
          messageID
        );
      }

      case "bid": {
        if (!target[1] || !target[2]) {
          return api.sendMessage(
            "‚ùå Thi·∫øu th√¥ng tin ƒë·∫∑t gi√°!\n\n" +
            "C√°ch d√πng ƒë√∫ng:\n" +
            ".gacha bid <ID_phi√™n> <s·ªë_ti·ªÅn>\n" +
            "V√≠ d·ª•: .gacha bid AUC_1234 50000",
            threadID,
            messageID
          );
        }

        const auctionInputId = target[1];

        // T√¨m phi√™n ƒë·∫•u gi√° t∆∞∆°ng ·ª©ng
        let auction;
        let fullAuctionId = auctionInputId;

        if (!activeAuctions.has(auctionInputId)) {
          // T√¨m ki·∫øm v·ªõi ID ng·∫Øn g·ªçn
          fullAuctionId = [...activeAuctions.keys()].find(
            (id) => id.includes(auctionInputId) || id.endsWith(auctionInputId)
          );

          if (!fullAuctionId) {
            return api.sendMessage(
              "‚ùå Kh√¥ng t√¨m th·∫•y phi√™n ƒë·∫•u gi√° v·ªõi ID n√†y!\n" +
              "D√πng '.gacha alist' ƒë·ªÉ xem danh s√°ch phi√™n ƒë·∫•u gi√° ƒëang di·ªÖn ra.",
              threadID,
              messageID
            );
          }
        }

        // L·∫•y th√¥ng tin phi√™n ƒë·∫•u gi√°
        auction = activeAuctions.get(fullAuctionId);

        // Ki·ªÉm tra ng∆∞·ªùi b√°n kh√¥ng th·ªÉ ƒë·∫∑t gi√° cho ch√≠nh m√¨nh
        if (auction.seller === senderID) {
          return api.sendMessage(
            "‚ùå B·∫°n kh√¥ng th·ªÉ ƒë·∫∑t gi√° cho v·∫≠t ph·∫©m do ch√≠nh m√¨nh b√°n ra!",
            threadID,
            messageID
          );
        }

        const bidAmount = parseInt(target[2]);
        if (isNaN(bidAmount)) {
          return api.sendMessage(
            "‚ùå S·ªë ti·ªÅn ƒë·∫∑t gi√° kh√¥ng h·ª£p l·ªá!",
            threadID,
            messageID
          );
        }

        const balance = await getBalance(senderID);
        if (balance < bidAmount) {
          return api.sendMessage(
            `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t gi√°!\n` +
            `üí∞ S·ªë d∆∞: $${balance.toLocaleString()}\n` +
            `üí∏ C·∫ßn: $${bidAmount.toLocaleString()}`,
            threadID,
            messageID
          );
        }

        // Ki·ªÉm tra gi√° ƒë·∫∑t c√≥ h·ª£p l·ªá kh√¥ng
        const minValidBid = auction.currentBid + auction.minIncrement;
        if (bidAmount < minValidBid) {
          return api.sendMessage(
            `‚ùå Gi√° ƒë·∫∑t qu√° th·∫•p!\n` +
            `üí∞ Gi√° hi·ªán t·∫°i: $${auction.currentBid.toLocaleString()}\n` +
            `üîº M·ª©c tƒÉng t·ªëi thi·ªÉu: $${auction.minIncrement.toLocaleString()}\n` +
            `üí∏ Gi√° t·ªëi thi·ªÉu: $${minValidBid.toLocaleString()}`,
            threadID,
            messageID
          );
        }

        // Ki·ªÉm tra th·ªùi gian c√≤n l·∫°i
        if (Date.now() >= auction.endTime) {
          return api.sendMessage(
            `‚ùå Phi√™n ƒë·∫•u gi√° ƒë√£ k·∫øt th√∫c!\n` +
            `Vui l√≤ng tham gia c√°c phi√™n ƒë·∫•u gi√° kh√°c.`,
            threadID,
            messageID
          );
        }

        // L∆∞u th√¥ng tin ng∆∞·ªùi ƒë·∫∑t gi√° tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ho√†n ti·ªÅn
        const previousBidder = auction.highestBidder;
        const previousBid = auction.currentBid;

        // C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫•u gi√°
        auction.highestBidder = senderID;
        auction.currentBid = bidAmount;
        auction.bids.push({
          bidderId: senderID,
          amount: bidAmount,
          time: Date.now(),
        });

        // Gia h·∫°n th·ªùi gian n·∫øu g·∫ßn h·∫øt
        const timeLeft = auction.endTime - Date.now();
        if (timeLeft < 60000) {
          // D∆∞·ªõi 1 ph√∫t
          auction.endTime = Date.now() + 60000; // Th√™m 1 ph√∫t

          // Th√¥ng b√°o v·ªÅ vi·ªác gia h·∫°n
          api.sendMessage(
            `‚è∞ TH·ªúI GIAN ƒê·∫§U GI√Å ƒê√É ƒê∆Ø·ª¢C GIA H·∫†N!\n` +
            `üì¶ V·∫≠t ph·∫©m: ${auction.itemName}\n` +
            `üîñ ID: ${auction.id}\n` +
            `‚åõ Th·ªùi gian m·ªõi: ${new Date(
              auction.endTime
            ).toLocaleTimeString()}`,
            threadID
          );
        }

        // Ho√†n tr·∫£ ti·ªÅn cho ng∆∞·ªùi ƒë·∫∑t gi√° tr∆∞·ªõc ƒë√≥
        if (previousBidder) {
          await updateBalance(previousBidder, previousBid);

          const previousBidderName = getUserName(previousBidder);
          api.sendMessage(
            `üì¢ B·∫†N ƒê√É B·ªä TR·∫¢ GI√Å CAO H∆†N!\n\n` +
            `üì¶ Phi√™n ƒë·∫•u gi√°: ${auction.itemName}\n` +
            `üí∞ Gi√° c·ªßa b·∫°n: $${previousBid.toLocaleString()}\n` +
            `üí∞ Gi√° m·ªõi: $${bidAmount.toLocaleString()}\n` +
            `‚è∞ K·∫øt th√∫c: ${new Date(
              auction.endTime
            ).toLocaleTimeString()}\n\n` +
            `‚úÖ $${previousBid.toLocaleString()} ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£ v√†o t√†i kho·∫£n c·ªßa b·∫°n\n` +
            `üí° B·∫°n c√≥ th·ªÉ ƒë·∫∑t gi√° cao h∆°n ƒë·ªÉ ti·∫øp t·ª•c tham gia!`,
            previousBidder
          );
        }

        // Tr·ª´ ti·ªÅn ng∆∞·ªùi ƒë·∫∑t gi√° m·ªõi
        await updateBalance(senderID, -bidAmount);

        // Th√™m ng∆∞·ªùi ƒë·∫∑t gi√° v√†o danh s√°ch th√¥ng b√°o
        if (!auction.notifications.includes(senderID)) {
          auction.notifications.push(senderID);
        }

        // T√≠nh % tƒÉng gi√° so v·ªõi gi√° kh·ªüi ƒëi·ªÉm
        const increasePercent = Math.floor(
          ((bidAmount - auction.startingBid) / auction.startingBid) * 100
        );

        return api.sendMessage(
          `‚úÖ ƒê·∫∂T GI√Å TH√ÄNH C√îNG! ‚úÖ\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üì¶ V·∫≠t ph·∫©m: ${auction.itemName}\n` +
          `üí∞ Gi√° c·ªßa b·∫°n: $${bidAmount.toLocaleString()} (+${increasePercent}%)\n` +
          `üí∏ S·ªë ti·ªÅn ƒë√£ b·ªã kh√≥a cho ƒë·∫øn khi phi√™n ƒë·∫•u gi√° k·∫øt th√∫c\n\n` +
          `‚è∞ K·∫øt th√∫c: ${new Date(auction.endTime).toLocaleTimeString()}\n` +
          `üîñ ID phi√™n: ${auction.id}\n\n` +
          `üí° B·∫°n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o khi phi√™n ƒë·∫•u gi√° k·∫øt th√∫c!`,
          threadID,
          messageID
        );
      }
    }
  },
};
