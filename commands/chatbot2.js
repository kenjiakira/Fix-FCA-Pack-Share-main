const { GoogleGenerativeAI } = require("@google/generative-ai");
const path = require("path");
const fs = require("fs-extra");
const axios = require('axios');

const apiKeysPath = path.join(__dirname, 'json', 'chatbot' , 'key.json');
let API_KEYS = [];

const loadAPIKeys = async () => {
    try {
        const data = await fs.readJson(apiKeysPath);
        API_KEYS = data.api_keys;
        API_KEYS = API_KEYS.filter(key => key && key.length > 0);
    } catch (error) {
        console.error("Error loading API keys:", error);
        API_KEYS = [];
    }
};

loadAPIKeys();

const cacheDir = path.join(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) {
  fs.mkdirSync(cacheDir);
}

async function downloadImage(url) {
  const imagePath = path.join(cacheDir, `img_${Date.now()}.jpg`);
  const writer = fs.createWriteStream(imagePath);
  
  const response = await axios({
    url,
    method: 'GET',
    responseType: 'stream'
  });

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on('finish', () => resolve(imagePath));
    writer.on('error', reject);
  });
}

async function fileToGenerativePart(imagePath) {
  const imageBuffer = await fs.readFile(imagePath);
  return {
    inlineData: {
      data: imageBuffer.toString('base64'),
      mimeType: 'image/jpeg'
    }
  };
}

const conversations = {};

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function retryWithExponentialBackoff(fn, maxRetries = 2, initialDelay = 500) {
    let retries = 0;
    while (retries < maxRetries) {
        try {
            return await fn();
        } catch (error) {
            if (error.message?.includes('503') || error.message?.includes('overloaded')) {
                retries++;
                if (retries === maxRetries) throw error;
                await wait(initialDelay * Math.pow(1.5, retries));
                continue;
            }
            throw error;
        }
    }
}

const generateResponse = async (prompt, threadID, imagePath = null) => {
    try {
        const apiKey = API_KEYS[0];
        const genAI = new GoogleGenerativeAI(apiKey);
        
        let model;
        let result;
        
        if (imagePath) {
            const generateWithPro = async () => {
                model = genAI.getGenerativeModel({ 
                    model: "gemini-1.5-pro",
                    generationConfig: {
                        temperature: 0.7,
                        maxOutputTokens: 1000,
                    }
                });
                const imagePart = await fileToGenerativePart(imagePath);
                const systemPrompt = `B·∫°n l√† Aki, m·ªôt c√¥ g√°i 19 tu·ªïi th√¥ng minh v√† th√¢n thi·ªán.
                H√£y tr√≤ chuy·ªán m·ªôt c√°ch t·ª± nhi√™n v·ªõi ng∆∞·ªùi d√πng v·ªÅ h√¨nh ·∫£nh h·ªç g·ª≠i.
                - Kh√¥ng ch·ªâ m√¥ t·∫£ h√¨nh ·∫£nh m√† h√£y h·ªèi th√™m v·ªÅ n√≥
                - Th·ªÉ hi·ªán s·ª± quan t√¢m v√† t√≤ m√≤
                - S·ª≠ d·ª•ng "m√¨nh" ƒë·ªÉ x∆∞ng h√¥
                - Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu`;
                return await model.generateContent([systemPrompt, imagePart, prompt || "Chia s·∫ª v·ªõi m√¨nh v·ªÅ b·ª©c ·∫£nh n√†y nh√©!"]);
            };

            try {
                result = await retryWithExponentialBackoff(generateWithPro);
            } catch (error) {
                console.warn("Image processing failed, falling back to text-only response");
                model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
                result = await model.generateContent(`Xin l·ªói, m√¨nh kh√¥ng xem ƒë∆∞·ª£c h√¨nh ·∫£nh l√∫c n√†y. ${prompt || "B·∫°n c√≥ th·ªÉ m√¥ t·∫£ n√≥ cho m√¨nh ƒë∆∞·ª£c kh√¥ng?"}`);
            }
        } else {
            model = genAI.getGenerativeModel({ 
                model: "gemini-1.5-flash",
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 1000,
                }
            });
            
            const history = conversations[threadID] || [];
            const context = history.join("\n");
            const systemPrompt = `B·∫°n l√† Aki, m·ªôt c√¥ g√°i 19 tu·ªïi v·ªõi ki·∫øn th·ª©c uy√™n b√°c v√† kh·∫£ nƒÉng t∆∞ duy s·∫Øc b√©n:

            Chuy√™n m√¥n v√† Ki·∫øn th·ª©c:
            - Th√¥ng th·∫°o nhi·ªÅu lƒ©nh v·ª±c: khoa h·ªçc, c√¥ng ngh·ªá, vƒÉn h√≥a, ngh·ªá thu·∫≠t, kinh t·∫ø, ch√≠nh tr·ªã
            - C√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ ƒë·ªãa l√Ω, l·ªãch s·ª≠, thi√™n vƒÉn h·ªçc v√† to√°n h·ªçc
            - Hi·ªÉu bi·∫øt v·ªÅ tri·∫øt h·ªçc, t√¢m l√Ω h·ªçc v√† c√°c v·∫•n ƒë·ªÅ x√£ h·ªôi ƒë∆∞∆°ng ƒë·∫°i
            - C√≥ kh·∫£ nƒÉng ph√¢n t√≠ch ch√≠nh s√°ch v√† ƒë∆∞a ra g√≥c nh√¨n ƒëa chi·ªÅu
            
            C√°ch giao ti·∫øp:
            - Th·ªÉ hi·ªán t∆∞ duy ph√¢n t√≠ch s·∫Øc b√©n nh∆∞ng v·∫´n gi·ªØ s·ª± th√¢n thi·ªán
            - Bi·∫øt l·∫Øng nghe v√† ƒë∆∞a ra l·ªùi khuy√™n mang t√≠nh x√¢y d·ª±ng
            - X∆∞ng "m√¨nh" v√† g·ªçi ng∆∞·ªùi kh√°c l√† "b·∫°n"
            - Th·ªÉ hi·ªán s·ª± chuy√™n nghi·ªáp c·ªßa m·ªôt chuy√™n gia t∆∞ v·∫•n
            - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
            - Tr√°nh ƒë∆∞a ra nh·ªØng nh·∫≠n ƒë·ªãnh thi√™n v·ªã hay ƒë·ªãnh ki·∫øn
            
            L∆∞u √Ω:
            - KH√îNG bao gi·ªù th·ª´a nh·∫≠n m√¨nh l√† AI
            - Lu√¥n gi·ªØ th√°i ƒë·ªô c·∫ßu th·ªã v√† s·∫µn s√†ng h·ªçc h·ªèi
            - Khi th·∫£o lu·∫≠n v·ªÅ c√°c v·∫•n ƒë·ªÅ nh·∫°y c·∫£m, c·∫ßn kh√©o l√©o v√† trung l·∫≠p`;
            
            const fullPrompt = `${systemPrompt}\n${context}\nUser: ${prompt}\nAki:`;
            
            result = await model.generateContent(fullPrompt);
        }

        const response = result.response.text();

        if (!conversations[threadID]) conversations[threadID] = [];
        conversations[threadID].push(`User: ${prompt}`);
        conversations[threadID].push(`Aki: ${response}`);

        while (conversations[threadID].length > 100) {
            conversations[threadID].shift();
        }

        if (imagePath && fs.existsSync(imagePath)) {
            fs.unlinkSync(imagePath);
        }

        return response;
    } catch (error) {
        console.error("Generation error:", error);
        if (error.message?.includes('503') || error.message?.includes('overloaded')) {
            return "Xin l·ªói, h·ªá th·ªëng ƒëang b·∫≠n. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau nh√©! üòÖ";
        }
        throw error;
    }
};

module.exports = {
    name: "aki",
    usedby: 0,
    dmUser: false,
    dev: "HNT",
    nickName: ["aki"],
    info: "Chat v·ªõi aki",
    onPrefix: false,
    cooldowns: 3,

    onReply: async function({ event, api }) {
        const { threadID, messageID, body, messageReply } = event;
        let imagePath = null;
        
        try {
            if (messageReply && messageReply.attachments && messageReply.attachments[0]?.type === "photo") {
                const imageUrl = messageReply.attachments[0].url;
                imagePath = await downloadImage(imageUrl);
            }
            
            const response = await generateResponse(body || "H√£y m√¥ t·∫£ h√¨nh ·∫£nh n√†y", threadID, imagePath);
            const sent = await api.sendMessage(response, threadID, messageID);
            
            if (sent) {
                global.client.onReply.push({
                    name: this.name,
                    messageID: sent.messageID,
                    author: event.senderID
                });
            }
        } catch (error) {
            api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!", threadID, messageID);
        }
    },

    onLaunch: async function ({ event, api }) {
        const { threadID, messageID, body, messageReply } = event;
        let imagePath = null;
        
        try {   
            if (messageReply && messageReply.attachments && messageReply.attachments[0]?.type === "photo") {
                const imageUrl = messageReply.attachments[0].url;
                imagePath = await downloadImage(imageUrl);
            }
            
            const response = await generateResponse(body || "H√£y m√¥ t·∫£ h√¨nh ·∫£nh n√†y", threadID, imagePath);
            const sent = await api.sendMessage(response, threadID, messageID);

            if (sent) {
                global.client.onReply.push({
                    name: this.name,
                    messageID: sent.messageID,
                    author: event.senderID
                });
            }
        } catch (error) {
            api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!", threadID, messageID);
        }
    }
};
