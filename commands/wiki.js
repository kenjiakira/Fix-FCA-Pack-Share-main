const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const { image } = require('image-downloader');

const cacheDir = path.resolve(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) {
    fs.mkdirsSync(cacheDir);
}

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

module.exports = {
    name: "wiki",
    info: "Tra c·ª©u th√¥ng tin t·ª´ Wikipedia",
    dev: "HNT",
    category: "Tin T·ª©c",
    onPrefix: true,
    usedby: 0,
    dmUser: false,
    nickName: ["wiki", "wikipedia"],
    usages: "wiki [en/vi] [t·ª´ kh√≥a] | wiki [t·ª´ kh√≥a]",
    cooldowns: 5,

    onLaunch: async function ({ api, event, target }) {
        let lang = 'vi';
        let searchTerm = null;

        if (target && target.length > 0) {
            if (target[0].toLowerCase() === 'en' || target[0].toLowerCase() === 'vi') {
                lang = target[0].toLowerCase();
                searchTerm = target.slice(1).join(" ");
            } else {
                searchTerm = target.join(" ");
            }
        }

        const outputPath = path.resolve(cacheDir, 'wiki_image.jpg');

        try {
            if (!searchTerm) {
                const randomWikiArticle = await fetchRandomWikiArticle(lang);
                if (randomWikiArticle) {
                    if (randomWikiArticle.image && await checkImageUrl(randomWikiArticle.image)) {
                        await downloadImage(randomWikiArticle.image, outputPath);
                    }
                    const message = `üìö Wikipedia | B√†i vi·∫øt ng·∫´u nhi√™n\n\n${formatTitle(randomWikiArticle.title)}\n\n${formatContent(randomWikiArticle.extract)}\n\nüîó ƒê·ªçc th√™m: ${randomWikiArticle.url}\n\nüí° M·∫πo: B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm b·∫±ng l·ªánh:\n‚Ä¢ wiki [t·ª´ kh√≥a] - T√¨m b·∫±ng Ti·∫øng Vi·ªát\n‚Ä¢ wiki en [keyword] - Search in English`;
                    api.sendMessage({ body: message, attachment: [fs.createReadStream(outputPath)] }, event.threadID, () => {
                        try {
                            if (fs.existsSync(outputPath)) {
                                fs.unlinkSync(outputPath);
                            }
                        } catch (unlinkError) {
                            console.error(`Kh√¥ng th·ªÉ x√≥a t·ªáp ${outputPath}: ${unlinkError.message}`);
                        }
                    });
                } else {
                    api.sendMessage("Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ng·∫´u nhi√™n t·ª´ Wikipedia v√†o l√∫c n√†y.", event.threadID);
                }
            } else {
                const apiUrl = `https://${lang}.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(searchTerm)}`;
                for (let attempt = 1; attempt <= 3; attempt++) {
                    try {
                        const response = await axios.get(apiUrl);
                        const wikiData = response.data;
                        if (wikiData.title && wikiData.extract) {
                            const imageUrl = wikiData.thumbnail ? wikiData.thumbnail.source : null;
                            let attachments = [];
                            if (imageUrl && await checkImageUrl(imageUrl)) {
                                await downloadImage(imageUrl, outputPath);
                                attachments.push(fs.createReadStream(outputPath));
                            }
                            const message = `üìö Wikipedia: ${wikiData.title}\n\n${wikiData.extract}\n\nƒê·ªçc th√™m: ${wikiData.content_urls.desktop.page}`;
                            api.sendMessage({ body: message, attachment: attachments }, event.threadID, () => {
                                try {
                                    if (fs.existsSync(outputPath)) {
                                        fs.unlinkSync(outputPath);
                                    }
                                } catch (unlinkError) {
                                    console.error(`Kh√¥ng th·ªÉ x√≥a t·ªáp ${outputPath}: ${unlinkError.message}`);
                                }
                            });
                            return;
                        } else {
                            api.sendMessage("Kh√¥ng t√¨m th·∫•y th√¥ng tin t·ª´ kh√≥a n√†y tr√™n Wikipedia.", event.threadID);
                            return;
                        }
                    } catch (error) {
                        if (attempt === 3) {
                            api.sendMessage("Kh√¥ng th·ªÉ truy xu·∫•t th√¥ng tin t·ª´ Wikipedia v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
                        } else {
                            console.error(`L·ªói khi truy xu·∫•t th√¥ng tin: ${error.message}. Th·ª≠ l·∫°i l·∫ßn ${attempt}`);
                            await delay(2000);
                        }
                    }
                }
            }
        } catch (error) {
            api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói: ${error.message}`, event.threadID);
        }
    }
};

function formatTitle(title) {
    return `üìå ${title.toUpperCase()}`;
}

function formatContent(content) {
    if (content.length > 2000) {
        return content.substring(0, 1997) + "...";
    }
    return content;
}

async function fetchRandomWikiArticle(lang = 'vi', retries = 3) {
    const apiUrl = `https://${lang}.wikipedia.org/api/rest_v1/page/random/summary`;
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const response = await axios.get(apiUrl);
            const wikiData = response.data;
            if (wikiData.title && wikiData.extract) {
                const imageUrl = wikiData.thumbnail ? wikiData.thumbnail.source : null;
                return {
                    title: wikiData.title,
                    extract: wikiData.extract,
                    url: wikiData.content_urls.desktop.page,
                    image: imageUrl
                };
            } else {
                return null;
            }
        } catch (error) {
            if (attempt === retries) {
                throw new Error("Kh√¥ng th·ªÉ truy xu·∫•t th√¥ng tin t·ª´ Wikipedia v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.");
            }
            console.error(`L·ªói khi truy xu·∫•t th√¥ng tin: ${error.message}. Th·ª≠ l·∫°i l·∫ßn ${attempt}`);
            await delay(2000);  
        }
    }
}

async function downloadImage(url, outputPath) {
    try {
        await image({ url, dest: outputPath });
        console.log(`T·∫£i ·∫£nh th√†nh c√¥ng t·ª´ ${url}`);
    } catch (error) {
        console.error(`L·ªói khi t·∫£i ·∫£nh t·ª´ ${url}: ${error.message}`);
        throw new Error(`Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ ${url}.`);
    }
}

async function checkImageUrl(url) {
    try {
        const response = await axios.head(url);
        return response.status === 200;
    } catch (error) {
        console.error(`L·ªói khi ki·ªÉm tra URL ${url}: ${error.message}`);
        return false;
    }
}
