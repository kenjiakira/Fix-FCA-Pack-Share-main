const { randomInt } = require("crypto");
const { getBalance, updateBalance, updateQuestProgress } = require('../utils/currencies');

function formatNumber(number) {
    return number.toLocaleString('vi-VN');
}

module.exports = {
    name: "cl",
    dev: "HNT",
    info: "Ch∆°i Ch·∫µn L·∫ª.",
    onPrefix: true,
    usages: "cl",
    usedby: 0,
    cooldowns: 0,

    lastPlayed: {},
    winStreak: {}, 

    onLaunch: async function({ api, event, target = [] }) {
        try {
            const { threadID, messageID, senderID } = event;

            const currentTime = Date.now();

            if (this.lastPlayed[senderID] && currentTime - this.lastPlayed[senderID] < 60000) {
                const waitTime = Math.ceil((60000 - (currentTime - this.lastPlayed[senderID])) / 1000);
                return api.sendMessage(`Vui l√≤ng ƒë·ª£i ${waitTime} gi√¢y n·ªØa ƒë·ªÉ ch∆°i l·∫°i!`, threadID, messageID);
            }

            const balance = getBalance(senderID);

            if (target.length < 2) {
                return api.sendMessage(
                    "CH·∫¥N L·∫∫ \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nH∆∞·ªõng d·∫´n c√°ch ch∆°i:\n" +
                    "G√µ .cl <ch·∫µn/l·∫ª> <s·ªë ti·ªÅn> ho·∫∑c\n.cl <ch·∫µn/l·∫ª> allin\n\nallin l√† c∆∞·ª£c to√†n b·ªô s·ªë d∆∞.",
                    threadID, messageID
                );
            }

            const choice = target[0].toLowerCase();
            if (!["ch·∫µn", "l·∫ª"].includes(choice)) {
                return api.sendMessage("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 'ch·∫µn' ho·∫∑c 'l·∫ª'.", threadID, messageID);
            }

            let betAmount;
            if (target[1].toLowerCase() === "allin") {
                if (balance === 0) {
                    return api.sendMessage("B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ allin.", threadID, messageID);
                }
                betAmount = balance;
            } else {
                betAmount = parseInt(target[1], 10);
                if (isNaN(betAmount) || betAmount <= 0) {
                    return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng.", threadID, messageID);
                }
                if (betAmount < 10000) {
                    return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 10,000 Xu!", threadID, messageID);
                }
            }

            if (betAmount > balance) {
                return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);
            }

            this.lastPlayed[senderID] = currentTime;
            updateBalance(senderID, -betAmount);

            let message = `ƒêang l·∫Øc... ƒê·ª£i ${5} gi√¢y...`;
            let sentMessage;

            try {
                sentMessage = await api.sendMessage(message, threadID, messageID);
            } catch (sendError) {
                console.error('Error sending initial message:', sendError);
              
                updateBalance(senderID, betAmount);
                return api.sendMessage("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
            }

            setTimeout(async () => {
                try {
                    const ICONS = {
                        WHITE: "‚ö™",
                        RED: "üî¥"
                    };

                    const combinations = {
                        "ch·∫µn": [
                            [ICONS.WHITE, ICONS.WHITE, ICONS.RED, ICONS.RED],
                            [ICONS.WHITE, ICONS.WHITE, ICONS.WHITE, ICONS.WHITE],
                            [ICONS.RED, ICONS.RED, ICONS.RED, ICONS.RED]  
                        ],
                        "l·∫ª": [
                            [ICONS.WHITE, ICONS.RED, ICONS.RED, ICONS.RED],
                            [ICONS.WHITE, ICONS.WHITE, ICONS.WHITE, ICONS.RED]
                        ]
                    };

                    if (!this.winStreak[senderID]) this.winStreak[senderID] = 0;

                    let weightedCombinations = [];
                    const isAllin = target[1].toLowerCase() === "allin";
                    
                    if (isAllin) {
       
                        const oppositeChoice = choice === "ch·∫µn" ? "l·∫ª" : "ch·∫µn";
                        const randomNumber = Math.random();
                        
                        if (randomNumber < 0.8) { 
                            weightedCombinations = [
                                ...Array(8).fill(combinations[oppositeChoice][0]),
                                ...Array(2).fill(combinations[choice][0])
                            ];
                        } else {
                            weightedCombinations = [
                                ...Array(5).fill(combinations[oppositeChoice][0]),
                                ...Array(5).fill(combinations[choice][0])
                            ];
                        }
                    } else if (this.winStreak[senderID] >= 3) {
                    
                        weightedCombinations = [
                            ...Array(5).fill(combinations["ch·∫µn"][0]),
                            ...Array(5).fill(combinations["l·∫ª"][0]),
                            ...Array(5).fill(combinations["l·∫ª"][1]),
                            combinations["ch·∫µn"][1],
                            combinations["l·∫ª"][2]
                        ];
                    } else {
                        weightedCombinations = [
                            combinations["ch·∫µn"][0],
                            combinations["l·∫ª"][0],
                            combinations["l·∫ª"][1],
                            ...Array(1).fill(combinations["ch·∫µn"][1]),
                            ...Array(1).fill(combinations["l·∫ª"][2])
                        ];
                    }

                    const result = weightedCombinations[randomInt(0, weightedCombinations.length)];

                    const resultType = combinations["ch·∫µn"].some(comb => JSON.stringify(comb) === JSON.stringify(result)) ? "ch·∫µn" : "l·∫ª";
                    const resultMessage = `K·∫øt qu·∫£: ${result.join(" ")} (${resultType.toUpperCase()})\n`;

                    let multiplier = 0;
                    let resultStatus = "thua";

                    if (resultType === choice) {
                        this.winStreak[senderID]++;
                        
                        if (JSON.stringify(result) === JSON.stringify(combinations["ch·∫µn"][1]) && resultType === "ch·∫µn") {
                            multiplier = 4; 
                        } else if (JSON.stringify(result) === JSON.stringify(combinations["l·∫ª"][2]) && resultType === "l·∫ª") {
                            multiplier = 4; 
                        } else {
                            multiplier = 2; 
                        }
                        resultStatus = "th·∫Øng";
                        const winnings = betAmount * multiplier;
                        updateBalance(senderID, winnings);
                        updateQuestProgress(senderID, "play_games");
                        updateQuestProgress(senderID, "win_games");

                        const finalMessage = resultMessage +
                            `üéâ Ch√∫c m·ª´ng! B·∫°n ${resultStatus} v√† nh·∫≠n ƒë∆∞·ª£c ${formatNumber(winnings)} Xu.\n` +
                            `üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: ${formatNumber(getBalance(senderID))} Xu.`;

                        return api.sendMessage(finalMessage, threadID, messageID);
                    } else {
                        this.winStreak[senderID] = 0;
                        updateQuestProgress(senderID, "play_games");

                        const finalMessage = resultMessage +
                            `üò¢ B·∫°n ƒë√£ ${resultStatus} v√† m·∫•t ${formatNumber(betAmount)} Xu.\n` +
                            `üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: ${formatNumber(getBalance(senderID))} Xu.`;

                        return api.sendMessage(finalMessage, threadID, messageID);
                    }

                } catch (gameError) {
                    console.error('Game processing error:', gameError);
                    updateBalance(senderID, betAmount);
                    return api.sendMessage("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω tr√≤ ch∆°i.", threadID, messageID);
                }
            }, 5000);

        } catch (error) {
            console.error('Main error:', error);
            return api.sendMessage("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }
    }
};
