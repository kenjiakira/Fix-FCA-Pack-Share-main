const axios = require('axios');
const fs = require('fs');
const path = require('path');

const cacheDir = path.join(__dirname, 'cache', 'images', 'douyin');
if (!fs.existsSync(cacheDir)) {
    fs.mkdirSync(cacheDir, { recursive: true });
}

const API_CONFIG = {
    baseUrl: 'https://api.zm.io.vn/v1/social/autolink',
    headers: {
        'Content-Type': 'application/json',
        'apikey': 'OIaCP3fFqjtM6Ndnx5hb' 
    }
};

module.exports = {
    name: 'douyin',
    info: 'T·∫£i video ho·∫∑c h√¨nh ·∫£nh t·ª´ Douyin',
    dev: 'HNT',
    usedby: 0,
    onPrefix: true,
    dmUser: false,
    nickName: ['douyin', 'dy'],
    usages: 'douyin [URL Douyin]',
    cooldowns: 5,

    onLaunch: async function({ api, event, actions }) {
        const { threadID, messageID, body } = event;
        const url = body.trim().split(' ')[1];

        if (!url) {
            return actions.reply("‚ùå Vui l√≤ng cung c·∫•p URL Douyin h·ª£p l·ªá. üåê");
        }

        await processDouyinUrl(url, api, threadID, messageID);
    },
};

const processDouyinUrl = async (url, api, threadID, messageID) => {
    if (!is_url(url)) {
        return api.sendMessage("‚ùå Vui l√≤ng cung c·∫•p URL h·ª£p l·ªá. üåê", threadID, messageID);
    }

    if (/douyin\.com/.test(url)) {
        try {
            const response = await axios.get(`${API_CONFIG.baseUrl}?url=${encodeURIComponent(url)}`, {
                headers: API_CONFIG.headers
            });
            
            if (!response.data || !response.data.medias) {
                return api.sendMessage("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i n·ªôi dung t·ª´ URL n√†y. üò¢", threadID, messageID);
            }

            const { author, title, medias } = response.data;
            let attachments = [];
            let filePaths = [];

            const mediaItem = medias.find(m => m.quality === 'hd_no_watermark') || 
                            medias.find(m => m.quality === 'no_watermark') ||
                            medias[0];

            if (mediaItem?.url) {
                const filePath = await downloadFile(mediaItem.url, mediaItem.type === 'video' ? 'mp4' : 'jpg');
                attachments.push(fs.createReadStream(filePath));
                filePaths.push(filePath);

                await api.sendMessage({
                    body: `==[ DOUYIN DOWNLOAD ]==\n\nüé¨ Ti√™u ƒë·ªÅ: ${title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"}\nüë§ T√°c gi·∫£: ${author || "Kh√¥ng x√°c ƒë·ªãnh"}\nüéØ Ch·∫•t l∆∞·ª£ng: ${mediaItem.quality || "M·∫∑c ƒë·ªãnh"}`,
                    attachment: attachments
                }, threadID, messageID);

                cleanupFiles(filePaths);
            }

        } catch (error) {
            console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:", error);
            return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. üò•", threadID, messageID);
        }
    } else {
        return api.sendMessage("‚ö†Ô∏è Vui l√≤ng cung c·∫•p URL Douyin h·ª£p l·ªá. üì≤", threadID, messageID);
    }
};

const is_url = (url) => /^http(s)?:\/\//.test(url);

const downloadFile = async (url, type) => {
    try {
        const res = await axios.get(url, { responseType: 'arraybuffer' });
        const filePath = path.join(cacheDir, `${Date.now()}.${type}`);
        fs.writeFileSync(filePath, res.data);
        return filePath;
    } catch (error) {
        console.error("L·ªói khi t·∫£i t·ªáp t·ª´ URL:", error);
        throw new Error("Kh√¥ng th·ªÉ t·∫£i t·ªáp t·ª´ URL");
    }
};

const cleanupFiles = (filePaths) => {
    setTimeout(() => {
        filePaths.forEach(filePath => {
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
                console.log(`ƒê√£ x√≥a t·ªáp: ${filePath}`);
            }
        });
    }, 1000 * 60);
};
