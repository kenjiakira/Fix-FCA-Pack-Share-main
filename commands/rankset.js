const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');

const imgurClientId = '34dc774b8c0ddae';
const customizationPath = path.join(__dirname, '../database/json/rankCustomization.json');

function loadCustomization() {
    if (!fs.existsSync(customizationPath)) {
        fs.writeFileSync(customizationPath, JSON.stringify({
            backgrounds: {},
            frames: {},
            avatars: {}
        }, null, 2));
    }
    return JSON.parse(fs.readFileSync(customizationPath));
}

function saveCustomization(data) {
    fs.writeFileSync(customizationPath, JSON.stringify(data, null, 2));
}

async function uploadToImgur(filePath) {
    try {
        const form = new FormData();
        form.append('image', fs.createReadStream(filePath));

        const response = await axios.post('https://api.imgur.com/3/image', form, {
            headers: {
                ...form.getHeaders(),
                Authorization: `Client-ID ${imgurClientId}`
            }
        });

        return response.data.data.link;
    } catch (error) {
        console.error('Imgur upload error:', error);
        throw error;
    }
}

module.exports = {
    name: 'rankset',
    info: 'T√πy ch·ªânh th·∫ª x·∫øp h·∫°ng c·ªßa b·∫°n',
    dev: 'HNT',
    usedby: 0,
    onPrefix: true,
    dmUser: true,
    usages: 'Reply ·∫£nh ho·∫∑c g·ª≠i link v·ªõi t·ª´ kh√≥a: background/frame/avatar ho·∫∑c reset ƒë·ªÉ x√≥a t√πy ch·ªânh',
    cooldowns: 5,

    onLaunch: async function ({ api, event, target }) {
        const { threadID, messageID, messageReply } = event;
        const keyword = target[0]?.toLowerCase();
        const imageUrl = target[1];

        if (keyword === 'reset') {
            const customization = loadCustomization();
            let changed = false;

            if (customization.backgrounds[event.senderID]) {
                delete customization.backgrounds[event.senderID];
                changed = true;
            }
            if (customization.frames[event.senderID]) {
                delete customization.frames[event.senderID];
                changed = true;
            }
            if (customization.avatars[event.senderID]) {
                delete customization.avatars[event.senderID];
                changed = true;
            }

            if (changed) {
                saveCustomization(customization);
                return api.sendMessage('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ t√πy ch·ªânh th·∫ª rank c·ªßa b·∫°n.', threadID, messageID);
            } else {
                return api.sendMessage('‚ùå B·∫°n ch∆∞a c√≥ t√πy ch·ªânh n√†o ƒë·ªÉ x√≥a.', threadID, messageID);
            }
        }

        if (keyword && (keyword === 'background' || keyword === 'frame' || keyword === 'avatar') && imageUrl) {
            if (!imageUrl.match(/^https?:\/\/.+\.(jpg|jpeg|png|gif)$/i)) {
                return api.sendMessage('‚ùå Link ·∫£nh kh√¥ng h·ª£p l·ªá!', threadID, messageID);
            }

            try {
                const imgResponse = await axios.get(imageUrl, { responseType: 'stream' });
                const tempPath = path.join(__dirname, 'cache', `temp_${Date.now()}.jpg`);
                const writer = fs.createWriteStream(tempPath);
                
                imgResponse.data.pipe(writer);

                await new Promise((resolve, reject) => {
                    writer.on('finish', resolve);
                    writer.on('error', reject);
                });

                const imgurUrl = await uploadToImgur(tempPath);

                const customization = loadCustomization();
                const typeKey = keyword === 'background' ? 'backgrounds' : 
                                keyword === 'frame' ? 'frames' : 'avatars';
                customization[typeKey][event.senderID] = imgurUrl;
                saveCustomization(customization);

                fs.unlinkSync(tempPath);

                return api.sendMessage(
                    `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${keyword} c·ªßa b·∫°n th√†nh c√¥ng!\n` +
                    'üëâ D√πng l·ªánh rank ƒë·ªÉ xem k·∫øt qu·∫£.',
                    threadID, messageID
                );

            } catch (error) {
                console.error('Error processing image URL:', error);
                return api.sendMessage('‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ link. Vui l√≤ng th·ª≠ link kh√°c.', threadID, messageID);
            }
        }

        if (!messageReply || !messageReply.attachments || messageReply.attachments.length === 0) {
            return api.sendMessage(
                'üìù H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng setrank:\n\n' +
                '1. Reply ·∫£nh v·ªõi t·ª´ kh√≥a:\n' +
                '   - background: ƒê·∫∑t h√¨nh n·ªÅn\n' +
                '   - frame: ƒê·∫∑t khung vi·ªÅn\n' +
                '   - avatar: ƒê·∫∑t avatar t√πy ch·ªânh\n\n' +
                '2. Ho·∫∑c d√πng link ·∫£nh:\n' +
                '   - setrank background [link]\n' +
                '   - setrank frame [link]\n' +
                '   - setrank avatar [link]\n\n' +
                '3. X√≥a t√πy ch·ªânh:\n' +
                '   - setrank reset\n\n' +
                'üëâ Sau khi c√†i ƒë·∫∑t, d√πng l·ªánh rank ƒë·ªÉ xem k·∫øt qu·∫£!',
                threadID, messageID
            );
        }

        if (!keyword || (keyword !== 'background' && keyword !== 'frame' && keyword !== 'avatar')) {
            return api.sendMessage(
                '‚ùå Vui l√≤ng ch·ªçn lo·∫°i t√πy ch·ªânh:\n' +
                '- background: ƒê·∫∑t h√¨nh n·ªÅn\n' +
                '- frame: ƒê·∫∑t khung vi·ªÅn\n' +
                '- avatar: ƒê·∫∑t avatar t√πy ch·ªânh',
                threadID, messageID
            );
        }

        const attachment = messageReply.attachments.find(att => att.type === 'photo');
        if (!attachment) {
            return api.sendMessage('‚ùå Vui l√≤ng reply m·ªôt ·∫£nh ƒë·ªÉ c√†i ƒë·∫∑t.', threadID, messageID);
        }

        try {
            const tempPath = path.join(__dirname, 'cache', `temp_${Date.now()}.jpg`);
            const imgResponse = await axios({
                url: attachment.url,
                responseType: 'stream'
            });

            const writer = fs.createWriteStream(tempPath);
            imgResponse.data.pipe(writer);

            await new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
            });

            const imgurUrl = await uploadToImgur(tempPath);

            const customization = loadCustomization();
            const typeKey = keyword === 'background' ? 'backgrounds' : 
                            keyword === 'frame' ? 'frames' : 'avatars';
            customization[typeKey][event.senderID] = imgurUrl;
            saveCustomization(customization);

            fs.unlinkSync(tempPath);

            return api.sendMessage(
                `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${keyword} c·ªßa b·∫°n th√†nh c√¥ng!\n` +
                'üëâ D√πng l·ªánh rank ƒë·ªÉ xem k·∫øt qu·∫£.',
                threadID, messageID
            );

        } catch (error) {
            console.error('Error processing image:', error);
            return api.sendMessage('‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.', threadID, messageID);
        }
    }
};
