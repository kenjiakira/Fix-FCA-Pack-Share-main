const { randomInt } = require("crypto");
const path = require("path");
const fs = require("fs");
const { createCanvas, loadImage } = require("canvas");
const { getBalance, updateBalance, loadQuy, saveQuy, updateQuestProgress } = require('../utils/currencies');

function formatNumber(number) {
    return number.toLocaleString('vi-VN');  
}

module.exports = {
    name: "tx",
    dev: "HNT", 
    usedby: 0,
    info: "Ch∆°i mini-game T√†i X·ªâu b·∫±ng s·ªë d∆∞ hi·ªán c√≥.",
    onPrefix: true, 
    usages: "tx",
    cooldowns: 0,

    lastPlayed: {},

    onLaunch: async function({ api, event, target = [] }) {
        const { threadID, messageID, senderID } = event;

        const currentTime = Date.now();

        if (this.lastPlayed[senderID] && currentTime - this.lastPlayed[senderID] < 20000) {
            const waitTime = Math.ceil((20000 - (currentTime - this.lastPlayed[senderID])) / 1000);
            return api.sendMessage(`Vui l√≤ng ƒë·ª£i ${waitTime} gi√¢y n·ªØa ƒë·ªÉ ch∆°i l·∫°i!`, threadID, messageID);
        }

        this.lastPlayed[senderID] = currentTime;

        const balance = getBalance(senderID);

        if (target.length < 2) {
            return api.sendMessage("T√ÄI X·ªàU \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nH∆∞·ªõng d·∫´n c√°ch ch∆°i:\ng√µ .tx t√†i/x·ªâu <s·ªë ti·ªÅn> ho·∫∑c\n.tx t√†i/x·ªâu allin \n\nallin l√† c∆∞·ª£c to√†n b·ªô.", threadID, messageID);
        }

        const choice = target[0].toLowerCase();
     
        if (choice !== "t√†i" && choice !== "x·ªâu") {
            return api.sendMessage("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 't√†i' ho·∫∑c 'x·ªâu'.", threadID, messageID);
        }

        let betAmount;
      
        if (target[1].toLowerCase() === "allin") {
            if (balance === 0) {
                return api.sendMessage("B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ allin.", threadID, messageID);
            }
            betAmount = balance;
        } else {
            betAmount = parseInt(target[1], 10);
          
            if (isNaN(betAmount) || betAmount <= 0) {
                return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng.", threadID, messageID);
            }
            if (betAmount < 10000) {
                return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 10,000 Xu!", threadID, messageID);
            }
        }

        if (betAmount > balance) {
            return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);
        }

        updateBalance(senderID, -betAmount);

        let message = `üé≤ L·∫Øc x√∫c x·∫Øc... ƒê·ª£i ${5} gi√¢y...`;

        await api.sendMessage(message, threadID, messageID);

        setTimeout(async () => {
            const dice1 = randomInt(1, 7);
            const dice2 = randomInt(1, 7);
            const dice3 = randomInt(1, 7);
            const total = dice1 + dice2 + dice3;
            const result = total >= 11 ? "t√†i" : "x·ªâu";

            message = `üé≤ K·∫øt qu·∫£: ${dice1} + ${dice2} + ${dice3} = ${total} \nQK ra : ${result.toUpperCase()}\n`;

            const getDiceImagePath = (diceNumber) => path.join(__dirname, 'cache','images', 'dice', `dice${diceNumber}.png`);

            const diceImages = await Promise.all([getDiceImagePath(dice1), getDiceImagePath(dice2), getDiceImagePath(dice3)].map(imagePath => loadImage(imagePath)));

            const canvas = createCanvas(diceImages[0].width * 3, diceImages[0].height);
            const ctx = canvas.getContext('2d');

            diceImages.forEach((image, index) => {
                ctx.drawImage(image, index * image.width, 0);
            });

            const outputImagePath = path.join(__dirname, 'cache','images', 'dice', 'combined.png');
            const buffer = canvas.toBuffer('image/png');
            fs.writeFileSync(outputImagePath, buffer);

            const combinedImage = fs.createReadStream(outputImagePath);

            let fee = 0;
            if (choice === result) {
                const winnings = betAmount * 2;
                fee = winnings * 0.05;
                const finalWinnings = Math.floor(winnings - fee);
                updateBalance(senderID, finalWinnings);
                message += `üéâ Ch√∫c m·ª´ng! B·∫°n th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c ${formatNumber(finalWinnings)} Xu.\nPh√≠: 5%\n`;

                let quy = loadQuy();
                quy += Math.floor(fee);
                saveQuy(quy);

                updateQuestProgress(senderID, "play_games");
                updateQuestProgress(senderID, "win_games");
            } else {
                message += `üò¢ B·∫°n ƒë√£ thua v√† m·∫•t ${formatNumber(betAmount)} Xu.\n`;
                updateQuestProgress(senderID, "play_games");
            }

            if (total === 18 || total === 3) {
                const allUsers = Object.keys(readData().balance);
                const eligibleUsers = allUsers.filter(userId => getBalance(userId) > 0);

                if (eligibleUsers.length > 0) {
                    let quy = loadQuy();
                    const shareAmount = Math.floor(quy / eligibleUsers.length);

                    eligibleUsers.forEach(userId => {
                        updateBalance(userId, shareAmount);
                    });

                    message += `üí∏ Qu·ªπ chung ƒë∆∞·ª£c chia ƒë·ªÅu cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i c√≥ s·ªë d∆∞, m·ªói ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c ${formatNumber(shareAmount)} Xu.\n`;
                    saveQuy(0);
                }
            }

            const newBalance = getBalance(senderID);
            message += `üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: ${formatNumber(newBalance)} Xu.\n`;

            message += `üí∞ Qu·ªπ hi·ªán t·∫°i: ${loadQuy() ? formatNumber(Math.floor(loadQuy())) : 0} Xu.`;

            return api.sendMessage({
                body: message,
                attachment: combinedImage
            }, threadID, messageID);

        }, 5000);
    }
};
