const { randomInt } = require("crypto");
const path = require("path");
const fs = require("fs");
const { createCanvas, loadImage } = require("canvas");
const { getBalance, updateBalance, loadQuy, saveQuy, updateQuestProgress } = require('../utils/currencies');

function formatNumber(number) {
    return number.toLocaleString('vi-VN');
}

module.exports = {
    name: "cltx",
    dev: "HNT",
    info: "Ch∆°i Ch·∫µn L·∫ª T√†i X·ªâu v·ªõi nhi·ªÅu c√°ch ƒë·∫∑t c∆∞·ª£c.",
    onPrefix: true,
    usages: "cltx",
    cooldowns: 0,

    lastPlayed: {},
    winStreak: {},
    streakBonus: {},
    statistics: {},
    comboStreak: {},
    specialResults: {},

    calculateMultiplier(senderID, baseMultiplier) {
        const streak = this.streakBonus[senderID] || 0;
        let bonus = 1;
        if (streak >= 5) bonus = 1.5;
        if (streak >= 10) bonus = 2;
        return baseMultiplier * bonus;
    },

    calculateReward(senderID, betAmount, gameType, result) {
        let multiplier = 1;
        const combo = this.comboStreak[senderID] || 0;
        
        // TƒÉng h·ªá s·ªë th∆∞·ªüng theo combo
        if (combo > 3) multiplier *= 1.5;
        if (combo > 5) multiplier *= 2;
        
        // Th∆∞·ªüng ƒë·∫∑c bi·ªát cho k·∫øt h·ª£p hi·∫øm
        if (gameType === 'special') multiplier *= 3;
        
        return Math.floor(betAmount * multiplier);
    },

    updateStats(senderID, gameType, isWin, amount) {
        if (!this.statistics[senderID]) {
            this.statistics[senderID] = {
                wins: 0,
                losses: 0,
                totalWinnings: 0,
                totalLosses: 0,
                highestWin: 0
            };
        }
        const stats = this.statistics[senderID];
        if (isWin) {
            stats.wins++;
            stats.totalWinnings += amount;
            if (amount > stats.highestWin) stats.highestWin = amount;
        } else {
            stats.losses++;
            stats.totalLosses += amount;
        }
    },

    getChanLeResult() {
        const ICONS = {
            WHITE: "‚ö™",
            RED: "üî¥"
        };

        const combinations = {
            "ch·∫µn": [
                [ICONS.WHITE, ICONS.WHITE, ICONS.RED, ICONS.RED],
                [ICONS.WHITE, ICONS.WHITE, ICONS.WHITE, ICONS.WHITE]
            ],
            "l·∫ª": [
                [ICONS.WHITE, ICONS.RED, ICONS.RED, ICONS.RED],
                [ICONS.WHITE, ICONS.WHITE, ICONS.WHITE, ICONS.RED],
                [ICONS.RED, ICONS.RED, ICONS.RED, ICONS.RED]
            ]
        };

        // Random selection of result type
        const resultType = Math.random() < 0.5 ? "ch·∫µn" : "l·∫ª";
        const possibleResults = combinations[resultType];
        const result = possibleResults[randomInt(0, possibleResults.length)];

        return {
            type: resultType,
            icons: result
        };
    },

    handleKepBet: async function(api, event, target, balance) {
        const { threadID, messageID, senderID } = event;
        const [_, choice1, choice2, betAmount] = target;

        if (!["ch·∫µn", "l·∫ª"].includes(choice1) || !["t√†i", "x·ªâu"].includes(choice2)) {
            return api.sendMessage("C∆∞·ª£c k√©p kh√¥ng h·ª£p l·ªá! C·∫ßn ch·ªçn ch·∫µn/l·∫ª v√† t√†i/x·ªâu.", threadID, messageID);
        }

        const amount = betAmount === "allin" ? balance : parseInt(betAmount);
        if (amount < 20000) return api.sendMessage("C∆∞·ª£c k√©p t·ªëi thi·ªÉu 20,000 Xu!", threadID);
        
        updateBalance(senderID, -amount);
        
        // X·ª≠ l√Ω k·∫øt qu·∫£ c∆∞·ª£c k√©p
        const dice = Array(3).fill().map(() => randomInt(1, 7));
        const total = dice.reduce((a, b) => a + b);
        const txResult = total >= 11 ? "t√†i" : "x·ªâu";
        
        const clResultObj = this.getChanLeResult();
        const clResult = clResultObj.type;
        
        const isWinCL = clResult === choice1;
        const isWinTX = txResult === choice2;
        
        let winnings = 0;
        let message = `üé≤ K·∫øt qu·∫£:\n`;
        message += `‚Ä¢ X√∫c x·∫Øc: ${dice.join(" + ")} = ${total} (${txResult.toUpperCase()})\n`;
        message += `‚Ä¢ Ch·∫µn/L·∫ª: ${clResultObj.icons.join(" ")} (${clResult.toUpperCase()})\n\n`;

        if (isWinCL && isWinTX) {
            winnings = amount * 5; // Th·∫Øng c·∫£ 2 ƒë∆∞·ª£c x5
            this.comboStreak[senderID] = (this.comboStreak[senderID] || 0) + 1;
            message += `üéâ TH·∫ÆNG L·ªöN! C·∫£ 2 l·ª±a ch·ªçn ƒë·ªÅu ƒë√∫ng!\n`;
        } else if (isWinCL || isWinTX) {
            winnings = amount * 1.5; // Th·∫Øng 1 trong 2 ƒë∆∞·ª£c x1.5
            this.comboStreak[senderID] = (this.comboStreak[senderID] || 0) + 1;
            message += `üéâ Th·∫Øng m·ªôt ph·∫ßn! ƒêo√°n ƒë√∫ng ${isWinCL ? 'Ch·∫µn/L·∫ª' : 'T√†i/X·ªâu'}!\n`;
        } else {
            this.comboStreak[senderID] = 0;
            message += `üíî Thua! Kh√¥ng ƒëo√°n ƒë√∫ng l·ª±a ch·ªçn n√†o.\n`;
        }

        if (winnings > 0) {
            const multiplier = this.calculateReward(senderID, winnings, 'kep', true);
            winnings = Math.floor(multiplier);
            updateBalance(senderID, winnings);
            this.updateStats(senderID, 'kep', true, winnings);
            message += `üí∞ Ti·ªÅn th∆∞·ªüng: ${formatNumber(winnings)} Xu (x${multiplier/amount})\n`;
        }

        return {message, winnings};
    },

    handleSpecialBet: async function(api, event, target, balance) {
        const { threadID, messageID, senderID } = event;
        const betAmount = target[1] === "allin" ? balance : parseInt(target[1]);
        
        if (betAmount < 50000) return api.sendMessage("C∆∞·ª£c ƒë·∫∑c bi·ªát t·ªëi thi·ªÉu 50,000 Xu!", threadID);
        
        updateBalance(senderID, -betAmount);
        
        const dice = Array(3).fill().map(() => randomInt(1, 7));
        const total = dice.reduce((a, b) => a + b);
        
        let message = `üé≤ K·∫øt qu·∫£ ƒë·∫∑c bi·ªát:\n`;
        message += `${dice.join(" + ")} = ${total}\n\n`;
        
        let winnings = 0;
        
        if (total === 3 || total === 18) {
            winnings = betAmount * 10;
            const multiplier = this.calculateReward(senderID, winnings, 'special', true);
            winnings = Math.floor(multiplier);
            this.specialResults[senderID] = (this.specialResults[senderID] || 0) + 1;
            
            message += `üåü TH·∫ÆNG ƒê·∫∂C BI·ªÜT! T·ªïng ${total} ƒëi·ªÉm!\n`;
            message += `üí∞ Ti·ªÅn th∆∞·ªüng: ${formatNumber(winnings)} Xu (x${multiplier/betAmount})\n`;
            
            if (this.specialResults[senderID] >= 3) {
                const bonusJackpot = loadQuy();
                message += `üéâ MEGA JACKPOT! ƒê·∫°t ${this.specialResults[senderID]} l·∫ßn ƒë·∫∑c bi·ªát!\n`;
                message += `üíé Th∆∞·ªüng th√™m: ${formatNumber(bonusJackpot)} Xu\n`;
                winnings += bonusJackpot;
                saveQuy(0);
            }
            
            updateBalance(senderID, winnings);
            this.updateStats(senderID, 'special', true, winnings);
        } else {
            this.specialResults[senderID] = 0;
            message += `üíî Ti·∫øc qu√°! C·∫ßn t·ªïng 3 ho·∫∑c 18 ƒëi·ªÉm ƒë·ªÉ th·∫Øng.\n`;
            this.updateStats(senderID, 'special', false, betAmount);
        }
        
        return {message, winnings};
    },

    onLaunch: async function({ api, event, target = [] }) {
        try {
            const { threadID, messageID, senderID } = event;

            const currentTime = Date.now();
            if (this.lastPlayed[senderID] && currentTime - this.lastPlayed[senderID] < 40000) {
                const waitTime = Math.ceil((40000 - (currentTime - this.lastPlayed[senderID])) / 1000);
                return api.sendMessage(`Vui l√≤ng ƒë·ª£i ${waitTime} gi√¢y n·ªØa ƒë·ªÉ ch∆°i l·∫°i!`, threadID, messageID);
            }

            const balance = getBalance(senderID);

            if (target.length < 2) {
                return api.sendMessage(
                    "üé≤ CH·∫¥N L·∫∫ T√ÄI X·ªàU 2.0 üé≤\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                    "C√°ch ch∆°i m·ªõi:\n" +
                    "1. C∆∞·ª£c ƒë∆°n:\n" +
                    "‚Ä¢ .cltx <ch·∫µn/l·∫ª/t√†i/x·ªâu> <s·ªë ti·ªÅn>\n\n" +
                    "2. C∆∞·ª£c k√©p (th∆∞·ªüng x3):\n" +
                    "‚Ä¢ .cltx kep <ch·∫µn/l·∫ª> <t√†i/x·ªâu> <s·ªë ti·ªÅn>\n\n" +
                    "3. C∆∞·ª£c ƒë·∫∑c bi·ªát:\n" +
                    "‚Ä¢ .cltx special <s·ªë ti·ªÅn>\n" +
                    "(Th·∫Øng khi ra k·∫øt qu·∫£ 3 ho·∫∑c 18)\n\n" +
                    "üíé Th∆∞·ªüng combo:\n" +
                    "‚Ä¢ Th·∫Øng 3 v√°n: x1.5\n" +
                    "‚Ä¢ Th·∫Øng 5 v√°n: x2\n" +
                    "‚Ä¢ K·∫øt qu·∫£ ƒë·∫∑c bi·ªát: x3\n",
                    threadID, messageID
                );
            }

            const gameMode = target[0].toLowerCase();
            
            if (gameMode === "kep") {
                const result = await this.handleKepBet(api, event, target, balance);
                return api.sendMessage(result.message, threadID, messageID);
            } 
            else if (gameMode === "special") {
                const result = await this.handleSpecialBet(api, event, target, balance);
                return api.sendMessage(result.message, threadID, messageID);
            } else {
                const choice = target[0].toLowerCase();
                if (!["ch·∫µn", "l·∫ª", "t√†i", "x·ªâu"].includes(choice)) {
                    return api.sendMessage("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 'ch·∫µn', 'l·∫ª', 't√†i' ho·∫∑c 'x·ªâu'.", threadID, messageID);
                }

                let betAmount;
                if (target[1].toLowerCase() === "allin") {
                    if (balance === 0) {
                        return api.sendMessage("B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ allin.", threadID, messageID);
                    }
                    betAmount = balance;
                } else {
                    betAmount = parseInt(target[1], 10);
                    if (isNaN(betAmount) || betAmount <= 0) {
                        return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng.", threadID, messageID);
                    }
                    if (betAmount < 10000) {
                        return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 10,000 Xu!", threadID, messageID);
                    }
                }

                if (betAmount > balance) {
                    return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);
                }

                this.lastPlayed[senderID] = currentTime;
                updateBalance(senderID, -betAmount);

                const isTaiXiu = choice === "t√†i" || choice === "x·ªâu";
                let message = isTaiXiu ? 
                    `üé≤ L·∫Øc x√∫c x·∫Øc... ƒê·ª£i ${5} gi√¢y...` : 
                    `ƒêang l·∫Øc... ƒê·ª£i ${5} gi√¢y...`;

                await api.sendMessage(message, threadID, messageID);

                setTimeout(async () => {
                    try {
                        if (isTaiXiu) {
                            // T√†i X·ªâu logic
                            const dice1 = randomInt(1, 7);
                            const dice2 = randomInt(1, 7);
                            const dice3 = randomInt(1, 7);
                            const total = dice1 + dice2 + dice3;
                            const result = total >= 11 ? "t√†i" : "x·ªâu";
                            
                            const getDiceImagePath = (diceNumber) => path.join(__dirname, 'cache', 'images', 'dice', `dice${diceNumber}.png`);

                            try {
                                const diceImages = await Promise.all([
                                    loadImage(getDiceImagePath(dice1)),
                                    loadImage(getDiceImagePath(dice2)),
                                    loadImage(getDiceImagePath(dice3))
                                ]);

                                const canvas = createCanvas(diceImages[0].width * 3, diceImages[0].height);
                                const ctx = canvas.getContext('2d');

                                diceImages.forEach((image, index) => {
                                    ctx.drawImage(image, index * image.width, 0);
                                });

                                const outputImagePath = path.join(__dirname, 'cache', 'images', 'dice', 'combined.png');
                                const buffer = canvas.toBuffer('image/png');
                                fs.writeFileSync(outputImagePath, buffer);
                                const combinedImage = fs.createReadStream(outputImagePath);

                                if (choice === result) {
                                    this.streakBonus[senderID] = (this.streakBonus[senderID] || 0) + 1;
                                    const baseWinnings = betAmount * 2;
                                    const multiplier = this.calculateMultiplier(senderID, 1);
                                    const winnings = Math.floor(baseWinnings * multiplier);
                                    const fee = winnings * 0.05;
                                    const finalWinnings = Math.floor(winnings - fee);
                                    
                                    updateBalance(senderID, finalWinnings);
                                    this.updateStats(senderID, 'taixiu', true, finalWinnings);
                                    
                                    message = `üé≤ ${result.toUpperCase()}: ${dice1} + ${dice2} + ${dice3} = ${total}\n` +
                                             `üéâ Th·∫Øng: ${formatNumber(finalWinnings)} Xu (x${multiplier})\n` +
                                             `üìà Chu·ªói th·∫Øng: ${this.streakBonus[senderID]} tr·∫≠n\n`;
                                } else {
                                    this.streakBonus[senderID] = 0;
                                    this.updateStats(senderID, 'taixiu', false, betAmount);
                                    message = `üé≤ ${result.toUpperCase()}: ${dice1} + ${dice2} + ${dice3} = ${total}\n` +
                                             `üíî Thua: ${formatNumber(betAmount)} Xu\n`;
                                }

                                if (total === 18 || total === 3) {
                                    const quy = loadQuy();
                                    if (quy > 0) {
                                        message += `\nüéâ JACKPOT! T·ªïng ${total} ƒëi·ªÉm!\nQu·ªπ th∆∞·ªüng: ${formatNumber(quy)} Xu\n`;
                                        updateBalance(senderID, quy);
                                        saveQuy(0);
                                    }
                                }

                                message += `\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${formatNumber(getBalance(senderID))} Xu\n`;
                                message += `üí∞ Qu·ªπ hi·ªán t·∫°i: ${formatNumber(loadQuy())} Xu`;

                                const stats = this.statistics[senderID] || {wins: 0, losses: 0, totalWinnings: 0};
                                message += `\nüìä Th·ªëng k√™:\n` +
                                          `Th·∫Øng: ${stats.wins} | Thua: ${stats.losses}\n` +
                                          `L√£i/L·ªó: ${formatNumber(stats.totalWinnings - stats.totalLosses)} Xu\n` +
                                          `üí∞ S·ªë d∆∞: ${formatNumber(getBalance(senderID))} Xu`;

                                await api.sendMessage({ body: message, attachment: combinedImage }, threadID, messageID);
                                fs.unlink(outputImagePath, (err) => {
                                    if (err) console.error('Error cleaning up temp file:', err);
                                });

                            } catch (imageError) {
                                console.error('Image processing error:', imageError);
                                await api.sendMessage(message, threadID, messageID);
                            }

                        } else {
                            // Ch·∫µn L·∫ª logic
                            const ICONS = {
                                WHITE: "‚ö™",
                                RED: "üî¥"
                            };

                            const combinations = {
                                "ch·∫µn": [
                                    [ICONS.WHITE, ICONS.WHITE, ICONS.RED, ICONS.RED],
                                    [ICONS.WHITE, ICONS.WHITE, ICONS.WHITE, ICONS.WHITE]
                                ],
                                "l·∫ª": [
                                    [ICONS.WHITE, ICONS.RED, ICONS.RED, ICONS.RED],
                                    [ICONS.WHITE, ICONS.WHITE, ICONS.WHITE, ICONS.RED],
                                    [ICONS.RED, ICONS.RED, ICONS.RED, ICONS.RED]
                                ]
                            };

                            if (!this.winStreak[senderID]) this.winStreak[senderID] = 0;

                            const weightedCombinations = this.winStreak[senderID] >= 3 ? [
                                ...Array(5).fill(combinations["ch·∫µn"][0]),
                                ...Array(5).fill(combinations["l·∫ª"][0]),
                                ...Array(5).fill(combinations["l·∫ª"][1]),
                                combinations["ch·∫µn"][1],
                                combinations["l·∫ª"][2]
                            ] : [
                                combinations["ch·∫µn"][0],
                                combinations["l·∫ª"][0],
                                combinations["l·∫ª"][1],
                                ...Array(1).fill(combinations["ch·∫µn"][1]),
                                ...Array(1).fill(combinations["l·∫ª"][2])
                            ];

                            const result = weightedCombinations[randomInt(0, weightedCombinations.length)];
                            const resultType = combinations["ch·∫µn"].some(comb => 
                                JSON.stringify(comb) === JSON.stringify(result)) ? "ch·∫µn" : "l·∫ª";

                            message = `K·∫øt qu·∫£: ${result.join(" ")} (${resultType.toUpperCase()})\n`;

                            if (resultType === choice) {
                                this.winStreak[senderID]++;
                                const multiplier = (JSON.stringify(result) === JSON.stringify(combinations["ch·∫µn"][1]) && resultType === "ch·∫µn") ||
                                                (JSON.stringify(result) === JSON.stringify(combinations["l·∫ª"][2]) && resultType === "l·∫ª") ? 4 : 2;
                                
                                const winnings = betAmount * multiplier;
                                updateBalance(senderID, winnings);
                                message += `üéâ Ch√∫c m·ª´ng! B·∫°n th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c ${formatNumber(winnings)} Xu.\n`;
                                updateQuestProgress(senderID, "win_games");
                            } else {
                                this.winStreak[senderID] = 0;
                                message += `üò¢ B·∫°n ƒë√£ thua v√† m·∫•t ${formatNumber(betAmount)} Xu.\n`;
                            }

                            message += `\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${formatNumber(getBalance(senderID))} Xu\n`;
                            message += `üí∞ Qu·ªπ hi·ªán t·∫°i: ${formatNumber(loadQuy())} Xu`;

                            await api.sendMessage(message, threadID, messageID);
                        }
                    } catch (error) {
                        console.error('Error during game execution:', error);
                        await api.sendMessage("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ch∆°i. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
                    }
                }, 5000);
            }
        } catch (error) {
            console.error('Error during game initialization:', error);
            await api.sendMessage("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh kh·ªüi t·∫°o tr√≤ ch∆°i. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }
    }
};
