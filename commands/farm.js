const fs = require("fs");
const path = require("path");
const axios = require("axios");
const {
  getBalance,
  updateBalance,
  updateQuestProgress,
} = require("../utils/currencies");
const { createCanvas, loadImage } = require("canvas");

const farmDataPath = path.join(__dirname, "./json/farm_data.json");
const farmImagesDir = path.join(__dirname, "../cache/farm");

if (!fs.existsSync(path.dirname(farmDataPath))) {
  fs.mkdirSync(path.dirname(farmDataPath), { recursive: true });
}

if (!fs.existsSync(farmImagesDir)) {
  fs.mkdirSync(farmImagesDir, { recursive: true });
}

const CROPS = {
  lua: {
    name: "L√∫a",
    emoji: "üåæ",
    price: 50000,
    time: 40 * 60,
    yield: 80000,
    exp: 10,
    water: 3,
    level: 1,
    description: "C√¢y l√∫a n∆∞·ªõc truy·ªÅn th·ªëng",
  },
  rau: {
    name: "Rau xanh",
    emoji: "ü•¨",
    price: 10000,
    time: 15 * 60,
    yield: 18000,
    exp: 5,
    water: 2,
    level: 1,
    description: "C√°c lo·∫°i rau xanh: rau mu·ªëng, rau c·∫£i...",
  },
  ca_rot: {
    name: "C√† r·ªët",
    emoji: "ü•ï",
    price: 15000,
    time: 20 * 60,
    yield: 25000,
    exp: 6,
    water: 2,
    level: 1,
    description: "C√† r·ªët nhi·ªÅu vitamin A",
  },
  dau: {
    name: "ƒê·∫≠u",
    emoji: "üå±",
    price: 20000,
    time: 25 * 60,
    yield: 35000,
    exp: 7,
    water: 2,
    level: 2,
    description: "C√°c lo·∫°i ƒë·∫≠u: ƒë·∫≠u xanh, ƒë·∫≠u ƒëen...",
  },
  ngo: {
    name: "Ng√¥ (B·∫Øp)",
    emoji: "üåΩ",
    price: 25000,
    time: 35 * 60,
    yield: 45000,
    exp: 8,
    water: 3,
    level: 3,
    description: "Ng√¥ ng·ªçt (b·∫Øp) ƒë·∫∑c s·∫£n mi·ªÅn Trung",
  },
  ca_chua: {
    name: "C√† chua",
    emoji: "üçÖ",
    price: 30000,
    time: 40 * 60,
    yield: 55000,
    exp: 9,
    water: 3,
    level: 4,
    description: "C√† chua t∆∞∆°i ng·ªçt",
  },
  khoai_tay: {
    name: "Khoai t√¢y",
    emoji: "ü•î",
    price: 35000,
    time: 45 * 60,
    yield: 65000,
    exp: 10,
    water: 3,
    level: 5,
    description: "Khoai t√¢y ƒê√† L·∫°t",
  },
  dua_hau: {
    name: "D∆∞a h·∫•u",
    emoji: "üçâ",
    price: 45000,
    time: 60 * 60,
    yield: 85000,
    exp: 13,
    water: 4,
    level: 6,
    description: "D∆∞a h·∫•u mi·ªÅn Trung ng·ªçt l·ªãm",
  },
  thanh_long: {
    name: "Thanh Long",
    emoji: "üêâ",
    price: 140000,
    time: 80 * 60,
    yield: 130000,
    exp: 15,
    water: 2,
    level: 8,
    description: "Thanh long ru·ªôt ƒë·ªè ƒë·∫∑c s·∫£n Vi·ªát Nam",
  },
  khoai_lang: {
    name: "Khoai lang",
    emoji: "üç†",
    price: 40000,
    time: 50 * 60,
    yield: 70000,
    exp: 12,
    water: 2,
    level: 7,
    description: "Khoai lang v·ªè t√≠m ru·ªôt v√†ng",
  },
};

const ANIMALS = {
  ga: {
    name: "G√†",
    emoji: "üêì",
    price: 100000,
    productTime: 3 * 60 * 60,
    product: "tr·ª©ng",
    productEmoji: "ü•ö",
    productPrice: 15000,
    feed: 5000,
    level: 3,
    description: "G√† ta ch·∫°y b·ªô, cho tr·ª©ng ch·∫•t l∆∞·ª£ng cao",
  },
  vit: {
    name: "V·ªãt",
    emoji: "ü¶Ü",
    price: 150000,
    productTime: 4 * 60 * 60,
    product: "tr·ª©ng v·ªãt",
    productEmoji: "ü•ö",
    productPrice: 20000,
    feed: 7000,
    level: 5,
    description: "V·ªãt th·∫£ ƒë·ªìng, ƒë·∫ª tr·ª©ng v·ªãt dinh d∆∞·ª°ng",
  },
  heo: {
    name: "Heo",
    emoji: "üê∑",
    price: 300000,
    productTime: 6 * 60 * 60,
    product: "th·ªãt",
    productEmoji: "ü•©",
    productPrice: 55000,
    feed: 15000,
    level: 8,
    description: "Heo ƒë·∫∑c s·∫£n nu√¥i th·∫£ v∆∞·ªùn",
  },
  bo: {
    name: "B√≤",
    emoji: "üêÑ",
    price: 500000,
    productTime: 8 * 60 * 60,
    product: "s·ªØa",
    productEmoji: "ü•õ",
    productPrice: 80000,
    feed: 22000,
    level: 10,
    description: "B√≤ s·ªØa cho s·ªØa t∆∞∆°i nguy√™n ch·∫•t",
  },
  ca: {
    name: "C√°",
    emoji: "üêü",
    price: 80000,
    productTime: 2 * 60 * 60,
    product: "c√° t∆∞∆°i",
    productEmoji: "üê†",
    productPrice: 22000,
    feed: 8000,
    level: 4,
    description: "C√° ƒë·ªìng nu√¥i trong ao",
  },
};

const SHOP_ITEMS = {
  phan_bon: {
    name: "Ph√¢n b√≥n",
    emoji: "üí©",
    price: 20000,
    description: "Gi·∫£m 20% th·ªùi gian tr·ªìng tr·ªçt",
    effect: "grow_boost",
    duration: 24 * 60 * 60 * 1000,
    level: 1,
  },
  thuoc_sau: {
    name: "Thu·ªëc s√¢u",
    emoji: "üß™",
    price: 30000,
    description: "TƒÉng 20% s·∫£n l∆∞·ª£ng thu ho·∫°ch",
    effect: "yield_boost",
    duration: 24 * 60 * 60 * 1000,
    level: 3,
  },
  may_cay: {
    name: "M√°y c√†y",
    emoji: "üöú",
    price: 200000,
    description: "T·ª± ƒë·ªông gieo tr·ªìng v·ª• m·ªõi sau thu ho·∫°ch",
    effect: "auto_plant",
    duration: null,
    level: 6,
  },
  he_thong_tuoi: {
    name: "H·ªá th·ªëng t∆∞·ªõi",
    emoji: "üíß",
    price: 150000,
    description: "T·ª± ƒë·ªông t∆∞·ªõi c√¢y m·ªói 4 gi·ªù",
    effect: "auto_water",
    duration: null,
    level: 5,
  },
  chuong_trai: {
    name: "Chu·ªìng tr·∫°i n√¢ng c·∫•p",
    emoji: "üè°",
    price: 250000,
    description: "TƒÉng s·ªë l∆∞·ª£ng v·∫≠t nu√¥i t·ªëi ƒëa l√™n 10",
    effect: "animal_capacity",
    duration: null,
    level: 7,
  },
  thuc_an_gia_suc: {
    name: "Th·ª©c ƒÉn gia s√∫c",
    emoji: "üåæ",
    price: 50000,
    description: "TƒÉng 30% s·∫£n l∆∞·ª£ng t·ª´ v·∫≠t nu√¥i",
    effect: "animal_boost",
    duration: 24 * 60 * 60 * 1000,
    level: 4,
  },
  giong_cao_cap: {
    name: "Gi·ªëng c√¢y cao c·∫•p",
    emoji: "üå±",
    price: 100000,
    description: "TƒÉng 50% kinh nghi·ªám t·ª´ tr·ªìng tr·ªçt",
    effect: "exp_boost",
    duration: 24 * 60 * 60 * 1000,
    level: 2,
  },
};

const LEVELS = [
  { level: 1, exp: 0, title: "N√¥ng d√¢n t·∫≠p s·ª±", reward: 50000, plotSize: 4 },
  { level: 2, exp: 100, title: "N√¥ng d√¢n c·∫ßn m·∫´n", reward: 60000, plotSize: 6 },
  { level: 3, exp: 300, title: "Tr·ªìng tr·ªçt vi√™n", reward: 80000, plotSize: 8 },
  {
    level: 4,
    exp: 600,
    title: "N√¥ng d√¢n kinh nghi·ªám",
    reward: 100000,
    plotSize: 9,
  },
  {
    level: 5,
    exp: 1000,
    title: "Ng∆∞·ªùi l√†m v∆∞·ªùn",
    reward: 120000,
    plotSize: 12,
  },
  {
    level: 6,
    exp: 1500,
    title: "Ch·ªß trang tr·∫°i nh·ªè",
    reward: 150000,
    plotSize: 16,
  },
  {
    level: 7,
    exp: 2500,
    title: "N√¥ng d√¢n chuy√™n nghi·ªáp",
    reward: 200000,
    plotSize: 20,
  },
  {
    level: 8,
    exp: 4000,
    title: "Ch·ªß trang tr·∫°i",
    reward: 300000,
    plotSize: 25,
  },
  {
    level: 9,
    exp: 6000,
    title: "N√¥ng gia th·ªãnh v∆∞·ª£ng",
    reward: 400000,
    plotSize: 30,
  },
  {
    level: 10,
    exp: 10000,
    title: "ƒê·∫°i ƒëi·ªÅn ch·ªß",
    reward: 500000,
    plotSize: 36,
  },
];

const WEATHER_EFFECTS = {
  sunny: {
    name: "N·∫Øng r√°o",
    emoji: "‚òÄÔ∏è",
    cropBonus: 0.1,
    waterDrain: 0.2,
    description:
      "Ng√†y n·∫Øng ƒë·∫πp, c√¢y tr·ªìng ph√°t tri·ªÉn t·ªët nh∆∞ng c·∫ßn nhi·ªÅu n∆∞·ªõc h∆°n",
  },
  rainy: {
    name: "M∆∞a",
    emoji: "üåßÔ∏è",
    cropBonus: 0.05,
    waterFill: 0.5,
    description: "Tr·ªùi m∆∞a, t·ª± ƒë·ªông t∆∞·ªõi c√¢y nh∆∞ng nƒÉng su·∫•t th·∫•p h∆°n",
  },
  cloudy: {
    name: "√Çm u",
    emoji: "‚òÅÔ∏è",
    description: "Tr·ªùi √¢m u, kh√¥ng c√≥ ƒëi·ªÅu g√¨ ƒë·∫∑c bi·ªát",
  },
  storm: {
    name: "B√£o",
    emoji: "üå™Ô∏è",
    cropDamage: 0.2,
    description: "B√£o! C√¢y tr·ªìng c√≥ th·ªÉ b·ªã h·ªèng, h√£y thu ho·∫°ch s·ªõm!",
  },
  drought: {
    name: "H·∫°n h√°n",
    emoji: "üî•",
    waterDrain: 0.4,
    description: "H·∫°n h√°n, c√¢y m·∫•t n∆∞·ªõc nhanh ch√≥ng",
  },
};

const EVENTS = {
  tet: {
    name: "T·∫øt Nguy√™n ƒê√°n",
    startMonth: 1,
    duration: 15,
    crops: {
      hoa_dao: {
        name: "Hoa ƒê√†o",
        emoji: "üå∏",
        price: 100000,
        time: 48 * 60 * 60,
        yield: 300000,
        exp: 30,
        water: 5,
        description: "Hoa ƒë√†o ƒë·ªè th·∫Øm, bi·ªÉu t∆∞·ª£ng c·ªßa T·∫øt mi·ªÅn B·∫Øc",
      },
      hoa_mai: {
        name: "Hoa Mai",
        emoji: "üåº",
        price: 100000,
        time: 48 * 60 * 60,
        yield: 250000,
        exp: 30,
        water: 5,
        description: "Hoa mai v√†ng r·ª±c r·ª°, bi·ªÉu t∆∞·ª£ng c·ªßa T·∫øt mi·ªÅn Nam",
      },
    },
  },
  trungThu: {
    name: "T·∫øt Trung Thu",
    startMonth: 8,
    duration: 10,
    crops: {
      banhDeo: {
        name: "B√°nh D·∫ªo",
        emoji: "ü•Æ",
        price: 50000,
        time: 24 * 60 * 60,
        yield: 150000,
        exp: 20,
        water: 0,
        description: "B√°nh d·∫ªo nh√¢n th∆°m ngon truy·ªÅn th·ªëng",
      },
      banhNuong: {
        name: "B√°nh N∆∞·ªõng",
        emoji: "ü•ß",
        price: 60000,
        time: 24 * 60 * 60,
        yield: 180000,
        exp: 25,
        water: 0,
        description: "B√°nh n∆∞·ªõng nh√¢n th·∫≠p c·∫©m",
      },
    },
  },
};
const PROCESSING_RECIPES = {
  banh_mi: {
    name: "B√°nh m√¨",
    emoji: "ü•ñ",
    ingredients: { l√∫a: 3 },
    yield: 1,
    value: 100000,
    exp: 15,
    time: 15 * 60, // 15 ph√∫t
    level: 3,
    description: "B√°nh m√¨ m·ªÅm th∆°m t·ª´ l√∫a xay th√†nh b·ªôt",
  },
  pho_mai: {
    name: "Ph√¥ mai",
    emoji: "üßÄ",
    ingredients: { s·ªØa: 3 },
    yield: 1,
    value: 300000,
    exp: 20,
    time: 30 * 60, // 30 ph√∫t
    level: 5,
    description: "Ph√¥ mai ƒë∆∞·ª£c l√†m t·ª´ s·ªØa b√≤ t∆∞∆°i ngon",
  },
  trung_bac: {
    name: "Tr·ª©ng b√°c",
    emoji: "üç≥",
    ingredients: { tr·ª©ng: 2, "tr·ª©ng v·ªãt": 1 },
    yield: 1,
    value: 60000,
    exp: 10,
    time: 10 * 60, // 10 ph√∫t
    level: 2,
    description: "M√≥n tr·ª©ng chi√™n th∆°m ngon b·ªï d∆∞·ª°ng",
  },
  xuc_xich: {
    name: "X√∫c x√≠ch",
    emoji: "üå≠",
    ingredients: { th·ªãt: 2 },
    yield: 3,
    value: 150000,
    exp: 18,
    time: 20 * 60, // 20 ph√∫t
    level: 4,
    description: "X√∫c x√≠ch th·ªãt heo ngon tuy·ªát",
  },
  ca_kho: {
    name: "C√° kho",
    emoji: "üêü",
    ingredients: { "c√° t∆∞∆°i": 3 },
    yield: 2,
    value: 70000,
    exp: 12,
    time: 15 * 60, // 15 ph√∫t
    level: 2,
    description: "C√° kho t·ªô ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã Vi·ªát Nam",
  },
  salad: {
    name: "Salad",
    emoji: "ü•ó",
    ingredients: { "rau xanh": 3, "c√† r·ªët": 2 },
    yield: 3,
    value: 80000,
    exp: 15,
    time: 10 * 60, // 10 ph√∫t
    level: 3,
    description: "Salad rau c·ªß t∆∞∆°i ngon b·ªï d∆∞·ª°ng",
  },
  thit_kho: {
    name: "Th·ªãt kho",
    emoji: "üç≤",
    ingredients: { th·ªãt: 3, tr·ª©ng: 2 },
    yield: 3,
    value: 200000,
    exp: 25,
    time: 30 * 60, // 30 ph√∫t
    level: 6,
    description: "Th·ªãt kho t√†u ƒë·∫≠m ƒë√†, b√©o ng·∫≠y",
  },
  banh_ngot: {
    name: "B√°nh ng·ªçt",
    emoji: "üç∞",
    ingredients: { tr·ª©ng: 3, s·ªØa: 2, l√∫a: 2 },
    yield: 2,
    value: 180000,
    exp: 20,
    time: 20 * 60, // 20 ph√∫t
    level: 7,
    description: "B√°nh ng·ªçt m·ªÅm m·ªãn th∆°m ngon",
  },
};

function formatNumber(number) {
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function calculateLevel(exp) {
  for (let i = LEVELS.length - 1; i >= 0; i--) {
    if (exp >= LEVELS[i].exp) {
      return LEVELS[i];
    }
  }
  return LEVELS[0];
}

function getCurrentWeather(userID) {
  if (!userID) {
    console.error("userID is undefined in getCurrentWeather");
    return WEATHER_EFFECTS.sunny;
  }

  try {
    const farmData = loadFarmData();
    if (!farmData || !farmData.farms) {
      console.error("Invalid farm data in getCurrentWeather");
      return WEATHER_EFFECTS.sunny;
    }

    const userFarm = farmData.farms[userID] || createUserFarm(userID);

    if (!userFarm.weather || Date.now() > userFarm.weather.nextChange) {
      const weatherTypes = Object.keys(WEATHER_EFFECTS);

      let weatherChances = [0.4, 0.4, 0.1, 0.05, 0.05];

      const date = new Date();
      const month = date.getMonth() + 1;

      if (month >= 5 && month <= 8) {
        // M√πa h√®
        weatherChances = [0.5, 0.2, 0.1, 0.1, 0.1];
      } else if (month >= 9 && month <= 11) {
        weatherChances = [0.3, 0.4, 0.2, 0.05, 0.05];
      } else if (month == 12 || month <= 2) {
        weatherChances = [0.2, 0.3, 0.4, 0.05, 0.05];
      } else {
        weatherChances = [0.3, 0.4, 0.2, 0.1, 0];
      }

      let random = Math.random();
      let weatherIndex = 0;
      let sum = 0;

      for (let i = 0; i < weatherChances.length; i++) {
        sum += weatherChances[i];
        if (random < sum) {
          weatherIndex = i;
          break;
        }
      }

      userFarm.weather = {
        type: weatherTypes[weatherIndex],
        nextChange: Date.now() + 6 * 60 * 60 * 1000,
      };

      saveFarmData(farmData);
    }

    return WEATHER_EFFECTS[userFarm.weather.type] || WEATHER_EFFECTS.sunny;
  } catch (error) {
    console.error("Error in getCurrentWeather:", error);
    return WEATHER_EFFECTS.sunny;
  }
}

function checkEvent() {
  const now = new Date();
  const month = now.getMonth() + 1;
  const day = now.getDate();

  for (const [eventId, event] of Object.entries(EVENTS)) {
    if (month === event.startMonth && day <= event.duration) {
      return {
        id: eventId,
        ...event,
      };
    }

    if (eventId === "tet" && month === event.startMonth + 1 && day <= 15) {
      return {
        id: eventId,
        ...event,
      };
    }
  }

  return null;
}

function loadFarmData() {
  try {
    if (!fs.existsSync(farmDataPath)) {
      const defaultData = {
        farms: {},
        lastUpdate: Date.now(),
      };
      fs.writeFileSync(farmDataPath, JSON.stringify(defaultData, null, 2));
      return defaultData;
    }
    const data = JSON.parse(fs.readFileSync(farmDataPath, "utf8"));

    if (!data.farms) {
      data.farms = {};
    }

    return data;
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc d·ªØ li·ªáu farm:", error);
    return { farms: {}, lastUpdate: Date.now() };
  }
}

function saveFarmData(data) {
  try {
    fs.writeFileSync(farmDataPath, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error("L·ªói khi l∆∞u d·ªØ li·ªáu farm:", error);
  }
}

function createUserFarm(userID) {
  const farmData = loadFarmData();
  if (!farmData.farms[userID]) {
    farmData.farms[userID] = {
      id: userID,
      exp: 0,
      plots: [],
      inventory: {},
      animals: {},
      items: {},
      lastActive: Date.now(),
      createdAt: Date.now(),
      autoHarvest: false,
      weather: {
        type: "sunny",
        nextChange: Date.now() + 6 * 60 * 60 * 1000,
      },
    };

    for (let i = 0; i < 4; i++) {
      farmData.farms[userID].plots.push({
        id: i,
        status: "empty",
        crop: null,
        plantedAt: null,
        water: 0,
        lastWatered: null,
      });
    }

    saveFarmData(farmData);
  }

  return farmData.farms[userID];
}

function applyItemEffects(userFarm) {
  if (!userFarm) {
    console.error("userFarm is undefined in applyItemEffects");
    return {
      growBoost: 1,
      yieldBoost: 1,
      expBoost: 1,
      animalBoost: 1,
      autoPlant: false,
      autoWater: false,
      animalCapacity: 5,
    };
  }

  const effects = {
    growBoost: 1,
    yieldBoost: 1,
    expBoost: 1,
    animalBoost: 1,
    autoPlant: false,
    autoWater: false,
    animalCapacity: 5,
  };

  if (!userFarm.items) return effects;

  for (const [itemId, item] of Object.entries(userFarm.items || {})) {
    if (!item || !item.active || (item.expiry && Date.now() > item.expiry)) {
      continue;
    }

    switch (item.effect) {
      case "grow_boost":
        effects.growBoost = 0.8;
        break;
      case "yield_boost":
        effects.yieldBoost = 1.2;
        break;
      case "exp_boost":
        effects.expBoost = 1.5;
        break;
      case "animal_boost":
        effects.animalBoost = 1.3;
        break;
      case "auto_plant":
        effects.autoPlant = true;
        break;
      case "auto_water":
        effects.autoWater = true;
        break;
      case "animal_capacity":
        effects.animalCapacity = 10;
        break;
    }
  }

  try {
    const weather = getCurrentWeather(userFarm.id);
    if (weather && weather.cropBonus) {
      effects.yieldBoost *= 1 + weather.cropBonus;
    }
  } catch (err) {
    console.error("Error applying weather effects:", err);
  }

  return effects;
}

function updateFarms() {
  try {
    const farmData = loadFarmData();
    if (!farmData || !farmData.farms) {
      console.error("Invalid farm data structure");
      return;
    }

    const currentTime = Date.now();

    Object.entries(farmData.farms || {}).forEach(([userID, farm]) => {
      if (!farm) return;

      if (farm.animals) {
        Object.entries(farm.animals).forEach(([animalId, animal]) => {
          if (!animal) return;

          if (animal.lastProduced && animal.fed) {
            const animalType = animal.type;
            if (!animalType || !ANIMALS[animalType]) return;

            const animalConfig = ANIMALS[animalType];
            const productionTime = animalConfig.productTime * 1000;
            farm.id = userID;

            if (currentTime - animal.lastProduced >= productionTime) {
              if (!farm.inventory) {
                farm.inventory = {};
              }

              if (!farm.inventory[animalConfig.product]) {
                farm.inventory[animalConfig.product] = 0;
              }

              const effects = applyItemEffects(farm);
              const productAmount = Math.ceil(
                animalConfig.productPrice * effects.animalBoost
              );

              farm.inventory[animalConfig.product] += 1;
              animal.lastProduced = currentTime;
              animal.fed = false;
            }
          }
        });
      }

      if (farm.plots) {
        farm.plots.forEach((plot) => {
          if (!plot || plot.status !== "growing" || !plot.crop) return;

          const cropConfig = CROPS[plot.crop];
          if (!cropConfig) return;

          const effects = applyItemEffects(farm);
          const growTime = cropConfig.time * 1000 * effects.growBoost;

          const weather = getCurrentWeather(userID);
          if (weather && weather.waterDrain && plot.water > 0) {
            const timeSinceLastUpdate =
              currentTime - (farmData.lastUpdate || currentTime);
            const waterDrainRate =
              (weather.waterDrain * timeSinceLastUpdate) / (1000 * 60 * 60);
            plot.water =
              Math.round(Math.max(0, plot.water - waterDrainRate) * 10) / 10;
          }

          if (weather && weather.waterFill) {
            const timeSinceLastUpdate =
              currentTime - (farmData.lastUpdate || currentTime);
            const waterFillRate =
              (weather.waterFill * timeSinceLastUpdate) / (1000 * 60 * 60);
            plot.water =
              Math.round(
                Math.min(cropConfig.water, plot.water + waterFillRate) * 10
              ) / 10;
          }

          if (effects.autoWater && plot.water < cropConfig.water / 2) {
            const lastAutoWater = plot.lastAutoWater || 0;
            if (currentTime - lastAutoWater >= 4 * 60 * 60 * 1000) {
              plot.water = Math.round(cropConfig.water);
              plot.lastAutoWater = currentTime;
            }
          }

          if (currentTime - (plot.plantedAt || 0) >= growTime) {
            if (plot.water > 0) {
              plot.status = "ready";
            } else {
              plot.plantedAt += 30 * 60 * 1000;
            }
          }

          if (
            weather &&
            weather.type === "storm" &&
            weather.cropDamage &&
            Math.random() < weather.cropDamage
          ) {
            plot.status = "damaged";
          }
        });
      }

      if (farm.weather && currentTime > farm.weather.nextChange) {
        const weather = getCurrentWeather(userID);
        if (weather) {
          farm.weather = {
            type: weather.type,
            nextChange: currentTime + 6 * 60 * 60 * 1000,
          };
        }
      }

      if (farm.processing) {
        for (const [recipeId, process] of Object.entries(farm.processing)) {
          if (!PROCESSING_RECIPES[recipeId]) {
            delete farm.processing[recipeId];
          }
        }
      }
    });

    farmData.lastUpdate = currentTime;
    saveFarmData(farmData);
  } catch (error) {
    console.error("Error in updateFarms:", error);
  }
}

module.exports = {
  name: "farm",
  dev: "HNT",
  usedby: 0,
  category: "Games",
  info: "Tr·ªìng tr·ªçt v√† chƒÉn nu√¥i nh∆∞ ·ªü n√¥ng th√¥n Vi·ªát Nam",
  onPrefix: true,
  usages: [],
  cooldowns: 3,

  onLaunch: async function ({ api, event, target }) {
    const { threadID, messageID, senderID } = event;
    const currentTime = Date.now();

    try {
      updateFarms();

      const farmData = loadFarmData();
      if (!farmData || !farmData.farms) {
        console.error("Invalid farm data structure");
        return api.sendMessage(
          "‚ùå L·ªói d·ªØ li·ªáu trang tr·∫°i! Vui l√≤ng th·ª≠ l·∫°i sau.",
          threadID,
          messageID
        );
      }

      const userFarm = farmData.farms[senderID] || createUserFarm(senderID);
      userFarm.id = senderID;
      farmData.farms[senderID] = userFarm;
      saveFarmData(farmData);

      if (!target[0]) {
        try {
          const level = calculateLevel(userFarm.exp);
          const nextLevel = level.level < 10 ? LEVELS[level.level] : null;

          let plotsReady = 0;
          let plotsGrowing = 0;
          let plotsEmpty = 0;

          userFarm.plots.forEach((plot) => {
            if (plot.status === "ready") plotsReady++;
            else if (plot.status === "growing") plotsGrowing++;
            else if (plot.status === "empty") plotsEmpty++;
          });

          let animalProducts = 0;
          Object.entries(userFarm.animals || {}).forEach(([_, animal]) => {
            if (animal.productReady) animalProducts++;
          });

          const currentEvent = checkEvent();
          const eventMessage = currentEvent
            ? `\nüéâ S·ª± ki·ªán ƒë·∫∑c bi·ªát: ${currentEvent.name} ƒëang di·ªÖn ra!\n` +
              `‚Üí C√°c lo·∫°i c√¢y ƒë·∫∑c bi·ªát c√≥ s·∫µn ƒë·ªÉ tr·ªìng!`
            : "";

          const message =
            `„Äî üåæ N√îNG TR·∫†I AKI üåæ „Äï\n` +
            `‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n` +
            `‚î£‚û§ üë®‚Äçüåæ C·∫•p ƒë·ªô: ${level.level} - ${level.title}\n` +
            `‚î£‚û§ üìä EXP: ${userFarm.exp}/${
              nextLevel ? nextLevel.exp : "MAX"
            }\n` +
            `‚îÉ   ${"‚ñ∞".repeat(
              Math.floor(
                ((userFarm.exp -
                  (level.level > 1 ? LEVELS[level.level - 2].exp : 0)) /
                  ((nextLevel ? nextLevel.exp : userFarm.exp) -
                    (level.level > 1 ? LEVELS[level.level - 2].exp : 0))) *
                  10
              )
            )}${"‚ñ±".repeat(
              10 -
                Math.floor(
                  ((userFarm.exp -
                    (level.level > 1 ? LEVELS[level.level - 2].exp : 0)) /
                    ((nextLevel ? nextLevel.exp : userFarm.exp) -
                      (level.level > 1 ? LEVELS[level.level - 2].exp : 0))) *
                    10
                )
            )}\n` +
            `‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n` +
            `‚î£‚û§ üå± ƒê·∫§T TR·ªíNG: ${userFarm.plots.length} √¥\n` +
            `‚îÉ   ‚úÖ S·∫µn s√†ng thu ho·∫°ch: ${plotsReady} √¥\n` +
            `‚îÉ   üåø ƒêang ph√°t tri·ªÉn: ${plotsGrowing} √¥\n` +
            `‚îÉ   üî≤ C√≤n tr·ªëng: ${plotsEmpty} √¥\n` +
            `‚î£‚û§ üêÑ V·∫¨T NU√îI: ${
              Object.keys(userFarm.animals || {}).length
            } con\n` +
            `‚îÉ   üß∫ S·∫£n ph·∫©m s·∫µn s√†ng: ${animalProducts}\n` +
            `‚î£‚û§ üå§Ô∏è TH·ªúI TI·∫æT: ${WEATHER_EFFECTS[userFarm.weather.type].emoji} ${
              WEATHER_EFFECTS[userFarm.weather.type].name
            }\n` +
            `‚îÉ   ${WEATHER_EFFECTS[userFarm.weather.type].description}\n` +
            (currentEvent
              ? `‚î£‚û§ üéâ S·ª∞ KI·ªÜN: ${currentEvent.name}\n‚îÉ   ‚Üí C√°c lo·∫°i c√¢y ƒë·∫∑c bi·ªát c√≥ s·∫µn ƒë·ªÉ tr·ªìng!\n`
              : "") +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n` +
            `‚ö° L·ªÜNH NHANH:\n` +
            `‚Üí .farm tr·ªìng - Xem danh s√°ch c√¢y tr·ªìng\n` +
            `‚Üí .farm kho - Xem Kho\n` +
            `‚Üí .farm thu - Thu ho·∫°ch t·∫•t c·∫£ c√¢y s·∫µn s√†ng\n` +
            `‚Üí .farm info - Xem chi ti·∫øt trang tr·∫°i\n` +
            `‚Üí .farm shop - Xem c·ª≠a h√†ng\n` +
            `‚Üí .farm help - Xem h∆∞·ªõng d·∫´n c√°ch ch∆°i\n` +
            `‚Üí .farm bxh - Xem b·∫£ng x·∫øp h·∫°ng\n`;

          return api.sendMessage(message, threadID, messageID);
        } catch (error) {
          console.error("Error in farm command:", error);
          return api.sendMessage(
            "‚ùå L·ªói x·ª≠ l√Ω trang tr·∫°i!",
            threadID,
            messageID
          );
        }
      }

      const command = target[0].toLowerCase();

      switch (command) {
        case "tr·ªìng":
        case "trong":
        case "plant": {
          const cropId = target[1]?.toLowerCase();
          const plotParam = target[2]?.toLowerCase();

          if (!cropId) {
            let availableCrops = "üìã DANH S√ÅCH C√ÇY TR·ªíNG\n";

            const currentEvent = checkEvent();
            if (currentEvent && currentEvent.crops) {
              availableCrops += `\nüéâ C√ÇY TR·ªíNG S·ª∞ KI·ªÜN ${currentEvent.name}:\n`;
              Object.entries(currentEvent.crops).forEach(([id, crop]) => {
                availableCrops += `‚Üí ${crop.emoji} ${crop.name} (.farm tr·ªìng ${id})\n`;
                availableCrops += `   üí∞ Gi√°: ${formatNumber(crop.price)} Xu\n`;
                availableCrops += `   ‚è±Ô∏è Th·ªùi gian: ${Math.floor(
                  crop.time / 3600
                )} gi·ªù ${(crop.time % 3600) / 60} ph√∫t\n`;
                availableCrops += `   üíµ Thu ho·∫°ch: ${formatNumber(
                  crop.yield
                )} Xu\n`;
              });
              availableCrops += "\n";
            }

            availableCrops += "üìä C√ÇY TR·ªíNG TH∆Ø·ªúNG:\n";
            const currentLevel = calculateLevel(userFarm.exp).level;

            Object.entries(CROPS)
              .filter(([_, crop]) => crop.level <= currentLevel)
              .forEach(([id, crop]) => {
                availableCrops += `‚Üí ${crop.emoji} ${crop.name} (.farm tr·ªìng ${id})\n`;
                availableCrops += `   üí∞ Gi√°: ${formatNumber(crop.price)} Xu\n`;
                availableCrops += `   ‚è±Ô∏è Th·ªùi gian: ${Math.floor(
                  crop.time / 60
                )} ph√∫t\n`;
                availableCrops += `   üíß N∆∞·ªõc: ${crop.water} l·∫ßn t∆∞·ªõi\n`;
                availableCrops += `   üíµ Thu ho·∫°ch: ${formatNumber(
                  crop.yield
                )} Xu\n`;
              });

            const lockedCrops = Object.entries(CROPS).filter(
              ([_, crop]) => crop.level > currentLevel
            );

            if (lockedCrops.length > 0) {
              availableCrops += "\nüîí C√ÇY TR·ªíNG KH√ìA (C·∫¶N N√ÇNG C·∫§P):\n";
              lockedCrops.forEach(([id, crop]) => {
                availableCrops += `‚Üí ${crop.emoji} ${crop.name} (C·∫ßn ƒë·∫°t c·∫•p ${crop.level})\n`;
              });
            }

            return api.sendMessage(availableCrops, threadID, messageID);
          }

          let cropConfig;
          const currentEvent = checkEvent();

          if (
            currentEvent &&
            currentEvent.crops &&
            currentEvent.crops[cropId]
          ) {
            cropConfig = currentEvent.crops[cropId];
          } else if (CROPS[cropId]) {
            cropConfig = CROPS[cropId];
          } else {
            return api.sendMessage(
              `‚ùå C√¢y tr·ªìng kh√¥ng t·ªìn t·∫°i! S·ª≠ d·ª•ng .farm tr·ªìng ƒë·ªÉ xem danh s√°ch.`,
              threadID,
              messageID
            );
          }

          const currentLevel = calculateLevel(userFarm.exp).level;
          if (cropConfig.level > currentLevel) {
            return api.sendMessage(
              `‚ùå B·∫°n c·∫ßn ƒë·∫°t c·∫•p ƒë·ªô ${cropConfig.level} ƒë·ªÉ tr·ªìng ${cropConfig.name}!\n` +
                `üë®‚Äçüåæ C·∫•p ƒë·ªô hi·ªán t·∫°i: ${currentLevel}`,
              threadID,
              messageID
            );
          }

          if (
            plotParam === "all" ||
            plotParam === "t·∫•t_c·∫£" ||
            plotParam === "tat_ca"
          ) {
            const emptyPlots = userFarm.plots.filter(
              (plot) => plot.status === "empty" || plot.status === "damaged"
            );

            if (emptyPlots.length === 0) {
              return api.sendMessage(
                `‚ùå Kh√¥ng c√≥ √¥ ƒë·∫•t tr·ªëng ƒë·ªÉ tr·ªìng!\n` +
                  `üí° Thu ho·∫°ch ho·∫∑c m·ªü kh√≥a th√™m √¥ ƒë·∫•t ƒë·ªÉ tr·ªìng c√¢y.`,
                threadID,
                messageID
              );
            }

            const totalCost = cropConfig.price * emptyPlots.length;
            const balance = await getBalance(senderID);

            if (balance < totalCost) {
              return api.sendMessage(
                `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ tr·ªìng ${emptyPlots.length} √¥ ${cropConfig.name}!\n` +
                  `üí∞ Chi ph√≠: ${formatNumber(totalCost)} Xu (${formatNumber(
                    cropConfig.price
                  )} √ó ${emptyPlots.length})\n` +
                  `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu\n` +
                  `üí° H√£y th·ª≠ tr·ªìng √≠t h∆°n ho·∫∑c ki·∫øm th√™m xu.`,
                threadID,
                messageID
              );
            }

            await updateBalance(senderID, -totalCost);

            for (const plot of emptyPlots) {
              plot.status = "growing";
              plot.crop = cropId;
              plot.plantedAt = Date.now();
              plot.water = cropConfig.water > 0 ? 1 : 0;
              plot.lastWatered = Date.now();
            }

            saveFarmData(farmData);

            return api.sendMessage(
              `‚úÖ ƒê√£ tr·ªìng ${cropConfig.emoji} ${cropConfig.name} v√†o ${emptyPlots.length} √¥ ƒë·∫•t tr·ªëng!\n` +
                `üí∞ Chi ph√≠: -${formatNumber(totalCost)} Xu\n` +
                `‚è±Ô∏è Th·ªùi gian thu ho·∫°ch: ${
                  Math.floor(cropConfig.time / 3600) > 0
                    ? `${Math.floor(cropConfig.time / 3600)} gi·ªù ${Math.floor(
                        (cropConfig.time % 3600) / 60
                      )} ph√∫t`
                    : `${Math.floor(cropConfig.time / 60)} ph√∫t`
                }\n` +
                `üí¶ Nh·ªõ t∆∞·ªõi n∆∞·ªõc th∆∞·ªùng xuy√™n: .farm t∆∞·ªõi`,
              threadID,
              messageID
            );
          } else if (plotParam && plotParam.includes("-")) {
            const range = plotParam.split("-");
            const startPlot = parseInt(range[0]) - 1;
            const endPlot = parseInt(range[1]) - 1;

            if (
              isNaN(startPlot) ||
              isNaN(endPlot) ||
              startPlot < 0 ||
              endPlot >= userFarm.plots.length ||
              startPlot > endPlot
            ) {
              return api.sendMessage(
                `‚ùå Ph·∫°m vi √¥ ƒë·∫•t kh√¥ng h·ª£p l·ªá!\n` +
                  `üå± B·∫°n c√≥ ${userFarm.plots.length} √¥ ƒë·∫•t (t·ª´ 1 ƒë·∫øn ${userFarm.plots.length})\n` +
                  `üí° C√∫ ph√°p: .farm tr·ªìng ${cropId} 1-5 (tr·ªìng t·ª´ √¥ 1 ƒë·∫øn √¥ 5)`,
                threadID,
                messageID
              );
            }

            const selectedPlots = [];

            for (let i = startPlot; i <= endPlot; i++) {
              if (
                userFarm.plots[i].status === "empty" ||
                userFarm.plots[i].status === "damaged"
              ) {
                selectedPlots.push(userFarm.plots[i]);
              }
            }

            if (selectedPlots.length === 0) {
              return api.sendMessage(
                `‚ùå Kh√¥ng c√≥ √¥ ƒë·∫•t tr·ªëng trong ph·∫°m vi t·ª´ ${
                  startPlot + 1
                } ƒë·∫øn ${endPlot + 1}!\n` +
                  `üí° Thu ho·∫°ch c√¢y tr∆∞·ªõc khi tr·ªìng m·ªõi.`,
                threadID,
                messageID
              );
            }

            const totalCost = cropConfig.price * selectedPlots.length;
            const balance = await getBalance(senderID);

            if (balance < totalCost) {
              return api.sendMessage(
                `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ tr·ªìng ${selectedPlots.length} √¥ ${cropConfig.name}!\n` +
                  `üí∞ Chi ph√≠: ${formatNumber(totalCost)} Xu (${formatNumber(
                    cropConfig.price
                  )} √ó ${selectedPlots.length})\n` +
                  `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu`,
                threadID,
                messageID
              );
            }

            await updateBalance(senderID, -totalCost);

            for (const plot of selectedPlots) {
              plot.status = "growing";
              plot.crop = cropId;
              plot.plantedAt = Date.now();
              plot.water = cropConfig.water > 0 ? 1 : 0;
              plot.lastWatered = Date.now();
            }

            saveFarmData(farmData);

            return api.sendMessage(
              `‚úÖ ƒê√£ tr·ªìng ${cropConfig.emoji} ${cropConfig.name} v√†o ${
                selectedPlots.length
              } √¥ ƒë·∫•t t·ª´ ${startPlot + 1} ƒë·∫øn ${endPlot + 1}!\n` +
                `üí∞ Chi ph√≠: -${formatNumber(totalCost)} Xu\n` +
                `‚è±Ô∏è Th·ªùi gian thu ho·∫°ch: ${
                  Math.floor(cropConfig.time / 3600) > 0
                    ? `${Math.floor(cropConfig.time / 3600)} gi·ªù ${Math.floor(
                        (cropConfig.time % 3600) / 60
                      )} ph√∫t`
                    : `${Math.floor(cropConfig.time / 60)} ph√∫t`
                }\n` +
                `üí¶ Nh·ªõ t∆∞·ªõi n∆∞·ªõc th∆∞·ªùng xuy√™n: .farm t∆∞·ªõi`,
              threadID,
              messageID
            );
          } else if (plotParam && plotParam.includes(",")) {
            const plotNumbers = plotParam
              .split(",")
              .map((num) => parseInt(num) - 1);

            for (const plotNum of plotNumbers) {
              if (
                isNaN(plotNum) ||
                plotNum < 0 ||
                plotNum >= userFarm.plots.length
              ) {
                return api.sendMessage(
                  `‚ùå √î ƒë·∫•t s·ªë ${plotNum + 1} kh√¥ng h·ª£p l·ªá!\n` +
                    `üå± B·∫°n c√≥ ${userFarm.plots.length} √¥ ƒë·∫•t (t·ª´ 1 ƒë·∫øn ${userFarm.plots.length})`,
                  threadID,
                  messageID
                );
              }
            }

            const selectedPlots = [];
            const unavailablePlots = [];

            for (const plotNum of plotNumbers) {
              if (
                userFarm.plots[plotNum].status === "empty" ||
                userFarm.plots[plotNum].status === "damaged"
              ) {
                selectedPlots.push(userFarm.plots[plotNum]);
              } else {
                unavailablePlots.push(plotNum + 1);
              }
            }

            if (selectedPlots.length === 0) {
              return api.sendMessage(
                `‚ùå T·∫•t c·∫£ √¥ ƒë·∫•t b·∫°n ch·ªçn ƒë·ªÅu ƒë√£ c√≥ c√¢y tr·ªìng!\n` +
                  `üí° Thu ho·∫°ch c√¢y tr∆∞·ªõc khi tr·ªìng m·ªõi.`,
                threadID,
                messageID
              );
            }

            const totalCost = cropConfig.price * selectedPlots.length;
            const balance = await getBalance(senderID);

            if (balance < totalCost) {
              return api.sendMessage(
                `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ tr·ªìng ${selectedPlots.length} √¥ ${cropConfig.name}!\n` +
                  `üí∞ Chi ph√≠: ${formatNumber(totalCost)} Xu (${formatNumber(
                    cropConfig.price
                  )} √ó ${selectedPlots.length})\n` +
                  `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu`,
                threadID,
                messageID
              );
            }

            await updateBalance(senderID, -totalCost);

            for (const plot of selectedPlots) {
              plot.status = "growing";
              plot.crop = cropId;
              plot.plantedAt = Date.now();
              plot.water = cropConfig.water > 0 ? 1 : 0;
              plot.lastWatered = Date.now();
            }

            saveFarmData(farmData);

            let message = `‚úÖ ƒê√£ tr·ªìng ${cropConfig.emoji} ${cropConfig.name} v√†o ${selectedPlots.length} √¥ ƒë·∫•t!\n`;
            message += `üí∞ Chi ph√≠: -${formatNumber(totalCost)} Xu\n`;

            if (unavailablePlots.length > 0) {
              message += `‚ö†Ô∏è C√°c √¥ ƒë·∫•t ${unavailablePlots.join(
                ", "
              )} kh√¥ng th·ªÉ tr·ªìng v√¨ ƒë√£ c√≥ c√¢y.\n`;
            }

            message += `‚è±Ô∏è Th·ªùi gian thu ho·∫°ch: ${
              Math.floor(cropConfig.time / 3600) > 0
                ? `${Math.floor(cropConfig.time / 3600)} gi·ªù ${Math.floor(
                    (cropConfig.time % 3600) / 60
                  )} ph√∫t`
                : `${Math.floor(cropConfig.time / 60)} ph√∫t`
            }\n`;
            message += `üí¶ Nh·ªõ t∆∞·ªõi n∆∞·ªõc th∆∞·ªùng xuy√™n: .farm t∆∞·ªõi`;

            return api.sendMessage(message, threadID, messageID);
          } else if (
            plotParam &&
            !isNaN(parseInt(plotParam)) &&
            parseInt(plotParam) > 1
          ) {
            const count = parseInt(plotParam);

            const emptyPlots = userFarm.plots.filter(
              (plot) => plot.status === "empty" || plot.status === "damaged"
            );

            if (emptyPlots.length === 0) {
              return api.sendMessage(
                `‚ùå Kh√¥ng c√≥ √¥ ƒë·∫•t tr·ªëng ƒë·ªÉ tr·ªìng!\n` +
                  `üí° Thu ho·∫°ch ho·∫∑c m·ªü kh√≥a th√™m √¥ ƒë·∫•t ƒë·ªÉ tr·ªìng c√¢y.`,
                threadID,
                messageID
              );
            }

            const plotsToPlant = Math.min(count, emptyPlots.length);
            const totalCost = cropConfig.price * plotsToPlant;
            const balance = await getBalance(senderID);

            if (balance < totalCost) {
              return api.sendMessage(
                `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ tr·ªìng ${plotsToPlant} √¥ ${cropConfig.name}!\n` +
                  `üí∞ Chi ph√≠: ${formatNumber(totalCost)} Xu (${formatNumber(
                    cropConfig.price
                  )} √ó ${plotsToPlant})\n` +
                  `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu\n` +
                  `üí° H√£y th·ª≠ tr·ªìng √≠t h∆°n ho·∫∑c ki·∫øm th√™m xu.`,
                threadID,
                messageID
              );
            }

            await updateBalance(senderID, -totalCost);

            for (let i = 0; i < plotsToPlant; i++) {
              const plot = emptyPlots[i];
              plot.status = "growing";
              plot.crop = cropId;
              plot.plantedAt = Date.now();
              plot.water = cropConfig.water > 0 ? 1 : 0;
              plot.lastWatered = Date.now();
            }

            saveFarmData(farmData);

            let message = `‚úÖ ƒê√£ tr·ªìng ${cropConfig.emoji} ${cropConfig.name} v√†o ${plotsToPlant} √¥ ƒë·∫•t!\n`;
            message += `üí∞ Chi ph√≠: -${formatNumber(totalCost)} Xu\n`;

            if (plotsToPlant < count) {
              message += `‚ö†Ô∏è Ch·ªâ c√≥ ${plotsToPlant}/${count} √¥ ƒë·∫•t tr·ªëng ƒë·ªÉ tr·ªìng.\n`;
            }

            message += `‚è±Ô∏è Th·ªùi gian thu ho·∫°ch: ${
              Math.floor(cropConfig.time / 3600) > 0
                ? `${Math.floor(cropConfig.time / 3600)} gi·ªù ${Math.floor(
                    (cropConfig.time % 3600) / 60
                  )} ph√∫t`
                : `${Math.floor(cropConfig.time / 60)} ph√∫t`
            }\n`;
            message += `üí¶ Nh·ªõ t∆∞·ªõi n∆∞·ªõc th∆∞·ªùng xuy√™n: .farm t∆∞·ªõi`;

            return api.sendMessage(message, threadID, messageID);
          }

          const plotNumber = parseInt(target[2]) - 1;

          if (isNaN(plotNumber)) {
            return api.sendMessage(
              `üí° H∆Ø·ªöNG D·∫™N TR·ªíNG C√ÇY:\n` +
                `‚Üí .farm tr·ªìng ${cropId} <s·ªë √¥>: Tr·ªìng v√†o √¥ c·ª• th·ªÉ\n` +
                `‚Üí .farm tr·ªìng ${cropId} 1-5: Tr·ªìng t·ª´ √¥ 1 ƒë·∫øn √¥ 5\n` +
                `‚Üí .farm tr·ªìng ${cropId} 1,3,5: Tr·ªìng v√†o √¥ 1, 3 v√† 5\n` +
                `‚Üí .farm tr·ªìng ${cropId} 10: Tr·ªìng v√†o 10 √¥ ƒë·∫•t tr·ªëng ƒë·∫ßu ti√™n\n` +
                `‚Üí .farm tr·ªìng ${cropId} all: Tr·ªìng v√†o t·∫•t c·∫£ √¥ ƒë·∫•t tr·ªëng`,
              threadID,
              messageID
            );
          }

          if (plotNumber < 0 || plotNumber >= userFarm.plots.length) {
            return api.sendMessage(
              `‚ùå √î ƒë·∫•t kh√¥ng t·ªìn t·∫°i!\n` +
                `üå± B·∫°n c√≥ ${userFarm.plots.length} √¥ ƒë·∫•t (t·ª´ 1 ƒë·∫øn ${userFarm.plots.length})`,
              threadID,
              messageID
            );
          }

          const plot = userFarm.plots[plotNumber];
          if (plot.status !== "empty" && plot.status !== "damaged") {
            return api.sendMessage(
              `‚ùå √î ƒë·∫•t ${plotNumber + 1} ƒëang c√≥ c√¢y tr·ªìng!\n` +
                `‚Üí S·ª≠ d·ª•ng .farm thu ${
                  plotNumber + 1
                } n·∫øu c√¢y ƒë√£ s·∫µn s√†ng thu ho·∫°ch`,
              threadID,
              messageID
            );
          }

          const balance = await getBalance(senderID);
          if (balance < cropConfig.price) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${cropConfig.name}!\n` +
                `üí∞ Gi√°: ${formatNumber(cropConfig.price)} Xu\n` +
                `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu`,
              threadID,
              messageID
            );
          }

          await updateBalance(senderID, -cropConfig.price);
          plot.status = "growing";
          plot.crop = cropId;
          plot.plantedAt = Date.now();
          plot.water = cropConfig.water > 0 ? 1 : 0;
          plot.lastWatered = Date.now();

          saveFarmData(farmData);

          return api.sendMessage(
            `‚úÖ ƒê√£ tr·ªìng ${cropConfig.emoji} ${cropConfig.name} t·∫°i √¥ ƒë·∫•t ${
              plotNumber + 1
            }!\n` +
              `‚è±Ô∏è Th·ªùi gian thu ho·∫°ch: ${
                Math.floor(cropConfig.time / 3600) > 0
                  ? `${Math.floor(cropConfig.time / 3600)} gi·ªù ${Math.floor(
                      (cropConfig.time % 3600) / 60
                    )} ph√∫t`
                  : `${Math.floor(cropConfig.time / 60)} ph√∫t`
              }\n` +
              `üí¶ Nh·ªõ t∆∞·ªõi n∆∞·ªõc th∆∞·ªùng xuy√™n: .farm t∆∞·ªõi ${plotNumber + 1}`,
            threadID,
            messageID
          );
        }
        case "bxh":
        case "x·∫øp_h·∫°ng":
        case "rank": {
          const rankType = target[1]?.toLowerCase() || "c·∫•p_ƒë·ªô";
          const page = parseInt(target[2]) || 1;

          let userData = {};
          try {
            const userDataPath = path.join(
              __dirname,
              "../events/cache/userData.json"
            );
            if (fs.existsSync(userDataPath)) {
              userData = JSON.parse(fs.readFileSync(userDataPath, "utf8"));
            }
          } catch (error) {
            console.error("Error loading userData.json:", error);
          }

          const allFarms = [];

          Object.entries(farmData.farms || {}).forEach(([userId, farm]) => {
            if (!farm) return;

            let farmWorth = 0;

            if (farm.plots) {
              farm.plots.forEach((plot) => {
                if (plot.status === "growing" && plot.crop) {
                  const cropConfig =
                    CROPS[plot.crop] ||
                    (checkEvent() && checkEvent().crops
                      ? checkEvent().crops[plot.crop]
                      : null);

                  if (cropConfig) {
                    farmWorth += cropConfig.price;
                  }
                }
              });
            }

            if (farm.animals) {
              Object.entries(farm.animals).forEach(([_, animal]) => {
                if (animal && animal.type && ANIMALS[animal.type]) {
                  farmWorth += ANIMALS[animal.type].price;
                }
              });
            }

            if (farm.inventory) {
              Object.entries(farm.inventory).forEach(([product, count]) => {
                let productPrice = 0;
                for (const animalType in ANIMALS) {
                  if (ANIMALS[animalType].product === product) {
                    productPrice = ANIMALS[animalType].productPrice;
                    break;
                  }
                }
                farmWorth += productPrice * count;
              });
            }

            let userName = "Ng∆∞·ªùi d√πng";
            let userExp = 0;

            if (userData[userId]) {
              userName =
                userData[userId].name || `Ng∆∞·ªùi d√πng ${userId.slice(-4)}`;
              userExp = userData[userId].exp || 0;
            }

            const farmLevel = calculateLevel(farm.exp);

            allFarms.push({
              userId,
              name: userName,
              exp: farm.exp,
              level: farmLevel.level,
              title: farmLevel.title,
              plotCount: farm.plots?.length || 0,
              animalCount: Object.keys(farm.animals || {}).length,
              farmWorth: farmWorth,
              createdAt: farm.createdAt || 0,
              userRank: userData[userId]?.rank || 999,
              userExp: userExp,
            });
          });

          let sortedFarms = [];
          let rankTypeDisplay = "";

          switch (rankType) {
            case "c·∫•p_ƒë·ªô":
            case "level":
            case "exp":
              sortedFarms = allFarms.sort((a, b) => {
                if (b.level !== a.level) {
                  return b.level - a.level;
                }
                return b.exp - a.exp;
              });
              rankTypeDisplay = "C·∫•p ƒë·ªô cao nh·∫•t";
              break;

            case "t√†i_s·∫£n":
            case "gi√°_tr·ªã":
            case "worth":
              sortedFarms = allFarms.sort((a, b) => b.farmWorth - a.farmWorth);
              rankTypeDisplay = "T√†i s·∫£n gi√° tr·ªã nh·∫•t";
              break;

            case "ƒë·∫•t":
            case "plots":
              sortedFarms = allFarms.sort((a, b) => b.plotCount - a.plotCount);
              rankTypeDisplay = "Di·ªán t√≠ch ƒë·∫•t l·ªõn nh·∫•t";
              break;

            case "v·∫≠t_nu√¥i":
            case "animals":
              sortedFarms = allFarms.sort(
                (a, b) => b.animalCount - a.animalCount
              );
              rankTypeDisplay = "Nhi·ªÅu v·∫≠t nu√¥i nh·∫•t";
              break;

            case "l√¢u_ƒë·ªùi":
            case "old":
              sortedFarms = allFarms.sort((a, b) => a.createdAt - b.createdAt);
              rankTypeDisplay = "Trang tr·∫°i l√¢u ƒë·ªùi nh·∫•t";
              break;

            default:
              sortedFarms = allFarms.sort((a, b) => {
                if (b.level !== a.level) {
                  return b.level - a.level;
                }
                return b.exp - a.exp;
              });
              rankTypeDisplay = "C·∫•p ƒë·ªô cao nh·∫•t";
              break;
          }

          const itemsPerPage = 10;
          const totalPages = Math.ceil(sortedFarms.length / itemsPerPage);

          if (page < 1 || page > totalPages) {
            return api.sendMessage(
              `‚ùå Trang kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ ${totalPages} trang x·∫øp h·∫°ng.`,
              threadID,
              messageID
            );
          }

          const startIdx = (page - 1) * itemsPerPage;
          const endIdx = Math.min(startIdx + itemsPerPage, sortedFarms.length);
          const displayFarms = sortedFarms.slice(startIdx, endIdx);

          const currentUserRank =
            sortedFarms.findIndex((farm) => farm.userId === senderID) + 1;
          let currentUserInfo = "";

          if (currentUserRank > 0) {
            const userFarmData = sortedFarms[currentUserRank - 1];
            currentUserInfo = `üë®‚Äçüåæ Th·ª© h·∫°ng c·ªßa b·∫°n: #${currentUserRank}\n`;

            switch (rankType) {
              case "c·∫•p_ƒë·ªô":
              case "level":
              case "exp":
                currentUserInfo += `   C·∫•p ƒë·ªô ${userFarmData.level} (${userFarmData.exp} EXP)\n`;
                break;
              case "t√†i_s·∫£n":
              case "gi√°_tr·ªã":
              case "worth":
                currentUserInfo += `   T√†i s·∫£n: ${formatNumber(
                  userFarmData.farmWorth
                )} Xu\n`;
                break;
              case "ƒë·∫•t":
              case "plots":
                currentUserInfo += `   S·ªë √¥ ƒë·∫•t: ${userFarmData.plotCount} √¥\n`;
                break;
              case "v·∫≠t_nu√¥i":
              case "animals":
                currentUserInfo += `   S·ªë v·∫≠t nu√¥i: ${userFarmData.animalCount} con\n`;
                break;
              case "l√¢u_ƒë·ªùi":
              case "old":
                currentUserInfo += `   Ng√†y th√†nh l·∫≠p: ${new Date(
                  userFarmData.createdAt
                ).toLocaleDateString("vi-VN")}\n`;
                break;
            }
          }

          let message =
            `üèÜ B·∫¢NG X·∫æP H·∫†NG N√îNG D√ÇN üèÜ\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
            `üìã X·∫øp h·∫°ng theo: ${rankTypeDisplay}\n` +
            `üìä Trang: ${page}/${totalPages}\n\n`;

          if (currentUserInfo) {
            message += `${currentUserInfo}\n`;
          }

          displayFarms.forEach((farm, index) => {
            const rank = startIdx + index + 1;
            let rankIcon = "üë§";

            if (rank === 1) rankIcon = "ü•á";
            else if (rank === 2) rankIcon = "ü•à";
            else if (rank === 3) rankIcon = "ü•â";

            message += `${rankIcon} #${rank}. ${farm.name}\n`;

            switch (rankType) {
              case "c·∫•p_ƒë·ªô":
              case "level":
              case "exp":
                message += `   üë®‚Äçüåæ Farm: C·∫•p ${farm.level} - ${farm.title}\n`;
                message += `   üìä EXP: ${farm.exp}\n`;
                break;
              case "t√†i_s·∫£n":
              case "gi√°_tr·ªã":
              case "worth":
                message += `   üí∞ T√†i s·∫£n: ${formatNumber(
                  farm.farmWorth
                )} Xu\n`;
                break;
              case "ƒë·∫•t":
              case "plots":
                message += `   üå± S·ªë √¥ ƒë·∫•t: ${farm.plotCount} √¥\n`;
                break;
              case "v·∫≠t_nu√¥i":
              case "animals":
                message += `   üêÑ S·ªë v·∫≠t nu√¥i: ${farm.animalCount} con\n`;
                break;
              case "l√¢u_ƒë·ªùi":
              case "old":
                message += `   üè° Ng√†y th√†nh l·∫≠p: ${new Date(
                  farm.createdAt
                ).toLocaleDateString("vi-VN")}\n`;
                break;
            }

            message += `\n`;
          });

          message +=
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
            `üí° Xem trang kh√°c: .farm bxh ${rankType} <s·ªë trang>\n` +
            `üìã C√°c lo·∫°i x·∫øp h·∫°ng:\n` +
            `  ‚Ä¢ .farm bxh c·∫•p_ƒë·ªô - Theo c·∫•p ƒë·ªô\n` +
            `  ‚Ä¢ .farm bxh t√†i_s·∫£n - Theo gi√° tr·ªã trang tr·∫°i\n` +
            `  ‚Ä¢ .farm bxh ƒë·∫•t - Theo s·ªë l∆∞·ª£ng ƒë·∫•t\n` +
            `  ‚Ä¢ .farm bxh v·∫≠t_nu√¥i - Theo s·ªë v·∫≠t nu√¥i\n` +
            `  ‚Ä¢ .farm bxh l√¢u_ƒë·ªùi - Theo th·ªùi gian th√†nh l·∫≠p`;

          return api.sendMessage(message, threadID, messageID);
        }

        case "thƒÉm":
        case "tham":
        case "visit": {
          let targetID = "";

          const mentions = event.mentions;

          if (mentions && Object.keys(mentions).length > 0) {
            targetID = Object.keys(mentions)[0];
          } else {
            targetID = target[1];
          }

          if (!targetID) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng tag ng∆∞·ªùi ch∆°i ho·∫∑c nh·∫≠p ID ƒë·ªÉ thƒÉm trang tr·∫°i!\n" +
                "üí° S·ª≠ d·ª•ng: .farm thƒÉm @t√™n_ng∆∞·ªùi_ch∆°i\n" +
                "üí° Ho·∫∑c: .farm thƒÉm [ID ng∆∞·ªùi ch∆°i]",
              threadID,
              messageID
            );
          }

          let targetInfo = {};
          try {
            const userDataPath = path.join(
              __dirname,
              "../events/cache/userData.json"
            );
            if (fs.existsSync(userDataPath)) {
              const userData = JSON.parse(
                fs.readFileSync(userDataPath, "utf8")
              );
              if (userData[targetID]) {
                targetInfo = userData[targetID];
              }
            }
          } catch (error) {
            console.error("Error getting target user data:", error);
          }

          const targetName =
            targetInfo.name || `Ng∆∞·ªùi ch∆°i ${targetID.slice(-4)}`;

          if (!farmData.farms[targetID]) {
            return api.sendMessage(
              `‚ùå Kh√¥ng t√¨m th·∫•y trang tr·∫°i c·ªßa ${targetName}!\n` +
                "üí° Ng∆∞·ªùi ch∆°i n√†y ch∆∞a c√≥ trang tr·∫°i ho·∫∑c ID kh√¥ng ch√≠nh x√°c.",
              threadID,
              messageID
            );
          }

          if (targetID === senderID) {
            return api.sendMessage(
              "‚ùå B·∫°n kh√¥ng th·ªÉ thƒÉm trang tr·∫°i c·ªßa ch√≠nh m√¨nh!\n" +
                "üí° H√£y s·ª≠ d·ª•ng l·ªánh .farm ƒë·ªÉ xem trang tr·∫°i c·ªßa b·∫°n.",
              threadID,
              messageID
            );
          }

          const targetFarm = farmData.farms[targetID];

          if (!userFarm.lastVisits) userFarm.lastVisits = {};

          const lastVisit = userFarm.lastVisits[targetID] || 0;
          const visitCooldown = 3 * 60 * 60 * 1000;

          if (Date.now() - lastVisit < visitCooldown) {
            const remainingTime = Math.ceil(
              (lastVisit + visitCooldown - Date.now()) / (60 * 60 * 1000)
            );
            return api.sendMessage(
              `‚ùå B·∫°n ƒë√£ thƒÉm trang tr·∫°i c·ªßa ${targetName} g·∫ßn ƒë√¢y!\n` +
                `‚è±Ô∏è Vui l√≤ng ƒë·ª£i th√™m ${remainingTime} gi·ªù n·ªØa.`,
              threadID,
              messageID
            );
          }

          const targetLevel = calculateLevel(targetFarm.exp);

          let plotsReady = 0;
          let plotsGrowing = 0;
          let plotsEmpty = 0;
          let plotsDamaged = 0;

          targetFarm.plots.forEach((plot) => {
            if (plot.status === "ready") plotsReady++;
            else if (plot.status === "growing") plotsGrowing++;
            else if (plot.status === "empty") plotsEmpty++;
            else if (plot.status === "damaged") plotsDamaged++;
          });

          let animalProducts = 0;
          Object.entries(targetFarm.animals || {}).forEach(([_, animal]) => {
            if (animal.productReady) animalProducts++;
          });

          const actions = [];

          if (plotsGrowing > 0) {
            const needWateringPlots = targetFarm.plots.filter((plot) => {
              if (plot.status !== "growing" || !plot.crop) return false;

              const cropConfig =
                CROPS[plot.crop] ||
                (checkEvent() && checkEvent().crops
                  ? checkEvent().crops[plot.crop]
                  : null);

              return (
                cropConfig &&
                cropConfig.water > 0 &&
                plot.water < cropConfig.water
              );
            });

            if (needWateringPlots.length > 0) {
              actions.push("water");
            }
          }

          let unfedAnimals = [];
          if (targetFarm.animals) {
            unfedAnimals = Object.entries(targetFarm.animals)
              .filter(([_, animal]) => !animal.fed)
              .map(([_, animal]) => animal.type);

            const uniqueUnfedTypes = [...new Set(unfedAnimals)];
            if (uniqueUnfedTypes.length > 0) {
              actions.push("feed");
            }
          }

          let actionMessage = "";
          let expGain = Math.floor(Math.random() * 3) + 3;
          let rewardMessage = `üìä Kinh nghi·ªám: +${expGain} EXP\n`;

          if (actions.length > 0) {
            const randomAction =
              actions[Math.floor(Math.random() * actions.length)];

            if (randomAction === "water") {
              const needWateringPlots = targetFarm.plots.filter((plot) => {
                if (plot.status !== "growing" || !plot.crop) return false;

                const cropConfig =
                  CROPS[plot.crop] ||
                  (checkEvent() && checkEvent().crops
                    ? checkEvent().crops[plot.crop]
                    : null);

                return (
                  cropConfig &&
                  cropConfig.water > 0 &&
                  plot.water < cropConfig.water
                );
              });

              if (needWateringPlots.length > 0) {
                const randomPlot =
                  needWateringPlots[
                    Math.floor(Math.random() * needWateringPlots.length)
                  ];
                const plotIndex = targetFarm.plots.findIndex(
                  (p) => p === randomPlot
                );

                const cropConfig =
                  CROPS[randomPlot.crop] ||
                  (checkEvent() && checkEvent().crops
                    ? checkEvent().crops[randomPlot.crop]
                    : null);

                if (cropConfig) {
                  randomPlot.water = Math.min(
                    cropConfig.water,
                    randomPlot.water + 1
                  );
                  randomPlot.lastWatered = Date.now();

                  actionMessage = `üí¶ B·∫°n ƒë√£ gi√∫p t∆∞·ªõi n∆∞·ªõc cho ${
                    cropConfig.emoji
                  } ${cropConfig.name} ·ªü √¥ ƒë·∫•t ${plotIndex + 1}!\n`;
                  expGain += 5;
                  rewardMessage = `üìä Kinh nghi·ªám: +${expGain} EXP (t∆∞·ªõi n∆∞·ªõc +5)\n`;
                }
              }
            } else if (randomAction === "feed") {
              const uniqueUnfedTypes = [...new Set(unfedAnimals)];
              const randomType =
                uniqueUnfedTypes[
                  Math.floor(Math.random() * uniqueUnfedTypes.length)
                ];

              const animalConfig = ANIMALS[randomType];
              if (animalConfig) {
                const animalEntry = Object.entries(targetFarm.animals).find(
                  ([_, animal]) => animal.type === randomType && !animal.fed
                );

                if (animalEntry) {
                  const [animalId, animal] = animalEntry;
                  animal.fed = true;
                  animal.lastFed = Date.now();

                  if (!animal.lastProduced) {
                    animal.lastProduced = Date.now();
                  }

                  actionMessage = `ü•´ B·∫°n ƒë√£ gi√∫p cho ${animalConfig.emoji} ${animalConfig.name} ƒÉn!\n`;
                  expGain += 5;
                  rewardMessage = `üìä Kinh nghi·ªám: +${expGain} EXP (cho ƒÉn +5)\n`;
                }
              }
            }
          } else {
            actionMessage =
              "üí´ B·∫°n ƒë√£ tham quan trang tr·∫°i v√† h·ªçc h·ªèi ƒë∆∞·ª£c m·ªôt s·ªë ƒëi·ªÅu!\n";
          }

          userFarm.lastVisits[targetID] = Date.now();
          userFarm.exp += expGain;

          if (!targetFarm.visitors) targetFarm.visitors = [];
          targetFarm.visitors.push({
            visitorId: senderID,
            visitTime: Date.now(),
            action: actionMessage.trim(),
          });

          if (targetFarm.visitors.length > 10) {
            targetFarm.visitors = targetFarm.visitors.slice(-10);
          }

          saveFarmData(farmData);

          const oldLevel = calculateLevel(userFarm.exp - expGain).level;
          const newLevel = calculateLevel(userFarm.exp).level;

          if (newLevel > oldLevel) {
            const newLevelData = LEVELS[newLevel - 1];
            rewardMessage += `\nüéâ CH√öC M·ª™NG! B·∫°n ƒë√£ l√™n c·∫•p ${newLevel}!\n`;
            rewardMessage += `üèÜ Danh hi·ªáu m·ªõi: ${newLevelData.title}\n`;
            rewardMessage += `üí∞ Ph·∫ßn th∆∞·ªüng: +${formatNumber(
              newLevelData.reward
            )} Xu\n`;

            await updateBalance(senderID, newLevelData.reward);

            if (newLevelData.plotSize > userFarm.plots.length) {
              const newPlotsCount =
                newLevelData.plotSize - userFarm.plots.length;
              rewardMessage += `üå± M·ªü kh√≥a: ${newPlotsCount} √¥ ƒë·∫•t m·ªõi\n`;

              for (let i = 0; i < newPlotsCount; i++) {
                userFarm.plots.push({
                  id: userFarm.plots.length,
                  status: "empty",
                  crop: null,
                  plantedAt: null,
                  water: 0,
                  lastWatered: null,
                });
              }

              saveFarmData(farmData);
            }
          }

          const message =
            `üë®‚Äçüåæ TRANG TR·∫†I C·ª¶A ${targetName.toUpperCase()} üë®‚Äçüåæ\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `${actionMessage}\n` +
            `üèÜ TH√îNG TIN TRANG TR·∫†I:\n` +
            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
            `‚î£‚û§ üë®‚Äçüåæ C·∫•p ƒë·ªô: ${targetLevel.level} - ${targetLevel.title}\n` +
            `‚î£‚û§ üè° Ng√†y th√†nh l·∫≠p: ${new Date(
              targetFarm.createdAt
            ).toLocaleDateString("vi-VN")}\n` +
            `‚î£‚û§ üå± √î ƒë·∫•t tr·ªìng: ${targetFarm.plots.length} √¥\n` +
            `‚îÉ   ‚úÖ S·∫µn s√†ng thu ho·∫°ch: ${plotsReady} √¥\n` +
            `‚îÉ   üåø ƒêang ph√°t tri·ªÉn: ${plotsGrowing} √¥\n` +
            `‚îÉ   üî≤ C√≤n tr·ªëng: ${plotsEmpty} √¥\n` +
            `‚î£‚û§ üêÑ V·∫≠t nu√¥i: ${
              Object.keys(targetFarm.animals || {}).length
            } con\n` +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n` +
            `üéÅ PH·∫¶N TH∆Ø·ªûNG THAM QUAN:\n` +
            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
            `‚î£‚û§ ${rewardMessage}` +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n` +
            `üí° B·∫°n c√≥ th·ªÉ thƒÉm l·∫°i trang tr·∫°i n√†y sau 3 gi·ªù n·ªØa.\n` +
            `üí´ ThƒÉm trang tr·∫°i kh√°c: .farm thƒÉm [ID]`;

          return api.sendMessage(message, threadID, messageID);
        }
        case "cho_ƒÉn":
        case "cho_an":
        case "feed": {
          const animalType = target[1]?.toLowerCase();

          if (!animalType) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p lo·∫°i v·∫≠t nu√¥i ƒë·ªÉ cho ƒÉn!\n" +
                "üí° C√∫ ph√°p: .farm cho_ƒÉn <lo·∫°i_v·∫≠t_nu√¥i>\n" +
                "üìù V√≠ d·ª•: .farm cho_ƒÉn ga",
              threadID,
              messageID
            );
          }

          if (!ANIMALS[animalType]) {
            return api.sendMessage(
              `‚ùå Kh√¥ng t√¨m th·∫•y lo·∫°i v·∫≠t nu√¥i "${animalType}"!`,
              threadID,
              messageID
            );
          }

          const animalConfig = ANIMALS[animalType];
          let animalCount = 0;
          let unfedCount = 0;

          if (!userFarm.animals) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng c√≥ v·∫≠t nu√¥i n√†o!`,
              threadID,
              messageID
            );
          }

          Object.entries(userFarm.animals).forEach(([id, animal]) => {
            if (animal.type === animalType) {
              animalCount++;
              if (!animal.fed) unfedCount++;
            }
          });

          if (animalCount === 0) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng c√≥ ${animalConfig.name} n√†o trong trang tr·∫°i!`,
              threadID,
              messageID
            );
          }

          if (unfedCount === 0) {
            return api.sendMessage(
              `‚ùå T·∫•t c·∫£ ${animalConfig.name} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c cho ƒÉn r·ªìi!`,
              threadID,
              messageID
            );
          }

          const feedCost = animalConfig.feed * unfedCount;
          const balance = await getBalance(senderID);

          if (balance < feedCost) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ cho ${animalConfig.name} ƒÉn!\n` +
                `üí∞ Chi ph√≠: ${formatNumber(feedCost)} Xu (${formatNumber(
                  animalConfig.feed
                )} Xu √ó ${unfedCount})\n` +
                `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu`,
              threadID,
              messageID
            );
          }

          await updateBalance(senderID, -feedCost);

          Object.entries(userFarm.animals).forEach(([id, animal]) => {
            if (animal.type === animalType && !animal.fed) {
              animal.fed = true;
              animal.lastFed = Date.now();

              if (!animal.lastProduced) {
                animal.lastProduced = Date.now();
              }
            }
          });

          saveFarmData(farmData);

          return api.sendMessage(
            `‚úÖ ƒê√£ cho ${unfedCount} ${animalConfig.name} ƒÉn th√†nh c√¥ng!\n` +
              `üí∞ Chi ph√≠: -${formatNumber(feedCost)} Xu\n` +
              `‚è±Ô∏è V·∫≠t nu√¥i s·∫Ω s·∫£n xu·∫•t s·∫£n ph·∫©m sau ${Math.floor(
                animalConfig.productTime / 3600
              )} gi·ªù\n` +
              `üí° Thu th·∫≠p s·∫£n ph·∫©m: .farm thu_s·∫£n_ph·∫©m`,
            threadID,
            messageID
          );
        }
        case "thu_s·∫£n_ph·∫©m":
        case "thu_san_pham":
        case "collect": {
          if (!userFarm.animals || Object.keys(userFarm.animals).length === 0) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng c√≥ v·∫≠t nu√¥i n√†o trong trang tr·∫°i!`,
              threadID,
              messageID
            );
          }

          let productsCollected = {};
          let animalsFed = [];
          let totalValue = 0;
          let collectCount = 0;

          Object.entries(userFarm.animals).forEach(([id, animal]) => {
            if (!animal.type || !ANIMALS[animal.type]) return;

            const animalConfig = ANIMALS[animal.type];
            const effects = applyItemEffects(userFarm);

            if (!animal.lastProduced) return;

            const productionTime = animalConfig.productTime * 1000;
            const isReady = Date.now() - animal.lastProduced >= productionTime;

            if (animal.fed && isReady) {
              const productAmount = Math.ceil(
                animalConfig.productPrice * effects.animalBoost
              );
              const product = animalConfig.product;

              if (!userFarm.inventory) userFarm.inventory = {};
              if (!userFarm.inventory[product]) userFarm.inventory[product] = 0;

              userFarm.inventory[product]++;
              animal.lastProduced = Date.now();
              animal.fed = false;
              animal.productReady = false;
              collectCount++;

              if (!productsCollected[product]) {
                productsCollected[product] = {
                  count: 0,
                  price: productAmount,
                  emoji: animalConfig.productEmoji,
                };
              }

              productsCollected[product].count++;
              totalValue += productAmount;

              if (!animalsFed.includes(animal.type)) {
                animalsFed.push(animal.type);
              }
            }
          });

          saveFarmData(farmData);

          if (collectCount === 0) {
            return api.sendMessage(
              `‚ùå Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o s·∫µn s√†ng ƒë·ªÉ thu th·∫≠p!\n` +
                `üí° L∆∞u √Ω: V·∫≠t nu√¥i c·∫ßn ƒë∆∞·ª£c cho ƒÉn v√† ƒë·ª£i ƒë·ªß th·ªùi gian s·∫£n xu·∫•t.`,
              threadID,
              messageID
            );
          }

          let message = `‚úÖ ƒê√£ thu th·∫≠p ${collectCount} s·∫£n ph·∫©m t·ª´ v·∫≠t nu√¥i!\n\n`;

          Object.entries(productsCollected).forEach(([product, details]) => {
            message += `${details.emoji} ${product}: +${
              details.count
            } (${formatNumber(details.price * details.count)} Xu)\n`;
          });

          message += `\nüí∞ T·ªïng gi√° tr·ªã: ${formatNumber(totalValue)} Xu`;
          message += `\nüí° B√°n s·∫£n ph·∫©m: .farm b√°n <s·∫£n ph·∫©m> <s·ªë_l∆∞·ª£ng>`;

          if (animalsFed.length > 0) {
            message += `\n\n‚ö†Ô∏è L∆∞u √Ω: H√£y cho ${animalsFed
              .map((type) => ANIMALS[type].name)
              .join(", ")} ƒÉn l·∫°i ƒë·ªÉ ti·∫øp t·ª•c s·∫£n xu·∫•t!`;
          }

          return api.sendMessage(message, threadID, messageID);
        }

        case "b√°n":
        case "ban":
        case "sell": {
          let productName = "";
          let quantity = 0;

          const lastParam = target[target.length - 1];
          const isLastParamNumber = !isNaN(parseInt(lastParam));
          if (isLastParamNumber) {
            quantity = parseInt(lastParam);
            productName = target
              .slice(1, target.length - 1)
              .join(" ")
              .toLowerCase();
          } else {
            productName = target.slice(1).join(" ").toLowerCase();
          }

          if (!productName) {
            if (
              !userFarm.inventory ||
              Object.keys(userFarm.inventory).length === 0
            ) {
              return api.sendMessage(
                `‚ùå B·∫°n kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ b√°n!`,
                threadID,
                messageID
              );
            }
            let message = `üß∫ KHO H√ÄNG C·ª¶A B·∫†N üß∫\n` + `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

            Object.entries(userFarm.inventory).forEach(([product, count]) => {
              if (count <= 0) return;

              let productPrice = 0;
              let productEmoji = "üì¶";

              for (const animalId in ANIMALS) {
                if (ANIMALS[animalId].product === productName) {
                  productPrice = ANIMALS[animalId].productPrice;
                  productEmoji = ANIMALS[animalId].productEmoji;
                  break;
                }
              }

              message += `${productEmoji} ${product}: ${count} (${formatNumber(
                count * productPrice
              )} Xu)\n`;
              message += `üí° B√°n: .farm b√°n ${product} <s·ªë_l∆∞·ª£ng>\n\n`;
            });

            return api.sendMessage(message, threadID, messageID);
          }
          let matchedProduct = null;

          if (userFarm.inventory && userFarm.inventory[productName]) {
            matchedProduct = productName;
          } else {
            // T√¨m ki·∫øm t√™n g·∫ßn ƒë√∫ng trong kho
            for (const product in userFarm.inventory || {}) {
              if (
                product.toLowerCase().includes(productName) ||
                productName.includes(product.toLowerCase())
              ) {
                matchedProduct = product;
                break;
              }
            }
          }

          if (!matchedProduct) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng c√≥ s·∫£n ph·∫©m "${productName}" trong kho!`,
              threadID,
              messageID
            );
          }

          const availableQuantity = userFarm.inventory[matchedProduct];

          if (isNaN(quantity) || quantity <= 0) {
            quantity = availableQuantity;
          }

          if (quantity > availableQuantity) {
            return api.sendMessage(
              `‚ùå B·∫°n ch·ªâ c√≥ ${availableQuantity} ${matchedProduct} trong kho!`,
              threadID,
              messageID
            );
          }

          let productPrice = 0;
          let productEmoji = "üì¶";

          for (const animalId in ANIMALS) {
            if (ANIMALS[animalId].product === productName) {
              productPrice = ANIMALS[animalId].productPrice;
              productEmoji = ANIMALS[animalId].productEmoji;
              break;
            }
          }

          if (productPrice === 0) {
            for (const cropId in CROPS) {
              if (CROPS[cropId].name.toLowerCase() === productName) {
                productPrice = CROPS[cropId].yield;
                productEmoji = CROPS[cropId].emoji;
                break;
              }
            }

            if (productPrice === 0) {
              const currentEvent = checkEvent();
              if (currentEvent && currentEvent.crops) {
                for (const cropId in currentEvent.crops) {
                  if (
                    currentEvent.crops[cropId].name.toLowerCase() ===
                    productName
                  ) {
                    productPrice = currentEvent.crops[cropId].yield;
                    productEmoji = currentEvent.crops[cropId].emoji;
                    break;
                  }
                }
              }
            }

            if (productPrice === 0) {
              for (const recipeId in PROCESSING_RECIPES) {
                if (
                  PROCESSING_RECIPES[recipeId].name.toLowerCase() ===
                  productName
                ) {
                  productPrice = PROCESSING_RECIPES[recipeId].value;
                  productEmoji = PROCESSING_RECIPES[recipeId].emoji;
                  break;
                }
              }
            }
          }

          if (productPrice === 0) {
            return api.sendMessage(
              `‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° c·ªßa s·∫£n ph·∫©m "${productName}"!`,
              threadID,
              messageID
            );
          }

          const totalValue = productPrice * quantity;
          userFarm.inventory[productName] -= quantity;
          await updateBalance(senderID, totalValue);
          saveFarmData(farmData);

          return api.sendMessage(
            `‚úÖ ƒê√£ b√°n ${quantity} ${productEmoji} ${productName} th√†nh c√¥ng!\n` +
              `üí∞ Nh·∫≠n ƒë∆∞·ª£c: +${formatNumber(totalValue)} Xu\n` +
              `üìä C√≤n l·∫°i trong kho: ${userFarm.inventory[productName]} ${productName}`,
            threadID,
            messageID
          );
        }

        case "ch·∫ø_bi·∫øn":
        case "che_bien":
        case "process": {
          const recipeId = target[1]?.toLowerCase();
          const quantity = Math.max(1, parseInt(target[2]) || 1);

          if (!recipeId) {
            const currentLevel = calculateLevel(userFarm.exp).level;

            let message =
              `üë®‚Äçüç≥ CH·∫æ BI·∫æN N√îNG S·∫¢N üë®‚Äçüç≥\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚ÑπÔ∏è Ch·∫ø bi·∫øn n√¥ng s·∫£n gi√∫p t·∫°o ra s·∫£n ph·∫©m c√≥ gi√° tr·ªã cao h∆°n!\n` +
              `üí° S·ª≠ d·ª•ng: .farm ch·∫ø_bi·∫øn <m√≥n_ƒÉn> <s·ªë_l∆∞·ª£ng>\n\n` +
              `üìã C√îNG TH·ª®C CH·∫æ BI·∫æN:\n`;

            const recipesByLevel = {};
            Object.entries(PROCESSING_RECIPES).forEach(([id, recipe]) => {
              const level = recipe.level;
              if (!recipesByLevel[level]) recipesByLevel[level] = [];
              recipesByLevel[level].push({ id, ...recipe });
            });

            for (let level = 1; level <= 10; level++) {
              if (recipesByLevel[level]) {
                const recipes = recipesByLevel[level];
                const available = level <= currentLevel;

                message += `\n${available ? "üîì" : "üîí"} C·∫§P ƒê·ªò ${level}:\n`;

                if (available) {
                  recipes.forEach((recipe) => {
                    message += `\n${recipe.emoji} ${recipe.name}\n`;
                    message += `üí∞ Gi√° b√°n: ${formatNumber(recipe.value)} Xu\n`;
                    message += `‚è±Ô∏è Th·ªùi gian: ${Math.floor(
                      recipe.time / 60
                    )} ph√∫t\n`;
                    message += `üìã Nguy√™n li·ªáu:\n`;

                    Object.entries(recipe.ingredients).forEach(
                      ([item, amount]) => {
                        let itemEmoji = "üì¶";

                        for (const animalId in ANIMALS) {
                          if (ANIMALS[animalId].product === item) {
                            itemEmoji = ANIMALS[animalId].productEmoji;
                            break;
                          }
                        }

                        for (const cropId in CROPS) {
                          if (
                            CROPS[cropId].name.toLowerCase() ===
                            item.toLowerCase()
                          ) {
                            itemEmoji = CROPS[cropId].emoji;
                            break;
                          }
                        }

                        message += `   ${itemEmoji} ${item}: ${amount}\n`;
                      }
                    );

                    message += `üì¶ S·∫£n l∆∞·ª£ng: ${recipe.yield} ${recipe.name}\n`;
                    message += `üí° Ch·∫ø bi·∫øn: .farm ch·∫ø_bi·∫øn ${recipe.id}\n`;
                  });
                } else {
                  recipes.forEach((recipe) => {
                    message += `${recipe.emoji} ${recipe.name} (C·∫ßn ƒë·∫°t c·∫•p ${level})\n`;
                  });
                }
              }
            }

            return api.sendMessage(message, threadID, messageID);
          }

          const recipe = PROCESSING_RECIPES[recipeId];
          if (!recipe) {
            return api.sendMessage(
              `‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c "${recipeId}"!\n` +
                `üí° S·ª≠ d·ª•ng: .farm ch·∫ø_bi·∫øn ƒë·ªÉ xem danh s√°ch c√¥ng th·ª©c.`,
              threadID,
              messageID
            );
          }

          const currentLevel = calculateLevel(userFarm.exp).level;
          if (recipe.level > currentLevel) {
            return api.sendMessage(
              `‚ùå B·∫°n c·∫ßn ƒë·∫°t c·∫•p ƒë·ªô ${recipe.level} ƒë·ªÉ ch·∫ø bi·∫øn ${recipe.name}!\n` +
                `üë®‚Äçüåæ C·∫•p ƒë·ªô hi·ªán t·∫°i: ${currentLevel}`,
              threadID,
              messageID
            );
          }

          // Ki·ªÉm tra nguy√™n li·ªáu
          const missingIngredients = [];
          const requiredIngredients = {};

          for (const [item, amount] of Object.entries(recipe.ingredients)) {
            const requiredAmount = amount * quantity;
            requiredIngredients[item] = requiredAmount;

            const availableAmount = userFarm.inventory?.[item] || 0;
            if (availableAmount < requiredAmount) {
              missingIngredients.push({
                name: item,
                required: requiredAmount,
                available: availableAmount,
                missing: requiredAmount - availableAmount,
              });
            }
          }

          if (missingIngredients.length > 0) {
            let message = `‚ùå Kh√¥ng ƒë·ªß nguy√™n li·ªáu ƒë·ªÉ ch·∫ø bi·∫øn ${quantity} ${recipe.name}!\n\n`;
            message += `üìã NGUY√äN LI·ªÜU C·∫¶N THI·∫æT:\n`;

            for (const item of missingIngredients) {
              let itemEmoji = "üì¶";

              for (const animalId in ANIMALS) {
                if (ANIMALS[animalId].product === item.name) {
                  itemEmoji = ANIMALS[animalId].productEmoji;
                  break;
                }
              }

              message += `${itemEmoji} ${item.name}: ${item.available}/${item.required} (Thi·∫øu ${item.missing})\n`;
            }

            return api.sendMessage(message, threadID, messageID);
          }

          if (!userFarm.processing) userFarm.processing = {};

          if (
            userFarm.processing[recipeId] &&
            userFarm.processing[recipeId].status === "processing" &&
            userFarm.processing[recipeId].finishTime > Date.now()
          ) {
            const remaining = Math.ceil(
              (userFarm.processing[recipeId].finishTime - Date.now()) /
                (60 * 1000)
            );
            return api.sendMessage(
              `‚è≥ ${recipe.emoji} ${recipe.name} ƒëang ƒë∆∞·ª£c ch·∫ø bi·∫øn!\n` +
                `‚è±Ô∏è Ho√†n th√†nh sau: ${remaining} ph√∫t\n` +
                `üí° Quay l·∫°i sau ƒë·ªÉ nh·∫≠n s·∫£n ph·∫©m.`,
              threadID,
              messageID
            );
          }

          for (const [item, amount] of Object.entries(requiredIngredients)) {
            userFarm.inventory[item] -= amount;
            if (userFarm.inventory[item] <= 0) {
              delete userFarm.inventory[item];
            }
          }

          userFarm.processing[recipeId] = {
            recipeId,
            quantity,
            startTime: Date.now(),
            finishTime: Date.now() + recipe.time * 1000,
            status: "processing",
          };

          saveFarmData(farmData);

          return api.sendMessage(
            `‚úÖ B·∫Øt ƒë·∫ßu ch·∫ø bi·∫øn ${quantity} ${recipe.emoji} ${recipe.name}!\n` +
              `‚è±Ô∏è Th·ªùi gian: ${Math.floor(recipe.time / 60)} ph√∫t\n` +
              `üí∞ Gi√° tr·ªã: ${formatNumber(
                recipe.value * recipe.yield * quantity
              )} Xu\n` +
              `üìä Kinh nghi·ªám: +${recipe.exp * quantity} EXP\n\n` +
              `üí° Ki·ªÉm tra: .farm ch·∫ø_bi·∫øn_thu ƒë·ªÉ nh·∫≠n s·∫£n ph·∫©m khi ho√†n th√†nh`,
            threadID,
            messageID
          );
        }

        case "ch·∫ø_bi·∫øn_thu":
        case "che_bien_thu":
        case "collect_processed": {
          if (
            !userFarm.processing ||
            Object.keys(userFarm.processing).length === 0
          ) {
            return api.sendMessage(
              `‚ùå B·∫°n kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒëang ƒë∆∞·ª£c ch·∫ø bi·∫øn!`,
              threadID,
              messageID
            );
          }

          let completedRecipes = [];
          let pendingRecipes = [];
          let totalExp = 0;
          let message = "";

          for (const [recipeId, process] of Object.entries(
            userFarm.processing
          )) {
            const recipe = PROCESSING_RECIPES[recipeId];
            if (!recipe) continue;

            if (
              process.status === "processing" &&
              process.finishTime <= Date.now()
            ) {
              completedRecipes.push({
                recipe,
                process,
                totalValue: recipe.value * recipe.yield * process.quantity,
              });

              if (!userFarm.inventory) userFarm.inventory = {};
              if (!userFarm.inventory[recipe.name])
                userFarm.inventory[recipe.name] = 0;
              userFarm.inventory[recipe.name] +=
                recipe.yield * process.quantity;

              totalExp += recipe.exp * process.quantity;

              delete userFarm.processing[recipeId];
            } else if (process.status === "processing") {
              const remaining = Math.ceil(
                (process.finishTime - Date.now()) / (60 * 1000)
              );
              pendingRecipes.push({
                recipe,
                process,
                remaining,
              });
            }
          }

          userFarm.exp += totalExp;

          const oldLevel = calculateLevel(userFarm.exp - totalExp).level;
          const newLevel = calculateLevel(userFarm.exp).level;
          let levelUpMessage = "";

          if (newLevel > oldLevel) {
            const newLevelData = LEVELS[newLevel - 1];
            levelUpMessage =
              `\n\nüéâ CH√öC M·ª™NG! B·∫°n ƒë√£ l√™n c·∫•p ${newLevel}!\n` +
              `üèÜ Danh hi·ªáu m·ªõi: ${newLevelData.title}\n` +
              `üí∞ Ph·∫ßn th∆∞·ªüng: +${formatNumber(newLevelData.reward)} Xu\n`;

            await updateBalance(senderID, newLevelData.reward);

            if (newLevelData.plotSize > userFarm.plots.length) {
              const newPlotsCount =
                newLevelData.plotSize - userFarm.plots.length;
              levelUpMessage += `üå± M·ªü kh√≥a: ${newPlotsCount} √¥ ƒë·∫•t m·ªõi\n`;

              for (let i = 0; i < newPlotsCount; i++) {
                userFarm.plots.push({
                  id: userFarm.plots.length,
                  status: "empty",
                  crop: null,
                  plantedAt: null,
                  water: 0,
                  lastWatered: null,
                });
              }
            }
          }

          saveFarmData(farmData);

          if (completedRecipes.length > 0) {
            message = `‚úÖ CH·∫æ BI·∫æN HO√ÄN TH√ÄNH!\n` + `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

            completedRecipes.forEach((item) => {
              message +=
                `${item.recipe.emoji} ${item.process.quantity} ${item.recipe.name} ƒë√£ ho√†n th√†nh!\n` +
                `üí∞ Gi√° tr·ªã: ${formatNumber(item.totalValue)} Xu\n` +
                `üìä EXP: +${item.recipe.exp * item.process.quantity}\n\n`;
            });

            message +=
              `üì¶ T·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho!\n` +
              `üí° B√°n s·∫£n ph·∫©m: .farm b√°n <t√™n_s·∫£n_ph·∫©m> <s·ªë_l∆∞·ª£ng>`;
          } else if (pendingRecipes.length > 0) {
            message = `‚è≥ S·∫¢N PH·∫®M ƒêANG CH·∫æ BI·∫æN\n` + `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

            pendingRecipes.forEach((item) => {
              message +=
                `${item.recipe.emoji} ${item.process.quantity} ${item.recipe.name}\n` +
                `‚è±Ô∏è Ho√†n th√†nh sau: ${item.remaining} ph√∫t\n\n`;
            });

            message += `üí° Quay l·∫°i sau ƒë·ªÉ nh·∫≠n s·∫£n ph·∫©m.`;
          } else {
            return api.sendMessage(
              `‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒëang ch·∫ø bi·∫øn!`,
              threadID,
              messageID
            );
          }

          message += levelUpMessage;
          return api.sendMessage(message, threadID, messageID);
        }
        case "kho":
        case "warehouse":
        case "inventory": {
          if (
            !userFarm.inventory ||
            Object.keys(userFarm.inventory).length === 0
          ) {
            return api.sendMessage(
              `‚ùå Kho h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!\n` +
                `üí° Thu ho·∫°ch c√¢y tr·ªìng v√† v·∫≠t nu√¥i ƒë·ªÉ c√≥ s·∫£n ph·∫©m.`,
              threadID,
              messageID
            );
          }

          const categories = {
            crops: { name: "N√¥ng s·∫£n", emoji: "üåæ", items: {} },
            animal: { name: "S·∫£n ph·∫©m v·∫≠t nu√¥i", emoji: "ü•©", items: {} },
            processed: { name: "S·∫£n ph·∫©m ch·∫ø bi·∫øn", emoji: "üç≤", items: {} },
            event: { name: "V·∫≠t ph·∫©m s·ª± ki·ªán", emoji: "üéÅ", items: {} },
            other: { name: "Kh√°c", emoji: "üì¶", items: {} },
          };

          let totalValue = 0;
          Object.entries(userFarm.inventory).forEach(([product, count]) => {
            if (count <= 0) return;

            let found = false;
            let productInfo = {
              name: product,
              emoji: "üì¶",
              price: 0,
              category: "other",
            };

            for (const cropId in CROPS) {
              if (CROPS[cropId].name.toLowerCase() === product.toLowerCase()) {
                productInfo = {
                  name: product,
                  emoji: CROPS[cropId].emoji,
                  price: CROPS[cropId].yield,
                  category: "crops",
                };
                found = true;
                break;
              }
            }

            if (!found) {
              for (const animalId in ANIMALS) {
                if (
                  ANIMALS[animalId].product.toLowerCase() ===
                  product.toLowerCase()
                ) {
                  productInfo = {
                    name: product,
                    emoji: ANIMALS[animalId].productEmoji,
                    price: ANIMALS[animalId].productPrice,
                    category: "animal",
                  };
                  found = true;
                  break;
                }
              }
            }

            if (!found) {
              const currentEvent = checkEvent();
              if (currentEvent && currentEvent.crops) {
                for (const cropId in currentEvent.crops) {
                  if (
                    currentEvent.crops[cropId].name.toLowerCase() ===
                    product.toLowerCase()
                  ) {
                    productInfo = {
                      name: product,
                      emoji: currentEvent.crops[cropId].emoji,
                      price: currentEvent.crops[cropId].yield,
                      category: "event",
                    };
                    found = true;
                    break;
                  }
                }
              }
            }

            categories[productInfo.category].items[product] = {
              count,
              emoji: productInfo.emoji,
              price: productInfo.price,
              value: count * productInfo.price,
            };

            totalValue += count * productInfo.price;
          });

          let message = `üè¨ KHO H√ÄNG C·ª¶A B·∫†N üè¨\n` + `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

          let hasItems = false;
          for (const [catId, category] of Object.entries(categories)) {
            const items = Object.entries(category.items);
            if (items.length === 0) continue;

            hasItems = true;
            message += `${category.emoji} ${category.name.toUpperCase()}:\n`;

            items.forEach(([itemName, item]) => {
              message += `‚î£‚û§ ${item.emoji} ${itemName}: ${
                item.count
              } (${formatNumber(item.value)} Xu)\n`;
              if (item.count > 1) {
                message += `‚îÉ  üí° B√°n t·∫•t c·∫£: .farm b√°n ${itemName}\n`;
                message += `‚îÉ  üí° B√°n m·ªôt ph·∫ßn: .farm b√°n ${itemName} <s·ªë l∆∞·ª£ng>\n`;
              } else {
                message += `‚îÉ  üí° B√°n: .farm b√°n ${itemName}\n`;
              }
            });
            message += `\n`;
          }

          message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
          message += `üí∞ T·ªïng gi√° tr·ªã kho: ${formatNumber(totalValue)} Xu\n`;
          message += `üìä S·ªë l∆∞·ª£ng v·∫≠t ph·∫©m: ${
            Object.keys(userFarm.inventory).length
          }\n`;
          message += `üí° B√°n t·∫•t c·∫£ s·∫£n ph·∫©m c√πng lo·∫°i: .farm b√°n <t√™n_s·∫£n_ph·∫©m>\n`;
          message += `üí° B√°n s·ªë l∆∞·ª£ng c·ª• th·ªÉ: .farm b√°n <t√™n_s·∫£n_ph·∫©m> <s·ªë_l∆∞·ª£ng>`;

          return api.sendMessage(message, threadID, messageID);
        }
        case "info":
        case "th√¥ng_tin": {
          const infoTarget = target[1]?.toLowerCase();

          if (infoTarget) {
            if (CROPS[infoTarget]) {
              const crop = CROPS[infoTarget];
              return api.sendMessage(
                `üìä TH√îNG TIN C√ÇY TR·ªíNG\n` +
                  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                  `${crop.emoji} T√™n: ${crop.name}\n` +
                  `üí∞ Gi√° gi·ªëng: ${formatNumber(crop.price)} Xu\n` +
                  `‚è±Ô∏è Th·ªùi gian ph√°t tri·ªÉn: ${
                    Math.floor(crop.time / 3600) > 0
                      ? `${Math.floor(crop.time / 3600)} gi·ªù ${Math.floor(
                          (crop.time % 3600) / 60
                        )} ph√∫t`
                      : `${Math.floor(crop.time / 60)} ph√∫t`
                  }\n` +
                  `üíß N∆∞·ªõc c·∫ßn thi·∫øt: ${crop.water} l·∫ßn t∆∞·ªõi\n` +
                  `üíµ Thu ho·∫°ch: ${formatNumber(crop.yield)} Xu\n` +
                  `üìà L·ª£i nhu·∫≠n: ${formatNumber(
                    crop.yield - crop.price
                  )} Xu\n` +
                  `üìä Kinh nghi·ªám: ${crop.exp} EXP\n` +
                  `üèÜ C·∫•p ƒë·ªô y√™u c·∫ßu: ${crop.level}\n` +
                  `üìù M√¥ t·∫£: ${crop.description}\n`,
                threadID,
                messageID
              );
            }

            if (ANIMALS[infoTarget]) {
              const animal = ANIMALS[infoTarget];
              return api.sendMessage(
                `üìä TH√îNG TIN V·∫¨T NU√îI\n` +
                  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                  `${animal.emoji} T√™n: ${animal.name}\n` +
                  `üí∞ Gi√° mua: ${formatNumber(animal.price)} Xu\n` +
                  `‚è±Ô∏è Chu k·ª≥ s·∫£n xu·∫•t: ${Math.floor(
                    animal.productTime / 3600
                  )} gi·ªù\n` +
                  `üç≤ Chi ph√≠ th·ª©c ƒÉn: ${formatNumber(animal.feed)} Xu/l·∫ßn\n` +
                  `${animal.productEmoji} S·∫£n ph·∫©m: ${animal.product}\n` +
                  `üíµ Gi√° tr·ªã: ${formatNumber(animal.productPrice)} Xu\n` +
                  `üìà L·ª£i nhu·∫≠n/ng√†y: ${formatNumber(
                    (24 / (animal.productTime / 3600)) * animal.productPrice -
                      (24 / (animal.productTime / 3600)) * animal.feed
                  )} Xu\n` +
                  `üèÜ C·∫•p ƒë·ªô y√™u c·∫ßu: ${animal.level}\n` +
                  `üìù M√¥ t·∫£: ${animal.description}`,
                threadID,
                messageID
              );
            }

            if (SHOP_ITEMS[infoTarget]) {
              const item = SHOP_ITEMS[infoTarget];
              return api.sendMessage(
                `üìä TH√îNG TIN V·∫¨T PH·∫®M\n` +
                  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                  `${item.emoji} T√™n: ${item.name}\n` +
                  `üí∞ Gi√° mua: ${formatNumber(item.price)} Xu\n` +
                  `‚è±Ô∏è Th·ªùi h·∫°n: ${
                    item.duration
                      ? Math.floor(item.duration / (24 * 60 * 60 * 1000)) +
                        " ng√†y"
                      : "Vƒ©nh vi·ªÖn"
                  }\n` +
                  `üîÆ Hi·ªáu ·ª©ng: ${item.description}\n` +
                  `üèÜ C·∫•p ƒë·ªô y√™u c·∫ßu: ${item.level}`,
                threadID,
                messageID
              );
            }

            return api.sendMessage(
              `‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ "${target[1]}"!\n` +
                `üí° H√£y nh·∫≠p ƒë√∫ng ID c·ªßa c√¢y tr·ªìng, v·∫≠t nu√¥i ho·∫∑c v·∫≠t ph·∫©m.\n` +
                `‚Üí V√≠ d·ª•: .farm info lua (L√∫a)\n` +
                `‚Üí V√≠ d·ª•: .farm info ga (G√†)`,
              threadID,
              messageID
            );
          }

          const level = calculateLevel(userFarm.exp);
          const nextLevel = level.level < 10 ? LEVELS[level.level] : null;

          let message =
            `„Äî üåæ TH√îNG TIN TRANG TR·∫†I üåæ „Äï\n` +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n` +
            `üèÜ TH√îNG TIN CHUNG\n` +
            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
            `‚î£‚û§ üë®‚Äçüåæ C·∫•p ƒë·ªô: ${level.level} - ${level.title}\n` +
            `‚î£‚û§ üìä EXP: ${userFarm.exp}/${
              nextLevel ? nextLevel.exp : "MAX"
            }\n` +
            `‚îÉ   ${"‚ñ∞".repeat(
              Math.floor(
                ((userFarm.exp -
                  (level.level > 1 ? LEVELS[level.level - 2].exp : 0)) /
                  ((nextLevel ? nextLevel.exp : userFarm.exp) -
                    (level.level > 1 ? LEVELS[level.level - 2].exp : 0))) *
                  10
              )
            )}${"‚ñ±".repeat(
              10 -
                Math.floor(
                  ((userFarm.exp -
                    (level.level > 1 ? LEVELS[level.level - 2].exp : 0)) /
                    ((nextLevel ? nextLevel.exp : userFarm.exp) -
                      (level.level > 1 ? LEVELS[level.level - 2].exp : 0))) *
                    10
                )
            )}\n` +
            `‚î£‚û§ üè° Ng√†y th√†nh l·∫≠p: ${new Date(
              userFarm.createdAt
            ).toLocaleDateString("vi-VN")}\n` +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n`;

          const weather = getCurrentWeather(senderID);
          message +=
            `üå§Ô∏è ƒêI·ªÄU KI·ªÜN TH·ªúI TI·∫æT\n` +
            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
            `‚î£‚û§ ${weather.emoji} ${weather.name}\n` +
            `‚î£‚û§ ${weather.description}\n` +
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n`;

          let plotsReady = 0;
          let plotsGrowing = 0;
          let plotsEmpty = 0;
          let plotsDamaged = 0;

          userFarm.plots.forEach((plot) => {
            if (plot.status === "ready") plotsReady++;
            else if (plot.status === "growing") plotsGrowing++;
            else if (plot.status === "empty") plotsEmpty++;
            else if (plot.status === "damaged") plotsDamaged++;
          });

          message +=
            `üå± T√åNH H√åNH TR·ªíNG TR·ªåT\n` +
            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
            `‚î£‚û§ T·ªïng s·ªë √¥ ƒë·∫•t: ${userFarm.plots.length} √¥\n` +
            `‚î£‚û§ üìä Th·ªëng k√™:\n` +
            `‚îÉ   ‚úÖ S·∫µn s√†ng thu ho·∫°ch: ${plotsReady} √¥\n` +
            `‚îÉ   üåø ƒêang ph√°t tri·ªÉn: ${plotsGrowing} √¥\n` +
            `‚îÉ   ‚ö†Ô∏è B·ªã h∆∞ h·ªèng: ${plotsDamaged} √¥\n` +
            `‚îÉ   üî≤ C√≤n tr·ªëng: ${plotsEmpty} √¥\n`;

          const growingPlots = userFarm.plots.filter(
            (plot) => plot.status === "growing"
          );
          if (growingPlots.length > 0) {
            message += `‚î£‚û§ üåø C√ÇY ƒêANG TR·ªíNG:\n`;

            const cropCounts = {};
            growingPlots.forEach((plot) => {
              if (!plot.crop) return;
              const cropId = plot.crop;
              const cropConfig =
                CROPS[cropId] ||
                (checkEvent() && checkEvent().crops
                  ? checkEvent().crops[cropId]
                  : null);

              if (cropConfig) {
                if (!cropCounts[cropId]) {
                  cropCounts[cropId] = {
                    count: 0,
                    name: cropConfig.name,
                    emoji: cropConfig.emoji,
                  };
                }
                cropCounts[cropId].count++;
              }
            });

            Object.values(cropCounts).forEach((crop) => {
              message += `‚îÉ   ${crop.emoji} ${crop.name}: ${crop.count} √¥\n`;
            });
          }
          message += `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n`;

          const animalCount = Object.keys(userFarm.animals || {}).length;
          message +=
            `üêÑ T√åNH H√åNH CHƒÇN NU√îI\n` +
            `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n` +
            `‚î£‚û§ T·ªïng s·ªë v·∫≠t nu√¥i: ${animalCount} con\n`;

          if (animalCount > 0) {
            message += `‚î£‚û§ üìä TH·ªêNG K√ä:\n`;

            const animalCounts = {};
            Object.entries(userFarm.animals || {}).forEach(([_, animal]) => {
              if (!animal.type) return;
              const animalType = animal.type;
              if (!animalCounts[animalType]) {
                animalCounts[animalType] = {
                  count: 0,
                  ready: 0,
                  name: ANIMALS[animalType]?.name || animalType,
                  emoji: ANIMALS[animalType]?.emoji || "üêæ",
                };
              }
              animalCounts[animalType].count++;
              if (animal.productReady) animalCounts[animalType].ready++;
            });

            Object.values(animalCounts).forEach((animal) => {
              message += `‚îÉ   ${animal.emoji} ${animal.name}: ${animal.count} con (${animal.ready} s·∫µn s√†ng)\n`;
            });

            let estimatedDailyIncome = 0;
            Object.entries(animalCounts).forEach(([type, info]) => {
              if (ANIMALS[type]) {
                const animal = ANIMALS[type];
                const dailyYield = 24 / (animal.productTime / 3600);
                estimatedDailyIncome +=
                  dailyYield * animal.productPrice * info.count;
              }
            });
            message += `‚î£‚û§ üí∞ ∆Ø·ªõc t√≠nh thu nh·∫≠p/ng√†y: ${formatNumber(
              estimatedDailyIncome
            )} Xu\n`;
          }

          message += `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n`;

          const inventoryEntries = Object.entries(userFarm.inventory || {});
          if (inventoryEntries.length > 0) {
            message += `üß∫ KHO H√ÄNG\n` + `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n`;

            let totalInventoryValue = 0;
            inventoryEntries.forEach(([item, quantity]) => {
              if (quantity <= 0) return;

              let emoji = "üì¶";
              let productPrice = 0;

              for (const animalId in ANIMALS) {
                if (ANIMALS[animalId].product === item) {
                  emoji = ANIMALS[animalId].productEmoji;
                  productPrice = ANIMALS[animalId].productPrice;
                  break;
                }
              }

              const itemValue = quantity * productPrice;
              totalInventoryValue += itemValue;
              message += `‚î£‚û§ ${emoji} ${item}: ${quantity} (${formatNumber(
                itemValue
              )} Xu)\n`;
            });

            message +=
              `‚î£‚û§ üí∞ T·ªïng gi√° tr·ªã: ${formatNumber(totalInventoryValue)} Xu\n` +
              `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n`;
          }

          const activeItems = Object.entries(userFarm.items || {}).filter(
            ([_, item]) =>
              item.active && (!item.expiry || item.expiry > Date.now())
          );

          if (activeItems.length > 0) {
            message += `üîÆ V·∫¨T PH·∫®M ƒêANG S·ª¨ D·ª§NG\n` + `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n`;

            activeItems.forEach(([itemId, item]) => {
              const shopItem = SHOP_ITEMS[itemId];
              if (!shopItem) return;

              const timeLeft = item.expiry
                ? Math.max(
                    0,
                    Math.floor((item.expiry - Date.now()) / (60 * 60 * 1000))
                  )
                : "‚àû";

              message += `‚î£‚û§ ${shopItem.emoji} ${shopItem.name}: ${
                timeLeft === "‚àû" ? "Vƒ©nh vi·ªÖn" : `${timeLeft} gi·ªù c√≤n l·∫°i`
              }\n`;
            });

            message += `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n`;
          }

          const effects = applyItemEffects(userFarm);
          message += `üîÑ HI·ªÜU ·ª®NG ƒêANG √ÅP D·ª§NG\n` + `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n`;

          if (effects.growBoost !== 1) {
            message += `‚î£‚û§ ‚è±Ô∏è TƒÉng t·ªëc ph√°t tri·ªÉn: ${Math.round(
              (1 - effects.growBoost) * 100
            )}%\n`;
          }

          if (effects.yieldBoost !== 1) {
            message += `‚î£‚û§ üåø TƒÉng s·∫£n l∆∞·ª£ng: ${Math.round(
              (effects.yieldBoost - 1) * 100
            )}%\n`;
          }

          if (effects.expBoost !== 1) {
            message += `‚î£‚û§ üìä TƒÉng kinh nghi·ªám: ${Math.round(
              (effects.expBoost - 1) * 100
            )}%\n`;
          }

          if (effects.autoPlant) {
            message += `‚î£‚û§ üå± T·ª± ƒë·ªông tr·ªìng l·∫°i c√¢y sau thu ho·∫°ch\n`;
          }

          if (effects.autoPlant) {
            message += `‚î£‚û§ üå± T·ª± ƒë·ªông tr·ªìng l·∫°i c√¢y sau thu ho·∫°ch\n`;
          }

          if (effects.autoWater) {
            message += `‚î£‚û§ üíß T·ª± ƒë·ªông t∆∞·ªõi c√¢y m·ªói 4 gi·ªù\n`;
          }

          message +=
            `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n` +
            `üí° Xem chi ti·∫øt v·ªÅ c√¢y/v·∫≠t nu√¥i:\n‚Üí .farm info <t√™n_c√¢y/t√™n_v·∫≠t_nu√¥i>`;
          return api.sendMessage(message, threadID, messageID);
        }

        case "t∆∞·ªõi":
        case "tuoi":
        case "water": {
          const plotNumber = parseInt(target[1]) - 1;

          // Auto-water all plots when no specific plot is mentioned
          if (isNaN(plotNumber)) {
            // Find all plots that need watering
            let needWaterPlots = userFarm.plots.filter((plot) => {
              if (plot.status !== "growing") return false;

              const cropId = plot.crop;
              if (!cropId) return false;

              const cropConfig =
                CROPS[cropId] ||
                (checkEvent() && checkEvent().crops
                  ? checkEvent().crops[cropId]
                  : null);

              if (!cropConfig || cropConfig.water === 0) return false;
              return plot.water < cropConfig.water;
            });

            if (needWaterPlots.length === 0) {
              return api.sendMessage(
                `‚úÖ T·∫•t c·∫£ c√¢y tr·ªìng ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c t∆∞·ªõi ƒë·ªß n∆∞·ªõc ho·∫∑c kh√¥ng c·∫ßn t∆∞·ªõi!`,
                threadID,
                messageID
              );
            }

            // Water all plots that need it
            let wateredCount = 0;
            let wateredCrops = {};

            needWaterPlots.forEach((plot) => {
              const cropId = plot.crop;
              const cropConfig =
                CROPS[cropId] ||
                (checkEvent() && checkEvent().crops
                  ? checkEvent().crops[cropId]
                  : null);

              if (cropConfig) {
                plot.water = Math.min(cropConfig.water, plot.water + 1);
                plot.lastWatered = Date.now();
                wateredCount++;

                // Track crops for message
                if (!wateredCrops[cropId]) {
                  wateredCrops[cropId] = {
                    name: cropConfig.name,
                    emoji: cropConfig.emoji,
                    count: 0,
                  };
                }
                wateredCrops[cropId].count++;
              }
            });

            saveFarmData(farmData);

            // Generate message
            let message = `‚úÖ ƒê√£ t∆∞·ªõi n∆∞·ªõc cho ${wateredCount} √¥ ƒë·∫•t th√†nh c√¥ng!\n\n`;
            message += `üìã CHI TI·∫æT:\n`;

            Object.values(wateredCrops).forEach((crop) => {
              message += `${crop.emoji} ${crop.name}: ${crop.count} √¥\n`;
            });

            return api.sendMessage(message, threadID, messageID);
          }

          // Original code for watering a specific plot
          if (plotNumber < 0 || plotNumber >= userFarm.plots.length) {
            return api.sendMessage(
              `‚ùå √î ƒë·∫•t kh√¥ng t·ªìn t·∫°i!\n` +
                `üå± B·∫°n c√≥ ${userFarm.plots.length} √¥ ƒë·∫•t (t·ª´ 1 ƒë·∫øn ${userFarm.plots.length})`,
              threadID,
              messageID
            );
          }

          const plot = userFarm.plots[plotNumber];
          if (plot.status !== "growing") {
            return api.sendMessage(
              `‚ùå √î ƒë·∫•t ${plotNumber + 1} kh√¥ng c√≥ c√¢y ƒëang ph√°t tri·ªÉn!`,
              threadID,
              messageID
            );
          }

          const cropConfig =
            CROPS[plot.crop] ||
            (checkEvent() && checkEvent().crops
              ? checkEvent().crops[plot.crop]
              : null);

          if (!cropConfig) {
            return api.sendMessage(
              `‚ùå L·ªói d·ªØ li·ªáu c√¢y tr·ªìng!`,
              threadID,
              messageID
            );
          }

          if (cropConfig.water === 0) {
            return api.sendMessage(
              `‚ùå ${cropConfig.name} kh√¥ng c·∫ßn t∆∞·ªõi n∆∞·ªõc!`,
              threadID,
              messageID
            );
          }

          if (plot.water >= cropConfig.water) {
            return api.sendMessage(
              `‚ùå ${cropConfig.name} ƒë√£ ƒë∆∞·ª£c t∆∞·ªõi ƒë·ªß n∆∞·ªõc!`,
              threadID,
              messageID
            );
          }

          plot.water = Math.min(cropConfig.water, plot.water + 1);
          plot.lastWatered = Date.now();

          saveFarmData(farmData);

          return api.sendMessage(
            `‚úÖ ƒê√£ t∆∞·ªõi n∆∞·ªõc cho ${cropConfig.emoji} ${
              cropConfig.name
            } t·∫°i √¥ ƒë·∫•t ${plotNumber + 1}!\n` +
              `üíß N∆∞·ªõc hi·ªán t·∫°i: ${Math.round(plot.water)}/${cropConfig.water}`,
            threadID,
            messageID
          );
        }

        case "thu":
        case "thu_hoach":
        case "harvest": {
          const plotNumber = parseInt(target[1]) - 1;

          if (isNaN(plotNumber)) {
            let readyPlots = userFarm.plots.filter(
              (plot) => plot.status === "ready"
            );

            if (readyPlots.length === 0) {
              return api.sendMessage(
                `‚ùå Kh√¥ng c√≥ c√¢y n√†o s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch!\n` +
                  `üí° S·ª≠ d·ª•ng .farm t∆∞·ªõi ƒë·ªÉ t∆∞·ªõi n∆∞·ªõc cho c√¢y tr·ªìng ho·∫∑c ƒë·ª£i c√¢y ph√°t tri·ªÉn.`,
                threadID,
                messageID
              );
            }

            let totalExp = 0;
            let harvestedCount = 0;
            let autoReplantCount = 0;
            let harvestDetails = {};

            try {
              for (const plot of readyPlots) {
                const cropId = plot.crop;
                if (!cropId) continue;

                let cropConfig = CROPS[cropId];
                if (!cropConfig) {
                  const currentEvent = checkEvent();
                  if (
                    currentEvent &&
                    currentEvent.crops &&
                    currentEvent.crops[cropId]
                  ) {
                    cropConfig = currentEvent.crops[cropId];
                  } else {
                    continue;
                  }
                }

                const effects = applyItemEffects(userFarm);

                const yieldAmount = Math.floor(
                  cropConfig.yield * effects.yieldBoost
                );
                const expAmount = Math.floor(cropConfig.exp * effects.expBoost);

                if (!userFarm.inventory) userFarm.inventory = {};

                const productName = cropConfig.name.toLowerCase();
                if (!userFarm.inventory[productName])
                  userFarm.inventory[productName] = 0;

                userFarm.inventory[productName]++;

                totalExp += expAmount;
                harvestedCount++;

                if (!harvestDetails[cropId]) {
                  harvestDetails[cropId] = {
                    name: cropConfig.name,
                    emoji: cropConfig.emoji,
                    count: 0,
                    exp: 0,
                  };
                }
                harvestDetails[cropId].count++;
                harvestDetails[cropId].exp += expAmount;

                plot.status = "empty";
                plot.crop = null;
                plot.plantedAt = null;
                plot.water = 0;
                plot.lastWatered = null;

                if (effects.autoPlant) {
                  const userBalance = await getBalance(senderID);
                  if (userBalance >= cropConfig.price) {
                    await updateBalance(senderID, -cropConfig.price);
                    plot.status = "growing";
                    plot.crop = cropId;
                    plot.plantedAt = Date.now();
                    plot.water = cropConfig.water > 0 ? 1 : 0;
                    plot.lastWatered = Date.now();
                    autoReplantCount++;
                  }
                }
              }

              userFarm.exp += totalExp;

              const oldLevel = calculateLevel(userFarm.exp - totalExp).level;
              const newLevel = calculateLevel(userFarm.exp).level;

              saveFarmData(farmData);

              let message =
                `‚úÖ THU HO·∫†CH TH√ÄNH C√îNG!\n` +
                `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                `üåæ ƒê√£ thu ho·∫°ch: ${harvestedCount} c√¢y tr·ªìng\n`;

              if (autoReplantCount > 0) {
                message += `üå± T·ª± ƒë·ªông tr·ªìng l·∫°i: ${autoReplantCount} c√¢y\n`;
              }

              message += `\nüìã CHI TI·∫æT THU HO·∫†CH:\n`;

              Object.values(harvestDetails).forEach((details) => {
                message += `${details.emoji} ${details.name}: ${details.count} (v√†o kho), +${details.exp} EXP\n`;
              });

              message += `\nüìä T·ªïng kinh nghi·ªám: +${totalExp} EXP\n`;
              message += `üì¶ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o kho!\n`;
              message += `üí° Xem kho: .farm kho\n`;

              if (newLevel > oldLevel) {
                const newLevelData = LEVELS[newLevel - 1];
                message += `\n\nüéâ CH√öC M·ª™NG! B·∫°n ƒë√£ l√™n c·∫•p ${newLevel}!\n`;
                message += `üèÜ Danh hi·ªáu m·ªõi: ${newLevelData.title}\n`;
                message += `üí∞ Ph·∫ßn th∆∞·ªüng: +${formatNumber(
                  newLevelData.reward
                )} Xu\n`;

                if (newLevelData.plotSize > userFarm.plots.length) {
                  const newPlotsCount =
                    newLevelData.plotSize - userFarm.plots.length;
                  message += `üå± M·ªü kh√≥a: ${newPlotsCount} √¥ ƒë·∫•t m·ªõi\n`;

                  for (let i = 0; i < newPlotsCount; i++) {
                    userFarm.plots.push({
                      id: userFarm.plots.length,
                      status: "empty",
                      crop: null,
                      plantedAt: null,
                      water: 0,
                      lastWatered: null,
                    });
                  }

                  await updateBalance(senderID, newLevelData.reward);
                  saveFarmData(farmData);
                }
              }

              updateQuestProgress(senderID, "farm_harvest", harvestedCount);

              return api.sendMessage(message, threadID, messageID);
            } catch (error) {
              console.error("Error during mass harvest:", error);
              return api.sendMessage(
                `‚ùå C√≥ l·ªói x·∫£y ra khi thu ho·∫°ch: ${error.message}\n` +
                  `üí° H√£y th·ª≠ thu ho·∫°ch t·ª´ng √¥ ri√™ng: .farm thu [s·ªë √¥]`,
                threadID,
                messageID
              );
            }
          }

          const plot = userFarm.plots[plotNumber];
          if (!plot) {
            return api.sendMessage(
              `‚ùå √î ƒë·∫•t s·ªë ${plotNumber + 1} kh√¥ng t·ªìn t·∫°i!\n` +
                `üå± B·∫°n c√≥ ${userFarm.plots.length} √¥ ƒë·∫•t (t·ª´ 1 ƒë·∫øn ${userFarm.plots.length})`,
              threadID,
              messageID
            );
          }

          if (plot.status !== "ready") {
            return api.sendMessage(
              `‚ùå √î ƒë·∫•t s·ªë ${plotNumber + 1} ch∆∞a s·∫µn s√†ng thu ho·∫°ch!\n` +
                `üå± Tr·∫°ng th√°i hi·ªán t·∫°i: ${plot.status}`,
              threadID,
              messageID
            );
          }

          const cropId = plot.crop;
          if (!cropId) {
            return api.sendMessage(
              `‚ùå L·ªói d·ªØ li·ªáu: Kh√¥ng t√¨m th·∫•y c√¢y tr·ªìng trong √¥ ${
                plotNumber + 1
              }!`,
              threadID,
              messageID
            );
          }

          let cropConfig = CROPS[cropId];
          if (!cropConfig) {
            const currentEvent = checkEvent();
            if (
              currentEvent &&
              currentEvent.crops &&
              currentEvent.crops[cropId]
            ) {
              cropConfig = currentEvent.crops[cropId];
            } else {
              return api.sendMessage(
                `‚ùå L·ªói d·ªØ li·ªáu: Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ c√¢y tr·ªìng!`,
                threadID,
                messageID
              );
            }
          }

          const effects = applyItemEffects(userFarm);
          const expAmount = Math.floor(cropConfig.exp * effects.expBoost);

          if (!userFarm.inventory) userFarm.inventory = {};

          const productName = cropConfig.name.toLowerCase();
          if (!userFarm.inventory[productName])
            userFarm.inventory[productName] = 0;

          userFarm.inventory[productName]++;
          userFarm.exp += expAmount;

          const oldLevel = calculateLevel(userFarm.exp - expAmount).level;
          const newLevel = calculateLevel(userFarm.exp).level;

          plot.status = "empty";
          plot.crop = null;
          plot.plantedAt = null;
          plot.water = 0;
          plot.lastWatered = null;

          let replantMessage = "";
          if (effects.autoPlant) {
            const userBalance = await getBalance(senderID);
            if (userBalance >= cropConfig.price) {
              await updateBalance(senderID, -cropConfig.price);
              plot.status = "growing";
              plot.crop = cropId;
              plot.plantedAt = Date.now();
              plot.water = cropConfig.water > 0 ? 1 : 0;
              plot.lastWatered = Date.now();
              replantMessage = `\nüå± ƒê√£ t·ª± ƒë·ªông tr·ªìng l·∫°i ${cropConfig.name}!`;
            }
          }

          saveFarmData(farmData);

          let message =
            `‚úÖ Thu ho·∫°ch th√†nh c√¥ng ${cropConfig.emoji} ${
              cropConfig.name
            } t·∫°i √¥ ƒë·∫•t ${plotNumber + 1}!\n` +
            `üì¶ ƒê√£ th√™m 1 ${cropConfig.name.toLowerCase()} v√†o kho!\n` +
            `üìä Kinh nghi·ªám: +${expAmount} EXP` +
            replantMessage;

          if (newLevel > oldLevel) {
            const newLevelData = LEVELS[newLevel - 1];
            message += `\n\nüéâ CH√öC M·ª™NG! B·∫°n ƒë√£ l√™n c·∫•p ${newLevel}!\n`;
            message += `üèÜ Danh hi·ªáu m·ªõi: ${newLevelData.title}\n`;
            message += `üí∞ Ph·∫ßn th∆∞·ªüng: +${formatNumber(
              newLevelData.reward
            )} Xu\n`;

            if (newLevelData.plotSize > userFarm.plots.length) {
              const newPlotsCount =
                newLevelData.plotSize - userFarm.plots.length;
              message += `üå± M·ªü kh√≥a: ${newPlotsCount} √¥ ƒë·∫•t m·ªõi`;

              for (let i = 0; i < newPlotsCount; i++) {
                userFarm.plots.push({
                  id: userFarm.plots.length,
                  status: "empty",
                  crop: null,
                  plantedAt: null,
                  water: 0,
                  lastWatered: null,
                });
              }
            }

            await updateBalance(senderID, newLevelData.reward);
            saveFarmData(farmData);
          }

          updateQuestProgress(senderID, "farm_harvest", 1);

          return api.sendMessage(message, threadID, messageID);
        }
        case "help":
        case "h∆∞·ªõng_d·∫´n": {
          const helpPage = parseInt(target[1]) || 1;

          if (helpPage === 1) {
            return api.sendMessage(
              `üåæ N√îNG TR·∫†I VUI V·∫∫ - H∆Ø·ªöNG D·∫™N üåæ\n` +
                `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                `üî∞ T·ªîNG QUAN:\n` +
                `‚Ä¢ X√¢y d·ª±ng v√† ph√°t tri·ªÉn trang tr·∫°i c·ªßa ri√™ng b·∫°n\n` +
                `‚Ä¢ Tr·ªìng c√¢y, thu ho·∫°ch n√¥ng s·∫£n\n` +
                `‚Ä¢ ChƒÉn nu√¥i c√°c lo·∫°i v·∫≠t nu√¥i\n` +
                `‚Ä¢ B√°n s·∫£n ph·∫©m ƒë·ªÉ ki·∫øm xu\n` +
                `‚Ä¢ N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a th√™m ƒë·∫•t v√† v·∫≠t nu√¥i\n\n` +
                `üìù DANH S√ÅCH L·ªÜNH:\n\n` +
                `üå± TR·ªíNG TR·ªåT:\n` +
                `‚Üí .farm - Xem trang tr·∫°i c·ªßa b·∫°n\n` +
                `‚Üí .farm tr·ªìng - Xem danh s√°ch c√¢y tr·ªìng\n` +
                `‚Üí .farm tr·ªìng <c√¢y> <s·ªë √¥> - Tr·ªìng c√¢y v√†o √¥ ƒë·∫•t\n` +
                `‚Üí .farm t∆∞·ªõi - T∆∞·ªõi n∆∞·ªõc cho t·∫•t c·∫£ c√¢y\n` +
                `‚Üí .farm t∆∞·ªõi <s·ªë √¥> - T∆∞·ªõi n∆∞·ªõc c√¢y c·ª• th·ªÉ\n` +
                `‚Üí .farm thu - Thu ho·∫°ch t·∫•t c·∫£ c√¢y ƒë√£ s·∫µn s√†ng\n` +
                `‚Üí .farm thu <s·ªë √¥> - Thu ho·∫°ch c√¢y ·ªü √¥ c·ª• th·ªÉ\n\n` +
                `‚Üí .farm help 2 - Xem trang h∆∞·ªõng d·∫´n ti·∫øp theo`,
              threadID,
              messageID
            );
          } else if (helpPage === 2) {
            return api.sendMessage(
              `üåæ N√îNG TR·∫†I VUI V·∫∫ - H∆Ø·ªöNG D·∫™N (2) üåæ\n` +
                `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                `üêÑ CHƒÇN NU√îI:\n` +
                `‚Üí .farm c·ª≠a_h√†ng v·∫≠t_nu√¥i - Xem v√† mua v·∫≠t nu√¥i\n` +
                `‚Üí .farm cho_ƒÉn <lo·∫°i> - Cho v·∫≠t nu√¥i ƒÉn\n` +
                `‚Üí .farm thu_s·∫£n_ph·∫©m - Thu th·∫≠p s·∫£n ph·∫©m t·ª´ v·∫≠t nu√¥i\n\n` +
                `üë®‚Äçüç≥ CH·∫æ BI·∫æN N√îNG S·∫¢N:\n` +
                `‚Üí .farm ch·∫ø_bi·∫øn - Xem c√°c c√¥ng th·ª©c ch·∫ø bi·∫øn\n` +
                `‚Üí .farm ch·∫ø_bi·∫øn <m√≥n_ƒÉn> <s·ªë_l∆∞·ª£ng> - Ch·∫ø bi·∫øn m√≥n ƒÉn\n` +
                `‚Üí .farm ch·∫ø_bi·∫øn_thu - Thu s·∫£n ph·∫©m ƒë√£ ch·∫ø bi·∫øn xong\n\n` +
                `üí∞ MUA S·∫ÆM & B√ÅN H√ÄNG:\n` +
                `‚Üí .farm c·ª≠a_h√†ng - Xem c√°c danh m·ª•c c·ª≠a h√†ng\n` +
                `‚Üí .farm c·ª≠a_h√†ng c√¢y - Mua gi·ªëng c√¢y tr·ªìng\n` +
                `‚Üí .farm c·ª≠a_h√†ng v·∫≠t_ph·∫©m - Mua v·∫≠t ph·∫©m n√¢ng cao\n` +
                `‚Üí .farm b√°n - Xem kho h√†ng c·ªßa b·∫°n\n` +
                `‚Üí .farm b√°n <s·∫£n ph·∫©m> <s·ªë l∆∞·ª£ng> - B√°n s·∫£n ph·∫©m\n\n` +
                `‚Üí .farm help 3 - Xem trang h∆∞·ªõng d·∫´n ti·∫øp theo`,
              threadID,
              messageID
            );
          } else if (helpPage === 3) {
            return api.sendMessage(
              `üåæ N√îNG TR·∫†I VUI V·∫∫ - H∆Ø·ªöNG D·∫™N (3) üåæ\n` +
                `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                `‚ÑπÔ∏è XEM TH√îNG TIN:\n` +
                `‚Üí .farm info - Xem chi ti·∫øt trang tr·∫°i c·ªßa b·∫°n\n` +
                `‚Üí .farm info <c√¢y/v·∫≠t nu√¥i> - Xem th√¥ng tin c·ª• th·ªÉ\n\n` +
                `üåßÔ∏è TH·ªúI TI·∫æT & S·ª∞ KI·ªÜN:\n` +
                `‚Ä¢ Th·ªùi ti·∫øt thay ƒë·ªïi m·ªói 6 gi·ªù v√† ·∫£nh h∆∞·ªüng ƒë·∫øn c√¢y tr·ªìng\n` +
                `‚Ä¢ Sunny (N·∫Øng): C√¢y sinh tr∆∞·ªüng t·ªët, +10% s·∫£n l∆∞·ª£ng\n` +
                `‚Ä¢ Rainy (M∆∞a): T·ª± ƒë·ªông t∆∞·ªõi c√¢y, +5% s·∫£n l∆∞·ª£ng\n` +
                `‚Ä¢ Cloudy (√Çm u): Kh√¥ng c√≥ t√°c ƒë·ªông ƒë·∫∑c bi·ªát\n` +
                `‚Ä¢ Storm (B√£o): C√¢y c√≥ th·ªÉ b·ªã h∆∞ h·∫°i, thu ho·∫°ch s·ªõm\n` +
                `‚Ä¢ Drought (H·∫°n h√°n): N∆∞·ªõc bay h∆°i nhanh h∆°n\n\n` +
                `üéâ S·ª± ki·ªán ƒë·∫∑c bi·ªát: T·∫øt v√† Trung thu v·ªõi c√¢y tr·ªìng ƒë·ªôc quy·ªÅn!\n\n` +
                `‚Üí .farm help 4 - Xem trang h∆∞·ªõng d·∫´n ti·∫øp theo`,
              threadID,
              messageID
            );
          } else if (helpPage === 4) {
            return api.sendMessage(
              `üåæ N√îNG TR·∫†I VUI V·∫∫ - H∆Ø·ªöNG D·∫™N (4) üåæ\n` +
                `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                `üèÜ H·ªÜ TH·ªêNG C·∫§P ƒê·ªò:\n` +
                `‚Ä¢ M·ªói c·∫•p ƒë·ªô m·ªü kh√≥a th√™m c√¢y tr·ªìng, v·∫≠t nu√¥i m·ªõi\n` +
                `‚Ä¢ C·∫•p ƒë·ªô c√†ng cao, di·ªán t√≠ch ƒë·∫•t canh t√°c c√†ng l·ªõn\n` +
                `‚Ä¢ Kinh nghi·ªám (EXP) nh·∫≠n ƒë∆∞·ª£c khi thu ho·∫°ch c√¢y\n` +
                `‚Ä¢ L√™n c·∫•p nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng xu\n\n` +
                `üîÆ V·∫¨T PH·∫®M ƒê·∫∂C BI·ªÜT:\n` +
                `‚Ä¢ Ph√¢n b√≥n: Gi·∫£m 20% th·ªùi gian tr·ªìng tr·ªçt\n` +
                `‚Ä¢ Thu·ªëc s√¢u: TƒÉng 20% s·∫£n l∆∞·ª£ng thu ho·∫°ch\n` +
                `‚Ä¢ M√°y c√†y: T·ª± ƒë·ªông tr·ªìng l·∫°i sau thu ho·∫°ch\n` +
                `‚Ä¢ H·ªá th·ªëng t∆∞·ªõi: T·ª± ƒë·ªông t∆∞·ªõi n∆∞·ªõc m·ªói 4 gi·ªù\n` +
                `‚Ä¢ Chu·ªìng tr·∫°i n√¢ng c·∫•p: TƒÉng s·ªë l∆∞·ª£ng v·∫≠t nu√¥i t·ªëi ƒëa\n` +
                `‚Ä¢ Th·ª©c ƒÉn gia s√∫c: TƒÉng 30% s·∫£n l∆∞·ª£ng t·ª´ v·∫≠t nu√¥i\n` +
                `‚Ä¢ Gi·ªëng c√¢y cao c·∫•p: TƒÉng 50% kinh nghi·ªám t·ª´ tr·ªìng tr·ªçt\n\n` +
                `üí° M·∫∏O CH∆†I:\n` +
                `‚Ä¢ T·∫≠p trung v√†o c√¢y ng·∫Øn ng√†y ƒë·ªÉ t√≠ch l≈©y EXP nhanh\n` +
                `‚Ä¢ ƒê·∫ßu t∆∞ v√†o v·∫≠t nu√¥i ƒë·ªÉ c√≥ thu nh·∫≠p th·ª• ƒë·ªông\n` +
                `‚Ä¢ Mua c√°c v·∫≠t ph·∫©m vƒ©nh vi·ªÖn tr∆∞·ªõc khi mua t·∫°m th·ªùi\n` +
                `‚Ä¢ Theo d√µi th·ªùi ti·∫øt ƒë·ªÉ t·ªëi ∆∞u h√≥a thu ho·∫°ch`,
              threadID,
              messageID
            );
          } else {
            return api.sendMessage(
              `‚ùå Trang h∆∞·ªõng d·∫´n kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ trang 1-4.\n` +
                `‚Üí S·ª≠ d·ª•ng: .farm help <s·ªë trang>`,
              threadID,
              messageID
            );
          }
        }
        case "c·ª≠a_h√†ng":
        case "shop": {
          const shopType = target[1]?.toLowerCase();
          const buyItem = target[2]?.toLowerCase();
          const currentLevel = calculateLevel(userFarm.exp).level;

          if (!shopType) {
            return api.sendMessage(
              "üè™ C·ª¨A H√ÄNG N√îNG TR·∫†I üè™\n" +
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                "1Ô∏è‚É£ C√¢y tr·ªìng:\n" +
                "‚Üí .farm shop c√¢y\n\n" +
                "2Ô∏è‚É£ V·∫≠t nu√¥i:\n" +
                "‚Üí .farm shop v·∫≠t_nu√¥i\n\n" +
                "3Ô∏è‚É£ V·∫≠t ph·∫©m:\n" +
                "‚Üí .farm shop v·∫≠t_ph·∫©m\n\n" +
                "4Ô∏è‚É£ B√°n s·∫£n ph·∫©m:\n" +
                "‚Üí .farm b√°n <s·∫£n ph·∫©m> <s·ªë l∆∞·ª£ng>",
              threadID,
              messageID
            );
          }

          if (
            shopType === "c√¢y" ||
            shopType === "cay" ||
            shopType === "crops"
          ) {
            let message =
              "üå± C·ª¨A H√ÄNG H·∫†T GI·ªêNG üå±\n" + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

            const currentEvent = checkEvent();
            if (currentEvent && currentEvent.crops) {
              message += `üéâ GI·ªêNG C√ÇY S·ª∞ KI·ªÜN ${currentEvent.name}\n`;

              Object.entries(currentEvent.crops).forEach(([cropId, crop]) => {
                message += `\n${crop.emoji} ${crop.name}\n`;
                message += `üí∞ Gi√°: ${formatNumber(crop.price)} Xu\n`;
                message += `‚è±Ô∏è Th·ªùi gian: ${
                  Math.floor(crop.time / 3600) > 0
                    ? `${Math.floor(crop.time / 3600)} gi·ªù ${Math.floor(
                        (crop.time % 3600) / 60
                      )} ph√∫t`
                    : `${Math.floor(crop.time / 60)} ph√∫t`
                }\n`;
                message += `üíµ Thu ho·∫°ch: ${formatNumber(crop.yield)} Xu\n`;
                message += `üìà L·ª£i nhu·∫≠n: ${formatNumber(
                  crop.yield - crop.price
                )} Xu\n`;
                message += `üí° Mua: .farm tr·ªìng ${cropId} <s·ªë_√¥>\n`;
              });

              message += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
            }

            message += "üìã DANH S√ÅCH GI·ªêNG C√ÇY\n";

            const cropsByLevel = {};
            Object.entries(CROPS).forEach(([cropId, crop]) => {
              if (!cropsByLevel[crop.level]) {
                cropsByLevel[crop.level] = [];
              }
              cropsByLevel[crop.level].push({ id: cropId, ...crop });
            });

            for (let level = 1; level <= currentLevel; level++) {
              if (cropsByLevel[level]) {
                if (level > 1) message += "\n";
                message += `üåü C·∫§P ƒê·ªò ${level}:\n`;

                cropsByLevel[level].forEach((crop) => {
                  message += `\n${crop.emoji} ${crop.name}\n`;
                  message += `üí∞ Gi√°: ${formatNumber(crop.price)} Xu\n`;
                  message += `‚è±Ô∏è Th·ªùi gian: ${Math.floor(
                    crop.time / 60
                  )} ph√∫t\n`;
                  message += `üíß N∆∞·ªõc: ${crop.water} l·∫ßn\n`;
                  message += `üíµ Thu ho·∫°ch: ${formatNumber(crop.yield)} Xu\n`;
                  message += `üìà L·ª£i nhu·∫≠n: ${formatNumber(
                    crop.yield - crop.price
                  )} Xu\n`;
                  message += `üí° Mua: .farm tr·ªìng ${crop.id} <s·ªë_√¥>\n`;
                });
              }
            }

            if (currentLevel < 10) {
              message += "\nüîí C√ÇY TR·ªíNG KH√ìA:\n";

              for (let level = currentLevel + 1; level <= 10; level++) {
                if (cropsByLevel[level]) {
                  cropsByLevel[level].forEach((crop) => {
                    message += `\n${crop.emoji} ${crop.name} (C·∫ßn c·∫•p ${level})\n`;
                  });
                }
              }
            }

            return api.sendMessage(message, threadID, messageID);
          }

          // Handle animal shop
          if (
            shopType === "v·∫≠t_nu√¥i" ||
            shopType === "vat_nuoi" ||
            shopType === "animals"
          ) {
            if (buyItem) {
              const animalConfig = ANIMALS[buyItem];
              if (!animalConfig) {
                return api.sendMessage(
                  `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t nu√¥i "${target[2]}"!\n` +
                    `üí° S·ª≠ d·ª•ng .farm c·ª≠a_h√†ng v·∫≠t_nu√¥i ƒë·ªÉ xem danh s√°ch.`,
                  threadID,
                  messageID
                );
              }

              if (animalConfig.level > currentLevel) {
                return api.sendMessage(
                  `‚ùå B·∫°n c·∫ßn ƒë·∫°t c·∫•p ƒë·ªô ${animalConfig.level} ƒë·ªÉ mua ${animalConfig.name}!\n` +
                    `üë®‚Äçüåæ C·∫•p ƒë·ªô hi·ªán t·∫°i: ${currentLevel}`,
                  threadID,
                  messageID
                );
              }

              const balance = await getBalance(senderID);
              if (balance < animalConfig.price) {
                return api.sendMessage(
                  `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${animalConfig.name}!\n` +
                    `üí∞ Gi√°: ${formatNumber(animalConfig.price)} Xu\n` +
                    `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu`,
                  threadID,
                  messageID
                );
              }

              const effects = applyItemEffects(userFarm);
              const animalCount = Object.keys(userFarm.animals || {}).length;
              const maxAnimals = effects.animalCapacity;

              if (animalCount >= maxAnimals) {
                return api.sendMessage(
                  `‚ùå Trang tr·∫°i c·ªßa b·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n v·∫≠t nu√¥i!\n` +
                    `üêÑ S·ªë l∆∞·ª£ng hi·ªán t·∫°i: ${animalCount}/${maxAnimals}\n` +
                    `üí° N√¢ng c·∫•p chu·ªìng tr·∫°i ƒë·ªÉ nu√¥i th√™m v·∫≠t nu√¥i.`,
                  threadID,
                  messageID
                );
              }

              await updateBalance(senderID, -animalConfig.price);

              if (!userFarm.animals) {
                userFarm.animals = {};
              }

              const animalId = Date.now().toString();
              userFarm.animals[animalId] = {
                id: animalId,
                type: buyItem,
                purchased: Date.now(),
                fed: false,
                lastFed: null,
                lastProduced: null,
                productReady: false,
              };

              saveFarmData(farmData);

              return api.sendMessage(
                `‚úÖ ƒê√£ mua ${animalConfig.emoji} ${animalConfig.name} th√†nh c√¥ng!\n` +
                  `üí∞ Chi ph√≠: -${formatNumber(animalConfig.price)} Xu\n` +
                  `ü•´ Nh·ªõ cho ƒÉn th∆∞·ªùng xuy√™n: .farm cho_ƒÉn ${buyItem}`,
                threadID,
                messageID
              );
            }

            let message =
              "üêÑ C·ª¨A H√ÄNG V·∫¨T NU√îI üêÑ\n" +
              "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
              "üìã DANH S√ÅCH V·∫¨T NU√îI\n";

            const animalsByLevel = {};
            Object.entries(ANIMALS).forEach(([animalId, animal]) => {
              if (!animalsByLevel[animal.level]) {
                animalsByLevel[animal.level] = [];
              }
              animalsByLevel[animal.level].push({ id: animalId, ...animal });
            });

            for (let level = 1; level <= currentLevel; level++) {
              if (animalsByLevel[level]) {
                if (level > 1) message += "\n";
                message += `üåü C·∫§P ƒê·ªò ${level}:\n`;

                animalsByLevel[level].forEach((animal) => {
                  const dailyProfit =
                    (24 / (animal.productTime / 3600)) * animal.productPrice -
                    (24 / (animal.productTime / 3600)) * animal.feed;

                  message += `\n${animal.emoji} ${animal.name}\n`;
                  message += `üí∞ Gi√°: ${formatNumber(animal.price)} Xu\n`;
                  message += `‚è±Ô∏è Chu k·ª≥: ${Math.floor(
                    animal.productTime / 3600
                  )} gi·ªù\n`;
                  message += `üç≤ Th·ª©c ƒÉn: ${formatNumber(animal.feed)}/l·∫ßn\n`;
                  message += `${animal.productEmoji} S·∫£n ph·∫©m: ${
                    animal.product
                  } (${formatNumber(animal.productPrice)} Xu)\n`;
                  message += `üìà L·ª£i nhu·∫≠n/ng√†y: ${formatNumber(
                    dailyProfit
                  )} Xu\n`;
                  message += `üí° Mua: .farm c·ª≠a_h√†ng v·∫≠t_nu√¥i ${animal.id}\n`;
                });
              }
            }

            if (currentLevel < 10) {
              message += "\nüîí V·∫¨T NU√îI KH√ìA:\n";

              for (let level = currentLevel + 1; level <= 10; level++) {
                if (animalsByLevel[level]) {
                  animalsByLevel[level].forEach((animal) => {
                    message += `\n${animal.emoji} ${animal.name} (C·∫ßn c·∫•p ${level})\n`;
                  });
                }
              }
            }

            return api.sendMessage(message, threadID, messageID);
          }

          if (
            shopType === "v·∫≠t_ph·∫©m" ||
            shopType === "vat_pham" ||
            shopType === "items"
          ) {
            if (buyItem) {
              const itemConfig = SHOP_ITEMS[buyItem];
              if (!itemConfig) {
                return api.sendMessage(
                  `‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m "${target[2]}"!\n` +
                    `üí° S·ª≠ d·ª•ng .farm c·ª≠a_h√†ng v·∫≠t_ph·∫©m ƒë·ªÉ xem danh s√°ch.`,
                  threadID,
                  messageID
                );
              }

              if (itemConfig.level > currentLevel) {
                return api.sendMessage(
                  `‚ùå B·∫°n c·∫ßn ƒë·∫°t c·∫•p ƒë·ªô ${itemConfig.level} ƒë·ªÉ mua ${itemConfig.name}!\n` +
                    `üë®‚Äçüåæ C·∫•p ƒë·ªô hi·ªán t·∫°i: ${currentLevel}`,
                  threadID,
                  messageID
                );
              }

              const balance = await getBalance(senderID);
              if (balance < itemConfig.price) {
                return api.sendMessage(
                  `‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${itemConfig.name}!\n` +
                    `üí∞ Gi√°: ${formatNumber(itemConfig.price)} Xu\n` +
                    `üíµ S·ªë d∆∞: ${formatNumber(balance)} Xu`,
                  threadID,
                  messageID
                );
              }

              if (
                userFarm.items &&
                userFarm.items[buyItem] &&
                ((userFarm.items[buyItem].active &&
                  !userFarm.items[buyItem].expiry) ||
                  userFarm.items[buyItem].expiry > Date.now())
              ) {
                if (!itemConfig.duration && userFarm.items[buyItem].active) {
                  return api.sendMessage(
                    `‚ùå B·∫°n ƒë√£ s·ªü h·ªØu ${itemConfig.name}!\n` +
                      `üí° ƒê√¢y l√† v·∫≠t ph·∫©m vƒ©nh vi·ªÖn, kh√¥ng th·ªÉ mua th√™m.`,
                    threadID,
                    messageID
                  );
                }
              }

              await updateBalance(senderID, -itemConfig.price);

              if (!userFarm.items) {
                userFarm.items = {};
              }

              userFarm.items[buyItem] = {
                purchased: Date.now(),
                active: true,
                effect: itemConfig.effect,
                expiry: itemConfig.duration
                  ? Date.now() + itemConfig.duration
                  : null,
              };

              saveFarmData(farmData);

              return api.sendMessage(
                `‚úÖ ƒê√£ mua ${itemConfig.emoji} ${itemConfig.name} th√†nh c√¥ng!\n` +
                  `üí∞ Chi ph√≠: -${formatNumber(itemConfig.price)} Xu\n` +
                  `‚è±Ô∏è Th·ªùi h·∫°n: ${
                    itemConfig.duration
                      ? Math.floor(
                          itemConfig.duration / (24 * 60 * 60 * 1000)
                        ) + " ng√†y"
                      : "Vƒ©nh vi·ªÖn"
                  }\n` +
                  `üîÆ Hi·ªáu ·ª©ng: ${itemConfig.description}\n` +
                  `‚Üí Hi·ªáu ·ª©ng ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng t·ª± ƒë·ªông!`,
                threadID,
                messageID
              );
            }

            let message =
              "üîÆ C·ª¨A H√ÄNG V·∫¨T PH·∫®M üîÆ\n" +
              "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
              "üìã DANH S√ÅCH V·∫¨T PH·∫®M\n";

            const itemsByLevel = {};
            Object.entries(SHOP_ITEMS).forEach(([itemId, item]) => {
              if (!itemsByLevel[item.level]) {
                itemsByLevel[item.level] = [];
              }
              itemsByLevel[item.level].push({ id: itemId, ...item });
            });

            for (let level = 1; level <= currentLevel; level++) {
              if (itemsByLevel[level]) {
                if (level > 1) message += "\n";
                message += `üåü C·∫§P ƒê·ªò ${level}:\n`;

                itemsByLevel[level].forEach((item) => {
                  const owned =
                    userFarm.items &&
                    userFarm.items[item.id] &&
                    userFarm.items[item.id].active &&
                    (!userFarm.items[item.id].expiry ||
                      userFarm.items[item.id].expiry > Date.now());

                  message += `\n${item.emoji} ${item.name} ${
                    owned ? "(ƒê√£ s·ªü h·ªØu)" : ""
                  }\n`;
                  message += `üí∞ Gi√°: ${formatNumber(item.price)} Xu\n`;
                  message += `‚è±Ô∏è Th·ªùi h·∫°n: ${
                    item.duration
                      ? Math.floor(item.duration / (24 * 60 * 60 * 1000)) +
                        " ng√†y"
                      : "Vƒ©nh vi·ªÖn"
                  }\n`;
                  message += `üîÆ Hi·ªáu ·ª©ng: ${item.description}\n`;

                  if (!owned) {
                    message += `üí° Mua: .farm c·ª≠a_h√†ng v·∫≠t_ph·∫©m ${item.id}\n`;
                  }
                });
              }
            }

            if (currentLevel < 10) {
              message += "\nüîí V·∫¨T PH·∫®M KH√ìA:\n";

              for (let level = currentLevel + 1; level <= 10; level++) {
                if (itemsByLevel[level]) {
                  itemsByLevel[level].forEach((item) => {
                    message += `\n${item.emoji} ${item.name} (C·∫ßn c·∫•p ${level})\n`;
                  });
                }
              }
            }

            return api.sendMessage(message, threadID, messageID);
          }

          return api.sendMessage(
            "‚ùå Lo·∫°i c·ª≠a h√†ng kh√¥ng h·ª£p l·ªá!\n" +
              "üí° S·ª≠ d·ª•ng m·ªôt trong c√°c l·ªánh sau:\n" +
              "‚Üí .farm c·ª≠a_h√†ng c√¢y\n" +
              "‚Üí .farm c·ª≠a_h√†ng v·∫≠t_nu√¥i\n" +
              "‚Üí .farm c·ª≠a_h√†ng v·∫≠t_ph·∫©m",
            threadID,
            messageID
          );
        }

        default:
          return api.sendMessage(
            "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!\n" +
              "üí° S·ª≠ d·ª•ng:\n" +
              "‚Üí .farm - Xem trang tr·∫°i\n" +
              "‚Üí .farm tr·ªìng <c√¢y tr·ªìng> <s·ªë √¥> - Tr·ªìng c√¢y\n" +
              "‚Üí .farm t∆∞·ªõi <s·ªë √¥> - T∆∞·ªõi n∆∞·ªõc cho c√¢y\n" +
              "‚Üí .farm thu <s·ªë √¥> - Thu ho·∫°ch\n" +
              "‚Üí .farm c·ª≠a_h√†ng - Xem c·ª≠a h√†ng",
            threadID,
            messageID
          );
      }
    } catch (error) {
      console.error("Farm command error:", error);
      return api.sendMessage(
        "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh farm! Vui l√≤ng th·ª≠ l·∫°i.",
        threadID,
        messageID
      );
    }
  },
};
