const fs = require("fs");
const path = require("path");
const { getBalance, updateBalance } = require("../utils/currencies");
const { getVIPBenefits } = require("../vip/vipCheck");
const cooldowns = new Map();

module.exports = {
  name: "stolen",
  dev: "HNT",
  usedby: 0,
  category: "Games",
  info: "ƒÇn tr·ªôm ti·ªÅn t·ª´ ng∆∞·ªùi kh√°c",
  onPrefix: true,
  usages: "stolen @tag ho·∫∑c reply tin nh·∫Øn",
  cooldowns: 0,

  onLaunch: async function ({ api, event }) {
    const { threadID, messageID, senderID, messageReply, mentions } = event;

    const cooldownTime = 300000;
    const currentTime = Date.now();
    const userCooldown = cooldowns.get(senderID) || 0;

    if (currentTime - userCooldown < cooldownTime) {
      const remainingTime = Math.ceil(
        (userCooldown + cooldownTime - currentTime) / 60000
      );
      return api.sendMessage(
        `üïí B·∫°n c·∫ßn ƒë·ª£i ${remainingTime} ph√∫t n·ªØa m·ªõi c√≥ th·ªÉ ti·∫øp t·ª•c tr·ªôm c·∫Øp!`,
        threadID,
        messageID
      );
    }

    let victimID;
    if (messageReply) {
      victimID = messageReply.senderID;
    } else if (Object.keys(mentions).length > 0) {
      victimID = Object.keys(mentions)[0];
    } else {
      return api.sendMessage(
        "‚ùå B·∫°n c·∫ßn tag ho·∫∑c reply tin nh·∫Øn c·ªßa ng∆∞·ªùi m√† b·∫°n mu·ªën tr·ªôm ti·ªÅn!",
        threadID,
        messageID
      );
    }

    if (victimID === senderID) {
      return api.sendMessage(
        "‚ùì B·∫°n kh√¥ng th·ªÉ tr·ªôm ti·ªÅn c·ªßa ch√≠nh m√¨nh!",
        threadID,
        messageID
      );
    }

    let thiefName, victimName;
    try {
      const userInfo = await api.getUserInfo([senderID, victimID]);
      thiefName = userInfo[senderID].name || "B·∫°n";
      victimName = userInfo[victimID].name || "N·∫°n nh√¢n";
    } catch (e) {
      thiefName = "b·∫°n";
      victimName = "N·∫°n nh√¢n";
    }

    const victimVipBenefits = getVIPBenefits(victimID);
    console.log(
      `[STOLEN DEBUG] Victim ${victimID} VIP benefits:`,
      victimVipBenefits
        ? `Package: ${victimVipBenefits.name}, Protection: ${victimVipBenefits.stolenProtection}`
        : "No VIP"
    );

    if (
      victimVipBenefits &&
      (victimVipBenefits.stolenProtection >= 1.0 ||
        victimVipBenefits.packageId === 3 ||
        victimVipBenefits.name === "VIP GOLD")
    ) {
      console.log(
        `[STOLEN DEBUG] Gold VIP protection activated for ${victimID}`
      );

      const penaltyPercent = Math.random() * 15 + 5;
      const thiefBalance = await getBalance(senderID);
      const penalty = Math.floor(thiefBalance * (penaltyPercent / 100));

      await updateBalance(senderID, -penalty);

      const vipFailureMessages = [
        `‚õî ${thiefName} kh√¥ng th·ªÉ tr·ªôm t·ª´ ${victimName} v√¨ h·ªç c√≥ VIP GOLD b·∫£o v·ªá!\nH·ªá th·ªëng b·∫£o v·ªá ƒë√£ ph·∫°t b·∫°n ${formatNumber(
          penalty
        )} $!`,
        `üîê ${victimName} ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi khi√™n VIP GOLD! ${thiefName} b·ªã ph√°t hi·ªán v√† b·ªã ph·∫°t ${formatNumber(
          penalty
        )} $!`,
        `üõ°Ô∏è VIP SHIELD c·ªßa ${victimName} ƒë√£ k√≠ch ho·∫°t! ${thiefName} b·ªã h·ªá th·ªëng b·∫£o v·ªá ph·∫°t ${formatNumber(
          penalty
        )} $!`,
        `üëë Kh√¥ng th·ªÉ tr·ªôm t·ª´ ng∆∞·ªùi d√πng VIP GOLD! ${thiefName} ƒë√£ b·ªã ph·∫°t ${formatNumber(
          penalty
        )} $!`,
      ];

      const randomMessage =
        vipFailureMessages[
          Math.floor(Math.random() * vipFailureMessages.length)
        ];
      cooldowns.set(senderID, currentTime);
      return api.sendMessage(randomMessage, threadID, messageID);
    }

    if (victimVipBenefits && victimVipBenefits.stolenProtection > 0) {
      const protectionRoll = Math.random();
      console.log(
        `[STOLEN DEBUG] VIP protection roll for ${victimID}: ${protectionRoll} vs ${victimVipBenefits.stolenProtection}`
      );

      if (protectionRoll < victimVipBenefits.stolenProtection) {
        const vipTierName =
          victimVipBenefits.name ||
          (victimVipBenefits.stolenProtection >= 0.6 ? "SILVER" : "BRONZE");

        const protectionMessages = [
          `üõ°Ô∏è ${victimName} ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi VIP ${vipTierName}! B·∫°n kh√¥ng th·ªÉ tr·ªôm ti·ªÅn c·ªßa h·ªç l·∫ßn n√†y.`,
          `üî∞ H·ªá th·ªëng b·∫£o v·ªá VIP c·ªßa ${victimName} ƒë√£ ph√°t hi·ªán b·∫°n! N·ªó l·ª±c tr·ªôm c·∫Øp th·∫•t b·∫°i.`,
          `‚öîÔ∏è VIP ${vipTierName} c·ªßa ${victimName} ƒë√£ ch·∫∑n ƒë∆∞·ª£c n·ªó l·ª±c tr·ªôm c·∫Øp c·ªßa ${thiefName}!`,
        ];

        const randomProtectionMessage =
          protectionMessages[
            Math.floor(Math.random() * protectionMessages.length)
          ];
        cooldowns.set(senderID, currentTime);
        return api.sendMessage(randomProtectionMessage, threadID, messageID);
      }

      api.sendMessage(
        `‚ö†Ô∏è ${thiefName} ƒë√£ v∆∞·ª£t qua ƒë∆∞·ª£c m·ªôt ph·∫ßn b·∫£o v·ªá VIP ${
          victimVipBenefits.name || ""
        } c·ªßa ${victimName} v√† ƒëang c·ªë g·∫Øng tr·ªôm c·∫Øp...`,
        threadID
      );
    }

    try {
      const thiefBalance = await getBalance(senderID);
      const victimBalance = await getBalance(victimID);

      if (victimBalance < 1000) {
        return api.sendMessage(
          "‚ùå N·∫°n nh√¢n qu√° ngh√®o, kh√¥ng c√≥ g√¨ ƒë·ªÉ tr·ªôm c·∫£!",
          threadID,
          messageID
        );
      }

      let successChance = 40;
      if (thiefBalance < 50) successChance += 10;
      if (victimBalance > 1000) successChance += 5;

      const isSuccessful = Math.random() * 100 <= successChance;

      cooldowns.set(senderID, currentTime);

      if (isSuccessful) {
        const stolenPercent = Math.random() * 15 + 5;
        const maxStealable = Math.min(victimBalance * 0.2, 2000);
        let stolenAmount = Math.floor(victimBalance * (stolenPercent / 100));
        stolenAmount = Math.min(stolenAmount, maxStealable);
        stolenAmount = Math.max(stolenAmount, 100);

        await updateBalance(senderID, stolenAmount);
        await updateBalance(victimID, -stolenAmount);

        const successScenarios = [
          `ü•∑ ${thiefName} ƒë√£ l·∫ªn v√†o t√∫i qu·∫ßn c·ªßa ${victimName} v√† l·∫•y ƒëi ${formatNumber(
            stolenAmount
          )} $!`,
          `üïµÔ∏è ${thiefName} gi·∫£ l√†m nh√¢n vi√™n ng√¢n h√†ng v√† l·ª´a ${victimName} m·∫•t ${formatNumber(
            stolenAmount
          )} $!`,
          `ü¶π ${thiefName} ƒë√£ hack t√†i kho·∫£n c·ªßa ${victimName} v√† chuy·ªÉn ƒëi ${formatNumber(
            stolenAmount
          )} $!`,
          `üé≠ ${thiefName} ƒëeo m·∫∑t n·∫°, ƒëe d·ªça v√† c∆∞·ªõp ƒëi ${formatNumber(
            stolenAmount
          )} $ t·ª´ ${victimName}!`,
          `üßô ${thiefName} d√πng ph√©p thu·∫≠t v√† l√†m bi·∫øn m·∫•t ${formatNumber(
            stolenAmount
          )} $ t·ª´ v√≠ c·ªßa ${victimName}!`,
          `üçå ${thiefName} ƒë·∫∑t chu·ªëi tr√™n ƒë∆∞·ªùng ƒëi, ${victimName} tr∆∞·ª£t ng√£ v√† ƒë√°nh r∆°i ${formatNumber(
            stolenAmount
          )} $!`,
          `ü•± ${thiefName} ƒë√£ ru ${victimName} ng·ªß b·∫±ng b√†i h√°t ru con v√† cu·ªóm m·∫•t ${formatNumber(
            stolenAmount
          )} $!`,
          `ü§° ${thiefName} gi·∫£ l√†m ch√∫ h·ªÅ t·∫∑ng b√≥ng bay, nh∆∞ng th·ª±c ch·∫•t l√† ƒë√°nh tr√°o v√≠ c·ªßa ${victimName} l·∫•y ${formatNumber(
            stolenAmount
          )} $!`,
          `üß† ${thiefName} d√πng thu·∫≠t th√¥i mi√™n khi·∫øn ${victimName} t·ª± nguy·ªán chuy·ªÉn ${formatNumber(
            stolenAmount
          )} $!`,
          `üëª ${thiefName} gi·∫£ l√†m h·ªìn ma d·ªça ${victimName} b·ªè ch·∫°y, b·ªè l·∫°i ${formatNumber(
            stolenAmount
          )} $!`,
          `üé£ ${thiefName} c√¢u ƒë∆∞·ª£c v√≠ ti·ªÅn c·ªßa ${victimName} t·ª´ c·ª≠a s·ªï v√† l·∫•y ${formatNumber(
            stolenAmount
          )} $!`,
          `üéÅ ${thiefName} t·∫∑ng h·ªôp qu√† c√≥ g·∫Øn nam ch√¢m, h√∫t lu√¥n ${formatNumber(
            stolenAmount
          )} $ t·ª´ t√∫i ${victimName}!`,
          `üì± ${thiefName} g·ª≠i virus qua ƒëi·ªán tho·∫°i c·ªßa ${victimName} v√† chuy·ªÉn ${formatNumber(
            stolenAmount
          )} $ v·ªÅ t√†i kho·∫£n c·ªßa m√¨nh!`,
          `üêí ${thiefName} hu·∫•n luy·ªán kh·ªâ ƒë·ªôt m√≥c t√∫i ${victimName} v√† l·∫•y c·∫Øp ${formatNumber(
            stolenAmount
          )} $!`,
          `üå™Ô∏è ${thiefName} t·∫°o c∆°n l·ªëc mini th·ªïi bay ${formatNumber(
            stolenAmount
          )} $ t·ª´ ${victimName} v√†o t√∫i m√¨nh!`,
        ];

        const randomSuccess =
          successScenarios[Math.floor(Math.random() * successScenarios.length)];
        return api.sendMessage(randomSuccess, threadID, messageID);
      } else {
        const baseStealAmount = Math.min(victimBalance * 0.2, 2000);
        const maxPenalty = Math.min(baseStealAmount * 1.5, 1000);

        const penaltyPercent = Math.random() * 10 + 5;
        let penalty = Math.floor(thiefBalance * (penaltyPercent / 100));
        penalty = Math.min(penalty, maxPenalty);

        await updateBalance(senderID, -penalty);

        const failScenarios = [
          `üö® ${thiefName} b·ªã c·∫£nh s√°t b·∫Øt qu·∫£ tang khi ƒëang tr·ªôm t·ª´ ${victimName}! B·ªã ph·∫°t ${formatNumber(
            penalty
          )} $!`,
          `üò± ${victimName} ƒë√£ ph√°t hi·ªán ${thiefName} ƒëang m√≤ tay v√†o t√∫i! B·ªã ƒë√°nh cho m·ªôt tr·∫≠n v√† m·∫•t ${formatNumber(
            penalty
          )} $!`,
          `üêï Ch√∫ ch√≥ c·∫£nh gi·ªõi ƒë√£ s·ªßa om s√≤m khi ${thiefName} ƒë·∫øn g·∫ßn ${victimName}! B·ªã b·∫Øt v√† ph·∫°t ${formatNumber(
            penalty
          )} $!`,
          `üîí ${victimName} ƒë√£ c√†i ƒë·∫∑t h·ªá th·ªëng ch·ªëng tr·ªôm! ${thiefName} b·ªã ƒëi·ªán gi·∫≠t v√† m·∫•t ${formatNumber(
            penalty
          )} $!`,
          `üëÆ C·∫£nh s√°t m·∫≠t ph·ª•c ƒë√£ theo d√µi ${thiefName} c·∫£ ng√†y! B·ªã b·∫Øt v√† ph·∫°t ${formatNumber(
            penalty
          )} $!`,
        ];

        const randomFailure =
          failScenarios[Math.floor(Math.random() * failScenarios.length)];
        return api.sendMessage(randomFailure, threadID, messageID);
      }
    } catch (error) {
      console.error("Error in stolen command:", error);
      return api.sendMessage(
        "‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh tr·ªôm c·∫Øp!",
        threadID,
        messageID
      );
    }
  },
};

function formatNumber(number) {
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
