const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const { GoogleGenerativeAI } = require("@google/generative-ai");

const apiKeysPath = path.join(__dirname, 'json', 'key.json');
let API_KEYS = [];

const loadAPIKeys = async () => {
  try {
    const data = await fs.readJson(apiKeysPath);
    API_KEYS = data.api_keys;
    API_KEYS = API_KEYS.filter(key => key && key.length > 0);
    if (API_KEYS.length === 0) throw new Error("No valid API keys found");
  } catch (error) {
    console.error("Error loading API keys:", error);
    API_KEYS = [];
  }
};

loadAPIKeys();

const processImage = async (attachment) => {
  try {
    const fileUrl = attachment.url;
    const cacheDir = path.join(__dirname, 'cache');
    
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }
    
    const tempFilePath = path.join(cacheDir, `temp_homework_${Date.now()}.jpg`);
    
    const response = await axios({
      url: fileUrl,
      responseType: 'arraybuffer'
    });
    
    await fs.writeFile(tempFilePath, Buffer.from(response.data));
    const fileData = await fs.readFile(tempFilePath);
    const base64Image = fileData.toString('base64');
    
    await fs.unlink(tempFilePath);
    
    return {
      inlineData: {
        data: base64Image,
        mimeType: 'image/jpeg'
      }
    };
  } catch (error) {
    console.error("Error processing image:", error);
    throw error;
  }
};

const analyzeHomework = async (apiKey, prompt, imagePart) => {
  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash", 
      generationConfig: {
        temperature: 0.7,
        topK: 1,
        topP: 1,
        maxOutputTokens: 4096,
      },
    });

    const result = await model.generateContent([
      { text: "H√£y gi·∫£i th√≠ch v√† gi·∫£i chi ti·∫øt b√†i t·∫≠p n√†y b·∫±ng ti·∫øng Vi·ªát. N·∫øu l√† b√†i to√°n, h√£y gi·∫£i t·ª´ng b∆∞·ªõc. N·∫øu l√† c√¢u h·ªèi, h√£y tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß v√† gi·∫£i th√≠ch r√µ r√†ng.\n\nB√†i t·∫≠p:" + prompt },
      imagePart
    ]);

    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error(`API Error with key ${apiKey.substring(0, 5)}...`, error.message);
    if (error.message.includes('quota') || 
        error.message.includes('rate') || 
        error.message.includes('limit') ||
        error.message.includes('Quota')) {
      throw new Error('QUOTA_EXCEEDED');
    }
    throw error;
  }
};

module.exports = {
  name: "homework",
  info: "Gi·∫£i b√†i t·∫≠p qua h√¨nh ·∫£nh",
  dev: "HNT",
  usedby: 0,
  onPrefix: true,
  dmUser: false,
  cooldowns: 30,

  onLaunch: async function({ api, event, target }) {
    const { threadID, messageID, type, messageReply } = event;
    const prompt = target.join(" ").trim();

    if (!messageReply || !messageReply.attachments || messageReply.attachments.length === 0) {
      return api.sendMessage("‚ö†Ô∏è Vui l√≤ng reply m·ªôt h√¨nh ·∫£nh b√†i t·∫≠p c·∫ßn gi·∫£i!", threadID, messageID);
    }

    const attachment = messageReply.attachments.find(att => 
      att.type === "photo" || att.type === "image"
    );

    if (!attachment) {
      return api.sendMessage("‚ö†Ô∏è Vui l√≤ng ch·ªâ g·ª≠i h√¨nh ·∫£nh!", threadID, messageID);
    }

    const loadingMsg = await api.sendMessage("‚è≥ ƒêang ph√¢n t√≠ch b√†i t·∫≠p...", threadID, messageID);

    try {
      const imagePart = await processImage(attachment);
      let solution = null;
      let lastError = null;
      let quotaExceededCount = 0;

      for (const apiKey of API_KEYS) {
        try {
          solution = await analyzeHomework(apiKey, prompt, imagePart);
          if (solution) break;
        } catch (error) {
          lastError = error;
          if (error.message === 'QUOTA_EXCEEDED') {
            quotaExceededCount++;
            if (quotaExceededCount === API_KEYS.length) {
              throw new Error("T·∫•t c·∫£ API keys ƒë·ªÅu ƒë√£ h·∫øt quota. Vui l√≤ng th·ª≠ l·∫°i sau.");
            }
            continue;
          }
          console.error(`API Key ${apiKey.substring(0, 5)}... error:`, error.message);
        }
      }

      if (!solution) {
        throw lastError || new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch b√†i t·∫≠p");
      }

      await api.sendMessage({
        body: "üéì L·ªùi gi·∫£i chi ti·∫øt:\n\n" + solution
      }, threadID, messageID);
      
    } catch (error) {
      console.error("Homework analysis error:", error);
      const errorMessage = error.message.includes('quota') || error.message.includes('T·∫•t c·∫£ API keys') 
        ? "‚ö†Ô∏è H·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t!"
        : "‚ùå ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch b√†i t·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau!";
      
      await api.sendMessage(errorMessage, threadID, messageID);
    } finally {
      api.unsendMessage(loadingMsg.messageID);
    }
  }
};
