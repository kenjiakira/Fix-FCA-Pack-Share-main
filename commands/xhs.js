const Downloader = require('../utils/downloader');
const fs = require('fs');

module.exports = {
    name: "xhs",
    nickName: ["xhs"],
    dev: "HNT",
    category: "Media",
    info: "T·∫£i media t·ª´ Xiaohongshu",
    usages: "xhs [link]",
    cooldowns: 5,
    onPrefix: true,

    onLaunch: async function({ api, event, target }) {
        let loadingMsg = null;
        try {
            if (!target[0]) {
                return api.sendMessage(
                    "üì• Xiaohongshu Downloader\n\nC√°ch d√πng: xhs [link]",
                    event.threadID
                );
            }

            const url = target[0];
            if (!url.includes('xiaohongshu.com') && !url.includes('xhslink.com')) {
                return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p link Xiaohongshu h·ª£p l·ªá!", event.threadID);
            }

            loadingMsg = await api.sendMessage("‚è≥ ƒêang t·∫£i media t·ª´ Xiaohongshu...", event.threadID);

            const data = await Downloader.getMediaInfo(url);
            const mediaDownloads = [];

            if (data.medias && data.medias.length > 0) {
                for (const media of data.medias) {
                    if (mediaDownloads.length >= 10) break;
                    const download = await Downloader.downloadMedia(media, 'xhs');
                    mediaDownloads.push(download);
                }
            }

            if (mediaDownloads.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y media ƒë·ªÉ t·∫£i');
            }

            await api.sendMessage({
                body: `üì• T·∫£i th√†nh c√¥ng!\n` +
                      `üë§ T√°c gi·∫£: ${data.author || 'Kh√¥ng x√°c ƒë·ªãnh'}\n` +
                      `üí¨ N·ªôi dung: ${data.title || 'Kh√¥ng c√≥ n·ªôi dung'}\n` +
                      `üìä S·ªë l∆∞·ª£ng: ${mediaDownloads.length} file\n` +
                      `üîó Link g·ªëc: ${data.url}`,
                attachment: mediaDownloads.map(m => fs.createReadStream(m.path))
            }, event.threadID, () => {
                mediaDownloads.forEach(m => fs.unlinkSync(m.path));
                if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            });

        } catch (error) {
            if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            return api.sendMessage(
                `‚ùå L·ªói: ${error.message}\nVui l√≤ng th·ª≠ l·∫°i sau.`,
                event.threadID
            );
        }
    }
};
