const axios = require('axios');
const translate = require('translate-google');

module.exports = {
    name: "dich",
    dev: "HNT",
    usedby: 0,
    category: "Ti·ªán √çch",
    info: "D·ªãch vƒÉn b·∫£n qua nhi·ªÅu ng√¥n ng·ªØ", 
    usages: "dich [ng√¥n ng·ªØ] [n·ªôi dung] ho·∫∑c reply",
    cooldowns: 5,

    langCodes: {
        'vi·ªát': 'vi',
        'v': 'vi',
        'anh': 'en',
        'a': 'en',
        'nh·∫≠t': 'ja', 
        'n': 'ja',
        'h√†n': 'ko',
        'h': 'ko',
        'trung': 'zh',
        't': 'zh',
        'ph√°p': 'fr',
        'p': 'fr',
        'ƒë·ª©c': 'de',
        'nga': 'ru',
        '√Ω': 'it',
        'tbn': 'es', 
        'tl': 'th', 
        'indo': 'id'
    },

    async translate(text, targetLang = 'vi') {
        try {
            const result = await translate(text, {
                to: targetLang,
                autoCorrect: true
            });
            return result;
        } catch (err) {
            if (err.code === 'BAD_NETWORK') {
                throw new Error("L·ªói k·∫øt n·ªëi m·∫°ng!");
            }
            throw err;
        }
    },

    getLanguageCode(input) {
        input = input.toLowerCase().trim();
        return this.langCodes[input] || input;
    },

    onLaunch: async function({ api, event, target }) {
        const { threadID, messageID } = event;
        
        // N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
        if (!target[0] && !event.messageReply) {
            return api.sendMessage(
                "üåê D·ªäCH THU·∫¨T üåê\n" +
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                "C√°ch d√πng:\n" +
                "1. D·ªãch b√¨nh th∆∞·ªùng:\n" + 
                "   dich [ng√¥n ng·ªØ] [n·ªôi dung]\n" +
                "   VD: dich anh xin ch√†o\n\n" +
                "2. D·ªãch qua reply:\n" +
                "   Reply tin nh·∫Øn + dich [ng√¥n ng·ªØ]\n" +
                "   VD: dich nh·∫≠t\n\n" +
                "Ng√¥n ng·ªØ h·ªó tr·ª£:\n" +
                "- Vi·ªát (v)\n- Anh (a)\n- Nh·∫≠t (n)\n" +
                "- H√†n (h)\n- Trung (t)\n- Ph√°p (p)\n" +
                "- ƒê·ª©c (de)\n- Nga (ru)\n- √ù (it)\n" +
                "- T√¢y Ban Nha (tbn)\n- Th√°i (tl)\n" +
                "- Indonesia (indo)",
                threadID
            );
        }

        try {
            let langCode = 'vi';
            let content = '';

            // X·ª≠ l√Ω reply
            if (event.messageReply) {
                langCode = this.getLanguageCode(target[0] || 'vi·ªát');
                content = event.messageReply.body;
            }
            // X·ª≠ l√Ω l·ªánh tr·ª±c ti·∫øp
            else {
                langCode = this.getLanguageCode(target[0]);
                content = target.slice(1).join(" ");
                
                // N·∫øu kh√¥ng c√≥ ng√¥n ng·ªØ, m·∫∑c ƒë·ªãnh d·ªãch sang ti·∫øng Vi·ªát
                if (!content) {
                    content = target.join(" ");
                    langCode = 'vi';
                }
            }

            if (!content) {
                return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn d·ªãch!", threadID);
            }

            const translated = await this.translate(content, langCode);
            return api.sendMessage(
                `üìù VƒÉn b·∫£n g·ªëc:\n${content}\n\n` +
                `üåê B·∫£n d·ªãch (${langCode}):\n${translated}`,
                threadID
            );

        } catch (err) {
            return api.sendMessage(
                `‚ùå L·ªói: ${err.message || "Kh√¥ng th·ªÉ d·ªãch vƒÉn b·∫£n n√†y"}`, 
                threadID
            );
        }
    }
};
