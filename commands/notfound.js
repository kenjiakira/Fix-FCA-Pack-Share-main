const fs = require("fs");
const path = require("path");

module.exports = {
    name: "notfound",
    hide: true,
    info: "X·ª≠ l√Ω khi kh√¥ng t√¨m th·∫•y l·ªánh",
    
    findSimilarCommands: function(cmdName, allCommands) {
        const calculateLevenshteinDistance = (a, b) => {
            const tmp = [];
            for (let i = 0; i <= a.length; i++) {
                tmp[i] = [i];
            }
            for (let j = 0; j <= b.length; j++) {
                tmp[0][j] = j;
            }
            for (let i = 1; i <= a.length; i++) {
                for (let j = 1; j <= b.length; j++) {
                    tmp[i][j] = Math.min(
                        tmp[i - 1][j] + 1,
                        tmp[i][j - 1] + 1,
                        tmp[i - 1][j - 1] + (a[i - 1] === b[j - 1] ? 0 : 1)
                    );
                }
            }
            return tmp[a.length][b.length];
        };

        return allCommands
            .map(cmd => ({ cmd, distance: calculateLevenshteinDistance(cmdName, cmd) }))
            .filter(({ distance }) => distance <= 3)
            .sort((a, b) => a.distance - b.distance)
            .slice(0, 3)
            .map(({ cmd }) => cmd);
    },

    onLaunch: function({ event, actions, api, prefix, commandName }) {
        const allCommands = Object.keys(global.cc.module.commands)
            .filter(cmd => !global.cc.module.commands[cmd].hide);
            
        return this.handleNotFound({ 
            api, 
            event, 
            commandName, 
            prefix, 
            allCommands 
        });
    },

    handleNotFound: async function({ api, event, commandName, prefix, allCommands }) {
        if (!commandName) {
            const emptyMessage = [
                "‚ùì B·∫†N MU·ªêN D√ôNG L·ªÜNH G√å?",
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                "",
                "üìå H∆Ø·ªöNG D·∫™N NHANH:",
                `‚Ä¢ G√µ ${prefix} + t√™n l·ªánh ƒë·ªÉ s·ª≠ d·ª•ng`,
                `‚Ä¢ V√≠ d·ª•: ${prefix}help, ${prefix}coin`,
                "",
                "üí° M·∫∏O:",
                `‚Ä¢ G√µ ${prefix}help ƒë·ªÉ xem danh s√°ch l·ªánh`,
                "‚Ä¢ ƒê·ªçc k·ªπ h∆∞·ªõng d·∫´n tr∆∞·ªõc khi d√πng",
                "‚Ä¢ H·ªèi admin n·∫øu c·∫ßn gi√∫p ƒë·ª°"
            ].join('\n');
            
            return api.sendMessage(emptyMessage, event.threadID, (err, info) => {
                if (!err) setTimeout(() => api.unsendMessage(info.messageID), 30000);
            });
        }

        const similarCommands = this.findSimilarCommands(commandName, allCommands);
        
        let notFoundMessage = [
            "‚ùå L·ªÜNH KH√îNG T·ªíN T·∫†I",
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "",
            `üîç B·∫°n ƒëang t√¨m: ${prefix}${commandName}`,
        ].join('\n');
        
        if (similarCommands.length > 0) {
            notFoundMessage += "\n\nüí° C√ì TH·ªÇ B·∫†N MU·ªêN D√ôNG:";
            similarCommands.forEach((cmd, index) => {
                notFoundMessage += `\n${index + 1}. ${prefix}${cmd}`;
          
                const cmdDescription = this.getCommandDescription(cmd);
                if (cmdDescription) {
                    notFoundMessage += `\n   ‚û£ ${cmdDescription}`;
                }
            });
        }
        
        notFoundMessage += "\n\nüìå H∆Ø·ªöNG D·∫™N:";
        notFoundMessage += `\n‚Ä¢ G√µ ${prefix}help ƒë·ªÉ xem danh s√°ch l·ªánh`;
        notFoundMessage += `\n‚Ä¢ G√µ ${prefix}help <t√™n l·ªánh> ƒë·ªÉ xem chi ti·∫øt`;
        notFoundMessage += "\n‚Ä¢ Ki·ªÉm tra ch√≠nh t·∫£ v√† th·ª≠ l·∫°i";

        return api.sendMessage(notFoundMessage, event.threadID, (err, info) => {
            if (!err) setTimeout(() => api.unsendMessage(info.messageID), 30000);
        });
    },

    getCommandDescription(cmdName) {
        const descriptions = {
            "help": "Xem danh s√°ch v√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh",
            "coin": "Ch∆°i game ƒë√†o coin v√† ki·∫øm ti·ªÅn",
            "market": "Xem v√† giao d·ªãch tr√™n th·ªã tr∆∞·ªùng",
            "info": "Xem th√¥ng tin ng∆∞·ªùi d√πng v√† nh√≥m",
            "daily": "Nh·∫≠n qu√† h√†ng ng√†y",
            "work": "L√†m vi·ªác ki·∫øm ti·ªÅn",
            "play": "Nghe nh·∫°c t·ª´ YouTube",
            "tiktok": "T·∫£i video t·ª´ TikTok",
            "weather": "Xem th√¥ng tin th·ªùi ti·∫øt",
            "translate": "D·ªãch vƒÉn b·∫£n qua ng√¥n ng·ªØ kh√°c",
    
        };
        return descriptions[cmdName];
    }
};
