const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { createCanvas, loadImage } = require('canvas');
const getThreadParticipantIDs = require('../utils/getParticipantIDs');
let userImg, partnerImg;

module.exports = {
  name: "ghep",
  category: "Gi·∫£i Tr√≠",
  info: "Gh√©p ƒë√¥i ng·∫´u nhi√™n v·ªõi nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã",
  onPrefix: true,
  usages: "ghep",
  cooldowns: 30,

  onLaunch: async ({ api, event }) => {
    try {
      const { threadID, senderID } = event;
      let partnerId;

      if (event.type === 'message_reply') {
        partnerId = event.messageReply.senderID;
      }
      else if (Object.keys(event.mentions).length > 0) {
        partnerId = Object.keys(event.mentions)[0];
      }
      else {
        const participants = await getThreadParticipantIDs(api, threadID);

        const availablePartners = participants.filter(id => id !== senderID);

        if (availablePartners.length === 0) {
          return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng ph√π h·ª£p trong nh√≥m!", threadID);
        }

        partnerId = availablePartners[Math.floor(Math.random() * availablePartners.length)];
      }

      if (partnerId === senderID) {
        return api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·ª± gh√©p ƒë√¥i v·ªõi ch√≠nh m√¨nh!", threadID);
      }

      const compatibility = Math.floor(Math.random() * 100) + 1; const compatMessage = getCompatibilityMessage(compatibility); const zodiacSigns = ['B·∫°ch D∆∞∆°ng', 'Kim Ng∆∞u', 'Song T·ª≠', 'C·ª± Gi·∫£i', 'S∆∞ T·ª≠', 'X·ª≠ N·ªØ', 'Thi√™n B√¨nh', 'B·ªç C·∫°p', 'Nh√¢n M√£', 'Ma K·∫øt', 'B·∫£o B√¨nh', 'Song Ng∆∞'];
      const userZodiac = zodiacSigns[Math.floor(Math.random() * zodiacSigns.length)];
      const partnerZodiac = zodiacSigns[Math.floor(Math.random() * zodiacSigns.length)];
      const personalityMatch = Math.floor(Math.random() * 100) + 1;
      const interestMatch = Math.floor(Math.random() * 100) + 1;
      const futureChance = Math.floor(Math.random() * 100) + 1;

      const loveQuotes = [
        "Y√™u l√† khi hai tr√°i tim c√πng ƒë·∫≠p m·ªôt nh·ªãp",
        "T√¨nh y√™u kh√¥ng c·∫ßn l√Ω do, ch·ªâ c·∫ßn c√≥ nhau",
        "ƒê·ªùi l√† b·ªÉ kh·ªï, em l√† b·ªù vai",
        "Anh c·ª© ƒëi ƒëi ƒë·ªÉ th·∫•y ƒëi xa em l√† kh√¥ng th·ªÉ",
        "Em l√† m√≥n qu√† v√¥ gi√° c·ªßa cu·ªôc ƒë·ªùi anh",
        "Y√™u em nh∆∞ gi√≥ y√™u m√¢y, nh∆∞ hoa y√™u n·∫Øng, nh∆∞ ƒë·∫Øm say y√™u ƒë·ªùi",
        "Thanh xu√¢n c·ªßa anh ch·ªâ c·∫ßn c√≥ em l√† ƒë·ªß",
        "Em l√† ƒëi·ªÅu tuy·ªát v·ªùi nh·∫•t anh t·ª´ng c√≥",
        "C√≥ em, anh th·∫•y c·∫£ th·∫ø gi·ªõi n√†y ƒë·ªÅu t∆∞∆°i ƒë·∫πp",
        "M·ªôt ng√†y kh√¥ng g·∫∑p em nh∆∞ ba thu v·∫Øng b√≥ng",
        "G·∫∑p em l√† ƒë·ªãnh m·ªánh, y√™u em l√† s·ª± l·ª±a ch·ªçn",
        "Anh kh√¥ng c·∫ßn c·∫£ th·∫ø gi·ªõi, anh ch·ªâ c·∫ßn m·ªôt em th√¥i",
        "Em l√† c·∫£ b·∫ßu tr·ªùi c·ªßa ri√™ng anh"
      ];

      const futures = [
        "T∆∞∆°ng lai: S·∫Ω c√≥ m·ªôt ƒë√°m c∆∞·ªõi ƒë·∫πp nh∆∞ m∆° üíí",
        "T∆∞∆°ng lai: C√≥ 2 con, m·ªôt trai m·ªôt g√°i üë∂üë∂",
        "T∆∞∆°ng lai: S·ªëng h·∫°nh ph√∫c b√™n nhau t·ªõi gi√† üë´",
        "T∆∞∆°ng lai: C√πng nhau ƒëi kh·∫Øp th·∫ø gian ‚úàÔ∏è",
        "T∆∞∆°ng lai: M·ªü m·ªôt qu√°n caf√© nh·ªè xinh c√πng nhau ‚òï",
        "T∆∞∆°ng lai: C√≥ m·ªôt cƒÉn nh√† nh·ªè ven bi·ªÉn üèñÔ∏è",
        "T∆∞∆°ng lai: C√πng nhau nu√¥i 3 ch√∫ m√®o cute üê±",
        "T∆∞∆°ng lai: Tr·ªü th√†nh c·∫∑p ƒë√¥i n·ªïi ti·∫øng MXH üì±",
        "T∆∞∆°ng lai: C√πng nhau kh·ªüi nghi·ªáp th√†nh c√¥ng üíº",
        "T∆∞∆°ng lai: Tr·ªü th√†nh c·∫∑p v·ª£ ch·ªìng YouTuber üé•",
        "T∆∞∆°ng lai: C√≥ m·ªôt khu v∆∞·ªùn nh·ªè tr·ªìng rau qu·∫£ üå±",
        "T∆∞∆°ng lai: M·ªói nƒÉm ƒëi du l·ªãch m·ªôt n∆∞·ªõc m·ªõi üåé",
        "T∆∞∆°ng lai: C√πng nhau gi√† ƒëi trong h·∫°nh ph√∫c üë¥üëµ",
        "T∆∞∆°ng lai: Tr·ªü th√†nh c·∫∑p ƒë√¥i ho√†n h·∫£o trong m·∫Øt m·ªçi ng∆∞·ªùi üíë"
      ];

      const getAvatar = async (uid) => {
        if (uid === 'default') {
          return createDefaultAvatar();
        }

        const avatarUrl = `https://graph.facebook.com/${uid}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;
        try {
          const response = await axios.get(avatarUrl, {
            responseType: 'arraybuffer',
            timeout: 15000, // TƒÉng timeout l√™n 15 gi√¢y
            validateStatus: function (status) {
              return status >= 200 && status < 300;
            },
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36'
            }
          });

          if (!response.data || response.data.length === 0) {
            console.log(`Empty avatar data for ${uid}, using default`);
            return createDefaultAvatar();
          }

          return response.data;
        } catch (err) {
          console.error(`Failed to get avatar for ${uid}: ${err.message}`);
          return createDefaultAvatar();
          // Create a default avatar
          const canvas = createCanvas(512, 512);
          const ctx = canvas.getContext('2d');

          // Fill background
          const gradient = ctx.createLinearGradient(0, 0, 512, 512);
          gradient.addColorStop(0, '#4a148c');
          gradient.addColorStop(1, '#311b92');
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, 512, 512);

          // Add text
          ctx.font = 'bold 200px Arial';
          ctx.fillStyle = '#ffffff';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.fillText('?', 256, 256);

          return canvas.toBuffer('image/jpeg');
        }
      };

      try {
        [userImg, partnerImg] = await Promise.all([
          getAvatar(senderID).catch(err => {
            console.error(`Failed to get user avatar: ${err.message}`);
            return createDefaultAvatar();
          }),
          getAvatar(partnerId).catch(err => {
            console.error(`Failed to get partner avatar: ${err.message}`);
            return createDefaultAvatar();
          })
        ]);
      } catch (error) {
        console.error("Error getting avatars:", error);

        userImg = createDefaultAvatar();
        partnerImg = createDefaultAvatar();
      }

      function createDefaultAvatar() {
        const canvas = createCanvas(512, 512);
        const ctx = canvas.getContext('2d');

        const gradient = ctx.createLinearGradient(0, 0, 512, 512);
        gradient.addColorStop(0, '#4a148c');
        gradient.addColorStop(1, '#311b92');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 512, 512);

        ctx.font = 'bold 200px Arial';
        ctx.fillStyle = '#ffffff';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('?', 256, 256);

        return canvas.toBuffer('image/jpeg');
      }

      const avatarCacheDir = path.join(__dirname, './cache/avatar');
      if (!fs.existsSync(avatarCacheDir)) {
        fs.mkdirSync(avatarCacheDir, { recursive: true });
      }

      const pathUser = path.join(avatarCacheDir, 'user.jpg');
      const pathPartner = path.join(avatarCacheDir, 'partner.jpg');

      fs.writeFileSync(pathUser, userImg);
      fs.writeFileSync(pathPartner, partnerImg);

      const userDataPath = path.join(__dirname, '../events/cache/userData.json');
      let userName, partnerName;

      try {
        const userData = await api.getUserInfo([senderID, partnerId]);
        userName = userData[senderID]?.name || "Ng∆∞·ªùi d√πng";
        partnerName = userData[partnerId]?.name || "Ng∆∞·ªùi ·∫•y";
      } catch (err) {
        console.error("Error getting user info from API, trying userData.json");
        try {
          const userDataJson = JSON.parse(fs.readFileSync(userDataPath, 'utf8'));
          userName = userDataJson[senderID]?.name || "Ng∆∞·ªùi d√πng";
          partnerName = userDataJson[partnerId]?.name || "Ng∆∞·ªùi ·∫•y";
        } catch (jsonErr) {
          console.error("Error reading from userData.json:", jsonErr);
          userName = "Ng∆∞·ªùi d√πng";
          partnerName = "Ng∆∞·ªùi ·∫•y";
        }
      }

      fs.writeFileSync(pathUser, userImg);
      fs.writeFileSync(pathPartner, partnerImg);

      const img1 = await loadImage(pathUser);
      const img2 = await loadImage(pathPartner);

      // K√≠ch th∆∞·ªõc l·ªõn h∆°n cho chi ti·∫øt r√µ n√©t
      const canvas = createCanvas(1200, 800);
      const ctx = canvas.getContext('2d');

      // ===== BACKGROUND SANG TR·ªåNG =====
      // Gradient n·ªÅn ch√≠nh
      const bgGradient = ctx.createLinearGradient(0, 0, 1200, 800);
      bgGradient.addColorStop(0, '#141e30');
      bgGradient.addColorStop(1, '#243b55');
      ctx.fillStyle = bgGradient;
      ctx.fillRect(0, 0, 1200, 800);

      // Hi·ªáu ·ª©ng sao l·∫•p l√°nh
      for (let i = 0; i < 100; i++) {
        const x = Math.random() * 1200;
        const y = Math.random() * 800;
        const radius = Math.random() * 2;
        const opacity = Math.random() * 0.8 + 0.2;

        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;
        ctx.fill();
      }

      // Hi·ªáu ·ª©ng √°nh s√°ng h√†o quang
      const radialGradient = ctx.createRadialGradient(600, 400, 100, 600, 400, 800);
      radialGradient.addColorStop(0, 'rgba(255, 192, 203, 0.4)');
      radialGradient.addColorStop(0.5, 'rgba(255, 182, 193, 0.1)');
      radialGradient.addColorStop(1, 'rgba(255, 182, 193, 0)');
      ctx.fillStyle = radialGradient;
      ctx.fillRect(0, 0, 1200, 800);

      // ===== TI√äU ƒê·ªÄ TRANG TR√ç =====
      ctx.font = 'bold 60px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';

      // Hi·ªáu ·ª©ng vi·ªÅn s√°ng cho text
      ctx.strokeStyle = '#FF9AA2';
      ctx.lineWidth = 8;
      ctx.shadowColor = '#FF9AA2';
      ctx.shadowBlur = 15;
      ctx.strokeText('üíñ GH√âP ƒê√îI üíñ', 600, 80);

      // Text ch√≠nh
      const titleGradient = ctx.createLinearGradient(400, 60, 800, 100);
      titleGradient.addColorStop(0, '#FF9AA2');
      titleGradient.addColorStop(0.5, '#FFDFD3');
      titleGradient.addColorStop(1, '#FF9AA2');
      ctx.fillStyle = titleGradient;
      ctx.fillText('üíñ GH√âP ƒê√îI üíñ', 600, 80);
      ctx.shadowBlur = 0;

      // ===== KHUNG AVATAR SANG TR·ªåNG =====
      function drawLuxuryFrame(x, y, image, name, zodiac) {
        // V√≤ng trang tr√≠ b√™n ngo√†i
        ctx.beginPath();
        ctx.arc(x, y, 230, 0, Math.PI * 2);
        const outerGradient = ctx.createLinearGradient(x - 230, y - 230, x + 230, y + 230);
        outerGradient.addColorStop(0, '#FFD700');
        outerGradient.addColorStop(0.5, '#FFC107');
        outerGradient.addColorStop(1, '#FFD700');
        ctx.strokeStyle = outerGradient;
        ctx.lineWidth = 10;
        ctx.stroke();

        // Hi·ªáu ·ª©ng √°nh s√°ng
        ctx.beginPath();
        ctx.arc(x, y, 220, 0, Math.PI * 2);
        const glowGradient = ctx.createRadialGradient(x, y, 180, x, y, 220);
        glowGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');
        glowGradient.addColorStop(1, 'rgba(255, 215, 0, 0.3)');
        ctx.fillStyle = glowGradient;
        ctx.fill();

        // V√≤ng tr√≤n b√™n trong
        ctx.save();
        ctx.beginPath();
        ctx.arc(x, y, 180, 0, Math.PI * 2);

        // Border gradient
        const borderGradient = ctx.createLinearGradient(x - 180, y - 180, x + 180, y + 180);
        borderGradient.addColorStop(0, '#FFD700');
        borderGradient.addColorStop(0.5, 'white');
        borderGradient.addColorStop(1, '#FFD700');
        ctx.strokeStyle = borderGradient;
        ctx.lineWidth = 5;
        ctx.stroke();

        // Clip v√† v·∫Ω avatar
        ctx.clip();
        ctx.drawImage(image, x - 180, y - 180, 360, 360);
        ctx.restore();

        // Trang tr√≠ ƒëi·ªÉm s√°ng
        for (let i = 0; i < 8; i++) {
          const angle = i * Math.PI / 4;
          const dotX = x + Math.cos(angle) * 210;
          const dotY = y + Math.sin(angle) * 210;

          ctx.beginPath();
          ctx.arc(dotX, dotY, 8, 0, Math.PI * 2);
          ctx.fillStyle = '#FFD700';
          ctx.fill();
        }

        // T√™n ng∆∞·ªùi d√πng v·ªõi hi·ªáu ·ª©ng b√≥ng ƒë·ªï
        ctx.font = 'bold 32px Arial';
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';
        ctx.shadowBlur = 7;
        ctx.shadowOffsetX = 2;
        ctx.shadowOffsetY = 2;
        ctx.fillText(name, x, y + 240);

        // Cung ho√†ng ƒë·∫°o
        ctx.font = 'italic 24px Arial';
        ctx.fillStyle = '#FFD700';
        ctx.fillText(`${zodiac}`, x, y + 280);
        ctx.shadowBlur = 0;
      }

      // V·∫Ω hai avatar
      drawLuxuryFrame(300, 350, img1, userName, userZodiac);
      drawLuxuryFrame(900, 350, img2, partnerName, partnerZodiac);
      // ===== HI·ªÜU ·ª®NG TR√ÅI TIM GI·ªÆA =====
      // V·∫Ω tr√°i tim chu·∫©n h∆°n v·ªõi t·ª∑ l·ªá h·ª£p l√Ω
      const heartX = 600;
      const heartY = 350;
      const heartSize = 150; // K√≠ch th∆∞·ªõc ph√π h·ª£p

      // V·∫Ω tr√°i tim v·ªõi c√¥ng th·ª©c chu·∫©n
      ctx.beginPath();

      // S·ª≠ d·ª•ng c√¥ng th·ª©c tr√°i tim to√°n h·ªçc ch√≠nh x√°c
      const drawHeart = (x, y, size) => {
        ctx.beginPath();

        // B·∫Øt ƒë·∫ßu t·ª´ ƒë·ªânh tr√°i tim
        ctx.moveTo(x, y - size * 0.5);

        // V·∫Ω b√™n tr√°i c·ªßa tr√°i tim
        ctx.bezierCurveTo(
          x - size * 0.5, y - size * 0.8, // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 1
          x - size, y - size * 0.25,      // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 2
          x - size * 0.5, y + size * 0.35 // ƒêi·ªÉm cu·ªëi c√°nh tr√°i
        );

        // V·∫Ω ph·∫ßn d∆∞·ªõi b√™n tr√°i
        ctx.bezierCurveTo(
          x - size * 0.25, y + size * 0.7, // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 1
          x, y + size * 0.8,               // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 2
          x, y + size * 0.8                // ƒêi·ªÉm cu·ªëi ƒë√°y tim
        );

        // V·∫Ω ph·∫ßn d∆∞·ªõi b√™n ph·∫£i
        ctx.bezierCurveTo(
          x, y + size * 0.8,               // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 1
          x + size * 0.25, y + size * 0.7, // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 2
          x + size * 0.5, y + size * 0.35  // ƒêi·ªÉm cu·ªëi c√°nh ph·∫£i
        );

        // V·∫Ω b√™n ph·∫£i c·ªßa tr√°i tim
        ctx.bezierCurveTo(
          x + size, y - size * 0.25,      // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 1
          x + size * 0.5, y - size * 0.8, // ƒêi·ªÉm ƒëi·ªÅu khi·ªÉn 2
          x, y - size * 0.5               // Tr·ªü v·ªÅ ƒëi·ªÉm ƒë·∫ßu
        );

        ctx.closePath();
      };

      // √Åp d·ª•ng h√†m v·∫Ω tr√°i tim
      drawHeart(heartX, heartY, heartSize);

      // Hi·ªáu ·ª©ng b√≥ng ƒë·ªï v√† vi·ªÅn
      ctx.shadowColor = 'rgba(255, 0, 120, 0.6)';
      ctx.shadowBlur = 25;
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;

      // Vi·ªÅn tr√°i tim
      ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';
      ctx.lineWidth = 6;
      ctx.stroke();

      // ƒê·ªï m√†u gradient ƒë·∫πp
      ctx.shadowBlur = 0; // T·∫Øt b√≥ng ƒë·ªï khi t√¥ m√†u b√™n trong
      ctx.save();
      ctx.clip();

      // S·ª≠ d·ª•ng c·∫£ linear v√† radial gradient ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng 3D
      const heartGradient = ctx.createRadialGradient(
        heartX - heartSize * 0.2, heartY - heartSize * 0.3, 0,
        heartX, heartY, heartSize * 1.1
      );

      // M√†u s·∫Øc thay ƒë·ªïi d·ª±a tr√™n ƒë·ªô h·ª£p nhau
      if (compatibility >= 80) {
        heartGradient.addColorStop(0, '#ff5e82');
        heartGradient.addColorStop(0.3, '#ff3366');
        heartGradient.addColorStop(0.6, '#ff0a47');
        heartGradient.addColorStop(1, '#d10039');
      } else if (compatibility >= 50) {
        heartGradient.addColorStop(0, '#ff91c8');
        heartGradient.addColorStop(0.3, '#ff578b');
        heartGradient.addColorStop(0.7, '#ff3366');
        heartGradient.addColorStop(1, '#d12657');
      } else {
        heartGradient.addColorStop(0, '#ffb0c8');
        heartGradient.addColorStop(0.4, '#ff8fa6');
        heartGradient.addColorStop(0.7, '#ff7a8a');
        heartGradient.addColorStop(1, '#d16b6b');
      }

      ctx.fillStyle = heartGradient;
      ctx.fill();

      // Th√™m hi·ªáu ·ª©ng √°nh s√°ng b√™n trong tr√°i tim
      ctx.globalCompositeOperation = 'lighter';
      const heartShine = ctx.createRadialGradient(
        heartX - heartSize * 0.3, heartY - heartSize * 0.3, 0,
        heartX - heartSize * 0.3, heartY - heartSize * 0.3, heartSize
      );
      heartShine.addColorStop(0, 'rgba(255, 255, 255, 0.8)');
      heartShine.addColorStop(0.1, 'rgba(255, 255, 255, 0.3)');
      heartShine.addColorStop(0.5, 'rgba(255, 255, 255, 0)');
      ctx.fillStyle = heartShine;
      ctx.fill();
      ctx.globalCompositeOperation = 'source-over';

      // Th√™m hi·ªáu ·ª©ng l·∫•p l√°nh d·∫°ng sao
      for (let i = 0; i < 8; i++) {
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.random() * heartSize * 0.5;
        const x = heartX + Math.cos(angle) * distance;
        const y = heartY + Math.sin(angle) * distance * 0.8;
        const size = Math.random() * 3 + 2;

        ctx.save();
        ctx.translate(x, y);
        ctx.rotate(Math.random() * Math.PI);

        // V·∫Ω ng√¥i sao 5 c√°nh
        ctx.beginPath();
        for (let j = 0; j < 10; j++) {
          const radius = j % 2 === 0 ? size : size * 0.4;
          const starAngle = (j / 10) * Math.PI * 2;
          if (j === 0) {
            ctx.moveTo(Math.cos(starAngle) * radius, Math.sin(starAngle) * radius);
          } else {
            ctx.lineTo(Math.cos(starAngle) * radius, Math.sin(starAngle) * radius);
          }
        }
        ctx.closePath();

        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.fill();

        ctx.restore();
      }

      ctx.restore();

      // ===== T·ª∂ L·ªÜ H·ª¢P NHAU =====
      // Hi·ªÉn th·ªã t·ª∑ l·ªá ph·∫ßn trƒÉm trong tr√°i tim
      ctx.font = 'bold 46px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = 'white';
      ctx.shadowColor = 'rgba(0, 0, 0, 0.7)';
      ctx.shadowBlur = 5;
      ctx.shadowOffsetX = 2;
      ctx.shadowOffsetY = 2;
      ctx.fillText(`${compatibility}%`, heartX, heartY);
      ctx.shadowBlur = 0;
      // ===== TH√îNG TIN CHI TI·∫æT =====
      // Khung th√¥ng tin
      const infoBoxY = 620;
      ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
      ctx.beginPath();
      ctx.roundRect(200, infoBoxY, 800, 180, 15);
      ctx.fill();

      ctx.strokeStyle = '#FFD700';
      ctx.lineWidth = 2;
      ctx.stroke();

      // Th√™m trang tr√≠ cho khung
      ctx.fillStyle = '#FFD700';
      ctx.beginPath();
      ctx.moveTo(200, infoBoxY + 30);
      ctx.lineTo(1000, infoBoxY + 30);
      ctx.lineWidth = 1;
      ctx.stroke();

      // CƒÉn gi·ªØa c·ªßa b·∫£ng th√¥ng tin
      const infoBoxCenterX = 600; // (200 + 1000) / 2

      // VƒÉn b·∫£n ƒë√°nh gi√° m·ªëi quan h·ªá
      ctx.font = 'bold 24px Arial';
      ctx.fillStyle = '#FFD700';
      ctx.textAlign = 'center';
      ctx.fillText(compatMessage, infoBoxCenterX, infoBoxY + 30);

      // Hi·ªáu ·ª©ng thanh ti·∫øn tr√¨nh cho c√°c ch·ªâ s·ªë - cƒÉn gi·ªØa
      function drawProgressBar(x, y, value, label) {
        const barWidth = 400; // TƒÉng chi·ªÅu r·ªông thanh
        const barHeight = 12;

        // CƒÉn gi·ªØa thanh v·ªõi b·∫£ng th√¥ng tin
        const startX = infoBoxCenterX - barWidth / 2;

        // Nh√£n - cƒÉn tr√°i
        ctx.fillStyle = '#DDDDDD';
        ctx.textAlign = 'left';
        ctx.fillText(label, startX, y + 6);

        // N·ªÅn thanh
        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
        ctx.beginPath();
        ctx.roundRect(startX + 100, y, barWidth - 100, barHeight, 6); // D√†nh ch·ªó cho nh√£n
        ctx.fill();

        // Thanh ti·∫øn tr√¨nh
        let barColor;
        if (value >= 70) barColor = '#4CAF50';
        else if (value >= 40) barColor = '#FFC107';
        else barColor = '#F44336';

        ctx.fillStyle = barColor;
        ctx.beginPath();
        ctx.roundRect(startX + 100, y, (barWidth - 100) * (value / 100), barHeight, 6);
        ctx.fill();

        // Hi·ªÉn th·ªã gi√° tr·ªã - cƒÉn ph·∫£i
        ctx.fillStyle = 'white';
        ctx.textAlign = 'right';
        ctx.fillText(`${value}%`, startX + barWidth, y + 6);
      }

      // V·∫Ω c√°c thanh ti·∫øn tr√¨nh cƒÉn gi·ªØa
      drawProgressBar(0, infoBoxY + 60, personalityMatch, "T√≠nh c√°ch:");
      drawProgressBar(0, infoBoxY + 90, interestMatch, "S·ªü th√≠ch:");
      drawProgressBar(0, infoBoxY + 120, futureChance, "Ti·∫øn xa:");

      // ===== FOOTER =====
      // Th√™m footer v·ªõi quote t√¨nh y√™u
      const loveQuote = loveQuotes[Math.floor(Math.random() * loveQuotes.length)];
      ctx.font = 'italic 20px Arial';
      ctx.fillStyle = '#FFD700';
      ctx.textAlign = 'center';
      ctx.fillText(`"${loveQuote}"`, infoBoxCenterX, infoBoxY + 160);

      // Trang tr√≠ h·ªça ti·∫øt g√≥c
      function drawCornerDecoration(x, y, rotation) {
        ctx.save();
        ctx.translate(x, y);
        ctx.rotate(rotation);

        const gradient = ctx.createLinearGradient(0, -30, 0, 30);
        gradient.addColorStop(0, '#FFD700');
        gradient.addColorStop(1, '#FFC107');
        ctx.strokeStyle = gradient;
        ctx.lineWidth = 3;

        ctx.beginPath();
        ctx.moveTo(0, -30);
        ctx.lineTo(0, -10);
        ctx.moveTo(0, 10);
        ctx.lineTo(0, 30);
        ctx.moveTo(-30, 0);
        ctx.lineTo(-10, 0);
        ctx.moveTo(10, 0);
        ctx.lineTo(30, 0);
        ctx.stroke();

        ctx.restore();
      }

      // V·∫Ω c√°c h·ªça ti·∫øt trang tr√≠ g√≥c
      drawCornerDecoration(50, 50, 0);
      drawCornerDecoration(1150, 50, Math.PI / 2);
      drawCornerDecoration(50, 750, -Math.PI / 2);
      drawCornerDecoration(1150, 750, Math.PI);

      const mergedPath = path.join(__dirname, '../commands/cache/avatar/merged.jpg');
      const out = fs.createWriteStream(mergedPath);
      const stream = canvas.createJPEGStream({ quality: 0.95 });
      stream.pipe(out);

      await new Promise((resolve) => out.on('finish', resolve));

      if (!fs.existsSync(mergedPath)) {
        throw new Error("Failed to create merged image");
      }

      await api.sendMessage({
        body: `üéê Gh√©p ƒë√¥i th√†nh c√¥ng!\n` +
          `üíù ${userName} (${userZodiac}) üíì ${partnerName} (${partnerZodiac})\n` +
          `üîí T·ªâ l·ªá h·ª£p ƒë√¥i: ${compatibility}%\n` +
          `${getCompatibilityMessage(compatibility)}\n\n` +
          `üí´ Ph√¢n t√≠ch chi ti·∫øt:\n` +
          `- H·ª£p nhau v·ªÅ t√≠nh c√°ch: ${Math.floor(Math.random() * 100)}%\n` +
          `- H·ª£p nhau v·ªÅ s·ªü th√≠ch: ${Math.floor(Math.random() * 100)}%\n` +
          `- C√≥ c∆° h·ªôi ti·∫øn xa: ${Math.floor(Math.random() * 100)}%\n\n` +
          `üíå L·ªùi th√¨ th·∫ßm: ${loveQuotes[Math.floor(Math.random() * loveQuotes.length)]}\n` +
          `üîÆ ${futures[Math.floor(Math.random() * futures.length)]}`,
        attachment: fs.createReadStream(mergedPath)
      }, event.threadID, event.messageID);

      try {
        fs.unlinkSync(mergedPath);
        fs.unlinkSync(pathUser);
        fs.unlinkSync(pathPartner);
      } catch (err) {
        console.error("Error cleaning up files:", err);
      }

    } catch (error) {
      console.error("Main error:", error);
      return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau!", event.threadID);
    }
  }
};

function getCompatibilityMessage(rate) {
  if (rate >= 90) return "üíï ƒê·ªãnh m·ªánh ƒë√£ se duy√™n, qu√° h·ª£p v·ªõi nhau lu√¥n!";
  if (rate >= 70) return "üíñ M·ªôt c·∫∑p tr·ªùi sinh, ƒë√°ng y√™u kh√¥ng ch·ªãu ƒë∆∞·ª£c!";
  if (rate >= 50) return "üí´ H·ª£p ƒë·∫•y, c√≥ tri·ªÉn v·ªçng ph√°t tri·ªÉn l·∫Øm!";
  if (rate >= 30) return "üåü C≈©ng c√≥ duy√™n ƒë·∫•y, th·ª≠ t√¨m hi·ªÉu xem sao!";
  return "üí¢ Duy√™n ph·∫≠n mong manh, nh∆∞ng ƒë·ª´ng n·∫£n l√≤ng!";
}
