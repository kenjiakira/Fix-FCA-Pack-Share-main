const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { getBalance, updateBalance } = require('../utils/currencies');

const PROJECTS_FILE = path.join(__dirname, './json/airdrop/projects.json');
const WALLETS_FILE = path.join(__dirname, './json/airdrop/wallets.json');
const TASKS_FILE = path.join(__dirname, './json/airdrop/tasks.json');

[PROJECTS_FILE, WALLETS_FILE, TASKS_FILE].forEach(file => {
    fs.mkdirSync(path.dirname(file), { recursive: true });
});
const USER_BADGES = {
    'early_adopter': {
        name: 'üåü Early Adopter',
        description: 'Tham gia s·ªõm v√†o h·ªá th·ªëng Airdrop'
    },
    'big_spender': {
        name: 'üí∏ Big Spender',
        description: 'ƒê√£ mint √≠t nh·∫•t 5 NFT'
    },
    'token_whale': {
        name: 'üêã Token Whale',
        description: 'S·ªü h·ªØu h∆°n 10,000 FARM token'
    },
    'farming_streak': {
        name: 'üî• Farming Streak',
        description: 'Duy tr√¨ streak farming 7 ng√†y li√™n t·ª•c'
    },
    'all_tasks': {
        name: '‚úÖ Task Master',
        description: 'Ho√†n th√†nh t·∫•t c·∫£ c√°c nhi·ªám v·ª• d·ª± √°n'
    },
    'all_achievements': {
        name: 'üèÜ Achievement Hunter',
        description: 'M·ªü kh√≥a t·∫•t c·∫£ c√°c th√†nh t·ª±u'
    }
};
// C·∫≠p nh·∫≠t m·∫´u d·ª± √°n v·ªõi nhi·ªÅu lo·∫°i v√† ch·ª©c nƒÉng h∆°n
const PROJECT_TEMPLATES = {
    defi: {
        type: 'DeFi',
        description: 'C√°c d·ª± √°n t√†i ch√≠nh phi t·∫≠p trung, swap token v√† cung c·∫•p thanh kho·∫£n',
        tasks: [
            { id: 'connect_wallet', name: 'Connect Wallet', difficulty: 'easy', reward: [50, 150] },
            { id: 'swap_token', name: 'Swap Token', difficulty: 'medium', reward: [100, 300] },
            { id: 'add_liquidity', name: 'Add Liquidity', difficulty: 'hard', reward: [200, 500] },
            { id: 'stake_token', name: 'Stake Token', difficulty: 'medium', reward: [100, 300] },
            { id: 'refer_friend', name: 'Refer a Friend', difficulty: 'hard', reward: [150, 400] }
        ],
        tokenPrice: [0.05, 0.2],
        growth: [0.01, 0.05], // TƒÉng tr∆∞·ªüng h√†ng ng√†y 1-5%
        riskLevel: 'medium',
    },

    nft: {
        type: 'NFT',
        description: 'Th·ªã tr∆∞·ªùng NFT v√† c√°c b·ªô s∆∞u t·∫≠p k·ªπ thu·∫≠t s·ªë',
        tasks: [
            { id: 'connect_wallet', name: 'Connect Wallet', difficulty: 'easy', reward: [50, 100] },
            { id: 'mint_nft', name: 'Mint NFT', difficulty: 'medium', reward: [100, 250] },
            { id: 'list_nft', name: 'List NFT', difficulty: 'medium', reward: [80, 200] },
            { id: 'trade_nft', name: 'Trade NFT', difficulty: 'hard', reward: [150, 350] },
            { id: 'join_discord', name: 'Join Discord', difficulty: 'easy', reward: [30, 80] },
            { id: 'follow_twitter', name: 'Follow Twitter', difficulty: 'easy', reward: [30, 80] }
        ],
        tokenPrice: [0.1, 0.3],
        growth: [0.02, 0.08], // TƒÉng tr∆∞·ªüng h√†ng ng√†y 2-8%
        riskLevel: 'high',
    },

    gamefi: {
        type: 'GameFi',
        description: 'Tr√≤ ch∆°i blockchain cho ph√©p ki·∫øm token b·∫±ng c√°ch ch∆°i game',
        tasks: [
            { id: 'connect_wallet', name: 'Connect Wallet', difficulty: 'easy', reward: [80, 200] },
            { id: 'play_game', name: 'Play Game', difficulty: 'medium', reward: [150, 400] },
            { id: 'invite_friends', name: 'Invite Friends', difficulty: 'hard', reward: [200, 600] },
            { id: 'join_tournament', name: 'Join Tournament', difficulty: 'hard', reward: [300, 800] },
            { id: 'daily_login', name: 'Daily Login', difficulty: 'easy', reward: [50, 100] }
        ],
        tokenPrice: [0.02, 0.15],
        growth: [0.03, 0.1], // TƒÉng tr∆∞·ªüng h√†ng ng√†y 3-10%
        riskLevel: 'high',
    },

    infrastructure: {
        type: 'Infrastructure',
        description: 'H·∫° t·∫ßng blockchain, layer 2 v√† gi·∫£i ph√°p m·ªü r·ªông',
        tasks: [
            { id: 'connect_wallet', name: 'Connect Wallet', difficulty: 'easy', reward: [100, 200] },
            { id: 'test_network', name: 'Test Network', difficulty: 'medium', reward: [200, 500] },
            { id: 'run_node', name: 'Run Node', difficulty: 'hard', reward: [500, 1000] },
            { id: 'provide_feedback', name: 'Provide Feedback', difficulty: 'medium', reward: [150, 300] }
        ],
        tokenPrice: [0.2, 0.5],
        growth: [0.005, 0.02], // TƒÉng tr∆∞·ªüng h√†ng ng√†y 0.5-2%
        riskLevel: 'low',
    },

    dao: {
        type: 'DAO',
        description: 'T·ªï ch·ª©c t·ª± tr·ªã phi t·∫≠p trung, qu·∫£n tr·ªã c·ªông ƒë·ªìng',
        tasks: [
            { id: 'connect_wallet', name: 'Connect Wallet', difficulty: 'easy', reward: [70, 150] },
            { id: 'join_dao', name: 'Join DAO', difficulty: 'easy', reward: [50, 100] },
            { id: 'vote_proposal', name: 'Vote on Proposal', difficulty: 'medium', reward: [150, 300] },
            { id: 'create_proposal', name: 'Create Proposal', difficulty: 'hard', reward: [300, 700] },
            { id: 'participate_discussion', name: 'Participate in Discussion', difficulty: 'medium', reward: [100, 200] }
        ],
        tokenPrice: [0.1, 0.4],
        growth: [0.01, 0.03], // TƒÉng tr∆∞·ªüng h√†ng ng√†y 1-3%
        riskLevel: 'medium',
    },

    metaverse: {
        type: 'Metaverse',
        description: 'Th·∫ø gi·ªõi ·∫£o, m√¥i tr∆∞·ªùng t∆∞∆°ng t√°c s·ªë v√† kh√¥ng gian ·∫£o 3D',
        tasks: [
            { id: 'connect_wallet', name: 'Connect Wallet', difficulty: 'easy', reward: [100, 200] },
            { id: 'create_avatar', name: 'Create Avatar', difficulty: 'easy', reward: [80, 150] },
            { id: 'buy_land', name: 'Buy Virtual Land', difficulty: 'hard', reward: [300, 800] },
            { id: 'attend_event', name: 'Attend Virtual Event', difficulty: 'medium', reward: [150, 300] },
            { id: 'invite_friends', name: 'Invite Friends', difficulty: 'medium', reward: [100, 300] }
        ],
        tokenPrice: [0.05, 0.25],
        growth: [0.02, 0.07], // TƒÉng tr∆∞·ªüng h√†ng ng√†y 2-7%
        riskLevel: 'high',
    }
};

let projects = {};
let wallets = {};
let tasks = {};

try {
    projects = JSON.parse(fs.readFileSync(PROJECTS_FILE)) || {};
    wallets = JSON.parse(fs.readFileSync(WALLETS_FILE)) || {};
    tasks = JSON.parse(fs.readFileSync(TASKS_FILE)) || {};
} catch (err) {
    console.error('Error loading data:', err);
}

function calculateUserBadges(wallet) {
    if (!wallet) return [];

    const badges = [];

    if (wallet.createdAt && Date.now() - wallet.createdAt < 3 * 24 * 60 * 60 * 1000) {
        badges.push('early_adopter');
    }

    if (wallet.nfts && wallet.nfts.length >= 5) {
        badges.push('big_spender');
    }

    if (wallet.tokens && wallet.tokens['FARM'] >= 10000) {
        badges.push('token_whale');
    }

    if (wallet.farming && wallet.farming.streak >= 7) {
        badges.push('farming_streak');
    }

    if (tasks[wallet.address]) {
        let completedAllTasks = true;
        Object.values(projects).forEach(project => {
            const userTasks = tasks[wallet.address][project.id] || [];
            if (userTasks.length < project.tasks.length) {
                completedAllTasks = false;
            }
        });
        if (completedAllTasks && Object.keys(projects).length > 0) {
            badges.push('all_tasks');
        }
    }

    if (wallet.quests && wallet.quests.achievements &&
        wallet.quests.achievements.length === Object.keys(ACHIEVEMENTS).length) {
        badges.push('all_achievements');
    }

    return badges;
}
function saveData() {
    fs.writeFileSync(PROJECTS_FILE, JSON.stringify(projects, null, 2));
    fs.writeFileSync(WALLETS_FILE, JSON.stringify(wallets, null, 2));
    fs.writeFileSync(TASKS_FILE, JSON.stringify(tasks, null, 2));
}

function generateWalletAddress() {
    return '0x' + crypto.randomBytes(20).toString('hex');
}
function generateProjectName(type) {
    const prefixes = {
        defi: ['Uni', 'Sushi', 'Pancake', 'Curve', 'Aave', 'Compound', 'Balancer', 'Alpha'],
        nft: ['Crypto', 'Pixel', 'Bored', 'Doodle', 'Azuki', 'Punk', 'Art', 'Meta'],
        gamefi: ['Axie', 'Gods', 'Illuvium', 'Sandbox', 'Decentraland', 'Crypto', 'Play', 'Meta'],
        infrastructure: ['Polygon', 'Arbi', 'Opti', 'Chain', 'Layer', 'Zk', 'Block', 'Node'],
        dao: ['Maker', 'Compound', 'Aave', 'Uniswap', 'Curve', 'Gitcoin', 'Deca', 'Gov'],
        metaverse: ['Meta', 'Sandbox', 'Decentraland', 'Verse', 'Virtual', 'Horizon', 'Reality', 'Omni']
    };

    const suffixes = {
        defi: ['Swap', 'Finance', 'Money', 'DeFi', 'Cash', 'Bank', 'Yield', 'Stake'],
        nft: ['Apes', 'Punks', 'Art', 'Pixels', 'Collection', 'Gallery', 'Verse', 'World'],
        gamefi: ['Infinity', 'Unchained', 'Realms', 'Legends', 'Quest', 'Battle', 'Heroes', 'Adventure'],
        infrastructure: ['Chain', 'Network', 'Protocol', 'Bridge', 'Scale', 'Link', 'Connect', 'Node'],
        dao: ['DAO', 'Governance', 'Protocol', 'Council', 'Community', 'Collective', 'Vote', 'Decision'],
        metaverse: ['Verse', 'World', 'Land', 'Realm', 'Universe', 'Space', 'Reality', 'Dimension']
    };

    const prefix = prefixes[type][Math.floor(Math.random() * prefixes[type].length)];
    const suffix = suffixes[type][Math.floor(Math.random() * suffixes[type].length)];
    const randomId = Math.random().toString(36).substring(2, 5);

    return `${prefix}${suffix}-${randomId}`;
}
function generateTaskDescription(taskId, projectName) {
    const descriptions = {
        connect_wallet: `K·∫øt n·ªëi v√≠ c·ªßa b·∫°n v·ªõi ${projectName} ƒë·ªÉ b·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c v·ªõi d·ª± √°n.`,
        swap_token: `Th·ª±c hi·ªán swap token tr√™n s√†n giao d·ªãch c·ªßa ${projectName}.`,
        add_liquidity: `Cung c·∫•p thanh kho·∫£n cho c·∫∑p token tr√™n ${projectName}.`,
        stake_token: `Stake token ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng h√†ng ng√†y t·ª´ ${projectName}.`,
        mint_nft: `Mint m·ªôt NFT ƒë·ªôc quy·ªÅn t·ª´ b·ªô s∆∞u t·∫≠p ${projectName}.`,
        list_nft: `ƒêƒÉng b√°n NFT c·ªßa b·∫°n tr√™n th·ªã tr∆∞·ªùng c·ªßa ${projectName}.`,
        trade_nft: `Mua ho·∫∑c b√°n m·ªôt NFT tr√™n th·ªã tr∆∞·ªùng c·ªßa ${projectName}.`,
        play_game: `Ch∆°i game trong h·ªá sinh th√°i c·ªßa ${projectName} ƒë·ªÉ ki·∫øm token.`,
        invite_friends: `M·ªùi b·∫°n b√® tham gia v√†o c·ªông ƒë·ªìng c·ªßa ${projectName}.`,
        test_network: `Tham gia th·ª≠ nghi·ªám m·∫°ng l∆∞·ªõi testnet c·ªßa ${projectName}.`,
        run_node: `V·∫≠n h√†nh node ƒë·ªÉ h·ªó tr·ª£ m·∫°ng l∆∞·ªõi c·ªßa ${projectName}.`,
        provide_feedback: `Cung c·∫•p ph·∫£n h·ªìi v·ªÅ c√°c t√≠nh nƒÉng c·ªßa ${projectName}.`,
        join_dao: `Tham gia v√†o DAO c·ªßa ${projectName} ƒë·ªÉ tham gia qu·∫£n tr·ªã.`,
        vote_proposal: `B·ªè phi·∫øu cho m·ªôt ƒë·ªÅ xu·∫•t trong DAO c·ªßa ${projectName}.`,
        create_proposal: `T·∫°o m·ªôt ƒë·ªÅ xu·∫•t m·ªõi cho c·ªông ƒë·ªìng c·ªßa ${projectName}.`,
        participate_discussion: `Tham gia th·∫£o lu·∫≠n trong di·ªÖn ƒë√†n c·ªßa ${projectName}.`,
        create_avatar: `T·∫°o m·ªôt avatar trong th·∫ø gi·ªõi ·∫£o c·ªßa ${projectName}.`,
        buy_land: `Mua m·ªôt m·∫£nh ƒë·∫•t ·∫£o trong metaverse c·ªßa ${projectName}.`,
        attend_event: `Tham d·ª± m·ªôt s·ª± ki·ªán ·∫£o ƒë∆∞·ª£c t·ªï ch·ª©c b·ªüi ${projectName}.`,
        join_tournament: `Tham gia gi·∫£i ƒë·∫•u ƒë·ªÉ c·∫°nh tranh ph·∫ßn th∆∞·ªüng t·ª´ ${projectName}.`,
        daily_login: `ƒêƒÉng nh·∫≠p h√†ng ng√†y v√†o platform c·ªßa ${projectName}.`,
        refer_friend: `Gi·ªõi thi·ªáu b·∫°n b√® tham gia v√†o ${projectName} ƒë·ªÉ nh·∫≠n th∆∞·ªüng.`,
        follow_twitter: `Theo d√µi t√†i kho·∫£n Twitter ch√≠nh th·ª©c c·ªßa ${projectName}.`,
        join_discord: `Tham gia server Discord c·ªßa c·ªông ƒë·ªìng ${projectName}.`
    };

    return descriptions[taskId] || `Ho√†n th√†nh nhi·ªám v·ª• c·ªßa ${projectName}.`;
}
function generateProjectTeam() {
    const roles = ['Founder', 'CTO', 'CMO', 'Lead Developer', 'Community Manager', 'Advisor'];
    const companies = ['Binance', 'Coinbase', 'Google', 'Meta', 'Microsoft', 'Amazon', 'Apple'];

    const teamSize = Math.floor(Math.random() * 3) + 3; // 3-5 th√†nh vi√™n
    const team = [];

    for (let i = 0; i < teamSize; i++) {
        team.push({
            role: roles[Math.floor(Math.random() * roles.length)],
            experience: `Former ${companies[Math.floor(Math.random() * companies.length)]}`,
            years: Math.floor(Math.random() * 10) + 2 // 2-12 nƒÉm kinh nghi·ªám
        });
    }

    return team;
}

function createProject(type) {
    const template = PROJECT_TEMPLATES[type];
    if (!template) return null;

    const projectId = Date.now().toString(36) + Math.random().toString(36).substr(2);
    const projectName = generateProjectName(type);

    // T·∫°o gi√° token ng·∫´u nhi√™n trong kho·∫£ng ƒë·ªãnh tr∆∞·ªõc
    const tokenPrice = Math.random() * (template.tokenPrice[1] - template.tokenPrice[0]) + template.tokenPrice[0];

    // T·∫°o t·ª∑ l·ªá tƒÉng tr∆∞·ªüng h√†ng ng√†y
    const dailyGrowthRate = Math.random() * (template.growth[1] - template.growth[0]) + template.growth[0];

    // T·∫°o t·ªïng cung token ng·∫´u nhi√™n d·ª±a tr√™n lo·∫°i d·ª± √°n
    let totalSupply;
    switch (template.riskLevel) {
        case 'low': totalSupply = Math.floor(Math.random() * 5000000) + 5000000; break; // 5-10M
        case 'medium': totalSupply = Math.floor(Math.random() * 20000000) + 10000000; break; // 10-30M
        case 'high': totalSupply = Math.floor(Math.random() * 50000000) + 20000000; break; // 20-70M
    }

    // T·∫°o nhi·ªám v·ª• v·ªõi ph·∫ßn th∆∞·ªüng ng·∫´u nhi√™n
    const tasks = template.tasks.map(task => {
        const minReward = task.reward[0];
        const maxReward = task.reward[1];
        return {
            id: task.id,
            name: task.name,
            difficulty: task.difficulty,
            reward: Math.floor(Math.random() * (maxReward - minReward) + minReward),
            description: generateTaskDescription(task.id, projectName)
        };
    });

    // T·∫°o ƒë·ªôi ng≈© d·ª± √°n
    const team = generateProjectTeam();

    // T·∫°o l·ªãch s·ª≠ gi√°
    const priceHistory = generatePriceHistory(tokenPrice, 7, dailyGrowthRate);

    // T·∫°o roadmap d·ª± √°n
    const roadmap = generateRoadmap();

    // T·∫°o th√¥ng tin ƒë·∫ßu t∆∞
    const investment = {
        seedRound: (tokenPrice * 0.2).toFixed(3),
        privateRound: (tokenPrice * 0.6).toFixed(3),
        publicRound: tokenPrice.toFixed(3),
        investors: generateInvestors()
    };

    projects[projectId] = {
        id: projectId,
        name: projectName,
        ticker: projectName.split('-')[0],
        type: template.type,
        description: template.description,
        tasks: tasks,
        tokenPrice: tokenPrice,
        dailyGrowthRate: dailyGrowthRate,
        priceHistory: priceHistory,
        totalSupply: totalSupply,
        remainingSupply: totalSupply,
        team: team,
        roadmap: roadmap,
        investment: investment,
        riskLevel: template.riskLevel,
        communitySize: Math.floor(Math.random() * 50000) + 1000,
        createdAt: Date.now(),
        lastUpdated: Date.now()
    };

    saveData();
    return projects[projectId];
}
function generatePriceHistory(currentPrice, days, dailyGrowthRate) {
    const history = [];
    let price = currentPrice;

    for (let i = 0; i < days; i++) {
        // ƒêi ng∆∞·ª£c l·∫°i th·ªùi gian
        const volatility = (Math.random() - 0.5) * 0.1; // Th√™m bi·∫øn ƒë·ªông -5% ƒë·∫øn +5%
        price = price / (1 + dailyGrowthRate + volatility);
        if (price < 0.0001) price = 0.0001; // ƒê·∫£m b·∫£o gi√° kh√¥ng qu√° th·∫•p

        history.unshift({
            day: days - i,
            price: price.toFixed(6),
            timestamp: Date.now() - (i + 1) * 24 * 60 * 60 * 1000
        });
    }

    // Th√™m gi√° hi·ªán t·∫°i
    history.push({
        day: days + 1,
        price: currentPrice.toFixed(6),
        timestamp: Date.now()
    });

    return history;
}
function generateRoadmap() {
    const quarters = ['Q1', 'Q2', 'Q3', 'Q4'];
    const year = new Date().getFullYear();
    const currentQuarter = Math.floor((new Date().getMonth() / 3)) + 1;

    const roadmap = [];
    for (let i = 0; i < 4; i++) {
        const quarterIndex = (currentQuarter + i - 1) % 4;
        const yearOffset = Math.floor((currentQuarter + i - 1) / 4);
        const quarterYear = year + yearOffset;

        roadmap.push({
            period: `${quarters[quarterIndex]} ${quarterYear}`,
            milestones: generateMilestones()
        });
    }

    return roadmap;
}

// T·∫°o c√°c c·ªôt m·ªëc cho roadmap
function generateMilestones() {
    const possibleMilestones = [
        'Ph√°t h√†nh testnet',
        'Ra m·∫Øt mainnet',
        'M·ªü r·ªông c·ªông ƒë·ªìng',
        'Ni√™m y·∫øt tr√™n CEX l·ªõn',
        'C·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng',
        'T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t',
        'M·ªü r·ªông sang th·ªã tr∆∞·ªùng m·ªõi',
        'Ph√°t h√†nh t√≠nh nƒÉng staking',
        'T√≠ch h·ª£p v·ªõi c√°c d·ª± √°n kh√°c',
        'Ph√°t h√†nh ·ª©ng d·ª•ng di ƒë·ªông',
        'M·ªü r·ªông ƒë·ªôi ng≈© ph√°t tri·ªÉn',
        'Audit b·∫£o m·∫≠t',
        'Th√™m t√≠nh nƒÉng NFT',
        'N√¢ng c·∫•p h·ªá th·ªëng qu·∫£n tr·ªã',
        'Ph√°t h√†nh phi√™n b·∫£n 2.0'
    ];

    const milestoneCount = Math.floor(Math.random() * 3) + 2; // 2-4 c·ªôt m·ªëc
    const milestones = [];

    const shuffled = [...possibleMilestones].sort(() => 0.5 - Math.random());

    for (let i = 0; i < milestoneCount; i++) {
        milestones.push(shuffled[i]);
    }

    return milestones;
}

// T·∫°o danh s√°ch nh√† ƒë·∫ßu t∆∞
function generateInvestors() {
    const possibleInvestors = [
        'Binance Labs',
        'Coinbase Ventures',
        'a16z Crypto',
        'Paradigm',
        'Pantera Capital',
        'Polychain Capital',
        'Dragonfly Capital',
        'Multicoin Capital',
        'Galaxy Digital',
        'Alameda Research',
        'Three Arrows Capital',
        'DeFiance Capital',
        'Framework Ventures',
        'Spartan Group',
        'Hashed'
    ];

    const investorCount = Math.floor(Math.random() * 3) + 2; // 2-4 nh√† ƒë·∫ßu t∆∞
    const investors = [];

    const shuffled = [...possibleInvestors].sort(() => 0.5 - Math.random());

    for (let i = 0; i < investorCount; i++) {
        investors.push(shuffled[i]);
    }

    return investors;
}
function calculateSafuScore(project) {
    if (!project) return 0;

    let score = 0;

    // Ti√™u ch√≠ 1: ƒê·ªôi ng≈© - t·ªëi ƒëa 30 ƒëi·ªÉm
    const teamSize = project.team?.length || 0;
    score += Math.min(30, teamSize * 6);

    // Ti√™u ch√≠ 2: Th·ªùi gian t·ªìn t·∫°i - t·ªëi ƒëa 20 ƒëi·ªÉm
    const ageInDays = (Date.now() - project.createdAt) / (24 * 60 * 60 * 1000);
    score += Math.min(20, ageInDays);

    // Ti√™u ch√≠ 3: C·ªông ƒë·ªìng - t·ªëi ƒëa 15 ƒëi·ªÉm
    const communityScore = Math.min(15, project.communitySize / 5000);
    score += communityScore;

    // Ti√™u ch√≠ 4: Nh√† ƒë·∫ßu t∆∞ - t·ªëi ƒëa 20 ƒëi·ªÉm
    const investorCount = project.investment?.investors?.length || 0;
    score += Math.min(20, investorCount * 5);

    // Ti√™u ch√≠ 5: Gi√° token v√† bi·∫øn ƒë·ªông - t·ªëi ƒëa 15 ƒëi·ªÉm
    if (project.priceHistory && project.priceHistory.length > 1) {
        const latestPrice = parseFloat(project.priceHistory[project.priceHistory.length - 1].price);
        const oldestPrice = parseFloat(project.priceHistory[0].price);

        // T√≠nh tƒÉng tr∆∞·ªüng trong kho·∫£ng th·ªùi gian
        const growthRate = (latestPrice - oldestPrice) / oldestPrice;

        // ƒêi·ªÉm cho tƒÉng tr∆∞·ªüng ·ªïn ƒë·ªãnh (kh√¥ng qu√° nhanh ho·∫∑c qu√° ch·∫≠m)
        if (growthRate > 0 && growthRate < 0.5) {
            score += 15;
        } else if (growthRate >= 0.5 && growthRate < 1) {
            score += 10;
        } else if (growthRate >= 1) {
            score += 5; // TƒÉng qu√° nhanh c√≥ th·ªÉ l√† d·∫•u hi·ªáu kh√¥ng ·ªïn ƒë·ªãnh
        } else {
            score += 0; // Gi·∫£m gi√°
        }
    }

    return Math.min(100, Math.round(score));
}

// Th√™m h√†m ph√¢n t√≠ch r·ªßi ro
function analyzeTrustAndRisk(project) {
    const safuScore = calculateSafuScore(project);

    // Ph√¢n t√≠ch t·ª∑ l·ªá risk/reward
    const riskLevel = project.riskLevel || 'medium';
    const tokenPrice = project.tokenPrice || 0;

    // ƒê√°nh gi√° risk-reward
    let riskRewardRatio;
    switch (riskLevel) {
        case 'low':
            riskRewardRatio = tokenPrice < 0.1 ? 'Good' : (tokenPrice < 0.3 ? 'Moderate' : 'Poor');
            break;
        case 'medium':
            riskRewardRatio = tokenPrice < 0.2 ? 'Excellent' : (tokenPrice < 0.4 ? 'Good' : 'Moderate');
            break;
        case 'high':
            riskRewardRatio = tokenPrice < 0.1 ? 'Excellent' : (tokenPrice < 0.2 ? 'Good' : 'Moderate');
            break;
        default:
            riskRewardRatio = 'Unknown';
    }

    // T√≠nh to√°n c√°c c·∫£nh b√°o ti·ªÅm ·∫©n
    const warnings = [];

    if (safuScore < 30) {
        warnings.push('‚ö†Ô∏è SAFU score r·∫•t th·∫•p - r·ªßi ro cao!');
    } else if (safuScore < 50) {
        warnings.push('‚ö†Ô∏è SAFU score th·∫•p - h√£y th·∫≠n tr·ªçng!');
    }

    if (project.dailyGrowthRate > 0.08) {
        warnings.push('‚ö†Ô∏è T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng gi√° token cao b·∫•t th∆∞·ªùng!');
    }

    if (project.team?.length < 3) {
        warnings.push('‚ö†Ô∏è ƒê·ªôi ng≈© nh·ªè ho·∫∑c kh√¥ng r√µ th√¥ng tin!');
    }

    const priceHistory = project.priceHistory || [];
    if (priceHistory.length > 2) {
        const recentPrices = priceHistory.slice(-3).map(p => parseFloat(p.price));
        const volatility = Math.max(...recentPrices) / Math.min(...recentPrices);

        if (volatility > 1.5) {
            warnings.push('‚ö†Ô∏è Gi√° token bi·∫øn ƒë·ªông m·∫°nh g·∫ßn ƒë√¢y!');
        }
    }

    return {
        safuScore,
        riskLevel,
        riskRewardRatio,
        warnings,
        recommendation: safuScore < 40 ? 'Avoid' : (safuScore < 70 ? 'Cautious' : 'Favorable')
    };
}
function connectWallet(userId) {
    if (wallets[userId]) {
        return { success: false, message: 'B·∫°n ƒë√£ c√≥ v√≠ k·∫øt n·ªëi r·ªìi!' };
    }

    wallets[userId] = {
        address: generateWalletAddress(),
        tokens: {},
        staked: {},
        createdAt: Date.now()
    };

    saveData();
    return {
        success: true,
        message: `ƒê√£ t·∫°o v√† k·∫øt n·ªëi v√≠: ${wallets[userId].address}`
    };
}

function completeTask(userId, projectId, taskId) {
    const wallet = wallets[userId];
    const project = projects[projectId];

    if (!wallet) {
        return { success: false, message: 'B·∫°n ch∆∞a k·∫øt n·ªëi v√≠!' };
    }

    if (!project) {
        return { success: false, message: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i!' };
    }

    const task = project.tasks.find(t => t.id === taskId);
    if (!task) {
        return { success: false, message: 'Nhi·ªám v·ª• kh√¥ng t·ªìn t·∫°i!' };
    }

    if (!tasks[userId]) tasks[userId] = {};
    if (!tasks[userId][projectId]) tasks[userId][projectId] = [];

    if (tasks[userId][projectId].includes(taskId)) {
        return { success: false, message: 'B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• n√†y r·ªìi!' };
    }

    const tokenSymbol = project.name;
    if (!wallet.tokens[tokenSymbol]) wallet.tokens[tokenSymbol] = 0;
    wallet.tokens[tokenSymbol] += task.reward;
    project.remainingSupply -= task.reward;

    tasks[userId][projectId].push(taskId);

    saveData();
    return {
        success: true,
        message: `Ho√†n th√†nh nhi·ªám v·ª•!\nNh·∫≠n ƒë∆∞·ª£c ${task.reward} ${tokenSymbol}`
    };
}

function stakeTokens(userId, projectId, amount) {
    const wallet = wallets[userId];
    const project = projects[projectId];

    if (!wallet || !project) {
        return { success: false, message: 'V√≠ ho·∫∑c d·ª± √°n kh√¥ng t·ªìn t·∫°i!' };
    }

    const tokenSymbol = project.name;
    if (!wallet.tokens[tokenSymbol] || wallet.tokens[tokenSymbol] < amount) {
        return { success: false, message: 'Kh√¥ng ƒë·ªß token ƒë·ªÉ stake!' };
    }

    const safetyInfo = analyzeTrustAndRisk(project);
    const safuScore = safetyInfo.safuScore;
    let warningMessage = '';

    if (safuScore < 40) {
        warningMessage = `\n\n‚ö†Ô∏è C·∫¢NH B√ÅO: D·ª± √°n c√≥ ƒëi·ªÉm SAFU th·∫•p (${safuScore}/100).\nR·ªßi ro m·∫•t v·ªën cao! B·∫°n c√≥ ch·∫Øc mu·ªën stake?`;
    } else if (safuScore < 70) {
        warningMessage = `\n\n‚ö†Ô∏è L∆ØU √ù: D·ª± √°n c√≥ ƒëi·ªÉm SAFU trung b√¨nh (${safuScore}/100).\nH√£y c√¢n nh·∫Øc r·ªßi ro khi stake!`;
    }

    wallet.tokens[tokenSymbol] -= amount;
    if (!wallet.staked[tokenSymbol]) wallet.staked[tokenSymbol] = 0;
    wallet.staked[tokenSymbol] += amount;

    updateQuestProgress(userId, 'stake_tokens', amount);

    saveData();
    return {
        success: true,
        message: `‚úÖ ƒê√£ stake ${amount} ${tokenSymbol}\n` +
            `üíπ Gi√° tr·ªã c≈©: $${(amount * project.tokenPrice).toFixed(2)}\n` +
            `üí∞ Gi√° tr·ªã sau stake: $${(amount * project.tokenPrice * 1.5).toFixed(2)}` +
            warningMessage
    };
}

function calculateRewards(userId) {
    const wallet = wallets[userId];
    if (!wallet) return 0;

    let totalValue = 0;
    Object.entries(wallet.tokens).forEach(([symbol, amount]) => {
        const project = Object.values(projects).find(p => p.name === symbol);
        if (project) {
            totalValue += amount * project.tokenPrice;
        }
    });

    Object.entries(wallet.staked).forEach(([symbol, amount]) => {
        const project = Object.values(projects).find(p => p.name === symbol);
        if (project) {
            totalValue += amount * project.tokenPrice * 1.5;
        }
    });

    return totalValue;
}

const FARMING_LEVELS = [
    { level: 1, requirement: 0, bonus: 0, name: "Beginner Farmer" },
    { level: 2, requirement: 500, bonus: 0.2, name: "Hobbyist Farmer" },
    { level: 3, requirement: 2000, bonus: 0.5, name: "Pro Farmer" },
    { level: 4, requirement: 10000, bonus: 0.8, name: "Master Farmer" },
    { level: 5, requirement: 50000, bonus: 1.2, name: "Legendary Farmer" }
];

const FARMING_CONFIG = {
    baseRate: 10,
    interval: 3600000,
    powerMultiplier: 1.5,
    maxPower: 100,
    streakBonus: 0.1,
    maxStreakBonus: 1.0,
    levelBonusCap: 2.0
};

const FARMING_EVENTS = [
    {
        id: "double_yield",
        name: "Double Yield",
        description: "Thu ho·∫°ch g·∫•p ƒë√¥i token trong kho·∫£ng th·ªùi gian gi·ªõi h·∫°n",
        bonus: 1.0,
        duration: 24 * 60 * 60 * 1000
    },
    {
        id: "quick_farm",
        name: "Quick Farm",
        description: "Gi·∫£m th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn farm xu·ªëng m·ªôt n·ª≠a",
        intervalReduction: 0.5,
        duration: 12 * 60 * 60 * 1000
    },
    {
        id: "lucky_bonus",
        name: "Lucky Bonus",
        description: "TƒÉng t·ª∑ l·ªá lucky harvest l√™n 20%",
        luckyChance: 0.2,
        duration: 6 * 60 * 60 * 1000
    }
];

let activeEvent = null;
let eventEndTime = 0;

function startRandomEvent() {
    if (activeEvent === null || Date.now() > eventEndTime) {
        activeEvent = FARMING_EVENTS[Math.floor(Math.random() * FARMING_EVENTS.length)];
        eventEndTime = Date.now() + activeEvent.duration;
        fs.writeFileSync(
            path.join(__dirname, './json/airdrop/event.json'),
            JSON.stringify({ activeEvent, eventEndTime })
        );
        return activeEvent;
    }
    return null;
}

function checkActiveEvent() {
    if (activeEvent === null) {
        try {
            const eventData = JSON.parse(
                fs.readFileSync(path.join(__dirname, './json/airdrop/event.json'))
            );
            activeEvent = eventData.activeEvent;
            eventEndTime = eventData.eventEndTime;
        } catch (err) { }
    }
    if (activeEvent !== null && Date.now() > eventEndTime) {
        activeEvent = null;
        eventEndTime = 0;
        fs.writeFileSync(
            path.join(__dirname, './json/airdrop/event.json'),
            JSON.stringify({ activeEvent: null, eventEndTime: 0 })
        );
    }
    return activeEvent;
}

const NFT_CONFIG = {
    mintPrice: 1000,
    rarities: ['Common', 'Rare', 'Epic', 'Legendary'],
    attributes: ['Power', 'Luck', 'Speed', 'Yield']
};

const QUESTS = {
    daily: [
        { id: 'farm_tokens', name: 'Farm Tokens', requirement: 100, reward: 50 },
        { id: 'complete_tasks', name: 'Complete Tasks', requirement: 5, reward: 100 },
        { id: 'trade_volume', name: 'Trading Volume', requirement: 1000, reward: 200 }
    ],
    weekly: [
        { id: 'stake_tokens', name: 'Stake Tokens', requirement: 5000, reward: 500 },
        { id: 'mint_nfts', name: 'Mint NFTs', requirement: 3, reward: 1000 }
    ]
};

const ACHIEVEMENTS = {
    farmer: { name: 'Master Farmer', requirement: 10000, reward: 1000 },
    trader: { name: 'Pro Trader', requirement: 100000, reward: 2000 },
    collector: { name: 'NFT Collector', requirement: 10, reward: 3000 }
};

function initUserData(userId) {
    if (!wallets[userId]) {
        wallets[userId] = {
            address: generateWalletAddress(),
            tokens: {},
            staked: {},
            nfts: [],
            farming: {
                power: 1,
                lastClaim: 0
            },
            quests: {
                daily: {},
                weekly: {},
                achievements: []
            },
            referrals: [],
            createdAt: Date.now()
        };
        saveData();
        return wallets[userId];
    }

    const wallet = wallets[userId];

    wallet.tokens = wallet.tokens || {};
    wallet.staked = wallet.staked || {};
    wallet.nfts = wallet.nfts || [];

    if (!wallet.farming) {
        wallet.farming = {
            power: 1,
            lastClaim: 0
        };
    }

    if (!wallet.quests) {
        wallet.quests = {
            daily: {},
            weekly: {},
            achievements: []
        };
    } else {
        wallet.quests.daily = wallet.quests.daily || {};
        wallet.quests.weekly = wallet.quests.weekly || {};
        wallet.quests.achievements = wallet.quests.achievements || [];
    }

    // ƒê·∫£m b·∫£o c√°c thu·ªôc t√≠nh kh√°c
    wallet.referrals = wallet.referrals || [];
    wallet.createdAt = wallet.createdAt || Date.now();

    saveData();
    return wallet;
}
function calculateNFTBonus(nfts) {
    if (!nfts || nfts.length === 0) return 0;

    let totalBonus = 0;
    nfts.forEach(nft => {
        if (!nft) return;

        const rarityBonus = {
            'Common': 0.05,
            'Rare': 0.1,
            'Epic': 0.2,
            'Legendary': 0.5
        }[nft.rarity || 'Common'] || 0;

        const attributes = nft.attributes || {};
        const yieldBonus = (attributes.Yield || 0) / 200;

        totalBonus += rarityBonus + yieldBonus;
    });

    return Math.min(1.0, totalBonus);
}
function farmTokens(userId) {
    const wallet = initUserData(userId);
    if (!wallet) return { success: false, message: 'V√≠ kh√¥ng t·ªìn t·∫°i' };

    if (!wallet.farming) {
        wallet.farming = {
            power: 1,
            lastClaim: 0,
            totalFarmed: 0,
            streak: 0,
            lastStreakDate: new Date().toDateString(),
            level: 1
        };
    }

    wallet.farming.totalFarmed = wallet.farming.totalFarmed || 0;
    wallet.farming.streak = wallet.farming.streak || 0;
    wallet.farming.lastStreakDate = wallet.farming.lastStreakDate || new Date().toDateString();
    wallet.farming.level = wallet.farming.level || 1;

    const now = Date.now();
    const timePassed = now - (wallet.farming.lastClaim || 0);

    const event = checkActiveEvent();
    const effectiveInterval = event?.intervalReduction
        ? FARMING_CONFIG.interval * (1 - event.intervalReduction)
        : FARMING_CONFIG.interval;

    if (timePassed < effectiveInterval) {
        const remainingMinutes = Math.ceil((effectiveInterval - timePassed) / 1000 / 60);
        return {
            success: false,
            message: `‚è≥ Vui l√≤ng ch·ªù th√™m ${remainingMinutes} ph√∫t ƒë·ªÉ farm ti·∫øp!`
        };
    }

    const today = new Date().toDateString();
    if (today === wallet.farming.lastStreakDate) {
    } else if (new Date(wallet.farming.lastStreakDate).getTime() + 86400000 >= new Date(today).getTime()) {
        wallet.farming.streak++;
        wallet.farming.lastStreakDate = today;
    } else {
        wallet.farming.streak = 1;
        wallet.farming.lastStreakDate = today;
    }

    const power = wallet.farming.power || 1;
    const baseAmount = FARMING_CONFIG.baseRate * power;
    const nftBonus = calculateNFTBonus(wallet.nfts || []);
    const streakBonus = Math.min(
        wallet.farming.streak * FARMING_CONFIG.streakBonus,
        FARMING_CONFIG.maxStreakBonus
    );
    const currentLevel = FARMING_LEVELS.find(l => l.level === wallet.farming.level) || FARMING_LEVELS[0];
    const levelBonus = currentLevel.bonus;
    const eventBonus = event?.bonus || 0;

    const bonusMultiplier = 1 + nftBonus + streakBonus + levelBonus + eventBonus;
    const totalAmount = Math.floor(baseAmount * bonusMultiplier);

    const effectiveLuckyChance = 0.05 + (event?.luckyChance || 0);
    const isLuckyHarvest = Math.random() < effectiveLuckyChance;
    const finalAmount = isLuckyHarvest ? totalAmount * 2 : totalAmount;

    if (!wallet.tokens) wallet.tokens = {};
    if (!wallet.tokens['FARM']) wallet.tokens['FARM'] = 0;
    wallet.tokens['FARM'] += finalAmount;
    wallet.farming.lastClaim = now;
    wallet.farming.totalFarmed += finalAmount;

    for (let i = FARMING_LEVELS.length - 1; i >= 0; i--) {
        if (wallet.farming.totalFarmed >= FARMING_LEVELS[i].requirement) {
            wallet.farming.level = FARMING_LEVELS[i].level;
            break;
        }
    }

    updateQuestProgress(userId, 'farm_tokens', finalAmount);
    saveData();

    let message = isLuckyHarvest
        ? `üåü LUCKY HARVEST! B·∫°n nh·∫≠n ƒë∆∞·ª£c g·∫•p ƒë√¥i token! üåü\n`
        : `üåæ FARM TH√ÄNH C√îNG! üåæ\n`;
    message += `üí∞ S·ªë token nh·∫≠n ƒë∆∞·ª£c: ${finalAmount} FARM\n\n`;
    message += `üìä CHI TI·∫æT:\n`;
    message += `‚Ä¢ C∆° b·∫£n: ${baseAmount} token\n`;
    if (nftBonus > 0) message += `‚Ä¢ Bonus NFT: +${(nftBonus * 100).toFixed(0)}%\n`;
    if (streakBonus > 0) message += `‚Ä¢ Streak (${wallet.farming.streak} ng√†y): +${(streakBonus * 100).toFixed(0)}%\n`;
    message += `‚Ä¢ C·∫•p ƒë·ªô (${currentLevel.name}): +${(levelBonus * 100).toFixed(0)}%\n`;
    if (event) message += `‚Ä¢ S·ª± ki·ªán: +${(event.bonus * 100).toFixed(0)}%\n`;
    if (isLuckyHarvest) message += `‚Ä¢ Lucky Harvest: x2\n`;

    return {
        success: true,
        message: message
    };
}
function updateQuestProgress(userId, questId, amount) {
    const wallet = initUserData(userId);
    if (!wallet) return;

    const dailyQuest = QUESTS.daily.find(q => q.id === questId);
    if (dailyQuest) {
        if (!wallet.quests.daily[questId]) wallet.quests.daily[questId] = 0;
        wallet.quests.daily[questId] += amount;

        if (wallet.quests.daily[questId] >= dailyQuest.requirement) {
            if (!wallet.tokens['FARM']) wallet.tokens['FARM'] = 0;
            wallet.tokens['FARM'] += dailyQuest.reward;
            wallet.quests.daily[questId] = 0;
        }
    }
    Object.entries(ACHIEVEMENTS).forEach(([id, achievement]) => {
        if (!wallet.quests.achievements.includes(id)) {
            const progress = calculateProgress(wallet, id);
            if (progress >= achievement.requirement) {
                wallet.quests.achievements.push(id);
                if (!wallet.tokens['FARM']) wallet.tokens['FARM'] = 0;
                wallet.tokens['FARM'] += achievement.reward;
            }
        }
    });

    saveData();
}
function mintNFT(userId) {
    const wallet = wallets[userId];
    if (!wallet) return { success: false, message: 'V√≠ kh√¥ng t·ªìn t·∫°i' };

    if (wallet.tokens['FARM'] < NFT_CONFIG.mintPrice) {
        return { success: false, message: 'Kh√¥ng ƒë·ªß token FARM' };
    }

    const rarity = NFT_CONFIG.rarities[Math.floor(Math.random() * NFT_CONFIG.rarities.length)];
    const attributes = {};
    NFT_CONFIG.attributes.forEach(attr => {
        attributes[attr] = Math.floor(Math.random() * 100) + 1;
    });

    const nft = {
        id: Date.now().toString(36),
        rarity,
        attributes,
        mintedAt: Date.now()
    };

    wallet.tokens['FARM'] -= NFT_CONFIG.mintPrice;
    wallet.nfts.push(nft);

    updateQuestProgress(userId, 'mint_nfts', 1);

    saveData();
    return {
        success: true,
        message: `Mint NFT th√†nh c√¥ng: ${rarity}\nThu·ªôc t√≠nh: ${Object.entries(attributes).map(([k, v]) => `${k}: ${v}`).join(', ')}`
    };
}
function calculateProgress(wallet, achievementId) {
    if (!wallet) return 0;

    switch (achievementId) {
        case 'farmer':
            return (wallet.tokens && wallet.tokens['FARM']) || 0;

        case 'trader':
            if (!wallet.tokens) return 0;

            let totalTraded = 0;
            Object.entries(wallet.tokens).forEach(([symbol, amount]) => {
                const project = Object.values(projects).find(p => p.name === symbol);
                if (project) {
                    totalTraded += amount * project.tokenPrice;
                }
            });
            return totalTraded;

        case 'collector':
            return (wallet.nfts && wallet.nfts.length) || 0;

        default:
            return 0;
    }
}

module.exports = {
    name: "airdrop",
    dev: "HNT",
    category: "Games",
    info: "Tham gia Airdrop token",
    usages: ".airdrop",
    onPrefix: true,
    cooldowns: 0,

    onLaunch: async function ({ api, event, target = [] }) {
        const { threadID, messageID, senderID } = event;
        const action = target[0]?.toLowerCase();

        try {
            switch (action) {
                case "connect":
                case "wallet": {
                    const result = connectWallet(senderID);
                    return api.sendMessage(result.message, threadID, messageID);
                }

                case "projects":
                case "list": {
                    const filterType = target[1]?.toLowerCase();
                    const sortOption = target[2]?.toLowerCase() || 'newest';
                    const pageNumber = parseInt(target[3]) || 1;
                    const pageSize = 4;

                    let filteredProjects = Object.values(projects);

                    if (filterType) {
                        if (filterType === 'safe' || filterType === 'safu') {

                            filteredProjects = filteredProjects.filter(p => calculateSafuScore(p) >= 70);
                        }
                        else if (filterType === 'medium') {

                            filteredProjects = filteredProjects.filter(p => {
                                const score = calculateSafuScore(p);
                                return score >= 40 && score < 70;
                            });
                        }
                        else if (filterType === 'risky') {

                            filteredProjects = filteredProjects.filter(p => calculateSafuScore(p) < 40);
                        }
                        else if (PROJECT_TEMPLATES[filterType]) {

                            filteredProjects = filteredProjects.filter(p =>
                                p.type.toLowerCase() === PROJECT_TEMPLATES[filterType].type.toLowerCase()
                            );
                        }
                    }

                    switch (sortOption) {
                        case 'price':
                        case 'value':
                            filteredProjects.sort((a, b) => b.tokenPrice - a.tokenPrice);
                            break;
                        case 'safu':
                        case 'safe':
                            filteredProjects.sort((a, b) => calculateSafuScore(b) - calculateSafuScore(a));
                            break;
                        case 'growth':
                        case 'apy':
                            filteredProjects.sort((a, b) => b.dailyGrowthRate - a.dailyGrowthRate);
                            break;
                        case 'rewards':
                            filteredProjects.sort((a, b) => {
                                const aRewards = a.tasks.reduce((sum, task) => sum + task.reward, 0);
                                const bRewards = b.tasks.reduce((sum, task) => sum + task.reward, 0);
                                return bRewards - aRewards;
                            });
                            break;
                        case 'oldest':
                            filteredProjects.sort((a, b) => a.createdAt - b.createdAt);
                            break;
                        default:
                            filteredProjects.sort((a, b) => b.createdAt - a.createdAt);
                    }

                    const totalPages = Math.max(1, Math.ceil(filteredProjects.length / pageSize));

                    const validPageNumber = Math.min(Math.max(1, pageNumber), totalPages);
                    const startIndex = (validPageNumber - 1) * pageSize;
                    const endIndex = startIndex + pageSize;
                    const pagedProjects = filteredProjects.slice(startIndex, endIndex);

                    if (pagedProjects.length === 0) {
                        let errorMsg = "‚ùå Kh√¥ng t√¨m th·∫•y d·ª± √°n";
                        if (filterType) {
                            if (filterType === 'safe' || filterType === 'safu') {
                                errorMsg += " an to√†n (SAFU ‚â• 70)";
                            } else if (filterType === 'medium') {
                                errorMsg += " r·ªßi ro trung b√¨nh (SAFU 40-69)";
                            } else if (filterType === 'risky') {
                                errorMsg += " r·ªßi ro cao (SAFU < 40)";
                            } else {
                                errorMsg += ` lo·∫°i ${filterType}`;
                            }
                        }

                        errorMsg += "!\n\nD√πng l·ªánh '.airdrop refresh' ƒë·ªÉ t·∫°o d·ª± √°n m·ªõi.";
                        return api.sendMessage(errorMsg, threadID, messageID);
                    }

                    let filterLabel = '';
                    if (filterType) {
                        if (filterType === 'safe' || filterType === 'safu') {
                            filterLabel = ' - üü¢ AN TO√ÄN';
                        } else if (filterType === 'medium') {
                            filterLabel = ' - üü† TRUNG B√åNH';
                        } else if (filterType === 'risky') {
                            filterLabel = ' - üî¥ R·ª¶I RO CAO';
                        } else if (PROJECT_TEMPLATES[filterType]) {
                            filterLabel = ` - ${PROJECT_TEMPLATES[filterType].type.toUpperCase()}`;
                        }
                    }

                    const sortLabel = {
                        'price': 'üí∞ GI√Å CAO NH·∫§T',
                        'value': 'üí∞ GI√Å CAO NH·∫§T',
                        'safu': 'üõ°Ô∏è AN TO√ÄN NH·∫§T',
                        'safe': 'üõ°Ô∏è AN TO√ÄN NH·∫§T',
                        'growth': 'üìà TƒÇNG TR∆Ø·ªûNG NHANH',
                        'apy': 'üìà TƒÇNG TR∆Ø·ªûNG NHANH',
                        'rewards': 'üéÅ PH·∫¶N TH∆Ø·ªûNG L·ªöN',
                        'oldest': '‚è≥ C≈® NH·∫§T',
                        'newest': 'üÜï M·ªöI NH·∫§T'
                    }[sortOption] || 'üÜï M·ªöI NH·∫§T';

                    let msg = `üìã DANH S√ÅCH D·ª∞ √ÅN${filterLabel}\n`;
                    msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                    msg += `S·∫Øp x·∫øp: ${sortLabel} | Trang ${validPageNumber}/${totalPages}\n\n`;

                    pagedProjects.forEach((project, index) => {
                        const safuScore = calculateSafuScore(project);
                        const safuEmoji = safuScore >= 70 ? 'üü¢' : (safuScore >= 40 ? 'üü†' : 'üî¥');
                        const taskCount = project.tasks.length;
                        const totalReward = project.tasks.reduce((sum, task) => sum + task.reward, 0);
                        const dailyGrowth = (project.dailyGrowthRate * 100).toFixed(1);

                        const shortId = project.id.substring(0, 6);

                        const typeEmoji = {
                            'DeFi': 'üí±',
                            'NFT': 'üé®',
                            'GameFi': 'üéÆ',
                            'Infrastructure': 'üèóÔ∏è',
                            'DAO': 'üë•',
                            'Metaverse': 'üåê'
                        }[project.type] || 'üìä';

                        msg += `${index + 1}. ${typeEmoji} ${project.name} ${safuEmoji}\n`;
                        msg += `   üí∞ Token: $${project.tokenPrice.toFixed(4)} (+${dailyGrowth}%/ng√†y)\n`;
                        msg += `   üìù Nhi·ªám v·ª•: ${taskCount} (t·ªïng ${totalReward} token)\n`;
                        msg += `   üÜî ID: ${shortId}... | D√πng: .airdrop detail ${project.id}\n\n`;
                    });

                    msg += `üì± ƒêI·ªÄU H∆Ø·ªöNG\n`;

                    let navButtons = '';
                    if (validPageNumber > 1) {
                        navButtons += `‚óÄÔ∏è Trang tr∆∞·ªõc: .airdrop projects ${filterType || ''} ${sortOption} ${validPageNumber - 1}\n`;
                    }
                    if (validPageNumber < totalPages) {
                        navButtons += `‚ñ∂Ô∏è Trang sau: .airdrop projects ${filterType || ''} ${sortOption} ${validPageNumber + 1}\n`;
                    }
                    if (navButtons) {
                        msg += navButtons;
                    }

                    msg += `\nüîç L·ªåC D·ª∞ √ÅN\n`;
                    msg += `‚Ä¢ Theo lo·∫°i: defi, nft, gamefi, dao, infrastructure, metaverse\n`;
                    msg += `‚Ä¢ Theo r·ªßi ro: safe, medium, risky\n`;
                    msg += `‚Ä¢ V√≠ d·ª•: .airdrop projects defi safu 1\n`;

                    msg += `\nüìä S·∫ÆP X·∫æP\n`;
                    msg += `‚Ä¢ M·ªõi nh·∫•t: newest\n`;
                    msg += `‚Ä¢ Gi√° cao: price\n`;
                    msg += `‚Ä¢ An to√†n: safu\n`;
                    msg += `‚Ä¢ TƒÉng tr∆∞·ªüng: growth\n`;
                    msg += `‚Ä¢ Ph·∫ßn th∆∞·ªüng: rewards\n`;
                    msg += `\nüí° G·ª¢I √ù\n`;
                    if (pagedProjects.length > 0) {
                        const bestProject = pagedProjects.sort((a, b) => calculateSafuScore(b) - calculateSafuScore(a))[0];
                        msg += `‚Ä¢ Xem chi ti·∫øt d·ª± √°n ƒë√°ng ch√∫ √Ω nh·∫•t: .airdrop detail ${bestProject.id}\n`;
                    }
                    msg += `‚Ä¢ T·∫°o d·ª± √°n m·ªõi: .airdrop refresh`;

                    return api.sendMessage(msg, threadID, messageID);
                }
                case "detail":
                case "project": {
                    const projectId = target[1];
                    if (!projectId || !projects[projectId]) {
                        return api.sendMessage(
                            "‚ùå Vui l√≤ng cung c·∫•p ID d·ª± √°n h·ª£p l·ªá!\n" +
                            "S·ª≠ d·ª•ng: .airdrop detail [project_id]\n" +
                            "ho·∫∑c d√πng '.airdrop projects' ƒë·ªÉ xem danh s√°ch d·ª± √°n.",
                            threadID, messageID
                        );
                    }

                    const project = projects[projectId];
                    const safetyInfo = analyzeTrustAndRisk(project);
                    const safuScore = safetyInfo.safuScore;
                    const safuEmoji = safuScore >= 70 ? 'üü¢' : (safuScore >= 40 ? 'üü†' : 'üî¥');

                    let msg = `üîç CHI TI·∫æT D·ª∞ √ÅN\n`;
                    msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                    const typeEmoji = {
                        'DeFi': 'üí±',
                        'NFT': 'üé®',
                        'GameFi': 'üéÆ',
                        'Infrastructure': 'üèóÔ∏è',
                        'DAO': 'üë•',
                        'Metaverse': 'üåê'
                    }[project.type] || 'üìä';

                    msg += `üìå ${typeEmoji} ${project.name} (${project.type})\n`;
                    msg += `${safuEmoji} SAFU Score: ${safuScore}/100 (${safetyInfo.recommendation})\n`;
                    msg += `‚ÑπÔ∏è ${project.description}\n\n`;

                    msg += `üí∞ TOKEN INFO\n`;
                    msg += `‚Ä¢ Gi√° hi·ªán t·∫°i: $${project.tokenPrice.toFixed(4)}\n`;
                    msg += `‚Ä¢ TƒÉng tr∆∞·ªüng: ${(project.dailyGrowthRate * 100).toFixed(1)}% m·ªói ng√†y\n`;
                    msg += `‚Ä¢ T·ªïng cung: ${(project.totalSupply / 1000000).toFixed(1)}M tokens\n`;
                    msg += `‚Ä¢ C√≤n l·∫°i: ${(project.remainingSupply / 1000000).toFixed(1)}M tokens\n`;

                    msg += `\nüë• C·ªòNG ƒê·ªíNG & PH√ÇN T√çCH\n`;
                    msg += `‚Ä¢ Ng∆∞·ªùi tham gia: ${project.communitySize.toLocaleString()}\n`;
                    msg += `‚Ä¢ M·ª©c ƒë·ªô r·ªßi ro: ${project.riskLevel === 'low' ? 'Th·∫•p üü¢' :
                        (project.riskLevel === 'medium' ? 'Trung b√¨nh üü†' : 'Cao üî¥')}\n`;
                    msg += `‚Ä¢ T·ª∑ l·ªá Risk/Reward: ${safetyInfo.riskRewardRatio}\n`;

                    if (safetyInfo.warnings.length > 0) {
                        msg += `\n‚ö†Ô∏è C·∫¢NH B√ÅO\n`;
                        safetyInfo.warnings.forEach(warning => {
                            msg += `‚Ä¢ ${warning}\n`;
                        });
                    }

                    msg += `\nüë®‚Äçüíº ƒê·ªòI NG≈® (${project.team.length})\n`;
                    const keyMembers = project.team.slice(0, 2);
                    keyMembers.forEach(member => {
                        msg += `‚Ä¢ ${member.role}: ${member.experience} (${member.years} nƒÉm)\n`;
                    });
                    if (project.team.length > 2) {
                        msg += `‚Ä¢ ...v√† ${project.team.length - 2} th√†nh vi√™n kh√°c\n`;
                    }

                    msg += `\nüóìÔ∏è ROADMAP\n`;
                    const currentRoadmap = project.roadmap[0];
                    msg += `‚Ä¢ ${currentRoadmap.period}: ${currentRoadmap.milestones.join(', ')}\n`;

                    msg += `\nüìù NHI·ªÜM V·ª§\n`;

                    const easyTasks = project.tasks.filter(t => t.difficulty === 'easy');
                    const mediumTasks = project.tasks.filter(t => t.difficulty === 'medium');
                    const hardTasks = project.tasks.filter(t => t.difficulty === 'hard');

                    if (easyTasks.length > 0) {
                        msg += `‚Ä¢ üü¢ D·ªÖ: ${easyTasks.map(t => `${t.name} (${t.reward})`).join(', ')}\n`;
                    }
                    if (mediumTasks.length > 0) {
                        msg += `‚Ä¢ üü† Trung b√¨nh: ${mediumTasks.map(t => `${t.name} (${t.reward})`).join(', ')}\n`;
                    }
                    if (hardTasks.length > 0) {
                        msg += `‚Ä¢ üî¥ Kh√≥: ${hardTasks.map(t => `${t.name} (${t.reward})`).join(', ')}\n`;
                    }

                    const totalReward = project.tasks.reduce((sum, task) => sum + task.reward, 0);
                    msg += `‚Ä¢ T·ªïng ph·∫ßn th∆∞·ªüng: ${totalReward} ${project.name}\n`;

                    const wallet = wallets[senderID];
                    if (wallet) {
                        msg += `\nüìä TI·∫æN ƒê·ªò C·ª¶A B·∫†N\n`;
                        const completedTasks = tasks[senderID]?.[projectId] || [];
                        msg += `‚Ä¢ Ho√†n th√†nh: ${completedTasks.length}/${project.tasks.length} nhi·ªám v·ª•\n`;

                        const tokenAmount = wallet.tokens[project.name] || 0;
                        const stakedAmount = wallet.staked?.[project.name] || 0;

                        if (tokenAmount > 0 || stakedAmount > 0) {
                            msg += `‚Ä¢ Token ƒëang c√≥: ${tokenAmount} ${project.name}\n`;
                            if (stakedAmount > 0) {
                                msg += `‚Ä¢ Token ƒë√£ stake: ${stakedAmount} ${project.name}\n`;
                            }

                            const value = tokenAmount * project.tokenPrice;
                            const stakedValue = stakedAmount * project.tokenPrice * 1.5;
                            const totalValue = value + stakedValue;

                            if (totalValue > 0) {
                                msg += `‚Ä¢ Gi√° tr·ªã: $${totalValue.toFixed(2)}\n`;
                            }
                        } else {
                            msg += `‚Ä¢ B·∫°n ch∆∞a c√≥ token n√†o t·ª´ d·ª± √°n n√†y\n`;
                        }
                    }

                    msg += `\nüì± H√ÄNH ƒê·ªòNG\n`;
                    if (wallet) {
                        msg += `‚Ä¢ Xem nhi·ªám v·ª•: .airdrop task ${projectId}\n`;

                        const tokenAmount = wallet.tokens[project.name] || 0;
                        if (tokenAmount > 0) {
                            msg += `‚Ä¢ Stake token: .airdrop stake ${projectId} ${tokenAmount}\n`;
                        }
                    } else {
                        msg += `‚Ä¢ B·∫°n c·∫ßn k·∫øt n·ªëi v√≠ tr∆∞·ªõc: .airdrop connect\n`;
                    }

                    if (safuScore < 40) {
                        msg += `\n‚ö†Ô∏è C·∫¢NH B√ÅO R·ª¶I RO CAO!\nH√£y c√¢n nh·∫Øc k·ªπ tr∆∞·ªõc khi tham gia.\n`;
                    }

                    return api.sendMessage(msg, threadID, messageID);
                }
                case "nav":
                case "go": {
                    const direction = target[1]?.toLowerCase();

                    if (!direction) {
                        return api.sendMessage(
                            "üì° ƒêI·ªÄU H∆Ø·ªöNG AIRDROP üì°\n\n" +
                            "S·ª≠ d·ª•ng:\n" +
                            ".airdrop nav next - Xem d·ª± √°n ti·∫øp theo\n" +
                            ".airdrop nav prev - Xem d·ª± √°n tr∆∞·ªõc ƒë√≥\n" +
                            ".airdrop nav safe - Xem d·ª± √°n an to√†n nh·∫•t\n" +
                            ".airdrop nav risky - Xem d·ª± √°n r·ªßi ro cao nh·∫•t\n" +
                            ".airdrop nav random - Xem d·ª± √°n ng·∫´u nhi√™n\n" +
                            ".airdrop nav newest - Xem d·ª± √°n m·ªõi nh·∫•t\n" +
                            ".airdrop nav best - Xem d·ª± √°n t·ªët nh·∫•t",
                            threadID, messageID
                        );
                    }

                    const allProjects = Object.values(projects);
                    if (allProjects.length === 0) {
                        return api.sendMessage(
                            "‚ùå Hi·ªán kh√¥ng c√≥ d·ª± √°n n√†o! H√£y d√πng l·ªánh '.airdrop refresh' ƒë·ªÉ t·∫°o d·ª± √°n m·ªõi.",
                            threadID, messageID
                        );
                    }

                    let targetProject;

                    switch (direction) {
                        case "next":
                        case "prev":
                            const projectIds = Object.keys(projects);
                            const randomIndex = Math.floor(Math.random() * projectIds.length);
                            targetProject = projects[projectIds[randomIndex]];
                            break;

                        case "safe":
                        case "safest":
                            targetProject = allProjects
                                .sort((a, b) => calculateSafuScore(b) - calculateSafuScore(a))[0];
                            break;

                        case "risky":
                        case "risk":
                            targetProject = allProjects
                                .sort((a, b) => calculateSafuScore(a) - calculateSafuScore(b))[0];
                            break;

                        case "random":
                            targetProject = allProjects[Math.floor(Math.random() * allProjects.length)];
                            break;

                        case "newest":
                        case "new":
                            targetProject = allProjects
                                .sort((a, b) => b.createdAt - a.createdAt)[0];
                            break;

                        case "best":
                            targetProject = allProjects
                                .sort((a, b) => {
                                    const scoreA = calculateSafuScore(a) * 0.7 + (a.dailyGrowthRate * 1000) * 0.3;
                                    const scoreB = calculateSafuScore(b) * 0.7 + (b.dailyGrowthRate * 1000) * 0.3;
                                    return scoreB - scoreA;
                                })[0];
                            break;

                        default:
                            return api.sendMessage(
                                "‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá!\n" +
                                "S·ª≠ d·ª•ng: .airdrop nav [next/prev/safe/risky/random/newest/best]",
                                threadID, messageID
                            );
                    }

                    if (targetProject) {
                        const safetyInfo = analyzeTrustAndRisk(targetProject);
                        const safuScore = safetyInfo.safuScore;
                        const safuEmoji = safuScore >= 70 ? 'üü¢' : (safuScore >= 40 ? 'üü†' : 'üî¥');

                        let msg = `üß≠ ƒê√É T√åM TH·∫§Y D·ª∞ √ÅN ${direction.toUpperCase()}\n`;
                        msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                        msg += `üìå ${targetProject.name} (${targetProject.type}) ${safuEmoji}\n`;
                        msg += `üí∞ Token: $${targetProject.tokenPrice.toFixed(4)} (+${(targetProject.dailyGrowthRate * 100).toFixed(1)}%/ng√†y)\n`;
                        msg += `‚ÑπÔ∏è ${targetProject.description}\n`;
                        msg += `üë• C·ªông ƒë·ªìng: ${targetProject.communitySize.toLocaleString()}\n`;

                        if (safetyInfo.warnings.length > 0) {
                            msg += `‚ö†Ô∏è ${safetyInfo.warnings[0]}\n`;
                        }

                        msg += `\nüìù NHI·ªÜM V·ª§: ${targetProject.tasks.length} nhi·ªám v·ª•\n`;
                        msg += `üí∏ T·ªïng ph·∫ßn th∆∞·ªüng: ${targetProject.tasks.reduce((sum, task) => sum + task.reward, 0)} token\n\n`;

                        msg += `üì± H√ÄNH ƒê·ªòNG:\n`;
                        msg += `‚Ä¢ Xem chi ti·∫øt: .airdrop detail ${targetProject.id}\n`;
                        msg += `‚Ä¢ L√†m nhi·ªám v·ª•: .airdrop task ${targetProject.id}\n`;
                        msg += `‚Ä¢ T√¨m d·ª± √°n kh√°c: .airdrop nav random`;

                        return api.sendMessage(msg, threadID, messageID);
                    } else {
                        return api.sendMessage(
                            "‚ùå Kh√¥ng t√¨m th·∫•y d·ª± √°n ph√π h·ª£p!",
                            threadID, messageID
                        );
                    }
                }
                case "refresh": {
                    const projectTypes = Object.keys(PROJECT_TEMPLATES);
                    const numToCreate = Math.floor(Math.random() * 3) + 1;
                    const createdProjects = [];

                    for (let i = 0; i < numToCreate; i++) {
                        const randomType = projectTypes[Math.floor(Math.random() * projectTypes.length)];
                        const newProject = createProject(randomType);
                        if (newProject) {
                            createdProjects.push(newProject);
                        }
                    }

                    if (createdProjects.length === 0) {
                        return api.sendMessage(
                            "‚ùå Kh√¥ng th·ªÉ t·∫°o d·ª± √°n m·ªõi. Vui l√≤ng th·ª≠ l·∫°i sau!",
                            threadID, messageID
                        );
                    }

                    let msg = `üéâ ƒê√É T·∫†O ${createdProjects.length} D·ª∞ √ÅN M·ªöI!\n\n`;

                    createdProjects.forEach(project => {
                        msg += `üìå ${project.name} (${project.type})\n`;
                        msg += `‚ÑπÔ∏è ${project.description}\n`;
                        msg += `üí∞ Token: $${project.tokenPrice.toFixed(4)}\n`;
                        msg += `ID: ${project.id}\n\n`;
                    });

                    msg += `S·ª≠ d·ª•ng l·ªánh '.airdrop projects' ƒë·ªÉ xem chi ti·∫øt!`;

                    return api.sendMessage(msg, threadID, messageID);
                }
                case "task":
                case "do": {
                    const projectId = target[1];
                    const taskId = target[2];

                    // N·∫øu kh√¥ng c√≥ projectId, hi·ªÉn th·ªã danh s√°ch d·ª± √°n
                    if (!projectId) {
                        let msg = "üìã DANH S√ÅCH D·ª∞ √ÅN C√ì NHI·ªÜM V·ª§ üìã\n\n";

                        const topProjects = Object.values(projects)
                            .sort((a, b) => calculateSafuScore(b) - calculateSafuScore(a))
                            .slice(0, 5);

                        if (topProjects.length === 0) {
                            return api.sendMessage(
                                "‚ùå Hi·ªán kh√¥ng c√≥ d·ª± √°n n√†o! H√£y d√πng l·ªánh '.airdrop refresh' ƒë·ªÉ t·∫°o d·ª± √°n m·ªõi.",
                                threadID, messageID
                            );
                        }

                        topProjects.forEach((project, index) => {
                            const safuScore = calculateSafuScore(project);
                            const safuEmoji = safuScore >= 70 ? 'üü¢' : (safuScore >= 40 ? 'üü†' : 'üî¥');

                            msg += `${index + 1}. ${project.name} (${project.type})\n`;
                            msg += `   ${safuEmoji} SAFU: ${safuScore}/100\n`;
                            msg += `   üí∞ Token: $${project.tokenPrice.toFixed(4)}\n`;
                            msg += `   üìù ID: ${project.id}\n\n`;
                        });

                        msg += "D√πng l·ªánh `.airdrop task [project_id]` ƒë·ªÉ xem nhi·ªám v·ª• c·ªßa d·ª± √°n.";
                        return api.sendMessage(msg, threadID, messageID);
                    }

                    if (!taskId) {
                        const project = projects[projectId];
                        if (!project) {
                            return api.sendMessage(
                                "‚ùå D·ª± √°n kh√¥ng t·ªìn t·∫°i! H√£y ki·ªÉm tra l·∫°i ID.",
                                threadID, messageID
                            );
                        }

                        let msg = `üìù NHI·ªÜM V·ª§ C·ª¶A D·ª∞ √ÅN ${project.name} üìù\n\n`;

                        const wallet = wallets[senderID];
                        const completedTasks = tasks[senderID]?.[projectId] || [];

                        project.tasks.forEach((task, index) => {
                            const isCompleted = completedTasks.includes(task.id);
                            const emoji = isCompleted ? '‚úÖ' : '‚¨ú';

                            msg += `${emoji} ${index + 1}. ${task.name} (${task.difficulty})\n`;
                            msg += `   üí∞ Ph·∫ßn th∆∞·ªüng: ${task.reward} ${project.name}\n`;
                            msg += `   ‚ÑπÔ∏è ${task.description}\n`;
                            msg += `   üìù ID Nhi·ªám v·ª•: ${task.id}\n\n`;
                        });

                        msg += "D√πng l·ªánh `.airdrop task " + projectId + " [task_id]` ƒë·ªÉ ho√†n th√†nh nhi·ªám v·ª•.";
                        return api.sendMessage(msg, threadID, messageID);
                    }

                    const result = completeTask(senderID, projectId, taskId);
                    return api.sendMessage(result.message, threadID, messageID);
                }

                case "stake": {
                    const projectId = target[1];
                    const amount = parseInt(target[2]);

                    if (!projectId || !amount) {
                        return api.sendMessage(
                            "‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\n.airdrop stake [project_id] [amount]",
                            threadID, messageID
                        );
                    }

                    const result = stakeTokens(senderID, projectId, amount);
                    return api.sendMessage(result.message, threadID, messageID);
                }

                case "balance":
                case "info": {
                    const wallet = initUserData(senderID);
                    if (!wallet) {
                        return api.sendMessage(
                            "‚ùå B·∫°n ch∆∞a k·∫øt n·ªëi v√≠! D√πng '.airdrop connect' ƒë·ªÉ t·∫°o v√≠.",
                            threadID, messageID
                        );
                    }

                    const farmingLevel = wallet.farming?.level || 1;
                    const currentLevel = FARMING_LEVELS.find(l => l.level === farmingLevel) || FARMING_LEVELS[0];
                    const nextLevel = farmingLevel < 5 ?
                        FARMING_LEVELS.find(l => l.level === farmingLevel + 1) : null;

                    const now = Date.now();
                    const timePassed = now - (wallet.farming?.lastClaim || 0);
                    const canFarmNow = timePassed >= FARMING_CONFIG.interval;
                    const timeRemaining = canFarmNow ? 0 : FARMING_CONFIG.interval - timePassed;
                    const minutesRemaining = Math.floor(timeRemaining / (1000 * 60));

                    const tokensValue = calculateRewards(senderID);
                    const nftCount = wallet.nfts?.length || 0;
                    const nftValue = nftCount * NFT_CONFIG.mintPrice * 0.5;
                    const totalAssetValue = tokensValue + nftValue;

                    const power = wallet.farming?.power || 1;
                    const baseAmount = FARMING_CONFIG.baseRate * power;
                    const nftBonus = calculateNFTBonus(wallet.nfts || []);
                    const levelBonus = currentLevel.bonus;
                    const streakBonus = Math.min(
                        (wallet.farming?.streak || 0) * FARMING_CONFIG.streakBonus,
                        FARMING_CONFIG.maxStreakBonus
                    );
                    const totalMultiplier = 1 + nftBonus + levelBonus + streakBonus;
                    const hourlyIncome = Math.floor(baseAmount * totalMultiplier);
                    const dailyIncome = Math.floor(hourlyIncome * 24 * 0.7);

                    const achievements = wallet.quests?.achievements || [];
                    const achievementCount = achievements.length;
                    const totalAchievements = Object.keys(ACHIEVEMENTS).length;

                    let msg = `üåü TH√îNG TIN T√ÄI KHO·∫¢N AIRDROP üåü\n`;
                    msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                    msg += `üë§ TH√îNG TIN CHUNG\n`;
                    msg += `‚Ä¢ ƒê·ªãa ch·ªâ v√≠: ${wallet.address.substring(0, 8)}...${wallet.address.substring(wallet.address.length - 6)}\n`;
                    msg += `‚Ä¢ C·∫•p ƒë·ªô: ${currentLevel.name} (${farmingLevel}/5)\n`;

                    if (nextLevel) {
                        const progress = wallet.farming?.totalFarmed || 0;
                        const percentage = Math.min(100, Math.floor((progress / nextLevel.requirement) * 100));
                        msg += `‚Ä¢ Ti·∫øn tr√¨nh l√™n c·∫•p: ${percentage}% | ${progress}/${nextLevel.requirement}\n`;
                    } else {
                        msg += `‚Ä¢ C·∫•p ƒë·ªô t·ªëi ƒëa ƒë·∫°t ƒë∆∞·ª£c! üèÜ\n`;
                    }

                    msg += `‚Ä¢ Streak farming: ${wallet.farming?.streak || 0} ng√†y\n`;
                    msg += `‚Ä¢ Th√†nh t·ª±u: ${achievementCount}/${totalAchievements}\n\n`;

                    const userBadges = calculateUserBadges(wallet);
                    if (userBadges.length > 0) {
                        msg += `üèÖ HUY HI·ªÜU\n`;
                        userBadges.forEach(badgeId => {
                            const badge = USER_BADGES[badgeId];
                            if (badge) {
                                msg += `‚Ä¢ ${badge.name}: ${badge.description}\n`;
                            }
                        });
                        msg += `\n`;
                    }

                    msg += `üí∞ T√ÄI S·∫¢N\n`;

                    if (wallet.tokens['FARM']) {
                        msg += `‚Ä¢ FARM: ${wallet.tokens['FARM']} token\n`;
                    }

                    let otherTokens = Object.entries(wallet.tokens).filter(([symbol]) => symbol !== 'FARM');
                    if (otherTokens.length > 0) {
                        otherTokens.forEach(([symbol, amount]) => {
                            msg += `‚Ä¢ ${symbol}: ${amount} token\n`;
                        });
                    }

                    let hasStakedTokens = false;
                    if (Object.keys(wallet.staked || {}).length > 0) {
                        msg += `\nüìå ƒê√É STAKE\n`;
                        Object.entries(wallet.staked).forEach(([symbol, amount]) => {
                            hasStakedTokens = true;
                            const project = Object.values(projects).find(p => p.name === symbol);
                            if (project) {
                                msg += `‚Ä¢ ${symbol}: ${amount} token (x1.5) = $${(amount * project.tokenPrice * 1.5).toFixed(2)}\n`;
                            } else {
                                msg += `‚Ä¢ ${symbol}: ${amount} token\n`;
                            }
                        });
                    }

                    if (!hasStakedTokens) {
                        msg += `\nüí° Ch∆∞a stake token n√†o! Stake ƒë·ªÉ tƒÉng gi√° tr·ªã x1.5 l·∫ßn\n`;
                    }

                    msg += `\nüé® NFT S·ªû H·ªÆU: ${nftCount} c√°i\n`;
                    if (nftCount > 0) {
                        const rarityCount = {
                            'Common': 0,
                            'Rare': 0,
                            'Epic': 0,
                            'Legendary': 0
                        };

                        wallet.nfts.forEach(nft => {
                            if (nft && nft.rarity) {
                                rarityCount[nft.rarity]++;
                            }
                        });

                        for (const [rarity, count] of Object.entries(rarityCount)) {
                            if (count > 0) {
                                msg += `‚Ä¢ ${rarity}: ${count} c√°i\n`;
                            }
                        }

                        msg += `‚Ä¢ Bonus farming: +${(nftBonus * 100).toFixed(0)}%\n`;
                    } else {
                        msg += `‚Ä¢ D√πng l·ªánh '.airdrop nft mint' ƒë·ªÉ t·∫°o NFT!\n`;
                    }

                    msg += `\nüíµ T·ªîNG GI√Å TR·ªä: $${totalAssetValue.toFixed(2)}\n`;
                    msg += `‚Ä¢ Token: $${tokensValue.toFixed(2)}\n`;
                    msg += `‚Ä¢ NFT: $${nftValue.toFixed(2)}\n`;

                    msg += `\nüìà THU NH·∫¨P\n`;
                    msg += `‚Ä¢ Thu nh·∫≠p/gi·ªù: ${hourlyIncome} FARM\n`;
                    msg += `‚Ä¢ Thu nh·∫≠p/ng√†y (∆∞·ªõc t√≠nh): ${dailyIncome} FARM\n`;

                    // Th√¥ng tin tr·∫°ng th√°i farm
                    msg += `\n‚è±Ô∏è TR·∫†NG TH√ÅI FARM\n`;
                    if (canFarmNow) {
                        msg += `‚Ä¢ ‚úÖ C√≥ th·ªÉ farm ngay! D√πng l·ªánh '.airdrop farm'\n`;
                    } else {
                        msg += `‚Ä¢ ‚è≥ Th·ªùi gian ch·ªù: ${minutesRemaining} ph√∫t\n`;
                    }

                    msg += `\nüí° ƒê·ªÄ XU·∫§T H√ÄNH ƒê·ªòNG\n`;

                    if (canFarmNow) {
                        msg += `‚Ä¢ Farm ngay ƒë·ªÉ thu ho·∫°ch token\n`;
                    }

                    if (wallet.tokens['FARM'] >= NFT_CONFIG.mintPrice) {
                        msg += `‚Ä¢ T·∫°o NFT ƒë·ªÉ tƒÉng thu nh·∫≠p (+${NFT_CONFIG.mintPrice / 100}%/NFT)\n`;
                    }

                    const uncompletedAchievements = Object.entries(ACHIEVEMENTS)
                        .filter(([id]) => !achievements.includes(id));

                    if (uncompletedAchievements.length > 0) {
                        const [id, achievement] = uncompletedAchievements[0];
                        const progress = calculateProgress(wallet, id);
                        const percentage = Math.min(100, Math.floor((progress / achievement.requirement) * 100));
                        msg += `‚Ä¢ Ho√†n th√†nh th√†nh t·ª±u "${achievement.name}" (${percentage}%)\n`;
                    }

                    return api.sendMessage(msg, threadID, messageID);
                }
                case "rank":
                case "top":
                case "leaderboard": {
                    const category = target[1]?.toLowerCase() || "value";

                    // L·∫•y danh s√°ch ng∆∞·ªùi ch∆°i ƒë√£ c√≥ v√≠
                    const userWallets = Object.entries(wallets);
                    if (userWallets.length === 0) {
                        return api.sendMessage(
                            "‚ö†Ô∏è Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i n√†o tham gia Airdrop!",
                            threadID, messageID
                        );
                    }

                    let leaderboard = [];
                    let title = "";

                    switch (category) {
                        case "value":
                        case "wealth":
                            title = "üí∞ TOP 10 NG∆Ø·ªúI GI√ÄU NH·∫§T üí∞";
                            leaderboard = userWallets
                                .map(([userId, wallet]) => {
                                    const tokenValue = calculateRewards(userId);
                                    const nftValue = (wallet.nfts?.length || 0) * NFT_CONFIG.mintPrice * 0.5;
                                    return {
                                        userId,
                                        value: tokenValue + nftValue
                                    };
                                })
                                .sort((a, b) => b.value - a.value)
                                .slice(0, 10);
                            break;

                        case "farm":
                        case "token":
                            title = "ü™ô TOP 10 NG∆Ø·ªúI C√ì NHI·ªÄU FARM TOKEN NH·∫§T ü™ô";
                            leaderboard = userWallets
                                .map(([userId, wallet]) => ({
                                    userId,
                                    value: wallet.tokens?.FARM || 0
                                }))
                                .sort((a, b) => b.value - a.value)
                                .slice(0, 10);
                            break;

                        case "nft":
                            title = "üé® TOP 10 NG∆Ø·ªúI S∆ØU T·∫¨P NFT üé®";
                            leaderboard = userWallets
                                .map(([userId, wallet]) => ({
                                    userId,
                                    value: wallet.nfts?.length || 0
                                }))
                                .sort((a, b) => b.value - a.value)
                                .slice(0, 10);
                            break;

                        case "level":
                            title = "üë®‚Äçüåæ TOP 10 NG∆Ø·ªúI LEVEL CAO NH·∫§T üë®‚Äçüåæ";
                            leaderboard = userWallets
                                .map(([userId, wallet]) => ({
                                    userId,
                                    value: wallet.farming?.level || 1,
                                    subValue: wallet.farming?.totalFarmed || 0
                                }))
                                .sort((a, b) => b.value === a.value ?
                                    b.subValue - a.subValue : b.value - a.value)
                                .slice(0, 10);
                            break;

                        case "streak":
                            title = "üî• TOP 10 STREAK FARMING CAO NH·∫§T üî•";
                            leaderboard = userWallets
                                .map(([userId, wallet]) => ({
                                    userId,
                                    value: wallet.farming?.streak || 0
                                }))
                                .sort((a, b) => b.value - a.value)
                                .slice(0, 10);
                            break;

                        default:
                            return api.sendMessage(
                                "‚ö†Ô∏è Lo·∫°i b·∫£ng x·∫øp h·∫°ng kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng:\n" +
                                ".airdrop top value - X·∫øp h·∫°ng theo gi√° tr·ªã t√†i s·∫£n\n" +
                                ".airdrop top farm - X·∫øp h·∫°ng theo s·ªë l∆∞·ª£ng FARM token\n" +
                                ".airdrop top nft - X·∫øp h·∫°ng theo s·ªë l∆∞·ª£ng NFT\n" +
                                ".airdrop top level - X·∫øp h·∫°ng theo c·∫•p ƒë·ªô farming\n" +
                                ".airdrop top streak - X·∫øp h·∫°ng theo streak farming",
                                threadID, messageID
                            );
                    }

                    let msg = `${title}\n`;
                    msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

                    leaderboard.forEach((entry, index) => {
                        let userIdDisplay = entry.userId;

                        // Th√™m bi·ªÉu t∆∞·ª£ng huy ch∆∞∆°ng cho 3 ng∆∞·ªùi ƒë·∫ßu ti√™n
                        const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;

                        // ƒê·ªãnh d·∫°ng gi√° tr·ªã hi·ªÉn th·ªã d·ª±a v√†o lo·∫°i b·∫£ng x·∫øp h·∫°ng
                        let valueDisplay = "";
                        switch (category) {
                            case "value":
                            case "wealth":
                                valueDisplay = `$${entry.value.toFixed(2)}`;
                                break;
                            case "farm":
                            case "token":
                                valueDisplay = `${entry.value} FARM`;
                                break;
                            case "nft":
                                valueDisplay = `${entry.value} NFT`;
                                break;
                            case "level":
                                valueDisplay = `Level ${entry.value} (${entry.subValue} FARM)`;
                                break;
                            case "streak":
                                valueDisplay = `${entry.value} ng√†y`;
                                break;
                        }

                        msg += `${medal} ID: ${userIdDisplay}\n   ${valueDisplay}\n`;
                    });

                    // Hi·ªÉn th·ªã v·ªã tr√≠ c·ªßa ng∆∞·ªùi g·ª≠i l·ªánh
                    const senderIndex = leaderboard.findIndex(entry => entry.userId === senderID);
                    if (senderIndex !== -1) {
                        msg += `\nüîç B·∫°n ƒëang x·∫øp h·∫°ng #${senderIndex + 1}`;
                    } else {
                        const allUsers = userWallets
                            .map(([userId, wallet]) => {
                                let value = 0;
                                switch (category) {
                                    case "value":
                                    case "wealth":
                                        value = calculateRewards(userId) +
                                            (wallet.nfts?.length || 0) * NFT_CONFIG.mintPrice * 0.5;
                                        break;
                                    case "farm":
                                    case "token":
                                        value = wallet.tokens?.FARM || 0;
                                        break;
                                    case "nft":
                                        value = wallet.nfts?.length || 0;
                                        break;
                                    case "level":
                                        value = wallet.farming?.level || 1;
                                        break;
                                    case "streak":
                                        value = wallet.farming?.streak || 0;
                                        break;
                                }
                                return { userId, value };
                            })
                            .sort((a, b) => b.value - a.value);

                        const senderRank = allUsers.findIndex(entry => entry.userId === senderID) + 1;
                        if (senderRank > 0) {
                            msg += `\nüîç B·∫°n ƒëang x·∫øp h·∫°ng #${senderRank} (kh√¥ng n·∫±m trong top 10)`;
                        } else {
                            msg += `\n‚ùì B·∫°n ch∆∞a tham gia Airdrop! D√πng l·ªánh '.airdrop connect' ƒë·ªÉ b·∫Øt ƒë·∫ßu`;
                        }
                    }

                    return api.sendMessage(msg, threadID, messageID);
                }
                case "event": {
                    const event = checkActiveEvent();
                    if (!event) {
                        const newEvent = startRandomEvent();
                        if (newEvent) {
                            const duration = Math.floor(newEvent.duration / (60 * 60 * 1000));
                            let msg = `üéâ S·ª∞ KI·ªÜN M·ªöI ƒê√É B·∫ÆT ƒê·∫¶U! üéâ\n\n`;
                            msg += `üìå ${newEvent.name}\n`;
                            msg += `‚ÑπÔ∏è ${newEvent.description}\n`;
                            if (newEvent.bonus) msg += `üí∞ Bonus: +${newEvent.bonus * 100}%\n`;
                            if (newEvent.intervalReduction) msg += `‚è±Ô∏è Gi·∫£m th·ªùi gian ch·ªù: -${newEvent.intervalReduction * 100}%\n`;
                            if (newEvent.luckyChance) msg += `üçÄ TƒÉng t·ª∑ l·ªá may m·∫Øn: +${newEvent.luckyChance * 100}%\n`;
                            msg += `‚è≥ Th·ªùi gian: ${duration} gi·ªù\n\n`;
                            msg += `Tranh th·ªß farm ngay ƒë·ªÉ nh·∫≠n nhi·ªÅu token h∆°n!`;

                            return api.sendMessage(msg, threadID, messageID);
                        } else {
                            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ s·ª± ki·ªán n√†o di·ªÖn ra!", threadID, messageID);
                        }
                    } else {
                        const remainingTime = eventEndTime - Date.now();
                        const hoursRemaining = Math.floor(remainingTime / (60 * 60 * 1000));
                        const minutesRemaining = Math.floor((remainingTime % (60 * 60 * 1000)) / (60 * 1000));

                        let msg = `üéÆ S·ª∞ KI·ªÜN ƒêANG DI·ªÑN RA üéÆ\n\n`;
                        msg += `üìå ${event.name}\n`;
                        msg += `‚ÑπÔ∏è ${event.description}\n`;
                        if (event.bonus) msg += `üí∞ Bonus: +${event.bonus * 100}%\n`;
                        if (event.intervalReduction) msg += `‚è±Ô∏è Gi·∫£m th·ªùi gian ch·ªù: -${event.intervalReduction * 100}%\n`;
                        if (event.luckyChance) msg += `üçÄ TƒÉng t·ª∑ l·ªá may m·∫Øn: +${event.luckyChance * 100}%\n`;
                        msg += `‚è≥ Th·ªùi gian c√≤n l·∫°i: ${hoursRemaining}h ${minutesRemaining}m\n\n`;
                        msg += `Tranh th·ªß farm ngay ƒë·ªÉ nh·∫≠n nhi·ªÅu token h∆°n!`;

                        return api.sendMessage(msg, threadID, messageID);
                    }
                }
                case "claim": {
                    const totalValue = calculateRewards(senderID);
                    if (totalValue <= 0) {
                        return api.sendMessage(
                            "‚ùå B·∫°n kh√¥ng c√≥ token n√†o ƒë·ªÉ claim!",
                            threadID, messageID
                        );
                    }
                
                    const withdrawalFee = Math.min(Math.ceil(totalValue * 0.05), 100); 
                    const finalAmount = Math.floor(totalValue - withdrawalFee);
                    
                    const isFirstClaim = !wallet.hasClaimedBefore;
                    const actualFee = isFirstClaim ? Math.ceil(withdrawalFee / 2) : withdrawalFee;
                    const actualAmount = isFirstClaim ? Math.floor(totalValue - actualFee) : finalAmount;
                    
                    if (!global.airdropStats) {
                        global.airdropStats = {
                            totalFeesCollected: 0,
                            totalClaimedAmount: 0,
                            claimCount: 0
                        };
                    }
                    global.airdropStats.totalFeesCollected += actualFee;
                    global.airdropStats.totalClaimedAmount += actualAmount;
                    global.airdropStats.claimCount++;
                
                    updateBalance(senderID, actualAmount);
                
                    if (wallets[senderID]) {
                        wallets[senderID].tokens = {};
                        wallets[senderID].staked = {};
                        wallets[senderID].hasClaimedBefore = true;
                        saveData();
                    }
                
                    return api.sendMessage(
                        `‚úÖ ƒê√£ claim th√†nh c√¥ng!\n` +
                        `üí∞ Nh·∫≠n ƒë∆∞·ª£c: $${actualAmount}\n` +
                        `üí∏ Ph√≠ giao d·ªãch: $${actualFee} (${isFirstClaim ? "50% gi·∫£m gi√° l·∫ßn ƒë·∫ßu" : "5%"})\n\n` +
                        `üí° Tip: Claim s·ªë ti·ªÅn c√†ng l·ªõn, t·ª∑ l·ªá ph√≠ c√†ng hi·ªáu qu·∫£!`,
                        threadID, messageID
                    );
                }

                case "farm": {
                    initUserData(senderID);
                    const result = farmTokens(senderID);
                    return api.sendMessage(result.message, threadID, messageID);
                }

                case "farm-info":
                case "farming": {
                    const wallet = initUserData(senderID);
                    if (!wallet || !wallet.farming) {
                        return api.sendMessage(
                            "‚ùå B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu farming! D√πng l·ªánh '.airdrop farm' ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
                            threadID, messageID
                        );
                    }

                    const currentLevel = FARMING_LEVELS.find(l => l.level === wallet.farming.level) || FARMING_LEVELS[0];
                    const nextLevel = FARMING_LEVELS.find(l => l.level > wallet.farming.level) || null;

                    const now = Date.now();
                    const timePassed = now - (wallet.farming.lastClaim || 0);
                    const canFarmNow = timePassed >= FARMING_CONFIG.interval;

                    const timeRemaining = canFarmNow ? 0 : FARMING_CONFIG.interval - timePassed;
                    const hoursRemaining = Math.floor(timeRemaining / (1000 * 60 * 60));
                    const minutesRemaining = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));

                    const power = wallet.farming.power || 1;
                    const baseAmount = FARMING_CONFIG.baseRate * power;
                    const nftBonus = calculateNFTBonus(wallet.nfts || []);
                    const streakBonus = Math.min(
                        wallet.farming.streak * FARMING_CONFIG.streakBonus,
                        FARMING_CONFIG.maxStreakBonus
                    );
                    const levelBonus = currentLevel.bonus;
                    const totalBonus = nftBonus + streakBonus + levelBonus;
                    const hourlyRate = Math.floor(baseAmount * (1 + totalBonus));

                    let msg = "üåæ TH√îNG TIN FARMING üåæ\n";
                    msg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
                    msg += `üë®‚Äçüåæ C·∫§P ƒê·ªò: ${currentLevel.name} (${wallet.farming.level}/5)\n`;
                    if (nextLevel) {
                        const progress = wallet.farming.totalFarmed;
                        const required = nextLevel.requirement;
                        const percentage = Math.min(100, Math.floor((progress / required) * 100));
                        msg += `üìä Ti·∫øn ƒë·ªô l√™n c·∫•p: ${progress}/${required} (${percentage}%)\n`;
                    } else {
                        msg += `üèÜ ƒê√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!\n`;
                    }
                    msg += `\nüí∞ HI·ªÜU SU·∫§T:\n`;
                    msg += `‚Ä¢ C∆° b·∫£n: ${baseAmount} FARM/gi·ªù\n`;
                    if (nftBonus > 0) msg += `‚Ä¢ Bonus NFT: +${(nftBonus * 100).toFixed(0)}%\n`;
                    if (streakBonus > 0) msg += `‚Ä¢ Streak bonus: +${(streakBonus * 100).toFixed(0)}%\n`;
                    msg += `‚Ä¢ Level bonus: +${(levelBonus * 100).toFixed(0)}%\n`;
                    msg += `‚Ä¢ T·ªïng bonus: +${(totalBonus * 100).toFixed(0)}%\n`;
                    msg += `‚Ä¢ Thu nh·∫≠p: ${hourlyRate} FARM/gi·ªù\n`;
                    msg += `\nüìà TH√ÄNH T√çCH:\n`;
                    msg += `‚Ä¢ T·ªïng ƒë√£ farm: ${wallet.farming.totalFarmed} FARM\n`;
                    msg += `‚Ä¢ Streak hi·ªán t·∫°i: ${wallet.farming.streak} ng√†y\n`;
                    msg += `‚Ä¢ S·ªë NFT s·ªü h·ªØu: ${wallet.nfts?.length || 0}\n`;
                    msg += `\n‚è±Ô∏è TR·∫†NG TH√ÅI:\n`;
                    if (canFarmNow) {
                        msg += `‚Ä¢ ‚úÖ C√≥ th·ªÉ farm ngay b√¢y gi·ªù!\n`;
                        msg += `‚Ä¢ D√πng l·ªánh '.airdrop farm' ƒë·ªÉ thu ho·∫°ch`;
                    } else {
                        msg += `‚Ä¢ ‚è≥ Th·ªùi gian ch·ªù: ${hoursRemaining}h ${minutesRemaining}m\n`;
                    }
                    return api.sendMessage(msg, threadID, messageID);
                }

                case "help": {
                    const helpTopic = target[1]?.toLowerCase();

                    if (helpTopic) {
                        switch (helpTopic) {
                            case "start":
                            case "begin":
                                return api.sendMessage(
                                    "üöÄ H∆Ø·ªöNG D·∫™N B·∫ÆT ƒê·∫¶U üöÄ\n\n" +
                                    "1Ô∏è‚É£ ƒê·∫ßu ti√™n, k·∫øt n·ªëi v√≠ v·ªõi l·ªánh:\n   .airdrop connect\n\n" +
                                    "2Ô∏è‚É£ Xem c√°c d·ª± √°n c√≥ s·∫µn ƒë·ªÉ tham gia:\n   .airdrop projects\n\n" +
                                    "3Ô∏è‚É£ Ho√†n th√†nh nhi·ªám v·ª• trong d·ª± √°n ƒë·ªÉ nh·∫≠n token:\n   .airdrop task [project_id] [task_id]\n\n" +
                                    "4Ô∏è‚É£ Thu ho·∫°ch token FARM m·ªói gi·ªù:\n   .airdrop farm\n\n" +
                                    "5Ô∏è‚É£ Ki·ªÉm tra s·ªë d∆∞ token c·ªßa b·∫°n:\n   .airdrop info\n\n" +
                                    "üí° G√µ '.airdrop help tokens' ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ c√°c lo·∫°i token",
                                    threadID, messageID
                                );

                            case "tokens":
                            case "farm":
                                return api.sendMessage(
                                    "üí∞ H∆Ø·ªöNG D·∫™N V·ªÄ TOKEN üí∞\n\n" +
                                    "ü™ô C√°c lo·∫°i token:\n" +
                                    "‚Ä¢ FARM: Token ch√≠nh c·ªßa h·ªá th·ªëng, d√πng ƒë·ªÉ mint NFT\n" +
                                    "‚Ä¢ Token d·ª± √°n: M·ªói d·ª± √°n s·∫Ω c√≥ token ri√™ng (VD: DEFI-abc123)\n\n" +
                                    "üìà C√°ch ki·∫øm token:\n" +
                                    "‚Ä¢ Thu ho·∫°ch FARM m·ªói gi·ªù v·ªõi l·ªánh '.airdrop farm'\n" +
                                    "‚Ä¢ Ho√†n th√†nh nhi·ªám v·ª• d·ª± √°n ƒë·ªÉ nh·∫≠n token d·ª± √°n\n" +
                                    "‚Ä¢ Ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y ƒë·ªÉ nh·∫≠n th√™m FARM\n\n" +
                                    "üí± S·ª≠ d·ª•ng token:\n" +
                                    "‚Ä¢ Stake token d·ª± √°n: '.airdrop stake [project_id] [amount]'\n" +
                                    "‚Ä¢ Mint NFT v·ªõi FARM: '.airdrop nft mint'\n" +
                                    "‚Ä¢ ƒê·ªïi token l·∫•y ti·ªÅn: '.airdrop claim'",
                                    threadID, messageID
                                );

                                case "projects":
                                    return api.sendMessage(
                                        "üè¢ H∆Ø·ªöNG D·∫™N V·ªÄ D·ª∞ √ÅN üè¢\n\n" +
                                        "üìã XEM DANH S√ÅCH D·ª∞ √ÅN\n" +
                                        "‚Ä¢ .airdrop projects - Xem t·∫•t c·∫£ d·ª± √°n\n" +
                                        "‚Ä¢ .airdrop projects [lo·∫°i] - L·ªçc theo lo·∫°i (defi/nft/gamefi...)\n" +
                                        "‚Ä¢ .airdrop projects [lo·∫°i] [s·∫Øp x·∫øp] - S·∫Øp x·∫øp (newest/price/safu/growth/rewards)\n" +
                                        "‚Ä¢ .airdrop projects [lo·∫°i] [s·∫Øp x·∫øp] [trang] - Xem trang c·ª• th·ªÉ\n\n" +
                                        
                                        "üîç L·ªåC THEO R·ª¶I RO\n" +
                                        "‚Ä¢ .airdrop projects safe - L·ªçc d·ª± √°n an to√†n (SAFU ‚â• 70)\n" +
                                        "‚Ä¢ .airdrop projects medium - L·ªçc d·ª± √°n trung b√¨nh (SAFU 40-69)\n" +
                                        "‚Ä¢ .airdrop projects risky - L·ªçc d·ª± √°n r·ªßi ro cao (SAFU < 40)\n\n" +
                                        
                                        "üß≠ ƒêI·ªÄU H∆Ø·ªöNG D·ª∞ √ÅN\n" +
                                        "‚Ä¢ .airdrop nav safe - Xem d·ª± √°n an to√†n nh·∫•t\n" +
                                        "‚Ä¢ .airdrop nav best - Xem d·ª± √°n t·ªët nh·∫•t (SAFU + l·ª£i nhu·∫≠n)\n" +
                                        "‚Ä¢ .airdrop nav random - Xem d·ª± √°n ng·∫´u nhi√™n\n" +
                                        "‚Ä¢ .airdrop nav newest - Xem d·ª± √°n m·ªõi nh·∫•t\n\n" +
                                        
                                        "üîç XEM CHI TI·∫æT D·ª∞ √ÅN\n" +
                                        "‚Ä¢ .airdrop detail [project_id] - Xem th√¥ng tin chi ti·∫øt d·ª± √°n\n\n" +
                                        
                                        "üìä ƒê√ÅNH GI√Å D·ª∞ √ÅN\n" +
                                        "‚Ä¢ SAFU Score: ƒê√°nh gi√° ƒë·ªô an to√†n c·ªßa d·ª± √°n (0-100)\n" +
                                        "‚Ä¢ üü¢ 70-100: An to√†n, ƒë√°ng tin c·∫≠y\n" +
                                        "‚Ä¢ üü† 40-69: C·∫ßn th·∫≠n tr·ªçng\n" +
                                        "‚Ä¢ üî¥ 0-39: R·ªßi ro cao\n\n" +
                                        
                                        "üí° CHI·∫æN L∆Ø·ª¢C THAM GIA\n" +
                                        "‚Ä¢ ∆Øu ti√™n d·ª± √°n c√≥ SAFU score cao\n" +
                                        "‚Ä¢ L√†m nhi·ªám v·ª• d·ªÖ tr∆∞·ªõc, kh√≥ sau\n" +
                                        "‚Ä¢ Stake token c·ªßa d·ª± √°n tri·ªÉn v·ªçng ƒë·ªÉ tƒÉng gi√° tr·ªã\n" +
                                        "‚Ä¢ ƒêa d·∫°ng h√≥a danh m·ª•c ƒë·∫ßu t∆∞ v√†o nhi·ªÅu lo·∫°i d·ª± √°n\n" +
                                        "‚Ä¢ Ch√∫ √Ω c·∫£nh b√°o r·ªßi ro trong ph·∫ßn chi ti·∫øt d·ª± √°n",
                                        threadID, messageID
                                    );
                            case "nft":
                                return api.sendMessage(
                                    "üé® H∆Ø·ªöNG D·∫™N V·ªÄ NFT üé®\n\n" +
                                    "NFT l√† v·∫≠t ph·∫©m k·ªπ thu·∫≠t s·ªë gi√∫p tƒÉng hi·ªáu su·∫•t farming\n\n" +
                                    "üìù T·∫°o NFT:\n" +
                                    "‚Ä¢ D√πng l·ªánh '.airdrop nft mint' (gi√°: 1000 FARM)\n" +
                                    "‚Ä¢ NFT c√≥ c√°c ƒë·ªô hi·∫øm: Common, Rare, Epic, Legendary\n" +
                                    "‚Ä¢ M·ªói NFT c√≥ c√°c ch·ªâ s·ªë ng·∫´u nhi√™n (Power, Luck, Speed, Yield)\n\n" +
                                    "üîç Xem NFT c·ªßa b·∫°n:\n" +
                                    "‚Ä¢ D√πng l·ªánh '.airdrop nft list'\n\n" +
                                    "‚ö° L·ª£i √≠ch c·ªßa NFT:\n" +
                                    "‚Ä¢ TƒÉng l∆∞·ª£ng token FARM thu ƒë∆∞·ª£c khi farming\n" +
                                    "‚Ä¢ C√†ng nhi·ªÅu NFT v√† ƒë·ªô hi·∫øm c√†ng cao, bonus c√†ng l·ªõn\n" +
                                    "‚Ä¢ NFT v·ªõi ch·ªâ s·ªë Yield cao gi√∫p tƒÉng thu nh·∫≠p nhi·ªÅu h∆°n",
                                    threadID, messageID
                                );

                            case "quests":
                                return api.sendMessage(
                                    "üìã H∆Ø·ªöNG D·∫™N NHI·ªÜM V·ª§ & TH√ÄNH T·ª∞U üìã\n\n" +
                                    "üéØ Nhi·ªám v·ª• h√†ng ng√†y:\n" +
                                    "‚Ä¢ Farm Tokens: Thu ho·∫°ch FARM token\n" +
                                    "‚Ä¢ Complete Tasks: Ho√†n th√†nh nhi·ªám v·ª• d·ª± √°n\n" +
                                    "‚Ä¢ Trading Volume: Stake ho·∫∑c swap token\n\n" +
                                    "üèÜ Th√†nh t·ª±u:\n" +
                                    "‚Ä¢ Master Farmer: S·ªü h·ªØu nhi·ªÅu token FARM\n" +
                                    "‚Ä¢ Pro Trader: ƒê·∫°t gi√° tr·ªã giao d·ªãch cao\n" +
                                    "‚Ä¢ NFT Collector: S·ªü h·ªØu nhi·ªÅu NFT\n\n" +
                                    "üí∞ Ph·∫ßn th∆∞·ªüng:\n" +
                                    "‚Ä¢ Ho√†n th√†nh nhi·ªám v·ª• ƒë·ªÉ nh·∫≠n token FARM\n" +
                                    "‚Ä¢ M·ªói th√†nh t·ª±u c√≥ ph·∫ßn th∆∞·ªüng kh√°c nhau\n\n" +
                                    "üìä Ki·ªÉm tra ti·∫øn ƒë·ªô:\n" +
                                    "‚Ä¢ D√πng l·ªánh '.airdrop quests'",
                                    threadID, messageID
                                );

                            case "earn":
                            case "money":
                                return api.sendMessage(
                                    "üí∏ H∆Ø·ªöNG D·∫™N KI·∫æM TI·ªÄN üí∏\n\n" +
                                    "üìà Chi·∫øn l∆∞·ª£c t·ªëi ∆∞u:\n" +
                                    "1. K·∫øt n·ªëi v√≠ v√† ho√†n th√†nh nhi·ªám v·ª• d·ª± √°n\n" +
                                    "2. Thu ho·∫°ch FARM token m·ªói gi·ªù\n" +
                                    "3. Stake token d·ª± √°n ƒë·ªÉ tƒÉng gi√° tr·ªã x1.5\n" +
                                    "4. D√πng FARM ƒë·ªÉ mint NFT ƒë·ªÉ tƒÉng hi·ªáu su·∫•t farming\n" +
                                    "5. Ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y ƒë·ªÉ nh·∫≠n th√™m FARM\n" +
                                    "6. ƒê·∫°t ƒë∆∞·ª£c c√°c th√†nh t·ª±u ƒë·ªÉ nh·∫≠n nhi·ªÅu FARM h∆°n\n\n" +
                                    "üí∞ ƒê·ªïi l·∫•y ti·ªÅn th·∫≠t:\n" +
                                    "‚Ä¢ D√πng l·ªánh '.airdrop claim' ƒë·ªÉ ƒë·ªïi t·∫•t c·∫£ token l·∫•y ti·ªÅn\n" +
                                    "‚Ä¢ Gi√° tr·ªã = (s·ªë token √ó gi√° token) + (s·ªë token stake √ó gi√° token √ó 1.5)\n\n" +
                                    "‚ö†Ô∏è L∆∞u √Ω: Khi claim, t·∫•t c·∫£ token s·∫Ω b·ªã reset v·ªÅ 0!",
                                    threadID, messageID
                                );


                            case "rank":
                            case "ranking":
                                return api.sendMessage(
                                    "üìä X·∫æP H·∫†NG NG∆Ø·ªúI CH∆†I üìä\n\n" +
                                    "Xem b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi ch∆°i:\n" +
                                    "‚Ä¢ .airdrop top value - X·∫øp h·∫°ng theo gi√° tr·ªã t√†i s·∫£n\n" +
                                    "‚Ä¢ .airdrop top farm - X·∫øp h·∫°ng theo s·ªë l∆∞·ª£ng FARM token\n" +
                                    "‚Ä¢ .airdrop top nft - X·∫øp h·∫°ng theo s·ªë l∆∞·ª£ng NFT\n" +
                                    "‚Ä¢ .airdrop top level - X·∫øp h·∫°ng theo c·∫•p ƒë·ªô farming\n" +
                                    "‚Ä¢ .airdrop top streak - X·∫øp h·∫°ng theo streak farming\n\n" +
                                    "C·ªë g·∫Øng ƒë·∫°t ƒë∆∞·ª£c th·ª© h·∫°ng cao ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c huy hi·ªáu ƒë·∫∑c bi·ªát!",
                                    threadID, messageID
                                );
                            default:
                                return api.sendMessage(
                                    "‚ùì DANH M·ª§C H∆Ø·ªöNG D·∫™N ‚ùì\n\n" +
                                    "Ch·ªçn m·ªôt ch·ªß ƒë·ªÅ ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt:\n\n" +
                                    "1. .airdrop help start - H∆∞·ªõng d·∫´n b·∫Øt ƒë·∫ßu\n" +
                                    "2. .airdrop help tokens - Th√¥ng tin v·ªÅ token\n" +
                                    "3. .airdrop help nft - H∆∞·ªõng d·∫´n v·ªÅ NFT\n" +
                                    "4. .airdrop help quests - Nhi·ªám v·ª• & th√†nh t·ª±u\n" +
                                    "5. .airdrop help earn - Chi·∫øn l∆∞·ª£c ki·∫øm ti·ªÅn\n\n" +
                                    "üëâ Ho·∫∑c g√µ '.airdrop help' ƒë·ªÉ xem t·ªïng quan",
                                    threadID, messageID
                                );
                        }
                    }

                    return api.sendMessage(
                        "üìö H∆Ø·ªöNG D·∫™N CH∆†I AIRDROP üìö\n" +
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                        "üí° KH√ÅI NI·ªÜM CH√çNH\n" +
                        "‚Ä¢ Airdrop l√† game m√¥ ph·ªèng vi·ªác ki·∫øm token t·ª´ c√°c d·ª± √°n crypto\n" +
                        "‚Ä¢ B·∫°n t·∫°o v√≠, tham gia d·ª± √°n, ho√†n th√†nh nhi·ªám v·ª• ƒë·ªÉ nh·∫≠n token\n" +
                        "‚Ä¢ Token c√≥ th·ªÉ stake ƒë·ªÉ tƒÉng gi√° tr·ªã ho·∫∑c ƒë·ªïi th√†nh ti·ªÅn th·∫≠t\n\n" +

                        "üéÆ C√ÅCH CH∆†I C∆† B·∫¢N\n" +
                        "1. K·∫øt n·ªëi v√≠: .airdrop connect\n" +
                        "2. Xem d·ª± √°n: .airdrop projects\n" +
                        "3. L√†m nhi·ªám v·ª•: .airdrop task [project_id] [task_id]\n" +
                        "4. Thu ho·∫°ch: .airdrop farm (m·ªói gi·ªù 1 l·∫ßn)\n" +
                        "5. Mint NFT: .airdrop nft mint (ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô farm)\n" +
                        "6. Xem ti·∫øn ƒë·ªô: .airdrop quests\n" +
                        "7. ƒê·ªïi ti·ªÅn: .airdrop claim\n\n" +

                        "üë®‚Äçüè´ H∆Ø·ªöNG D·∫™N CHI TI·∫æT\n" +
                        "‚Ä¢ G√µ '.airdrop help start' ƒë·ªÉ xem h∆∞·ªõng d·∫´n b·∫Øt ƒë·∫ßu\n" +
                        "‚Ä¢ G√µ '.airdrop help tokens' ƒë·ªÉ hi·ªÉu v·ªÅ token\n" +
                        "‚Ä¢ G√µ '.airdrop help nft' ƒë·ªÉ t√¨m hi·ªÉu v·ªÅ NFT\n" +
                        "‚Ä¢ G√µ '.airdrop help quests' ƒë·ªÉ xem nhi·ªám v·ª•\n" +
                        "‚Ä¢ G√µ '.airdrop help earn' ƒë·ªÉ bi·∫øt c√°ch ki·∫øm ti·ªÅn hi·ªáu qu·∫£\n" +
                        "‚Ä¢ G√µ '.airdrop help rank' ƒë·ªÉ xem b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi ch∆°i\n\n" +

                        "üíº CHI·∫æN L∆Ø·ª¢C\n" +
                        "‚Ä¢ Farm token m·ªói gi·ªù ƒë·ªÉ t·ªëi ƒëa h√≥a thu nh·∫≠p\n" +
                        "‚Ä¢ Stake token ƒë·ªÉ tƒÉng gi√° tr·ªã l√™n 1.5 l·∫ßn\n" +
                        "‚Ä¢ Mint nhi·ªÅu NFT ƒë·ªÉ tƒÉng hi·ªáu su·∫•t farming\n" +
                        "‚Ä¢ Ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y v√† th√†nh t·ª±u",
                        threadID, messageID
                    );
                }
                case "nft": {
                    const nftAction = target[1]?.toLowerCase();

                    switch (nftAction) {
                        case "mint":
                            const result = mintNFT(senderID);
                            return api.sendMessage(result.message, threadID, messageID);

                        case "list": {
                            const wallet = wallets[senderID];
                            if (!wallet?.nfts?.length) {
                                return api.sendMessage("You don't own any NFTs", threadID, messageID);
                            }

                            let msg = "üé® YOUR NFTs üé®\n";
                            wallet.nfts.forEach((nft, i) => {
                                msg += `\n${i + 1}. ${nft.rarity} NFT\n`;
                                msg += Object.entries(nft.attributes)
                                    .map(([k, v]) => `${k}: ${v}`)
                                    .join('\n');
                                msg += '\n';
                            });

                            return api.sendMessage(msg, threadID, messageID);
                        }
                    }
                }

                case "quests": {
                    const wallet = initUserData(senderID);
                    let msg = "üìù QUESTS & ACHIEVEMENTS\n\n";

                    msg += "DAILY QUESTS:\n";
                    QUESTS.daily.forEach(quest => {

                        const questData = wallet.quests?.daily || {};
                        const progress = questData[quest.id] || 0;

                        msg += `‚Ä¢ ${quest.name}: ${progress}/${quest.requirement}\n`;
                        msg += `  Reward: ${quest.reward} FARM\n`;
                    });

                    msg += "\nACHIEVEMENTS:\n";
                    Object.entries(ACHIEVEMENTS).forEach(([id, achievement]) => {

                        const achievements = wallet.quests?.achievements || [];
                        const unlocked = achievements.includes(id);

                        msg += `${unlocked ? '‚úÖ' : '‚ùå'} ${achievement.name}\n`;
                        msg += `  Reward: ${achievement.reward} FARM\n`;
                    });

                    return api.sendMessage(msg, threadID, messageID);
                }
                default:
                    return api.sendMessage(
                        "üéÆ AIRDROP üéÆ\n" +
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                        "üìú L·ªÜNH C∆† B·∫¢N:\n" +
                        "1. .airdrop connect - K·∫øt n·ªëi v√≠\n" +
                        "2. .airdrop projects - Xem danh s√°ch d·ª± √°n\n" +
                        "3. .airdrop farm - Thu ho·∫°ch token\n" +
                        "4. .airdrop nft mint - T·∫°o NFT tƒÉng hi·ªáu su·∫•t\n" +
                        "5. .airdrop info - Xem th√¥ng tin v√≠\n" +
                        "6. .airdrop claim - ƒê·ªïi token l·∫•y ti·ªÅn\n" +
                        "7. .airdrop rank - Xem b·∫£ng x·∫øp h·∫°ng\n" +
                        "8. .airdrop event - xem s·ª± ki·ªán\n" +
                        "9. .airdrop refresh - L√†m m·ªõi th√¥ng tin d·ª± √°n\n\n" +

                        "üìö KH√îNG BI·∫æT CH∆†I? G√ï:\n" +
                        "üëâ .airdrop help - Xem h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß\n\n" +

                        "üí° M·∫∏O: Mint NFT ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô farming token!",
                        threadID, messageID
                    );
            }
        } catch (err) {
            console.error('Airdrop error:', err);
            return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra!", threadID, messageID);
        }
    }
};
