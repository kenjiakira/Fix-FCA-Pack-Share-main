const translate = require('translate-google');
const { getInfoFromName } = require('mal-scraper');
const request = require('request');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');

module.exports = {
    name: "anime",
    info: "T√¨m ki·∫øm th√¥ng tin Anime.",
    dev: "ZiaRein",
    onPrefix: true,
    usedby: 0,
    dmUser: false,
    nickName: ["anime"],
    usages: "anime [t√™n anime c·∫ßn t√¨m]",
    cooldowns: 5,

    onLaunch: async function ({ api, event, target, actions }) {
        const query = target.join(" ").trim();
        
        if (!query || query.length < 2) {
            return await actions.reply("‚ùé Vui l√≤ng nh·∫≠p t√™n anime c·∫ßn t√¨m (√≠t nh·∫•t 2 k√Ω t·ª±)");
        }

        const cachePath = path.join(__dirname, 'cache');
        if (!fsSync.existsSync(cachePath)) {
            fsSync.mkdirSync(cachePath, { recursive: true });
        }

        try {
           
            const anime = await getInfoFromName(query);
            if (!anime) throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin anime n√†y");

            let imagePath = null;
            if (anime.picture) {
                imagePath = path.join(cachePath, `mal_${Date.now()}.${getImageExt(anime.picture)}`);
                await downloadImage(anime.picture, imagePath);
            }

            const translatedSynopsis = await translate(anime.synopsis || "Kh√¥ng c√≥ m√¥ t·∫£", { from: 'en', to: 'vi' });
            
            const msg = formatAnimeMessage(anime, translatedSynopsis);
            
            const attachments = imagePath ? [fsSync.createReadStream(imagePath)] : [];
            await actions.send(
                { body: msg, attachment: attachments },
                event.threadID,
                async () => {
                 
                    if (imagePath) {
                        try {
                            await fs.unlink(imagePath);
                        } catch (err) {
                            console.error("Failed to delete temp file:", err);
                        }
                    }
                },
                event.messageID
            );

        } catch (err) {
         
            console.error("Error fetching anime info:", err);
            return await actions.reply(`‚ö†Ô∏è L·ªói: ${err.message || "Kh√¥ng th·ªÉ t√¨m th·∫•y anime"}`);
        }
    }
};

function getImageExt(url) {
    return url.split('.').pop() || 'jpg';
}

function formatAnimeMessage(anime, synopsis) {
    return `üìñ TH√îNG TIN ANIME\n\n` +
           `üé• T√™n: ${anime.title}\n` +
           `üéå T√™n ti·∫øng Nh·∫≠t: ${anime.japaneseTitle}\n` +
           `üì∫ Lo·∫°i: ${anime.type}\n` +
           `‚ö°Ô∏è Tr·∫°ng th√°i: ${anime.status}\n` +
           `üóìÔ∏è Kh·ªüi chi·∫øu: ${anime.premiered}\n` +
           `üì° Ph√°t s√≥ng: ${anime.broadcast}\n` +
           `üìÖ Ra m·∫Øt: ${anime.aired}\n` +
           `üé¨ Nh√† s·∫£n xu·∫•t: ${anime.producers}\n` +
           `üéì Studio: ${anime.studios}\n` +
           `üìù Ngu·ªìn: ${anime.source}\n` +
           `üéûÔ∏è S·ªë t·∫≠p: ${anime.episodes}\n` +
           `‚åõÔ∏è Th·ªùi l∆∞·ª£ng: ${anime.duration}\n` +
           `üé≠ Th·ªÉ lo·∫°i: ${(anime.genres || ["Kh√¥ng c√≥"]).join(", ")}\n` +
           `üåü ƒê·ªô ph·ªï bi·∫øn: ${anime.popularity}\n` +
           `üîù X·∫øp h·∫°ng: ${anime.ranked}\n` +
           `üéñÔ∏è ƒêi·ªÉm s·ªë: ${anime.score}\n` +
           `üîû ƒê√°nh gi√°: ${anime.rating}\n\n` +
           `üìù N·ªôi dung:\n${synopsis}\n\n` +
           `üåê Link chi ti·∫øt: ${anime.url}`;
}

function downloadImage(url, dest) {
    return new Promise((resolve, reject) => {
        request(url)
            .on('error', reject)
            .pipe(fsSync.createWriteStream(dest))
            .on('close', resolve)
            .on('error', reject);
    });
}
