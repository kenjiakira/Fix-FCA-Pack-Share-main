const { GoogleGenerativeAI } = require("@google/generative-ai");
const config = require('../utils/api');
const fs = require('fs');
const path = require('path');

// Storage setup
const STORAGE_FILE = path.join(__dirname, './json/AI/funtext_history.json');

function initializeStorage() {
    if (!fs.existsSync(path.dirname(STORAGE_FILE))) {
        fs.mkdirSync(path.dirname(STORAGE_FILE), { recursive: true });
    }
    if (!fs.existsSync(STORAGE_FILE)) {
        fs.writeFileSync(STORAGE_FILE, JSON.stringify({
            stories: [],
            poems: [],
            quotes: [],
            facts: [],
            jokes: []
        }, null, 2));
    }
}

function getUsedContent(type) {
    try {
        initializeStorage();
        const storage = JSON.parse(fs.readFileSync(STORAGE_FILE, 'utf8'));
        return storage[type] || [];
    } catch (err) {
        console.error(`L·ªói ƒë·ªçc ${type}:`, err);
        return [];
    }
}

function saveNewContent(type, content, extras = {}) {
    try {
        const storage = JSON.parse(fs.readFileSync(STORAGE_FILE, 'utf8'));
        if (!storage[type]) storage[type] = [];
        
        storage[type].push({
            content,
            ...extras,
            timestamp: Date.now()
        });
        
        // Keep only last 100 entries
        if (storage[type].length > 100) {
            storage[type].splice(0, storage[type].length - 100);
        }
        
        fs.writeFileSync(STORAGE_FILE, JSON.stringify(storage, null, 2));
    } catch (err) {
        console.error(`L·ªói l∆∞u ${type}:`, err);
    }
}

const storyTypes = {
    "1": { name: "T√¨nh c·∫£m", description: "c√¢u chuy·ªán v·ªÅ t√¨nh y√™u, t√¨nh b·∫°n, gia ƒë√¨nh, s√¢u l·∫Øng v√† c·∫£m ƒë·ªông" },
    "2": { name: "Kinh d·ªã", description: "c√¢u chuy·ªán ma qu√°i, kinh d·ªã, b√≠ ·∫©n nh∆∞ng kh√¥ng qu√° ƒë√°ng s·ª£" },
    "3": { name: "Phi√™u l∆∞u", description: "c√¢u chuy·ªán v·ªÅ nh·ªØng cu·ªôc phi√™u l∆∞u, kh√°m ph√°, th·ª≠ th√°ch" },
    "4": { name: "C·ªï t√≠ch", description: "c√¢u chuy·ªán c·ªï t√≠ch, th·∫ßn ti√™n, c√≥ b√†i h·ªçc √Ω nghƒ©a" },
    "5": { name: "Vi·ªÖn t∆∞·ªüng", description: "c√¢u chuy·ªán v·ªÅ t∆∞∆°ng lai, c√¥ng ngh·ªá, khoa h·ªçc vi·ªÖn t∆∞·ªüng" },
    "6": { name: "H√†i h∆∞·ªõc", description: "c√¢u chuy·ªán vui v·∫ª, h√†i h∆∞·ªõc, mang l·∫°i ti·∫øng c∆∞·ªùi" }
};

const poemTypes = {
    "1": { name: "Th∆° l·ª•c b√°t", description: "th∆° l·ª•c b√°t truy·ªÅn th·ªëng Vi·ªát Nam, c√¢u 6 ch·ªØ v√† 8 ch·ªØ lu√¢n phi√™n" },
    "2": { name: "Th∆° th·∫•t ng√¥n", description: "th∆° 7 ch·ªØ m·ªói c√¢u, c·∫•u tr√∫c ch·∫∑t ch·∫Ω" },
    "3": { name: "Th∆° ng≈© ng√¥n", description: "th∆° 5 ch·ªØ m·ªói c√¢u, ng·∫Øn g·ªçn s√∫c t√≠ch" },
    "4": { name: "Th∆° t·ª± do", description: "th∆° kh√¥ng theo khu√¥n m·∫´u c·ªë ƒë·ªãnh" },
    "5": { name: "Th∆° ƒë∆∞·ªùng lu·∫≠t", description: "th∆° theo th·ªÉ th∆° ƒê∆∞·ªùng, 8 c√¢u, ni√™m lu·∫≠t ch·∫∑t ch·∫Ω" },
    "6": { name: "Th∆° song th·∫•t", description: "th∆° l·ª•c b√°t bi·∫øn th·ªÉ, hai c√¢u 7 ch·ªØ li√™n ti·∫øp" }
};

module.exports = {
    name: "funtext",
    usedby: 0,
    category: "Gi·∫£i Tr√≠",
    info: "Xem n·ªôi dung gi·∫£i tr√≠",
    dev: "HNT",
    onPrefix: true,
    usages: "funtext [lo·∫°i] [th√™m th√¥ng tin n·∫øu c·∫ßn]",
    cooldowns: 5,

    onLaunch: async function ({ api, event, target }) {
        const { threadID, messageID } = event;

        if (!target[0]) {
            return api.sendMessage(
                "üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng FUNTEXT:\n\n" +
                "‚Üí funtext story [s·ªë 1-6] : ƒê·ªçc truy·ªán ng·∫Øn\n" +
                "‚Üí funtext poem [s·ªë 1-6] [ch·ªß ƒë·ªÅ] : ƒê·ªçc th∆°\n" +
                "‚Üí funtext quote [ch·ªß ƒë·ªÅ] : Xem c√¢u n√≥i hay\n" +
                "‚Üí funtext fact : Xem s·ª± th·∫≠t th√∫ v·ªã\n" +
                "‚Üí funtext joke : Xem truy·ªán c∆∞·ªùi\n\n" +
                "V√≠ d·ª•:\n" +
                "‚Üí funtext story 1\n" +
                "‚Üí funtext poem 1 t√¨nh y√™u\n" +
                "‚Üí funtext quote cu·ªôc s·ªëng",
                threadID, messageID
            );
        }

        const type = target[0].toLowerCase();
        const loadingMessage = await api.sendMessage("‚åõ ƒêang t·∫°o n·ªôi dung...", threadID, messageID);

        try {
            const genAI = new GoogleGenerativeAI(config.GEMINI.API_KEY);
            const model = genAI.getGenerativeModel({ 
                model: "gemini-1.5-flash",
                generationConfig: {
                    temperature: 0.9,
                    maxOutputTokens: 1000,
                }
            });

            let prompt, result, message;
            const usedContent = getUsedContent(type + 's');

            switch (type) {
                case 'story': {
                    const storyType = target[1];
                    if (!storyTypes[storyType]) {
                        api.unsendMessage(loadingMessage.messageID);
                        return api.sendMessage("‚ùå Vui l√≤ng ch·ªçn s·ªë t·ª´ 1-6 cho th·ªÉ lo·∫°i truy·ªán!", threadID, messageID);
                    }

                    prompt = `H√£y k·ªÉ m·ªôt c√¢u chuy·ªán ng·∫Øn b·∫±ng ti·∫øng Vi·ªát:
                    - Th·ªÉ lo·∫°i: ${storyTypes[storyType].description}
                    - ƒê·ªô d√†i 3-5 ƒëo·∫°n ng·∫Øn
                    - C·ªët truy·ªán h·∫•p d·∫´n, logic
                    - T√¨nh ti·∫øt b·∫•t ng·ªù
                    - K·∫øt th√∫c ·∫•n t∆∞·ª£ng
                    - PH·∫¢I HO√ÄN TO√ÄN M·ªöI`;

                    result = await model.generateContent(prompt);
                    const story = result.response.text();
                    saveNewContent('stories', story);

                    message = `üìö ${storyTypes[storyType].name.toUpperCase()}\n\n${story}`;
                    break;
                }

                case 'poem': {
                    const poemType = target[1];
                    const topic = target.slice(2).join(" ");
                    if (!poemTypes[poemType] || !topic) {
                        api.unsendMessage(loadingMessage.messageID);
                        return api.sendMessage("‚ùå Vui l√≤ng ch·ªçn s·ªë t·ª´ 1-6 v√† nh·∫≠p ch·ªß ƒë·ªÅ cho b√†i th∆°!", threadID, messageID);
                    }

                    prompt = `H√£y s√°ng t√°c m·ªôt b√†i th∆° b·∫±ng ti·∫øng Vi·ªát:
                    - Th·ªÉ lo·∫°i: ${poemTypes[poemType].description}
                    - Ch·ªß ƒë·ªÅ: ${topic}
                    - ƒê·ªô d√†i 4-8 c√¢u
                    - √ù th∆° s√¢u s·∫Øc, h√¨nh ·∫£nh ƒë·∫πp
                    - PH·∫¢I HO√ÄN TO√ÄN M·ªöI`;

                    result = await model.generateContent(prompt);
                    const poem = result.response.text();
                    saveNewContent('poems', poem, { topic });

                    message = `üìù ${poemTypes[poemType].name.toUpperCase()}\nüí≠ Ch·ªß ƒë·ªÅ: ${topic}\n\n${poem}`;
                    break;
                }

                case 'quote': {
                    const topic = target.slice(1).join(" ");
                    if (!topic) {
                        api.unsendMessage(loadingMessage.messageID);
                        return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ cho c√¢u n√≥i hay!", threadID, messageID);
                    }

                    prompt = `H√£y t·∫°o m·ªôt c√¢u n√≥i hay b·∫±ng ti·∫øng Vi·ªát:
                    - Ch·ªß ƒë·ªÅ: ${topic}
                    - Ng·∫Øn g·ªçn, s√∫c t√≠ch
                    - √ù nghƒ©a s√¢u s·∫Øc
                    - PH·∫¢I HO√ÄN TO√ÄN M·ªöI`;

                    result = await model.generateContent(prompt);
                    const quote = result.response.text();
                    saveNewContent('quotes', quote, { topic });

                    message = `üí´ CH·ª¶ ƒê·ªÄ: ${topic.toUpperCase()}\n\n${quote}`;
                    break;
                }

                case 'fact': {
                    prompt = `H√£y chia s·∫ª m·ªôt s·ª± th·∫≠t th√∫ v·ªã b·∫±ng ti·∫øng Vi·ªát:
                    - Ch√≠nh x√°c, s√∫c t√≠ch
                    - Th√∫ v·ªã v√† b·∫•t ng·ªù
                    - PH·∫¢I HO√ÄN TO√ÄN M·ªöI`;

                    result = await model.generateContent(prompt);
                    const fact = result.response.text();
                    saveNewContent('facts', fact);

                    message = `üìö S·ª∞ TH·∫¨T TH√ö V·ªä üìö\n\n${fact}`;
                    break;
                }

                case 'joke': {
                    prompt = `H√£y k·ªÉ m·ªôt c√¢u chuy·ªán c∆∞·ªùi ng·∫Øn b·∫±ng ti·∫øng Vi·ªát:
                    - H√†i h∆∞·ªõc, d·ªÖ hi·ªÉu
                    - PH·∫¢I HO√ÄN TO√ÄN M·ªöI`;

                    result = await model.generateContent(prompt);
                    const joke = result.response.text();
                    saveNewContent('jokes', joke);

                    message = `üòÑ TRUY·ªÜN C∆Ø·ªúI üòÑ\n\n${joke}`;
                    break;
                }

                default:
                    api.unsendMessage(loadingMessage.messageID);
                    return api.sendMessage("‚ùå Lo·∫°i n·ªôi dung kh√¥ng h·ª£p l·ªá!", threadID, messageID);
            }

            message += "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüëç Th·∫£ c·∫£m x√∫c ƒë·ªÉ xem ti·∫øp";

            api.unsendMessage(loadingMessage.messageID);
            const sent = await api.sendMessage(message, threadID);
            global.client.callReact.push({ 
                messageID: sent.messageID,
                name: this.name,
                type: type,
                extraData: target.slice(1)
            });

        } catch (error) {
            console.error("Funtext Error:", error);
            api.unsendMessage(loadingMessage.messageID);
            api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói: " + error.message, threadID, messageID);
        }
    },

    callReact: async function ({ reaction, api, event }) {
        if (reaction !== 'üëç') return;
        const { threadID } = event;
        
        // Similar structure to onLaunch but using reaction.type and reaction.extraData
        // to determine what kind of content to generate next
    }
};
