const axios = require('axios'); 
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const { TIKTOK_API } = require('../utils/api');
const cacheDir = path.join(__dirname, 'cache', 'images', 'tiktok');
if (!fs.existsSync(cacheDir)) {
    fs.mkdirSync(cacheDir, { recursive: true });
}

function isValidTikTokUrl(url) {
  // Match common TikTok URL formats including shortened ones and URLs with query parameters:
  // - https://www.tiktok.com/@username/video/1234567890
  // - https://www.tiktok.com/@username/video/1234567890?is_from_webapp=1&sender_device=pc
  // - https://www.tiktok.com/@username/photo/1234567890
  // - https://vm.tiktok.com/XXXXXXXX/
  // - https://vt.tiktok.com/XXXXXXXX/
  // - https://m.tiktok.com/v/1234567890.html
  
  // Strip any query parameters first for logging
  const urlWithoutQuery = url.split('?')[0];
  console.log("Validating TikTok URL:", url);
  console.log("URL without query params:", urlWithoutQuery);
  
  // More permissive regex that should handle all TikTok URL formats
  const isValid = /^(https?:\/\/)?(www\.|vm\.|vt\.|m\.)?tiktok\.com(\/[@\w.]+\/(?:video|photo)\/\d+|\/@[\w.]+\/video\/\d+|\/v\/\d+|\/.+)?/.test(url);
  
  console.log("TikTok URL validation result:", isValid);
  return isValid;
}

/**
 * Gi·∫£i quy·∫øt link TikTok r√∫t g·ªçn th√†nh link ƒë·∫ßy ƒë·ªß
 * @param {string} url - Link TikTok r√∫t g·ªçn
 * @returns {Promise<string>} - Link ƒë·∫ßy ƒë·ªß
 */
async function resolveTikTokShortUrl(url) {
  try {
    // Ki·ªÉm tra n·∫øu l√† link r√∫t g·ªçn (vt.tiktok.com ho·∫∑c vm.tiktok.com)
    if (url.includes('vt.tiktok.com') || url.includes('vm.tiktok.com')) {
      // S·ª≠ d·ª•ng Axios ƒë·ªÉ theo d√µi chuy·ªÉn h∆∞·ªõng
      const response = await axios.get(url, {
        maxRedirects: 5,
        validateStatus: null,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        }
      });
      
      // N·∫øu ch√∫ng ta c√≥ URL cu·ªëi c√πng sau khi theo d√µi t·∫•t c·∫£ chuy·ªÉn h∆∞·ªõng
      if (response.request.res.responseUrl) {
        return response.request.res.responseUrl;
      }
      
      // Ho·∫∑c l·∫•y t·ª´ header Location n·∫øu c√≥
      if (response.headers.location) {
        return response.headers.location;
      }
    }
    
    // N·∫øu kh√¥ng ph·∫£i link r√∫t g·ªçn ho·∫∑c kh√¥ng th·ªÉ gi·∫£i quy·∫øt, tr·∫£ v·ªÅ link ban ƒë·∫ßu
    return url;
  } catch (error) {
    console.error("L·ªói khi gi·∫£i quy·∫øt link TikTok:", error);
    return url; // Tr·∫£ v·ªÅ link ban ƒë·∫ßu n·∫øu c√≥ l·ªói
  }
}

module.exports = {
  name: 'tiktok',
  info: 'T·∫£i video TikTok',
  dev: 'HNT',
  usedby: 0,
  category: 'Media',
  onPrefix: true, 
  dmUser: false, 
  nickName: ['tiktok', 't·∫£ivideo'],
  usages: 'tiktok [URL TikTok]',
  cooldowns: 5, 

  onLaunch: async function({ api, event, args, actions }) {
    const { threadID, messageID } = event;
    
    if (!args[0]) {
      return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p URL video TikTok!", threadID, messageID);
    }
    
    let url = args[0];
    
    if (!isValidTikTokUrl(url)) {
      return api.sendMessage("‚ö†Ô∏è URL kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p ƒë√∫ng URL video TikTok.", threadID, messageID);
    }
    
    api.sendMessage("‚è≥ ƒêang x·ª≠ l√Ω video, vui l√≤ng ƒë·ª£i...", threadID, messageID);
    
    try {
      // Gi·∫£i quy·∫øt link r√∫t g·ªçn tr∆∞·ªõc khi x·ª≠ l√Ω
      const resolvedUrl = await resolveTikTokShortUrl(url);
      console.log(`Link ban ƒë·∫ßu: ${url}`);
      console.log(`Link ƒë√£ gi·∫£i quy·∫øt: ${resolvedUrl}`);
      
      // Make a request to TikTok API with the resolved URL
      const response = await axios.post(TIKTOK_API.BASE_URL, 
        { url: resolvedUrl },
        {
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }
      );
      
      if (response.data && response.data.code === 0 && response.data.data) {
        const data = response.data.data;
        const videoUrl = data.play || data.wmplay;
        
        if (!videoUrl) {
          return api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i video, vui l√≤ng th·ª≠ l·∫°i sau!", threadID, messageID);
        }
        
        // Get video information
        const title = data.title || "TikTok Video";
        const author = data.author && data.author.nickname ? data.author.nickname : "Unknown";
        
        // Download the video
        const videoResponse = await axios({
          method: 'GET',
          url: videoUrl,
          responseType: 'stream'
        });
        
        // Create a unique filename
        const timestamp = Date.now();
        const videoPath = path.join(cacheDir, `tiktok_${timestamp}.mp4`);
        
        // Save the video to cache directory
        const writer = fs.createWriteStream(videoPath);
        videoResponse.data.pipe(writer);
        
        // When video is downloaded completely
        writer.on('finish', () => {
          // Send the video with caption
          api.sendMessage({
            body: `‚úÖ ƒê√£ t·∫£i video th√†nh c√¥ng!\n\nüë§ T√°c gi·∫£: ${author}\nüìù Ti√™u ƒë·ªÅ: ${title}`,
            attachment: fs.createReadStream(videoPath)
          }, threadID, (err) => {
            if (err) {
              api.sendMessage("‚ùå C√≥ l·ªói khi g·ª≠i video, vui l√≤ng th·ª≠ l·∫°i sau!", threadID);
              console.error(err);
            }
            
            // Delete the video file after sending
            fs.unlink(videoPath, (err) => {
              if (err) console.error("Error deleting file:", err);
            });
          }, messageID);
        });
        
        // Handle errors in writing file
        writer.on('error', (err) => {
          console.error("Error writing file:", err);
          api.sendMessage("‚ùå C√≥ l·ªói khi l∆∞u video, vui l√≤ng th·ª≠ l·∫°i sau!", threadID, messageID);
        });
        
      } else {
        const errorMsg = response.data && response.data.msg ? response.data.msg : "Kh√¥ng th·ªÉ x·ª≠ l√Ω video TikTok";
        api.sendMessage(`‚ùå ${errorMsg}, vui l√≤ng th·ª≠ URL kh√°c!`, threadID, messageID);
      }
      
    } catch (error) {
      console.error("TikTok downloader error:", error);
      api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói: ${error.message || "Kh√¥ng x√°c ƒë·ªãnh"}`, threadID, messageID);
    }
  },
};
