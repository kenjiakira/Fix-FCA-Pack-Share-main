const fs = require('fs');
const path = require('path');

module.exports = {
    name: "busy",
    dev: "HNT",
    usedby: 0,
    category: "Ti·ªán √çch",
    info: "B·∫≠t ch·∫ø ƒë·ªô b·∫≠n - bot s·∫Ω th√¥ng b√°o khi c√≥ ng∆∞·ªùi tag",
    usages: "[l√Ω do] | [-t <s·ªë ph√∫t>] | [-m <tin nh·∫Øn t·ª± ƒë·ªông>]",
    onPrefix: true,
    cooldowns: 5,

    onLoad: function() {
        const busyPath = path.join(__dirname, 'json', 'busy.json');
        if (!fs.existsSync(path.dirname(busyPath))) {
            fs.mkdirSync(path.dirname(busyPath), { recursive: true });
        }
        if (!fs.existsSync(busyPath)) {
            fs.writeFileSync(busyPath, JSON.stringify({
                users: {},
                pending: {}
            }, null, 4));
        }
    },

    onLaunch: async function({ api, event, target }) {
        const { threadID, senderID, messageID } = event;
        try {
            const busyPath = path.join(__dirname, 'json', 'busy.json');
            let busyData = JSON.parse(fs.readFileSync(busyPath, 'utf8'));
            if (!busyData.users) busyData.users = {};

            if (busyData.users[senderID]) {
                const userData = busyData.users[senderID];
                const pendingMsgs = userData.pending || [];
                delete busyData.users[senderID];
                
                fs.writeFileSync(busyPath, JSON.stringify(busyData, null, 4));
                
                let msg = `‚úÖ ƒê√£ t·∫Øt ch·∫ø ƒë·ªô b·∫≠n\n`;
                msg += `‚è∞ Th·ªùi gian b·∫≠n: ${this.getTimePassed(userData.since)}\n`;
                
                if (pendingMsgs.length > 0) {
                    msg += `\nüì® C√≥ ${pendingMsgs.length} tin nh·∫Øn trong l√∫c b·∫°n v·∫Øng m·∫∑t:\n\n`;
                    for (let i = 0; i < pendingMsgs.length; i++) {
                        const { sender, time, message, threadName } = pendingMsgs[i];
                        msg += `${i + 1}. T·ª´: ${sender}\n`;
                        msg += `üìù Nh√≥m: ${threadName}\n`;
                        msg += `‚è∞ L√∫c: ${this.getFullTime(time)}\n`;
                        msg += `üí¨ N·ªôi dung: ${message}\n\n`;
                    }
                }
                
                return api.sendMessage(msg, threadID, messageID);
            }

            const args = [...target]; 
            let reason = "Kh√¥ng c√≥ l√Ω do";
            let autoOffTime = null;
            let autoMessage = "M√¨nh ƒëang b·∫≠n, s·∫Ω tr·∫£ l·ªùi sau. C·∫£m ∆°n b·∫°n!";
            
            const timeIndex = args.findIndex(arg => arg === "-t");
            if (timeIndex !== -1 && timeIndex + 1 < args.length) {
                const minutes = parseInt(args[timeIndex + 1]);
                if (!isNaN(minutes) && minutes > 0) {
                    autoOffTime = Date.now() + (minutes * 60 * 1000);
         
                    args.splice(timeIndex, 2);
                }
            }
            
            const messageIndex = args.findIndex(arg => arg === "-m");
            if (messageIndex !== -1 && messageIndex + 1 < args.length) {
              
                autoMessage = args.slice(messageIndex + 1).join(" ");
              
                args.splice(messageIndex);
            }
            
            if (args.length > 0) {
                reason = args.join(" ");
            }
            
            busyData.users[senderID] = {
                busy: true,
                reason: reason,
                since: Date.now(),
                autoOffTime: autoOffTime,
                autoMessage: autoMessage,
                pending: []
            };
            
            fs.writeFileSync(busyPath, JSON.stringify(busyData, null, 4));
            
            let responseMsg = `‚úÖ ƒê√£ b·∫≠t ch·∫ø ƒë·ªô b·∫≠n\n‚è∞ Th·ªùi gian b·∫Øt ƒë·∫ßu: ${this.getFullTime()}\nüìù L√Ω do: ${reason}\nüí¨ Tin nh·∫Øn t·ª± ƒë·ªông: ${autoMessage}`;
            
            if (autoOffTime) {
                const endTime = new Date(autoOffTime);
                responseMsg += `\n‚è≥ T·ª± ƒë·ªông t·∫Øt sau: ${this.getTimePassed(Date.now(), autoOffTime)}`;
            }
            
            return api.sendMessage(responseMsg, threadID, messageID);
        } catch (error) {
            console.error('busy command error:', error);
            return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh!", threadID, messageID);
        }
    },

    getFullTime: function(timestamp = null) {
        const date = timestamp ? new Date(timestamp) : new Date();
        const days = ['Ch·ªß Nh·∫≠t', 'Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y'];
        const day = days[date.getDay()];
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const dateStr = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
        
        return `${hours}:${minutes} - ${day}, ${dateStr}`;
    },

    getTime: function(timestamp = null) {
        const date = timestamp ? new Date(timestamp) : new Date();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${hours}:${minutes}`;
    },

    getTimePassed: function(startTime, endTime = Date.now()) {
        const seconds = Math.floor((endTime - startTime) / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) return `${days} ng√†y ${hours % 24} gi·ªù`;
        if (hours > 0) return `${hours} gi·ªù ${minutes % 60} ph√∫t`;
        if (minutes > 0) return `${minutes} ph√∫t`;
        return `${seconds} gi√¢y`;
    }
};
