const TradeSystem = require('../trade/TradeSystem');
const tradeSystem = new TradeSystem();

module.exports = {
    name: "trade",
    dev: "HNT",
    info: "Giao d·ªãch ch·ª©ng kho√°n",
    onPrefix: true,
    usages: ".trade [check/buy/sell/portfolio/info] [m√£ CP] [s·ªë l∆∞·ª£ng]",
    cooldowns: 5,
    onLaunch: async function({ api, event, target }) {
        const { threadID, messageID, senderID } = event;

        try {
            if (!target[0]) {
                return api.sendMessage(
                    "üíé CH·ª®NG KHO√ÅN AKI üíé\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                    "L·ªánh:\n" +
                    "1. .trade check - Xem th·ªã tr∆∞·ªùng\n" +
                    "2. .trade buy [m√£] [s·ªë l∆∞·ª£ng] - Mua\n" +
                    "3. .trade sell [m√£] [s·ªë l∆∞·ª£ng] - B√°n\n" +
                    "4. .trade portfolio - Xem danh m·ª•c\n" +
                    "5. .trade info [m√£] - Th√¥ng tin CP",
                    threadID, messageID
                );
            }

            const command = target[0].toLowerCase();
            const isMarketOpen = tradeSystem.isMarketOpen();
            const MARKET_HOURS = { open: 9, close: 19 };

            switch (command) {
                case "check": {
                    const overview = tradeSystem.getMarketOverview();
                    
                    let message = "üìä B·∫¢NG GI√Å CH·ª®NG KHO√ÅN üìä\n";
                    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n";
                    message += `üïí Tr·∫°ng th√°i: ${isMarketOpen ? 'üü¢ ƒêang giao d·ªãch' : 'üî¥ ƒê√£ ƒë√≥ng c·ª≠a'}\n`;
                    message += `‚è∞ Gi·ªù giao d·ªãch: ${MARKET_HOURS.open}:00 - ${MARKET_HOURS.close}:00\n`;
                    message += `üí± T·ªâ gi√°: 1$ = ${overview.xuRate.toLocaleString('vi-VN')} Xu\n\n`;
                    message += "üíé C·ªî PHI·∫æU:\n";
                
                    Object.entries(overview.stocks).forEach(([symbol, data]) => {
                        const changeIcon = data.change > 0 ? "üî∫" : data.change < 0 ? "üîª" : "‚ûñ";
                        message += `${symbol}: ${tradeSystem.formatStockPrice(data.priceUSD)} (${tradeSystem.formatNumber(data.price)} Xu) ${changeIcon}${Math.abs(data.changePercent).toFixed(2)}%\n`;
                    });
                
                    return api.sendMessage(message, threadID, messageID);
                }

                case "buy": {
                    const symbol = target[1]?.toUpperCase();
                    const quantity = parseInt(target[2]);

                    if (!symbol || !quantity || quantity <= 0) {
                        return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu v√† s·ªë l∆∞·ª£ng h·ª£p l·ªá!", threadID, messageID);
                    }

                    try {
                        const result = await tradeSystem.buyStock(senderID, symbol, quantity);
                        return api.sendMessage(
                            "‚úÖ GIAO D·ªäCH TH√ÄNH C√îNG\n" +
                            `üè¢ M√£ CP: ${result.symbol}\n` +
                            `üî¢ S·ªë l∆∞·ª£ng: ${result.quantity}\n` +
                            `üí∞ Gi√°: ${tradeSystem.formatNumber(result.price)} Xu\n` +
                            `üíµ T·ªïng: ${tradeSystem.formatNumber(result.total)} Xu\n` +
                            `üìã Ph√≠ GD: ${tradeSystem.formatNumber(result.transactionFee)} Xu\n` +
                            `üè∑Ô∏è Thu·∫ø: ${tradeSystem.formatNumber(result.tax)} Xu\n` +
                            `üí∂ T·ªïng c·ªông: ${tradeSystem.formatNumber(result.totalWithFees)} Xu`,
                            threadID, messageID
                        );
                    } catch (error) {
                        return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID, messageID);
                    }
                }

                case "sell": {
                    const symbol = target[1]?.toUpperCase();
                    const quantity = parseInt(target[2]);

                    if (!symbol || !quantity || quantity <= 0) {
                        return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu v√† s·ªë l∆∞·ª£ng h·ª£p l·ªá!", threadID, messageID);
                    }

                    try {
                        const result = await tradeSystem.sellStock(senderID, symbol, quantity);
                        return api.sendMessage(
                            "‚úÖ GIAO D·ªäCH TH√ÄNH C√îNG\n" +
                            `üè¢ M√£ CP: ${result.symbol}\n` +
                            `üî¢ S·ªë l∆∞·ª£ng: ${result.quantity}\n` +
                            `üí∞ Gi√°: ${tradeSystem.formatNumber(result.price)} Xu\n` +
                            `üíµ T·ªïng: ${tradeSystem.formatNumber(result.total)} Xu\n` +
                            `üìã Ph√≠ GD: ${tradeSystem.formatNumber(result.transactionFee)} Xu\n` +
                            `üè∑Ô∏è Thu·∫ø: ${tradeSystem.formatNumber(result.tax)} Xu\n` +
                            `üí∂ Th·ª±c nh·∫≠n: ${tradeSystem.formatNumber(result.finalValue)} Xu`,
                            threadID, messageID
                        );
                    } catch (error) {
                        return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID, messageID);
                    }
                }

                case "portfolio": {
                    const portfolio = tradeSystem.getUserPortfolio(senderID);
                    let totalValue = 0;
                    let message = "üìà DANH M·ª§C ƒê·∫¶U T∆Ø üìà\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

                    if (Object.keys(portfolio.stocks).length === 0) {
                        return api.sendMessage("B·∫°n ch∆∞a c√≥ c·ªï phi·∫øu n√†o!", threadID, messageID);
                    }

                    Object.entries(portfolio.stocks).forEach(([symbol, data]) => {
                        const stock = tradeSystem.getStockPrice(symbol);
                        const currentValue = Math.floor(stock.price * data.quantity);
                        const profitLoss = Math.floor(currentValue - (Math.floor(data.averagePrice) * data.quantity));
                        totalValue += currentValue;

                        message += `üè¢ ${symbol} - ${stock.name}\n`;
                        message += `üî¢ S·ªë l∆∞·ª£ng: ${data.quantity}\n`;
                        message += `üí∞ Gi√° TB: ${tradeSystem.formatNumber(data.averagePrice)}\n`;
                        message += `üìä Gi√° HT: ${tradeSystem.formatNumber(stock.price)}\n`;
                        message += `üíµ Gi√° tr·ªã: ${tradeSystem.formatNumber(currentValue)}\n`;
                        message += `${profitLoss >= 0 ? 'üìà' : 'üìâ'} L√£i/L·ªó: ${tradeSystem.formatNumber(profitLoss)}\n\n`;
                    });

                    message += `üíé T·ªïng gi√° tr·ªã: ${tradeSystem.formatNumber(totalValue)}`;
                    return api.sendMessage(message, threadID, messageID);
                }

                case "info": {
                    const symbol = target[1]?.toUpperCase();
                    
                    if (!symbol) {
                        return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu h·ª£p l·ªá!", threadID, messageID);
                    }

                    try {
                        const stock = tradeSystem.getStockPrice(symbol);
                        const overview = tradeSystem.getMarketOverview();

                        const message = 
                            `üè¢ ${symbol} - ${stock.name}\n` +
                            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                            `üí∞ Gi√°: ${tradeSystem.formatStockPrice(stock.priceUSD)} (${tradeSystem.formatNumber(stock.price)} Xu)\n` +
                            `üìä Thay ƒë·ªïi: ${stock.change > 0 ? '+' : ''}${stock.change.toFixed(2)}%\n` +
                            `üìà Volume: ${stock.volume.toLocaleString('vi-VN')}\n\n` +
                            `üìä ƒê·ªò S√ÇU TH·ªä TR∆Ø·ªúNG:\n` +
                            `üî¥ B√°n:\n${stock.depth.asks.map(level => 
                                `   ${level.price}$ (${(level.price * overview.xuRate).toLocaleString('vi-VN')} Xu) - ${level.volume.toLocaleString('vi-VN')} CP`
                            ).join('\n')}\n` +
                            `üü¢ Mua:\n${stock.depth.bids.map(level => 
                                `   ${level.price}$ (${(level.price * overview.xuRate).toLocaleString('vi-VN')} Xu) - ${level.volume.toLocaleString('vi-VN')} CP`
                            ).join('\n')}\n\n` +
                            `‚è∞ C·∫≠p nh·∫≠t: ${new Date().toLocaleString()}`;

                        return api.sendMessage(message, threadID, messageID);
                    } catch (error) {
                        return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID, messageID);
                    }
                }
            }
        } catch (error) {
            return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID, messageID);
        }
    }
};
