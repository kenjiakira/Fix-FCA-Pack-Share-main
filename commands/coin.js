
const fs = require("fs");
const path = require("path");
const { getBalance, updateBalance } = require("../utils/currencies");
const axios = require("axios");
const { createCanvas } = require("canvas");
const { Chart } = require("chart.js/auto");
const { registerables } = require("chart.js");
const crypto = require('crypto');

Chart.register(...registerables);

const HALVING_INTERVAL = 2100000;
const HALVING_EVENTS = [];
const MINING_DATA_FILE = path.join(__dirname, "./json/mining_data.json");
const MARKET_DATA_FILE = path.join(__dirname, "./json/market_data.json");

let marketData = null;
let miningData = null;

const CONFIG = {

  baseMiner: {
    power: 1,
    consumption: 0.8,
    durability: 1000,
    maxDurability: 100,
    repairCost: 150000,
    miningEvents: {
      normal: [
        "‚õèÔ∏è ƒê√†o ƒë∆∞·ª£c m·∫°ch qu·∫∑ng th∆∞·ªùng!",
        "üíé T√¨m th·∫•y m·ªè nh·ªè!",
        "üî® Khai th√°c th√†nh c√¥ng!",
      ],
      critical: [
        "üåü WOW! ƒê√†o tr√∫ng m·ªè l·ªõn!",
        "‚ö° SI√äU HI·∫æM! M·∫°ch qu·∫∑ng nguy√™n ch·∫•t!",
        "üéØ JACKPOT! Kho b√°u c·ªï ƒë·∫°i!",
      ],
      fail: [
        "üí¢ M√°y ƒë√†o qu√° n√≥ng!",
        "üí® B·ª•i ƒë√° che khu·∫•t t·∫ßm nh√¨n!",
        "‚ö†Ô∏è ƒê·ªãa h√¨nh kh√¥ng ·ªïn ƒë·ªãnh!",
      ],
    },
  },

  coinLimit: {
    maxSupply: 21000000,
    currentSupply: 0,
    difficultyIncrease: 0.5,
    rewardReduction: 0.7,
    monopolyThreshold: 0.3,
    dailyTradeLimit: {
      buy: 99999999999,
      sell: 99999999999,
      resetTime: 24 * 60 * 60 * 1000,
    },
    crisis: {
      priceDropRate: 0.3,
      recoveryRate: 0.1,
      isActive: false,
    },
  },

  miningPools: {
    active: true,
    poolFee: 0.02,
    bonusReward: 0.15,
    minMembers: 3,
    maxPoolSize: 50,
  },
  miningEvents: {
    activeEvent: null,
    possibleEvents: [
      {
        id: "goldenHour",
        name: "Gi·ªù V√†ng",
        bonus: 2.5,
        duration: 3600000,
        chance: 0.05,
      },
      {
        id: "luckyStreak",
        name: "Chu·ªói May M·∫Øn",
        bonus: 1.8,
        successBonus: 0.2,
        duration: 7200000,
        chance: 0.1,
      },
    ],
  },
  energySystem: {
    maxEnergy: 300,
    miningCost: 20,
    recoveryRate: 1,
    recoveryInterval: 60 * 1000,
  },
  minerLevel: {
    level: 1,
    experience: 0,
    requiredExp: 1000,
    bonuses: {
      cooldownReduction: 0,
      criticalChance: 0,
      rewardBonus: 0,
    },
  },
  rareResources: {
    enabled: true,
    types: [
      { id: "diamond", name: "Kim C∆∞∆°ng", value: 10, chance: 0.05 },
      { id: "platinum", name: "B·∫°ch Kim", value: 5, chance: 0.1 },
      { id: "crystal", name: "Pha L√™", value: 3, chance: 0.15 },
    ],
    benefits: {
      diamond: { upgradeDiscount: 0.2 },
      platinum: { sellBonus: 0.15 },
      crystal: { miningBonus: 0.1 },
    },
  },
  powerGrid: {
    generator: {
      levels: [
        { level: 0, production: 1.0, cost: 0 },
        { level: 1, production: 1.5, cost: 500000 },
        { level: 2, production: 2.0, cost: 2000000 },
        { level: 3, production: 3.0, cost: 5000000 },
        { level: 4, production: 4.0, cost: 15000000 },
        { level: 5, production: 5.0, cost: 50000000 }
      ],
      peakHours: [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
      offPeakBonus: 1.5
    },
    fuelTypes: [
      { name: "ƒêi·ªán l∆∞·ªõi", costPerUnit: 500000, energyPerUnit: 20, cooldown: 0 },
      { name: "Pin d·ª± ph√≤ng", costPerUnit: 1500000, energyPerUnit: 70, cooldown: 60 * 60 * 1000 },
      { name: "Nhi√™n li·ªáu diesel", costPerUnit: 5000000, energyPerUnit: 300, cooldown: 3 * 60 * 60 * 1000 }
    ]
  },
  epochs: {
    currentEpoch: 0,
    list: [
      {
        id: 0,
        name: "Genesis Era",
        supply: 0.2,
        difficultyMultiplier: 1,
        rewardMultiplier: 2.0,
        description: "K·ª∑ nguy√™n khai sinh"
      },
      {
        id: 1,
        name: "Growth Era",
        supply: 0.4,
        difficultyMultiplier: 2,
        rewardMultiplier: 1.5,
        description: "K·ª∑ nguy√™n ph√°t tri·ªÉn"
      },
      {
        id: 2,
        name: "Maturity Era",
        supply: 0.6,
        difficultyMultiplier: 4,
        rewardMultiplier: 1.0,
        description: "K·ª∑ nguy√™n tr∆∞·ªüng th√†nh"
      },
      {
        id: 3,
        name: "Scarcity Era",
        supply: 0.8,
        difficultyMultiplier: 8,
        rewardMultiplier: 0.5,
        description: "K·ª∑ nguy√™n khan hi·∫øm"
      },
      {
        id: 4,
        name: "Final Era",
        supply: 1.0,
        difficultyMultiplier: 16,
        rewardMultiplier: 0.25,
        description: "K·ª∑ nguy√™n cu·ªëi c√πng"
      }
    ],
    milestones: []
  },
  upgradeCosts: {
    power: [
      150000, 300000, 600000, 1200000, 2400000, 4800000, 9600000, 19200000,
      38400000, 76800000,
    ],
    efficiency: [
      200000, 400000, 800000, 1600000, 3200000, 6400000, 12800000, 25600000,
      51200000, 102400000,
    ],
    cooling: [
      250000, 500000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000,
      64000000, 128000000,
    ],
  },
  blockReward: {
    current: 25,
    lastBlockTime: Date.now(),
    targetBlockTime: 20 * 60 * 1000,
    difficulty: 2,
    blockHeight: 0,
  },

  miningSuccess: {
    base: 0.6,
    perPowerLevel: 0.02,
    perCoolingLevel: 0.015,
    criticalChance: 0.05,
    criticalMultiplier: 1.8,
  },

  miningCooldown: 4 * 60 * 1000,

  market: {
    basePrice: 1500,
    volatility: 0.15,
    updateInterval: 30 * 1000,
    maxPrice: 10000000,
    minPrice: 1,
    crashChance: 0.1,
    minedCoinValue: {
      multiplier: 2.5,
      duration: 24 * 60 * 60 * 1000,
    },
    antiManipulation: {
      maxHoldingPercent: 0.4,
      cooldownBetweenTrades: 5 * 60 * 1000,
      largeTradeThreshold: 0.1,
      priceImpactLimit: 0.15,
      emergencyBreaker: {
        priceChangeThreshold: 0.3,
        cooldownDuration: 30 * 60 * 1000,
      }
    },
    npcTraders: {
      enabled: true,
      count: 3,
      behaviors: [
        {
          name: "Whale",
          minBalance: 1000000000,
          tradeSize: 0.2,
          priceThreshold: 0.15
        },
        {
          name: "Swing",
          minBalance: 100000000,
          tradeSize: 0.1,
          priceThreshold: 0.08
        },
        {
          name: "Scalper",
          minBalance: 10000000,
          tradeSize: 0.05,
          priceThreshold: 0.03
        }
      ],
      lastAction: Date.now()
    },
    currentPrice: 1500,
    scarcityEffect: {
      baseMultiplier: 1.2, 
      maxMultiplier: 1000,   
      growthRate: 0.15,      
      timeWeight: 0.2,      
      holdingWeight: 0.3,   
    },
    volumeImpact: {
      threshold: 15000000000,
      buyPressure: 0.02,
      sellPressure: 0.015,
      recoveryRate: 0.15,
      maxImpact: 0.2,
    },
    tradingVolume: {
      buy: 0,
      sell: 0,
      lastReset: Date.now(),
      totalVolume: 0,
    },
  },
  blockHistory: {
    blocks: [],
    maxBlocks: 100,
  },
  dailyQuests: {
    types: ["mine", "upgrade", "market"],
    rewards: {
      mine: 300,
      upgrade: 600,
      market: 450,
    },
    maxDaily: 3,
  },
};
CONFIG.advancedMining = {
  enabled: true,
  hashAlgorithm: 'sha256',
  difficulty: {
    initial: 12,
    current: 12,
    maxTarget: '00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    adjustmentInterval: 50,
    targetBlockTime: 300 * 1000,
    lastAdjustment: Date.now()
  },
  hardware: [
    { name: "CPU Mining (Intel i5)", hashrate: 50, power: 100, price: 0, efficiency: 0.5 },
    { name: "AMD Ryzen Mining", hashrate: 150, power: 200, price: 25000000, efficiency: 0.75 },

    { name: "RTX 4090 Mining Rig", hashrate: 500, power: 500, price: 50000000, efficiency: 1.0 },
    { name: "RX 6900 Farm", hashrate: 1200, power: 800, price: 100000000, efficiency: 1.5 },

    { name: "Antminer S19 XP", hashrate: 5000, power: 1500, price: 200000000, efficiency: 3.3 },
    { name: "Whatsminer M50S Pro", hashrate: 15000, power: 2500, price: 400000000, efficiency: 6.0 },
    { name: "Avalon A1366", hashrate: 50000, power: 3500, price: 800000000, efficiency: 14.3 },

    { name: "Antminer S21 XP", hashrate: 250000, power: 5000, price: 3000000000, efficiency: 50 },
    { name: "Bitmain X25", hashrate: 500000, power: 7500, price: 5000000000, efficiency: 66.7 },
    { name: "DragonMaster X1", hashrate: 1000000, power: 10000, price: 10000000000, efficiency: 100 }
  ],
  energyCost: CONFIG.energySystem.miningCost * 5,
  electricityCost: 2000000,
  rewardMultiplier: 10,
  cooldown: CONFIG.miningCooldown * 2,
  minPowerLevel: 3,

  pools: [
    { name: "Solo Mining", fee: 0, luck: 1.0, paymentMethod: "PPS", minPayout: 0 },
    { name: "F2Pool", fee: 0.02, luck: 1.1, paymentMethod: "PPLNS", minPayout: 0.1 },
    { name: "AntPool", fee: 0.025, luck: 1.15, paymentMethod: "PPS+", minPayout: 0.05 },
    { name: "Binance Pool", fee: 0.03, luck: 1.2, paymentMethod: "FPPS", minPayout: 0.01 }
  ],

  network: {
    hashrate: 5000000,
    lastBlocks: [],
    difficulty: 1,
    blockHeight: 0
  }
};
CONFIG.autoMining = {
  enabled: true,
  tickRate: 5 * 60 * 1000, // 5 ph√∫t/l·∫ßn
  settings: {
    efficiency: 0.6, // 60% hi·ªáu qu·∫£ so v·ªõi mine th·ªß c√¥ng
    energyCost: 15, // T·ªën √≠t nƒÉng l∆∞·ª£ng h∆°n
    maxDuration: 12 * 60 * 60 * 1000, // T·ªëi ƒëa 12h
    minPowerLevel: 2, // Y√™u c·∫ßu power level t·ªëi thi·ªÉu
    prices: [
      { duration: 1 * 60 * 60 * 1000, cost: 500000000 }, // 1h = 500k
      { duration: 3 * 60 * 60 * 1000, cost: 1000000000 }, // 3h = 1m 
      { duration: 6 * 60 * 60 * 1000, cost: 1500000000 }, // 6h = 1.5m
      { duration: 12 * 60 * 60 * 1000, cost: 2500000000 } // 12h = 2.5m
    ]
  }
};
CONFIG.upgradeSystem = {
  componentTypes: [
    // Gi·ªØ 3 n√¢ng c·∫•p c∆° b·∫£n
    { id: 1, name: "power", label: "S·ª©c m·∫°nh", emoji: "‚ö°", },
    { id: 2, name: "efficiency", label: "Hi·ªáu su·∫•t", emoji: "üìä" },
    { id: 3, name: "cooling", label: "L√†m m√°t", emoji: "‚ùÑÔ∏è" },

    // Thi·∫øt b·ªã n√¢ng cao - c√≥ th·ªÉ mua tr·ª±c ti·∫øp
    {
      id: 4, name: "gpu", label: "Card ƒë·ªì h·ªça", emoji: "üéÆ",
      models: [
        { name: "GTX 1060 6GB", bonus: 1.5, price: 5000000 },
        { name: "RTX 2060 SUPER", bonus: 2.0, price: 15000000 },
        { name: "RTX 3070 Ti", bonus: 3.0, price: 35000000 },
        { name: "RTX 4070 Ti", bonus: 4.0, price: 75000000 },
        { name: "RTX 4080", bonus: 5.0, price: 120000000 },
        { name: "RTX 4090", bonus: 7.0, price: 250000000 },
        { name: "RTX 5090 Ti", bonus: 10.0, price: 500000000 }
      ]
    },
    {
      id: 5, name: "cooler", label: "T·∫£n nhi·ªát", emoji: "üå°Ô∏è",
      models: [
        { name: "T·∫£n kh√≠ RGB", bonus: 1.2, price: 3000000 },
        { name: "T·∫£n n∆∞·ªõc 240mm", bonus: 1.8, price: 12000000 },
        { name: "Custom Loop", bonus: 2.5, price: 35000000 },
        { name: "Phase Change", bonus: 3.5, price: 80000000 },
        { name: "LN2 Cooling", bonus: 5.0, price: 200000000 }
      ]
    },
    {
      id: 6, name: "ram", label: "RAM", emoji: "üíæ",
      models: [
        { name: "8GB DDR4", bonus: 1.2, price: 2000000 },
        { name: "16GB DDR4", bonus: 1.5, price: 5000000 },
        { name: "32GB DDR4", bonus: 2.0, price: 15000000 },
        { name: "32GB DDR5", bonus: 2.5, price: 35000000 },
        { name: "64GB DDR5", bonus: 3.5, price: 80000000 },
        { name: "128GB DDR5", bonus: 5.0, price: 200000000 }
      ]
    }
  ]
};
CONFIG.npcPlayers = {
  enabled: true,
  activeNPCs: [],
  groups: [
    {
      type: "Trader",
      count: 15,
      behavior: {
        tradeFrequency: 0.3,
        riskTolerance: 0.6,
        profitTarget: 0.15,
        stopLoss: 0.1,
        maxHoldingTime: 48 * 60 * 60 * 1000
      },
      initialBalance: {
        min: 10000000,
        max: 100000000
      }
    },
    {
      type: "Miner", 
      count: 20,
      behavior: {
        mineFrequency: 0.7,
        sellThreshold: 0.2,
        upgradeChance: 0.1,
        holdRatio: 0.4
      },
      initialBalance: {
        min: 5000000,
        max: 50000000  
      }
    },
    {
      type: "Investor",
      count: 15,
      behavior: {
        buyThreshold: -0.15,
        sellThreshold: 0.25,
        investmentRatio: 0.7,
        tradingInterval: 12 * 60 * 60 * 1000
      },
      initialBalance: {
        min: 50000000,
        max: 500000000
      }
    }
  ],

  names: [
    "√Ånh Tuy·∫øt", "B·∫£o Ng·ªçc", "C·∫©m T√∫", "Di·ªáu Linh", "H·∫°nh Ph√∫c", "Ki·ªÅu Oanh", "Linh Chi", "Mai Anh", "Ng·ªçc H√†", "Ph∆∞∆°ng Anh",
    "Baka", "Linh Linh", "Th·∫£o Nguy√™n", "Thi√™n Thanh", "Trang Anh", "Tr√∫c Linh", "Tuy·∫øt Nhi", "Xu√¢n Mai", "Y·∫øn Nhi", "Y·∫øn Trang",
    "Anh D≈©ng", "B·∫£o Long", "Ch√≠ Th√†nh", "Duy Phong", "H·∫£i ƒêƒÉng", "Ho√†ng Anh", "H√πng Vƒ©", "Minh Hi·∫øu", "Quang Huy", "Th√†nh ƒê·∫°t",
    "Th·∫ø Anh", "Thi√™n Long", "Tu·∫•n Ki·ªát", "Tu·∫•n T√∫", "Vi·ªát Anh", "Vi·ªát D≈©ng", "Vi·ªát H√πng", "Vi·ªát T√∫", "Vi·ªát T√πng", "Xu√¢n Phong"
  ]
};

CONFIG.npcMiners = {
  enabled: true,
  groups: [
    {
      name: "Hobby Miners", count: 12, basePower: 200, growthRate: 0.008, algorithm: "SHA-256",
      behavior: { sellThreshold: 2000, upgradeChance: 0.05, holdingRate: 0.3 }
    },
    {
      name: "Medium Farms", count: 6, basePower: 2000, growthRate: 0.015, algorithm: "SHA-256",
      behavior: { sellThreshold: 5000, upgradeChance: 0.1, holdingRate: 0.5 }
    },
    {
      name: "Corporate Miners", count: 3, basePower: 10000, growthRate: 0.02, algorithm: "SHA-256",
      behavior: { sellThreshold: 10000, upgradeChance: 0.2, holdingRate: 0.7 }
    },
    {
      name: "Institutional Mining", count: 1, basePower: 50000, growthRate: 0.03, algorithm: "SHA-256",
      behavior: { sellThreshold: 50000, upgradeChance: 0.3, holdingRate: 0.8 }
    }
  ],
  lastUpdated: Date.now(),
  holdings: 0,
  totalHashrate: 0,
  lastLogUpdate: Date.now()
};
function updateNPCMiners() {
  if (!CONFIG.npcMiners.enabled) return;

  const now = Date.now();
  const daysSinceStart = (now - CONFIG.npcMiners.lastUpdated) / (24 * 60 * 60 * 1000);

  let totalNpcHashrate = 0;
  CONFIG.npcMiners.groups.forEach(group => {
    const dayEffect = Math.pow(1 + group.growthRate, daysSinceStart);
    const difficultyEffect = Math.pow(CONFIG.blockReward.difficulty, 0.5);
    const scarcityEffect = Math.pow(CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply, 1.5);

    group.currentHashrate = group.basePower * group.count * dayEffect * difficultyEffect * (1 + scarcityEffect);
    totalNpcHashrate += group.currentHashrate;

    if (Math.random() < group.behavior.upgradeChance) {
      group.basePower *= 1.1;
    }
  });

  CONFIG.npcMiners.totalHashrate = totalNpcHashrate;

  const hoursSinceLastUpdate = (now - CONFIG.npcMiners.lastUpdated) / (60 * 60 * 1000);
  const networkShare = totalNpcHashrate / (totalNpcHashrate + calculateTotalPlayerHashrate(miningData));
  const blocksPerHour = 3600 / (CONFIG.blockReward.targetBlockTime / 1000);

  const estimatedCoins = hoursSinceLastUpdate * blocksPerHour * CONFIG.blockReward.current * networkShare;

  if (estimatedCoins > 0 && CONFIG.coinLimit.currentSupply + estimatedCoins <= CONFIG.coinLimit.maxSupply) {
    CONFIG.npcMiners.holdings += estimatedCoins;
    CONFIG.coinLimit.currentSupply += estimatedCoins;
  }

  CONFIG.npcMiners.groups.forEach(group => {
    if (CONFIG.npcMiners.holdings > group.behavior.sellThreshold) {
      const amountToSell = CONFIG.npcMiners.holdings * (1 - group.behavior.holdingRate);

      if (amountToSell > 100) {
        CONFIG.npcMiners.holdings -= amountToSell;

        handleNPCMarketActivity('sell', amountToSell, group.name);
      }
    }
  });

  if (now - CONFIG.npcMiners.lastLogUpdate > 6 * 60 * 60 * 1000) {
    console.log(`[NPC MINERS] Total Hashrate: ${formatNumber(totalNpcHashrate)} | Holdings: ${CONFIG.npcMiners.holdings.toFixed(2)} LCoin`);
    CONFIG.npcMiners.lastLogUpdate = now;
  }

  CONFIG.npcMiners.lastUpdated = now;
}
function handleNPCMarketActivity(type, amount, actorName) {
  if (!marketData.npcActivities) marketData.npcActivities = [];

  const priceImpact = type === 'buy' ? 0.05 : -0.03;
  const adjustedImpact = priceImpact * Math.min(1, amount / (CONFIG.coinLimit.currentSupply * 0.01));

  if (amount > CONFIG.coinLimit.currentSupply * 0.005) {
    const message = `${actorName} ${type === 'buy' ? 'ƒëang mua v√†o' : 'ƒëang b√°n ra'} ${amount.toFixed(0)} LCoin`;

    marketData.npcActivities.push({
      type: type,
      trader: actorName,
      amount: amount,
      price: marketData.price * (1 + (type === 'buy' ? 0.02 : -0.02)),
      timestamp: Date.now(),
      message: message,
      impact: adjustedImpact,
      duration: 4 * 60 * 60 * 1000
    });

    if (amount > CONFIG.coinLimit.currentSupply * 0.02) {
      global.sendAnnouncement(`üìä MARKET ALERT: ${message}! Gi√° c√≥ th·ªÉ ${type === 'buy' ? 'tƒÉng' : 'gi·∫£m'}.`);
    }
  }
}

function calculateTotalPlayerHashrate(miningData) {
  return Object.values(miningData).reduce((total, player) => {
    return total + calculatePlayerHashrate(player);
  }, 0);
}
function initializeData() {
  // Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
  miningData = {};
  marketData = {
    price: CONFIG.market.basePrice,
    lastUpdate: Date.now(),
    history: [],
    tradingVolume: {
      buy: 0,
      sell: 0,
      lastReset: Date.now(),
      totalVolume: 0,
    },
    blockchain: {
      blockHeight: CONFIG.blockReward.blockHeight,
      currentReward: CONFIG.blockReward.current,
      lastBlockTime: CONFIG.blockReward.lastBlockTime,
      difficulty: CONFIG.blockReward.difficulty,
      halvingEvents: HALVING_EVENTS
    }
  };

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
  if (fs.existsSync(MINING_DATA_FILE)) {
    try {
      miningData = JSON.parse(fs.readFileSync(MINING_DATA_FILE));

      CONFIG.coinLimit.currentSupply = Object.values(miningData).reduce(
        (total, player) => total + player.stats.totalMined,
        0
      );
    } catch (error) {
      console.error("L·ªói khi ƒë·ªçc file mining data:", error);
    }
  }

  if (fs.existsSync(MARKET_DATA_FILE)) {
    try {
      const savedMarketData = JSON.parse(fs.readFileSync(MARKET_DATA_FILE));
      marketData = {
        ...marketData,
        ...savedMarketData,
        tradingVolume: {
          ...marketData.tradingVolume,
          ...savedMarketData.tradingVolume,
        },
      };

      if (savedMarketData.blockchain) {
        CONFIG.blockReward.blockHeight = savedMarketData.blockchain.blockHeight || 0;
        CONFIG.blockReward.current = savedMarketData.blockchain.currentReward || 50;
        CONFIG.blockReward.lastBlockTime = savedMarketData.blockchain.lastBlockTime || Date.now();
        CONFIG.blockReward.difficulty = savedMarketData.blockchain.difficulty || 1;

        if (savedMarketData.blockchain.halvingEvents &&
          savedMarketData.blockchain.halvingEvents.length > 0) {
          HALVING_EVENTS.length = 0;
          savedMarketData.blockchain.halvingEvents.forEach(event => HALVING_EVENTS.push(event));
        }
      }

      if (savedMarketData.blockHistory && savedMarketData.blockHistory.blocks) {
        CONFIG.blockHistory.blocks = savedMarketData.blockHistory.blocks;
      }
    } catch (error) {
      console.error("L·ªói khi ƒë·ªçc file market data:", error);
    }
  }

  return { miningData, marketData };
}
function initializeNPC(type) {
  const group = CONFIG.npcPlayers.groups.find(g => g.type === type);
  const name = CONFIG.npcPlayers.names[Math.floor(Math.random() * CONFIG.npcPlayers.names.length)];
  
  return {
    id: `npc_${Date.now()}_${Math.random().toString(36)}`,
    name: `${name} [NPC]`,
    type: type,
    balance: Math.floor(Math.random() * (group.initialBalance.max - group.initialBalance.min) + group.initialBalance.min),
    coins: 0,
    behavior: {...group.behavior},
    stats: {
      trades: 0,
      mined: 0,
      profit: 0
    },
    lastAction: Date.now(),
    upgrades: {
      power: Math.floor(Math.random() * 8),
      efficiency: Math.floor(Math.random() * 8),
      cooling: Math.floor(Math.random() * 8)
    }
  };
}

// H√†m c·∫≠p nh·∫≠t ho·∫°t ƒë·ªông NPC
function updateNPCActivities() {
  if (!CONFIG.npcPlayers.enabled) return;

  // Kh·ªüi t·∫°o NPC n·∫øu ch∆∞a c√≥
  if (CONFIG.npcPlayers.activeNPCs.length === 0) {
    CONFIG.npcPlayers.groups.forEach(group => {
      for (let i = 0; i < group.count; i++) {
        CONFIG.npcPlayers.activeNPCs.push(initializeNPC(group.type));
      }
    });
  }

  CONFIG.npcPlayers.activeNPCs.forEach(npc => {
    const now = Date.now();
    if (now - npc.lastAction < 5 * 60 * 1000) return; // M·ªói NPC 5 ph√∫t 1 l·∫ßn

    switch(npc.type) {
      case "Trader":
        if (Math.random() < npc.behavior.tradeFrequency) {
          handleNPCTrading(npc);
        }
        break;

      case "Miner":
        if (Math.random() < npc.behavior.mineFrequency) {
          handleNPCMining(npc);
        }
        break;

      case "Investor":
        if (now - npc.lastAction > npc.behavior.tradingInterval) {
          handleNPCInvestment(npc);
        }
        break;
    }

    npc.lastAction = now;
  });
}

// X·ª≠ l√Ω giao d·ªãch c·ªßa NPC
function handleNPCTrading(npc) {
  const priceChange = marketData.history.length > 0 
    ? (marketData.price - marketData.history[0].price) / marketData.history[0].price
    : 0;

  if (Math.abs(priceChange) > npc.behavior.riskTolerance) {
    const tradeAmount = Math.floor(npc.balance * 0.3 / marketData.price);
    
    if (priceChange > 0 && npc.coins > 0) {
      // B√°n ra khi gi√° tƒÉng
      const sellAmount = Math.floor(npc.coins * 0.5);
      const value = sellAmount * marketData.price;
      
      npc.coins -= sellAmount;
      npc.balance += value;
      npc.stats.trades++;
      
      marketData.npcActivities.push({
        type: "sell",
        trader: npc.name,
        amount: sellAmount,
        price: marketData.price,
        timestamp: Date.now()
      });
    } 
    else if (priceChange < 0 && npc.balance > marketData.price * 100) {
      // Mua v√†o khi gi√° gi·∫£m
      const buyAmount = Math.min(
        tradeAmount,
        Math.floor(npc.balance / marketData.price)
      );
      
      const cost = buyAmount * marketData.price;
      npc.coins += buyAmount;
      npc.balance -= cost;
      npc.stats.trades++;

      marketData.npcActivities.push({
        type: "buy",
        trader: npc.name,
        amount: buyAmount,
        price: marketData.price,
        timestamp: Date.now()
      });
    }
  }
}

// X·ª≠ l√Ω ƒë√†o coin c·ªßa NPC
function handleNPCMining(npc) {
  if (Math.random() < npc.behavior.upgradeChance) {
    // N√¢ng c·∫•p thi·∫øt b·ªã
    const upgradeTypes = ["power", "efficiency", "cooling"];
    const type = upgradeTypes[Math.floor(Math.random() * upgradeTypes.length)];
    
    if (npc.upgrades[type] < 10) {
      const cost = CONFIG.upgradeCosts[type][npc.upgrades[type]];
      if (npc.balance > cost * 2) {
        npc.balance -= cost;
        npc.upgrades[type]++;
      }
    }
  }

  // ƒê√†o coin
  const miningSuccess = Math.random() < calculateMiningSuccess({upgrades: npc.upgrades});
  if (miningSuccess) {
    const reward = calculateMiningReward({upgrades: npc.upgrades}, false);
    npc.coins += reward;
    npc.stats.mined += reward;
    CONFIG.coinLimit.currentSupply += reward;
  }

  // B√°n coin n·∫øu ƒë·∫°t ng∆∞·ª°ng
  if (npc.coins > 0 && Math.random() < (1 - npc.behavior.holdRatio)) {
    const sellAmount = Math.floor(npc.coins * Math.random());
    const value = sellAmount * marketData.price;
    
    npc.coins -= sellAmount;
    npc.balance += value;
    
    marketData.npcActivities.push({
      type: "sell",
      trader: npc.name,
      amount: sellAmount,
      price: marketData.price,
      timestamp: Date.now()
    });
  }
}

// X·ª≠ l√Ω ƒë·∫ßu t∆∞ c·ªßa NPC
function handleNPCInvestment(npc) {
  const priceChange = marketData.history.length > 0
    ? (marketData.price - marketData.history[0].price) / marketData.history[0].price
    : 0;

  if (priceChange <= npc.behavior.buyThreshold) {
    // Mua khi gi√° gi·∫£m s√¢u
    const investAmount = npc.balance * npc.behavior.investmentRatio;
    const buyAmount = Math.floor(investAmount / marketData.price);
    
    npc.coins += buyAmount;
    npc.balance -= buyAmount * marketData.price;
    
    marketData.npcActivities.push({
      type: "buy",
      trader: npc.name,
      amount: buyAmount,
      price: marketData.price,
      timestamp: Date.now(),
      message: "ƒê·∫ßu t∆∞ d√†i h·∫°n"
    });
  }
  else if (priceChange >= npc.behavior.sellThreshold) {
    // B√°n khi ƒë·∫°t m·ª•c ti√™u
    const sellAmount = Math.floor(npc.coins * 0.7);
    const value = sellAmount * marketData.price;
    
    npc.coins -= sellAmount;
    npc.balance += value;
    
    marketData.npcActivities.push({
      type: "sell", 
      trader: npc.name,
      amount: sellAmount,
      price: marketData.price,
      timestamp: Date.now(),
      message: "Ch·ªët l·ªùi"
    });
  }
}
function saveData(miningData, marketData) {
  marketData.blockchain = {
    blockHeight: CONFIG.blockReward.blockHeight,
    currentReward: CONFIG.blockReward.current,
    lastBlockTime: CONFIG.blockReward.lastBlockTime,
    difficulty: CONFIG.blockReward.difficulty,
    halvingEvents: HALVING_EVENTS
  };

  marketData.blockHistory = CONFIG.blockHistory;

  fs.writeFileSync(MINING_DATA_FILE, JSON.stringify(miningData, null, 2));
  fs.writeFileSync(MARKET_DATA_FILE, JSON.stringify(marketData, null, 2));
}

function initializePlayer(userId) {
  return {
    miner: { ...CONFIG.baseMiner },
    coins: 0,
    energy: 100,
    lastEnergyUpdate: Date.now(),
    powerSystem: {
      generatorLevel: 0,
      lastFuelUse: 0,
      fuelHistory: []
    },
    upgrades: {
      power: 0,
      efficiency: 0,
      cooling: 0,
    },
    lastMining: 0,
    stats: {
      totalMined: 0,
      successfulMines: 0,
      failedMines: 0,
    },
    quests: {
      daily: {
        type: null,
        progress: 0,
        target: 0,
        lastReset: 0,
      },
    },
    settings: {
      autoSell: false,
    },
    trading: {
      lastReset: Date.now(),
      dailyBuy: 0,
      dailySell: 0,
    },
    autoMining: {
      active: false,
      endTime: 0,
      totalMined: 0,
      lastTick: 0
    }
  };
}
CONFIG.walletSystem = {
  networkFee: 0.005, // 0.5% ph√≠ giao d·ªãch
  minFee: 10,        // Ph√≠ t·ªëi thi·ªÉu 10 coin
  maxFee: 5000,      // Ph√≠ t·ªëi ƒëa 5000 coin
  confirmations: 3,  // S·ªë x√°c nh·∫≠n c·∫ßn thi·∫øt
  memoLimit: 100,    // Gi·ªõi h·∫°n k√Ω t·ª± ghi ch√∫
  pendingExpiry: 24 * 60 * 60 * 1000, // 24 gi·ªù
  txHistoryLimit: 20 // L∆∞u 20 giao d·ªãch g·∫ßn nh·∫•t
};
function generateWalletAddress(userID) {
  // T·∫°o ƒë·ªãa ch·ªâ d·∫°ng: LC + 32 k√Ω t·ª± hex
  const hash = crypto.createHash('sha256').update(userID + Date.now()).digest('hex');
  return 'LC' + hash.substring(0, 32).toUpperCase();
}

// H√†m kh·ªüi t·∫°o v√≠ cho ng∆∞·ªùi ch∆°i m·ªõi
function initializeWallet(playerData, userID) {
  if (!playerData.wallet) {
    playerData.wallet = {
      address: generateWalletAddress(userID),
      privateKey: crypto.randomBytes(32).toString('hex'),
      transactions: [],
      pendingTx: [],
      created: Date.now()
    };
    console.log(`Created new wallet for ${userID}: ${playerData.wallet.address}`);
  }
  return playerData;
}

// H√†m x·ª≠ l√Ω giao d·ªãch P2P
function processTransaction(sender, receiverAddress, amount, memo = "", miningData) {
  // T√¨m ƒë·ªãa ch·ªâ v√≠ ng∆∞·ªùi nh·∫≠n
  let receiverID = null;
  for (const [uid, player] of Object.entries(miningData)) {
    if (player.wallet && player.wallet.address === receiverAddress) {
      receiverID = uid;
      break;
    }
  }

  if (!receiverID) {
    return { success: false, message: "‚ùå ƒê·ªãa ch·ªâ v√≠ kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!" };
  }

  // Ki·ªÉm tra s·ªë d∆∞ v√† t√≠nh ph√≠
  const networkFee = Math.min(
    CONFIG.walletSystem.maxFee,
    Math.max(CONFIG.walletSystem.minFee, amount * CONFIG.walletSystem.networkFee)
  );

  if (sender.coins < amount + networkFee) {
    return {
      success: false,
      message: `‚ùå Kh√¥ng ƒë·ªß coin ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch!\n\n` +
        `üí∞ S·ªë d∆∞: ${sender.coins.toLocaleString()} LC\n` +
        `üí∏ C·∫ßn: ${amount.toLocaleString()} LC (+ ${networkFee.toLocaleString()} ph√≠)`
    };
  }

  // T·∫°o ID giao d·ªãch
  const txID = 'TX' + crypto.randomBytes(16).toString('hex').toUpperCase();
  const timestamp = Date.now();

  // Tr·ª´ coin ng∆∞·ªùi g·ª≠i
  sender.coins -= (amount + networkFee);

  // Th√™m v√†o danh s√°ch giao d·ªãch ƒëang ch·ªù x√°c nh·∫≠n
  const transaction = {
    txID: txID,
    from: sender.wallet.address,
    to: receiverAddress,
    amount: amount,
    fee: networkFee,
    memo: memo.substring(0, CONFIG.walletSystem.memoLimit),
    timestamp: timestamp,
    confirmations: 0,
    status: 'pending',
    blockHeight: CONFIG.blockReward.blockHeight
  };

  // Th√™m v√†o l·ªãch s·ª≠ giao d·ªãch c·ªßa ng∆∞·ªùi g·ª≠i
  sender.wallet.transactions.push(transaction);
  if (sender.wallet.transactions.length > CONFIG.walletSystem.txHistoryLimit) {
    sender.wallet.transactions.shift();
  }

  // Th√™m v√†o giao d·ªãch ƒëang ch·ªù c·ªßa ng∆∞·ªùi nh·∫≠n
  miningData[receiverID].wallet.pendingTx.push({
    ...transaction,
    direction: 'in'
  });

  sender.wallet.pendingTx.push({
    ...transaction,
    direction: 'out'
  });

  return {
    success: true,
    transaction: transaction,
    message: `‚úÖ GIAO D·ªäCH TH√ÄNH C√îNG!\n\n` +
      `üÜî M√£ giao d·ªãch: ${txID}\n` +
      `üí∏ S·ªë l∆∞·ª£ng: ${amount.toLocaleString()} LC\n` +
      `üîç Ph√≠ m·∫°ng: ${networkFee.toLocaleString()} LC\n` +
      `üìù Ghi ch√∫: ${memo || "(kh√¥ng c√≥)"}\n\n` +
      `üîÑ Tr·∫°ng th√°i: ƒêang ch·ªù x√°c nh·∫≠n (0/${CONFIG.walletSystem.confirmations})\n` +
      `‚è≥ Th·ªùi gian x√°c nh·∫≠n ∆∞·ªõc t√≠nh: ~${Math.ceil(CONFIG.blockReward.targetBlockTime * CONFIG.walletSystem.confirmations / 1000 / 60)} ph√∫t`
  };
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch sau m·ªói block m·ªõi
function updateTransactions(miningData) {
  const currentHeight = CONFIG.blockReward.blockHeight;

  for (const [uid, player] of Object.entries(miningData)) {
    if (!player.wallet) continue;

    // C·∫≠p nh·∫≠t s·ªë x√°c nh·∫≠n cho giao d·ªãch ƒëang ch·ªù
    player.wallet.pendingTx.forEach((tx, index) => {
      // TƒÉng s·ªë x√°c nh·∫≠n
      if (tx.status === 'pending') {
        tx.confirmations = currentHeight - tx.blockHeight;

        // X√°c nh·∫≠n ho√†n t·∫•t
        if (tx.confirmations >= CONFIG.walletSystem.confirmations) {
          tx.status = 'confirmed';

          // N·∫øu l√† giao d·ªãch ƒë·∫øn, c·ªông ti·ªÅn cho ng∆∞·ªùi nh·∫≠n
          if (tx.direction === 'in') {
            player.coins += tx.amount;

            // Th√™m v√†o l·ªãch s·ª≠ giao d·ªãch
            player.wallet.transactions.push({
              ...tx,
              status: 'confirmed'
            });

            if (player.wallet.transactions.length > CONFIG.walletSystem.txHistoryLimit) {
              player.wallet.transactions.shift();
            }
          }

          // X√≥a kh·ªèi danh s√°ch ch·ªù
          player.wallet.pendingTx.splice(index, 1);
        }
      }

      // X√≥a giao d·ªãch qu√° h·∫°n
      const expiryTime = tx.timestamp + CONFIG.walletSystem.pendingExpiry;
      if (Date.now() > expiryTime && tx.status === 'pending') {
        // N·∫øu l√† giao d·ªãch ra, ho√†n ti·ªÅn
        if (tx.direction === 'out') {
          player.coins += tx.amount + tx.fee;
        }

        // ƒê√°nh d·∫•u l√† th·∫•t b·∫°i
        tx.status = 'failed';
        player.wallet.transactions.push({
          ...tx,
          status: 'failed',
          message: 'Giao d·ªãch h·∫øt h·∫°n'
        });

        player.wallet.pendingTx.splice(index, 1);
      }
    });
  }
}

function updatePlayerEnergy(player) {
  // Ki·ªÉm tra v√† kh·ªüi t·∫°o nƒÉng l∆∞·ª£ng
  if (player.energy === undefined || player.energy === null) {
    player.energy = CONFIG.energySystem.maxEnergy; // Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã m·ªõi
    player.lastEnergyUpdate = Date.now();
    return player;
  }

  // Gi·ªõi h·∫°n t·ªëi ƒëa m·ªõi
  if (player.energy >= CONFIG.energySystem.maxEnergy) {
    player.energy = CONFIG.energySystem.maxEnergy;
    return player;
  }

  // Rest of code remains the same...
  const timePassed = Date.now() - player.lastEnergyUpdate;
  if (timePassed < CONFIG.energySystem.recoveryInterval) return player;

  // T√≠nh to√°n c√°c h·ªá s·ªë h·ªìi ph·ª•c...
  const generatorLevel = player.powerSystem?.generatorLevel || 0;
  const generator = CONFIG.powerGrid.generator.levels[generatorLevel];
  const generatorBonus = generator ? generator.production : 1;

  const currentHour = new Date().getHours();
  const isPeakHour = CONFIG.powerGrid.generator.peakHours.includes(currentHour);
  const timeBonus = !isPeakHour ? CONFIG.powerGrid.generator.offPeakBonus : 1;

  const efficiencyBonus = 1 + (player.upgrades.efficiency * 0.05);
  const poolBonus = player.settings?.inPool ? 1.1 : 1;

  const recoveryRate = CONFIG.energySystem.recoveryRate * 
                      generatorBonus * 
                      timeBonus * 
                      efficiencyBonus * 
                      poolBonus;

  let recoveredEnergy = Math.floor(timePassed / CONFIG.energySystem.recoveryInterval) * recoveryRate;

  // √Åp d·ª•ng gi·ªõi h·∫°n m·ªõi
  player.energy = Math.min(
    CONFIG.energySystem.maxEnergy,
    player.energy + recoveredEnergy
  );

  player.lastEnergyUpdate = Date.now();

  return player;
}
function calculatePlayerHashrate(player) {
  let baseHashrate = (1 + player.upgrades.power * 0.2) *
    (1 + player.upgrades.efficiency * 0.1) *
    CONFIG.baseMiner.power * 100;

  if (player.specialUpgrades?.gpu) {
    baseHashrate *= player.specialUpgrades.gpu.bonus;
  }

  if (player.specialUpgrades?.coolingsystem) {
    baseHashrate *= (1 + (player.specialUpgrades.coolingsystem.bonus - 1) * 0.5);
  }

  return baseHashrate;
}

function attemptBlockMining(player, successRate, miningData) {
  const playerHashrate = calculatePlayerHashrate(player);
  const totalNetworkHashrate = calculateTotalNetworkPower(miningData);
  const playerShareOfNetwork = playerHashrate / totalNetworkHashrate;
  if (!CONFIG.blockHistory)
    CONFIG.blockHistory = { blocks: [], maxBlocks: 100 };
  CONFIG.blockHistory.blocks.push({
    height: CONFIG.blockReward.blockHeight,
    miner: player.name || senderID,
    reward: CONFIG.blockReward.current,
    timestamp: Date.now(),
    difficulty: CONFIG.blockReward.difficulty,
  });
  if (CONFIG.blockHistory.blocks.length > CONFIG.blockHistory.maxBlocks) {
    CONFIG.blockHistory.blocks.shift();
  }
  const timeSinceLastBlock =
    (Date.now() - CONFIG.blockReward.lastBlockTime) / 1000;
  const timeFactorMultiplier = Math.min(
    10,
    timeSinceLastBlock / (CONFIG.blockReward.targetBlockTime / 1000)
  );

  const blockMiningChance =
    Math.max(0.005, playerShareOfNetwork) * timeFactorMultiplier * 2.0;

  console.log(
    `[BLOCK] C∆° h·ªôi: ${(blockMiningChance * 100).toFixed(4)}%, Share: ${(
      playerShareOfNetwork * 100
    ).toFixed(2)}%, Time: ${timeFactorMultiplier.toFixed(2)}x`
  );

  if (Math.random() < blockMiningChance) {

    CONFIG.blockReward.blockHeight++;
    CONFIG.blockReward.lastBlockTime = Date.now();

    console.log(
      `[BLOCK] Player ${player.name || "Unknown"} ƒë√†o ƒë∆∞·ª£c block #${CONFIG.blockReward.blockHeight
      } v·ªõi ph·∫ßn th∆∞·ªüng ${CONFIG.blockReward.current} LCoin`
    );

    adjustBlockDifficulty();

    if (
      CONFIG.blockReward.blockHeight % 210000 === 0 &&
      CONFIG.blockReward.blockHeight > 0
    ) {
      handleHalvingEvent();
    }

    return CONFIG.blockReward.current;
  }

  return 0;
  updateTransactions(miningData);
}
function handleHalvingEvent() {
  const previousReward = CONFIG.blockReward.current;
  CONFIG.blockReward.current = Math.max(CONFIG.blockReward.current / 2, 0.1);

  const halvingEvent = {
    blockHeight: CONFIG.blockReward.blockHeight,
    newReward: CONFIG.blockReward.current,
    previousReward: previousReward,
    timestamp: Date.now(),
  };

  HALVING_EVENTS.push(halvingEvent);
  console.log(
    `[HALVING] Block #${CONFIG.blockReward.blockHeight}: Ph·∫ßn th∆∞·ªüng gi·∫£m t·ª´ ${previousReward} xu·ªëng ${CONFIG.blockReward.current}`
  );
}
function calculateTotalNetworkPower(miningData) {
  let totalPower = CONFIG.npcMiners.totalHashrate || 100;

  if (!miningData || typeof miningData !== 'object') {
    console.error("Invalid miningData provided to calculateTotalNetworkPower");
    return totalPower;
  }

  try {
    Object.values(miningData).forEach(player => {
      if (player && typeof player === 'object') {
        const playerHashrate = calculatePlayerHashrate(player);
        if (!isNaN(playerHashrate) && playerHashrate > 0) {
          totalPower += playerHashrate;
        }
      }
    });

    if (CONFIG.npcMiners && CONFIG.npcMiners.enabled && CONFIG.npcMiners.totalHashrate) {
      totalPower += CONFIG.npcMiners.totalHashrate;
    }

    return Math.max(100, totalPower);
  } catch (error) {
    console.error("Error calculating total network power:", error);
    return CONFIG.npcMiners.totalHashrate || 1000;
  }
}

function formatNumber(number) {
  if (number === null || number === undefined || isNaN(number)) return "N/A";
  if (number >= 1000000) return (number / 1000000).toFixed(2) + "M";
  if (number >= 1000) return (number / 1000).toFixed(2) + "K";
  return number.toFixed(2);
}
function applyStorageFee(player, miningData) {
  // N·∫øu ng∆∞·ªùi ch∆°i ch∆∞a bao gi·ªù tr·∫£ ph√≠ ho·∫∑c th·ªùi gian ƒë√£ qu√° 1 gi·ªù
  const ONE_HOUR = 60 * 60 * 1000; // 1 gi·ªù t√≠nh b·∫±ng millisecond

  if (!player.lastStorageFeeTime) {
    // N·∫øu ch∆∞a c√≥ th·ªùi gian n·∫Øm gi·ªØ, kh·ªüi t·∫°o th·ªùi gian m√† kh√¥ng tr·ª´ ph√≠ l·∫ßn ƒë·∫ßu
    player.lastStorageFeeTime = Date.now();
    return { applied: false };
  }

  // Ch·ªâ √°p d·ª•ng ph√≠ khi ƒë√£ qua 1 gi·ªù
  if (Date.now() - player.lastStorageFeeTime > ONE_HOUR) {
    const totalSupply = CONFIG.coinLimit.currentSupply;
    const holdingRatio = player.coins / totalSupply;

    let feeRate = 0;
    if (holdingRatio > 0.30) feeRate = 0.015;
    else if (holdingRatio > 0.20) feeRate = 0.01;
    else if (holdingRatio > 0.10) feeRate = 0.005;
    else if (holdingRatio > 0.05) feeRate = 0.002;
    else if (player.coins > 5000) feeRate = 0.001;

    if (feeRate > 0) {
      const fee = Math.floor(player.coins * feeRate);
      if (fee > 0) {
        player.coins -= fee;
        player.lastStorageFeeTime = Date.now();

        if (!player.feeHistory) player.feeHistory = [];
        player.feeHistory.push({
          amount: fee,
          rate: feeRate,
          timestamp: Date.now()
        });

        return {
          applied: true,
          fee: fee,
          rate: feeRate,
          message: `üè¶ PH√ç L∆ØU TR·ªÆ: -${fee} LCoin (${(feeRate * 100).toFixed(2)}%/gi·ªù)`
        };
      }
    }

    player.lastStorageFeeTime = Date.now();
  }

  return { applied: false };
}
function updateCirculationNPC(miningData, marketData, api, threadID) {

  const totalSupply = CONFIG.coinLimit.currentSupply;
  const totalHeld = Object.values(miningData).reduce((sum, p) => sum + p.coins, 0);
  const circulatingSupply = Math.max(0, totalSupply - totalHeld);
  const circulationRatio = circulatingSupply / totalSupply;

  if (circulationRatio < 0.05) {
    const buyPressure = Math.min(0.5, Math.pow(0.05 / circulationRatio, 1.5) * 0.1);
    const buyAmount = Math.floor(totalSupply * 0.03);

    const npcNames = ["Central Fund", "Institutional Investor", "Market Maker", "Strategic Buyer"];

    for (let i = 0; i < Math.min(4, Math.ceil(0.05 / circulationRatio)); i++) {
      marketData.npcActivities = marketData.npcActivities || [];

      const individualBuyAmount = Math.floor(buyAmount / (i + 1));
      const npcName = npcNames[i % npcNames.length];

      marketData.npcActivities.push({
        type: "buy",
        trader: npcName,
        amount: individualBuyAmount,
        price: marketData.price * (1 + (0.03 * (i + 1))),
        timestamp: Date.now() + (i * 60000),
        message: `${npcName} ƒëang mua ${individualBuyAmount.toLocaleString()} LCoin ƒë·ªÉ ·ªïn ƒë·ªãnh th·ªã tr∆∞·ªùng`,
        impact: buyPressure / (i + 1),
        duration: 12 * 60 * 60 * 1000
      });
    }

    if (api && threadID && Math.random() < 0.2) {
      api.sendMessage(
        "üì¢ C·∫¢NH B√ÅO: L∆∞u th√¥ng LCoin ƒëang ·ªü m·ª©c nguy hi·ªÉm th·∫•p!" +
        `\nüíπ Ch·ªâ c√≤n ${(circulationRatio * 100).toFixed(1)}% t·ªïng cung ƒëang l∆∞u th√¥ng` +
        "\nüè¶ C√°c ƒë·ªãnh ch·∫ø t√†i ch√≠nh ƒëang can thi·ªáp th·ªã tr∆∞·ªùng" +
        "\n‚ö†Ô∏è Ph√≠ l∆∞u tr·ªØ s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng cho ng∆∞·ªùi n·∫Øm gi·ªØ l·ªõn!",
        threadID
      );
    }

    marketData.price = Math.floor(marketData.price * (1 + buyPressure));

    console.log(`[MARKET INTERVENTION] Circulation critical: ${(circulationRatio * 100).toFixed(2)}%. Buy pressure: ${(buyPressure * 100).toFixed(2)}%`);

    return true;
  }

  return false;
}
function adjustBlockDifficulty() {
  const timeSinceLastBlock = Date.now() - CONFIG.blockReward.lastBlockTime;
  const ratio = CONFIG.blockReward.targetBlockTime / timeSinceLastBlock;

  if (ratio > 1.2) {
    CONFIG.blockReward.difficulty *= 1.1;
  } else if (ratio < 0.8) {
    CONFIG.blockReward.difficulty *= 0.9;
  }

  if (
    CONFIG.blockReward.blockHeight % 210000 === 0 &&
    CONFIG.blockReward.blockHeight > 0
  ) {
    CONFIG.blockReward.current = Math.max(CONFIG.blockReward.current / 2, 0.1);
    HALVING_EVENTS.push({
      blockHeight: CONFIG.blockReward.blockHeight,
      newReward: CONFIG.blockReward.current,
      timestamp: Date.now(),
    });
  }
}
function joinMiningPool(player) {
  player.settings.inPool = true;
  player.settings.poolFee = 0.02;
}

function leavePool(player) {
  player.settings.inPool = false;
}

function distributeMiningRewards(miningData, blockReward) {
  const poolMembers = Object.values(miningData).filter(
    (p) => p.settings?.inPool
  );
  const totalPoolPower = poolMembers.reduce((sum, p) => {
    return sum + (1 + p.upgrades.power * 0.2) * CONFIG.baseMiner.power;
  }, 0);

  poolMembers.forEach((member) => {
    const memberPower =
      (1 + member.upgrades.power * 0.2) * CONFIG.baseMiner.power;
    const share = memberPower / totalPoolPower;
    const reward = blockReward * share * (1 - member.settings.poolFee);
    member.coins += reward;
    member.stats.totalMined += reward;
  });
}
function ensurePlayerTradingInitialized(player) {
  if (!player.trading) {
    player.trading = {
      lastReset: Date.now(),
      dailyBuy: 0,
      dailySell: 0,
    };
  }
  return player;
}
function calculateAverageBuyPrice(player) {
  if (!player.transactions) return null;

  const buys = player.transactions.filter(tx => tx.type === 'buy');
  if (buys.length === 0) return null;

  const totalCost = buys.reduce((sum, tx) => sum + tx.totalCost, 0);
  const totalAmount = buys.reduce((sum, tx) => sum + tx.amount, 0);

  return totalCost / totalAmount;
}

function calculateHashMiningCost(player, duration) {
  const playerHardware = player.hashMiningHardware || 0;
  const hardware = CONFIG.advancedMining.hardware[playerHardware];

  if (!hardware) return 0;

  const powerUsage = hardware.power / 1000;
  const hourlyRate = powerUsage * CONFIG.advancedMining.electricityCost;
  const cost = (hourlyRate / 3600) * duration;

  return Math.ceil(cost);
}

function visualizeHashMining(process) {
  let visualization = "‚õèÔ∏è HASH MINING VISUALIZATION ‚õèÔ∏è\n" +
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

  visualization += `üîß Hardware: ${process.hardware}\n`;
  visualization += `‚ö° Hashrate: ${process.hashrate.toLocaleString()} H/s\n`;
  visualization += `‚è±Ô∏è Th·ªùi gian: ${process.duration.toFixed(2)}s\n`;
  visualization += `üî¢ S·ªë l·∫ßn th·ª≠: ${process.attempts.toLocaleString()}\n`;

  visualization += "\nüéØ TARGET: " + "0".repeat(process.targetDiff) + "...\n";

  if (process.successHash) {
    visualization += `\n‚úÖ HASH FOUND!\n`;
    visualization += `üîç Nonce: ${process.nonceFound}\n`;
    visualization += `üßÆ Hash: ${process.successHash.substring(0, 25)}...\n`;

    const progress = "‚ñ†".repeat(10);
    visualization += `\nüìä Mining progress: [${progress}] 100%\n`;
  }
  else {
    visualization += `\n‚ùå NO VALID HASH FOUND\n`;
    visualization += `üîç Best difficulty: ${process.bestDiff} (c·∫ßn ${process.targetDiff})\n`;

    const progressPercent = Math.min(100, (process.bestDiff / process.targetDiff) * 100);
    const progressCount = Math.floor(progressPercent / 10);
    const progress = "‚ñ†".repeat(progressCount) + "‚ñ°".repeat(10 - progressCount);
    visualization += `\nüìä Mining progress: [${progress}] ${progressPercent.toFixed(1)}%\n`;
  }

  return visualization;
}
function mineWithSHA256(player, difficultyTarget) {

  const prevBlock = CONFIG.blockHistory.blocks.length > 0
    ? CONFIG.blockHistory.blocks[CONFIG.blockHistory.blocks.length - 1]
    : { hash: '0'.repeat(64), height: 0 };

  function createMerkleRoot(transactions) {
    if (transactions.length === 0) return '0'.repeat(64);

    let hashes = transactions.map(tx => crypto.createHash('sha256').update(JSON.stringify(tx)).digest('hex'));

    if (hashes.length % 2 !== 0) {
      hashes.push(hashes[hashes.length - 1]);
    }

    while (hashes.length > 1) {
      const newHashes = [];
      for (let i = 0; i < hashes.length; i += 2) {
        const combinedHash = crypto.createHash('sha256')
          .update(hashes[i] + hashes[i + 1])
          .digest('hex');
        newHashes.push(combinedHash);
      }
      hashes = newHashes;

      if (hashes.length % 2 !== 0 && hashes.length > 1) {
        hashes.push(hashes[hashes.length - 1]);
      }
    }

    return hashes[0];
  }

  const transactions = [
    { from: "Coinbase", to: player.name || 'Unknown', amount: CONFIG.blockReward.current, fee: 0 },
    ...Array.from({ length: 5 }, (_, i) => ({
      from: `Address${Math.floor(Math.random() * 1000)}`,
      to: `Address${Math.floor(Math.random() * 1000)}`,
      amount: Math.random() * 10,
      fee: Math.random() * 0.1
    }))
  ];

  const merkleRoot = createMerkleRoot(transactions);

  const blockHeader = {
    version: 1,
    previousBlockHash: prevBlock.hash,
    merkleRoot: merkleRoot,
    timestamp: Math.floor(Date.now() / 1000),
    bits: difficultyTarget,
    height: prevBlock.height + 1,
  };

  const maxNonce = 1000000;
  let nonce = 0;

  const playerHardware = player.hashMiningHardware || 0;
  const hardware = CONFIG.advancedMining.hardware[playerHardware];

  const hashrateFactor = hardware ? hardware.hashrate / 50 : 0.5;
  const maxAttempts = Math.min(maxNonce, Math.ceil(300 * hashrateFactor));
  const coolingBonus = 1 + (player.upgrades.cooling * 0.15);
  const effectiveAttempts = Math.ceil(maxAttempts * coolingBonus);

  const miningProcess = {
    startTime: Date.now(),
    attempts: 0,
    bestDiff: 0,
    targetDiff: parseInt(difficultyTarget, 16),
    hardware: hardware ? hardware.name : "CPU Mining",
    hashrate: hardware ? hardware.hashrate : 50,
    blocks: [],
    maxAttempts: effectiveAttempts
  };

  while (nonce < maxAttempts) {
    blockHeader.nonce = nonce;
    const headerString = JSON.stringify(blockHeader);
    const hash = crypto.createHash('sha256').update(headerString).digest('hex');

    miningProcess.attempts++;
    const leadingZeros = hash.match(/^0*/)[0].length;
    if (leadingZeros > miningProcess.bestDiff) {
      miningProcess.bestDiff = leadingZeros;
    }

    if (hash.startsWith('0'.repeat(difficultyTarget))) {

      const newBlock = {
        height: blockHeader.height,
        hash: hash,
        previousHash: blockHeader.previousBlockHash,
        merkleRoot: blockHeader.merkleRoot,
        nonce: nonce,
        timestamp: Date.now(),
        miner: player.name || 'Unknown',
        transactions: transactions,
        reward: CONFIG.blockReward.current,
        difficulty: difficultyTarget
      };

      miningProcess.endTime = Date.now();
      miningProcess.duration = (miningProcess.endTime - miningProcess.startTime) / 1000;
      miningProcess.nonceFound = nonce;
      miningProcess.successHash = hash;

      return {
        success: true,
        hash: hash,
        nonce: nonce,
        blockData: newBlock,
        process: miningProcess
      };
    }

    nonce++;
  }

  miningProcess.endTime = Date.now();
  miningProcess.duration = (miningProcess.endTime - miningProcess.startTime) / 1000;

  return {
    success: false,
    process: miningProcess,
    bestHash: crypto.createHash('sha256')
      .update(JSON.stringify({ ...blockHeader, nonce: Math.floor(Math.random() * maxAttempts) }))
      .digest('hex')
  };
}

function calculateScarcityMultiplier(miningData) {
  const supplyRatio = CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply;

  const baseScarcity = Math.pow(supplyRatio, CONFIG.market.scarcityEffect.growthRate);

  const timeElapsed = (Date.now() - CONFIG.blockReward.lastBlockTime) / (24 * 60 * 60 * 1000);
  const timeEffect = Math.pow(1 + timeElapsed * CONFIG.market.scarcityEffect.timeWeight, 0.5);

  const totalHeld = Object.values(miningData).reduce((sum, player) => sum + player.coins, 0);
  const holdingRatio = totalHeld / CONFIG.coinLimit.currentSupply;
  const holdingEffect = Math.pow(1 + holdingRatio * CONFIG.market.scarcityEffect.holdingWeight, 2);

  const halvingCount = Math.floor(CONFIG.blockReward.blockHeight / 210000);
  const halvingEffect = Math.pow(1.5, halvingCount);

  let multiplier = CONFIG.market.scarcityEffect.baseMultiplier *
    baseScarcity *
    timeEffect *
    holdingEffect *
    halvingEffect;

  return Math.min(CONFIG.market.scarcityEffect.maxMultiplier, multiplier);
}
function checkAndUpdateEpoch() {
  const supplyRatio = CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply;

  for (let i = CONFIG.epochs.list.length - 1; i >= 0; i--) {
    const epoch = CONFIG.epochs.list[i];
    if (supplyRatio >= (i > 0 ? CONFIG.epochs.list[i - 1].supply : 0) &&
      supplyRatio < epoch.supply) {

      if (CONFIG.epochs.currentEpoch !== epoch.id) {
        CONFIG.epochs.currentEpoch = epoch.id;
        CONFIG.epochs.milestones.push({
          epoch: epoch.id,
          timestamp: Date.now(),
          supply: CONFIG.coinLimit.currentSupply,
          price: marketData.price
        });

        return {
          newEpoch: true,
          epoch: epoch
        };
      }
      break;
    }
  }

  return {
    newEpoch: false,
    epoch: CONFIG.epochs.list[CONFIG.epochs.currentEpoch]
  };
}
function processAdvancedUpgrade(player, componentId, modelIndex, balance) {
  // Ki·ªÉm tra ƒë·∫ßu v√†o c∆° b·∫£n
  if (isNaN(componentId) || componentId < 4 ||
    componentId > CONFIG.upgradeSystem.componentTypes.length) {
    return {
      success: false,
      message: `‚ùå Lo·∫°i n√¢ng c·∫•p kh√¥ng h·ª£p l·ªá!`
    };
  }

  const component = CONFIG.upgradeSystem.componentTypes[componentId - 1];

  if (isNaN(modelIndex) || modelIndex < 1 || modelIndex > component.models.length) {
    return {
      success: false,
      message: `‚ùå Vui l√≤ng ch·ªçn model h·ª£p l·ªá cho ${component.label}!\n` +
        `D√πng '.coin upgrade list ${componentId}' ƒë·ªÉ xem danh s√°ch.`
    };
  }

  const model = component.models[modelIndex - 1];

  // Ki·ªÉm tra ti·ªÅn
  if (balance < model.price) {
    return {
      success: false,
      message: `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${model.name}!\n` +
        `üí∞ Gi√°: ${model.price.toLocaleString()}$\n` +
        `üíµ S·ªë d∆∞: ${balance.toLocaleString()}$`
    };
  }

  if (!player.specialUpgrades) player.specialUpgrades = {};
  const currentModel = player.specialUpgrades[component.name]?.modelName || "Ch∆∞a c√≥";

  player.specialUpgrades[component.name] = {
    level: modelIndex,
    modelName: model.name,
    bonus: model.bonus
  };

  return {
    success: true,
    cost: model.price,
    message: `‚úÖ ${component.emoji} ${component.label}: ${currentModel} ‚Üí ${model.name}\n` +
      `‚ö° Hi·ªáu su·∫•t: x${model.bonus}\n` +
      `üíµ Chi ph√≠: ${model.price.toLocaleString()}$`
  };
}
function calculatePriceBasedRewardReduction(currentPrice) {
  
  const basePrice = 1500;

  const priceRatio = Math.max(1, currentPrice / basePrice);

  const rewardReductionFactor = 1 / Math.pow(priceRatio, 0.5);

  return Math.max(0.1, rewardReductionFactor);
}
function updatePlayerEnergy(player) {
  
  if (player.energy === undefined || player.energy === null) {
    player.energy = CONFIG.energySystem.maxEnergy;
    player.lastEnergyUpdate = Date.now();
    return player;
  }

  const timePassed = Date.now() - player.lastEnergyUpdate;
  if (timePassed < CONFIG.energySystem.recoveryInterval) return player;

  const generatorLevel = player.powerSystem?.generatorLevel || 0;
  const generator = CONFIG.powerGrid.generator.levels[generatorLevel];
  const generatorBonus = generator ? generator.production : 1;

  const currentHour = new Date().getHours();
  const isPeakHour = CONFIG.powerGrid.generator.peakHours.includes(currentHour);
  const timeBonus = !isPeakHour ? CONFIG.powerGrid.generator.offPeakBonus : 1;

  const efficiencyBonus = 1 + (player.upgrades.efficiency * 0.05);
  const poolBonus = player.settings?.inPool ? 1.1 : 1;

  const intervals = Math.floor(timePassed / CONFIG.energySystem.recoveryInterval);
  const recoveryRate = CONFIG.energySystem.recoveryRate * 
                      generatorBonus * 
                      timeBonus * 
                      efficiencyBonus * 
                      poolBonus;

  let recoveredEnergy = intervals * recoveryRate;

  if (player.autoMining?.active) {
  
    if (Date.now() > player.autoMining.endTime) {
      player.autoMining.active = false;
    } else if (Date.now() - player.autoMining.lastTick >= CONFIG.autoMining.tickRate) {
    
      if (player.energy >= CONFIG.autoMining.settings.energyCost) {
        const miningResult = attemptMining(player, CONFIG.autoMining.settings.efficiency);
        if (miningResult.success) {
          player.autoMining.totalMined += miningResult.reward;
          player.energy -= CONFIG.autoMining.settings.energyCost;
        }
      }
      player.autoMining.lastTick = Date.now();
    }
  }

  player.energy = Math.min(
    CONFIG.energySystem.maxEnergy,
    player.energy + recoveredEnergy
  );

  player.lastEnergyUpdate = Date.now() - (timePassed % CONFIG.energySystem.recoveryInterval);

  if (recoveredEnergy > 0) {
    console.log(`[ENERGY] Recovered ${recoveredEnergy.toFixed(2)} energy for player ${player.name || "Unknown"}`);
  }

  return player;
}
function calculateMiningDifficulty() {
  const supplyRatio = CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply;
  const currentEpoch = CONFIG.epochs.list[CONFIG.epochs.currentEpoch];
  const baseMultiplier = currentEpoch.difficultyMultiplier;

  const basePricePoint = 1500;
  const priceRatio = Math.max(1, marketData.price / basePricePoint);

  const priceFactor = Math.pow(priceRatio, 0.33);

  let difficultyMultiplier = baseMultiplier *
    (1 + Math.pow(supplyRatio, 2) * 5) *
    priceFactor;

  return Math.min(50, difficultyMultiplier);
}
function updateMinerLevel(player, expGained) {
  if (!player.minerLevel) {
    player.minerLevel = {
      level: 1,
      experience: 0,
      requiredExp: 1000,
      bonuses: {
        cooldownReduction: 0,
        criticalChance: 0,
        rewardBonus: 0,
      },
    };
  }

  player.minerLevel.experience += expGained;

  if (player.minerLevel.experience >= player.minerLevel.requiredExp) {
    player.minerLevel.level++;
    player.minerLevel.experience -= player.minerLevel.requiredExp;
    player.minerLevel.requiredExp = Math.floor(
      player.minerLevel.requiredExp * 1.5
    );

    player.minerLevel.bonuses.cooldownReduction += 5;
    player.minerLevel.bonuses.criticalChance += 0.01;
    player.minerLevel.bonuses.rewardBonus += 0.05;

    return true;
  }

  return false;
}
function checkRareResources(player) {
  if (!CONFIG.rareResources.enabled) return null;

  for (const resource of CONFIG.rareResources.types) {
    if (Math.random() < resource.chance) {
      if (!player.resources) player.resources = {};

      player.resources[resource.id] = (player.resources[resource.id] || 0) + 1;

      return {
        id: resource.id,
        name: resource.name,
        value: resource.value,
      };
    }
  }

  return null;
}
function updateMarketPrice(marketData, miningData) {
  const timePassed = Date.now() - marketData.lastUpdate;
  if (timePassed >= CONFIG.market.updateInterval) {
    let change = (Math.random() - 0.5) * 2 * CONFIG.market.volatility;

    const daysPassed = Math.floor(
      (Date.now() - CONFIG.market.tradingVolume.lastReset) /
      (24 * 60 * 60 * 1000)
    );
    if (daysPassed >= 1) {
      CONFIG.market.tradingVolume.buy = 0;
      CONFIG.market.tradingVolume.sell = 0;
      CONFIG.market.tradingVolume.lastReset = Date.now();
    }

    if (Math.random() < CONFIG.market.crashChance) {
      change = -Math.random() * 0.3;
    }

    const scarcityMultiplier = calculateScarcityMultiplier(miningData);
    let scarcityEffect = 0;
    if (scarcityMultiplier > 1) {
      scarcityEffect = (scarcityMultiplier - 1) * 0.01;
    }

    if (marketData.npcActivities && marketData.npcActivities.length > 0) {
      const activeActivities = marketData.npcActivities.filter(
        activity => Date.now() < activity.timestamp + activity.duration
      );

      activeActivities.forEach(activity => {
        if (activity.type === "sell") {
          change -= 0.01;
        } else if (activity.type === "buy") {
          change += 0.005;
        }
      });

      marketData.npcActivities = activeActivities;
    }

    const { threshold, buyPressure, sellPressure, maxImpact } = CONFIG.market.volumeImpact;
    let volumeImpact = 0;
    const totalVolume = CONFIG.market.tradingVolume.totalVolume;

    if (totalVolume > threshold) {
      const volumeRatio = (totalVolume - threshold) / threshold;
      if (CONFIG.market.tradingVolume.buy > CONFIG.market.tradingVolume.sell) {
        volumeImpact -= Math.min(volumeRatio * buyPressure, maxImpact);
      } else {
        volumeImpact -= Math.min(volumeRatio * sellPressure, maxImpact);
      }
    }

    if (volumeImpact < 0) {
      volumeImpact += CONFIG.market.volumeImpact.recoveryRate;
    }

    if (CONFIG.coinLimit.crisis.isActive) {
      change = -CONFIG.coinLimit.crisis.priceDropRate * 0.5;
    } else if (marketData.price < CONFIG.market.basePrice) {
      change = CONFIG.coinLimit.crisis.recoveryRate * 0.5;
    }

    const totalChange = change + volumeImpact + scarcityEffect;
    const newPrice = Math.max(
      CONFIG.market.minPrice,
      Math.min(
        CONFIG.market.maxPrice,
        marketData.price * (1 + totalChange) * scarcityMultiplier
      )
    );

    marketData.history.push({
      price: marketData.price,
      timestamp: Date.now(),
      volumeImpact: volumeImpact,
      scarcityMultiplier: scarcityMultiplier,
    });

    if (marketData.history.length > 4320) {
      marketData.history.shift();
    }

    marketData.price = Math.round(newPrice);
    marketData.lastUpdate = Date.now();
  }
  return marketData;
}
function checkTradeManipulation(player, amount, type, marketData, miningData) {
  const config = CONFIG.market.antiManipulation;

  const now = Date.now();
  if (player.lastLargeTrade &&
    (now - player.lastLargeTrade) < config.cooldownBetweenTrades) {
    return {
      allowed: false,
      reason: "Vui l√≤ng ƒë·ª£i th√™m th·ªùi gian gi·ªØa c√°c giao d·ªãch l·ªõn"
    };
  }

  const holdingRatio = player.coins / CONFIG.coinLimit.currentSupply;
  if (holdingRatio > config.maxHoldingPercent) {
    return {
      allowed: false,
      reason: "V∆∞·ª£t qu√° gi·ªõi h·∫°n n·∫Øm gi·ªØ cho ph√©p"
    };
  }

  const priceImpact = calculatePriceImpact(amount, type, marketData, miningData);
  if (Math.abs(priceImpact) > config.priceImpactLimit) {
    return {
      allowed: false,
      reason: "Giao d·ªãch s·∫Ω t√°c ƒë·ªông qu√° l·ªõn ƒë·∫øn gi√°"
    };
  }

  return { allowed: true };
}
function calculatePriceImpact(amount, type, marketData, miningData) {
  const currentSupply = CONFIG.coinLimit.currentSupply;
  const volumeRatio = amount / currentSupply;

  let impact = 0;

  if (type === "buy") {
    impact = Math.pow(volumeRatio, 1.5) * 0.5;

    if (marketData.history.length > 0) {
      const priceChange = (marketData.price - marketData.history[0].price) / marketData.history[0].price;
      if (priceChange > 0) {
        impact *= (1 + priceChange);
      }
    }
  } else {
    impact = -Math.pow(volumeRatio, 1.5) * 0.4;

    if (marketData.history.length > 0) {
      const priceChange = (marketData.price - marketData.history[0].price) / marketData.history[0].price;
      if (priceChange < 0) {
        impact *= (1 - priceChange);
      }
    }
  }

  const scarcityMultiplier = calculateScarcityMultiplier(miningData);
  impact *= scarcityMultiplier;

  const maxImpact = CONFIG.market.antiManipulation.priceImpactLimit;
  return Math.max(-maxImpact, Math.min(maxImpact, impact));
}

function calculateMiningDifficulty() {
  const supplyRatio =
    CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply;

  let difficultyMultiplier;

  if (supplyRatio < 0.5) {
    difficultyMultiplier =
      1 +
      Math.pow(supplyRatio * 2, 1.5) * CONFIG.coinLimit.difficultyIncrease * 5;
  } else if (supplyRatio < 0.75) {
    difficultyMultiplier =
      1.5 +
      Math.pow((supplyRatio - 0.5) * 4, 2) *
      CONFIG.coinLimit.difficultyIncrease *
      10;
  } else if (supplyRatio < 0.9) {
    difficultyMultiplier =
      3 +
      Math.pow((supplyRatio - 0.75) * 10, 3) *
      CONFIG.coinLimit.difficultyIncrease *
      20;
  } else {
    difficultyMultiplier =
      5 +
      Math.pow((supplyRatio - 0.9) * 100, 4) *
      CONFIG.coinLimit.difficultyIncrease *
      50;
  }

  return Math.min(50, difficultyMultiplier);
}

function calculateRewardMultiplier() {
  const supplyRatio =
    CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply;
  const rewardMultiplier =
    1 - Math.floor(supplyRatio * 10) * CONFIG.coinLimit.rewardReduction;
  return Math.max(0.1, rewardMultiplier);
}

function calculateMiningSuccess(player) {
  const base = CONFIG.miningSuccess.base;
  const powerBonus = player.upgrades.power * CONFIG.miningSuccess.perPowerLevel;
  const coolingBonus =
    player.upgrades.cooling * CONFIG.miningSuccess.perCoolingLevel;
  const difficulty = calculateMiningDifficulty();
  return Math.min(0.95, (base + powerBonus + coolingBonus) / difficulty);
}
function handleNPCTrading(marketData, miningData) {
  if (!CONFIG.market.npcTraders.enabled) return;
  if (!marketData.npcActivities) {
    marketData.npcActivities = [];
  }
  const now = Date.now();
  if (now - CONFIG.market.npcTraders.lastAction < 5 * 60 * 1000) return;

  const circulatingSupply = CONFIG.coinLimit.currentSupply -
    Object.values(miningData).reduce((total, p) => total + p.coins, 0);

  CONFIG.market.npcTraders.behaviors.forEach(npc => {
    const priceChange = marketData.history.length > 0
      ? (marketData.price - marketData.history[0].price) / marketData.history[0].price
      : 0;

    if (Math.abs(priceChange) > npc.priceThreshold) {
      const tradeAmount = Math.floor(circulatingSupply * npc.tradeSize);

      if (priceChange > 0) {
        marketData.npcActivities.push({
          type: "sell",
          trader: npc.name,
          amount: tradeAmount,
          price: marketData.price * 1.05,
          timestamp: now,
          duration: 24 * 60 * 60 * 1000
        });

        console.log(`[NPC] ${npc.name} plans to sell ${tradeAmount} coins at ${marketData.price * 1.05}$`);
      } else {
        marketData.npcActivities.push({
          type: "buy",
          trader: npc.name,
          amount: tradeAmount,
          price: marketData.price * 0.95,
          timestamp: now,
          duration: 24 * 60 * 60 * 1000
        });

        console.log(`[NPC] ${npc.name} plans to buy ${tradeAmount} coins at ${marketData.price * 0.95}$`);
      }
    }
  });

  CONFIG.market.npcTraders.lastAction = now;
}
function calculateMiningReward(player, isCritical = false) {
  // Kh·ªüi t·∫°o halvingMultiplier
  const halvingCount = Math.floor(CONFIG.blockReward.blockHeight / HALVING_INTERVAL);
  const halvingMultiplier = Math.pow(0.5, halvingCount);

  // T·ª∑ l·ªá l∆∞u th√¥ng/n·∫Øm gi·ªØ
  const totalSupply = CONFIG.coinLimit.currentSupply;
  const totalHeld = Object.values(miningData).reduce((sum, p) => sum + p.coins, 0);
  const circulatingSupply = Math.max(0, totalSupply - totalHeld);
  const circulationRatio = circulatingSupply / totalSupply;

  // TƒÇNG H·ªÜ S·ªê L∆ØU TH√îNG - tƒÉng c·ª±c m·∫°nh khi √≠t ng∆∞·ªùi ƒë√†o
  const circulationFactor = Math.min(20, Math.pow(4, circulationRatio * 2));

  // GI·∫¢M T√ÅC ƒê·ªòNG C·ª¶A GI√Å CAO - gi√° cao ·∫£nh h∆∞·ªüng √≠t h∆°n ƒë·∫øn ph·∫ßn th∆∞·ªüng
  const priceRatio = Math.max(1, marketData.price / 1500);
  const priceFactor = 1 / Math.pow(priceRatio, 0.2); // Gi·∫£m m≈© t·ª´ 0.3 xu·ªëng 0.2

  // T√≠nh c√°c h·ªá s·ªë t·ª´ thi·∫øt b·ªã
  const powerMultiplier = Math.pow(1.3, player.upgrades.power || 0); // TƒÉng t·ª´ 1.2 l√™n 1.3
  const efficiencyMultiplier = Math.pow(1.2, player.upgrades.efficiency || 0); // TƒÉng t·ª´ 1.15 l√™n 1.2
  const gpuBonus = player.specialUpgrades?.gpu?.bonus || 1;
  const ramBonus = player.specialUpgrades?.ram?.bonus || 1;
  const coolerBonus = player.specialUpgrades?.cooler?.bonus || 1;
  const hardwareMultiplier = Math.sqrt(gpuBonus * ramBonus * coolerBonus) * 3; // TƒÉng t·ª´ 2 l√™n 3

  // TƒÇNG H·ªÜ S·ªê C∆† B·∫¢N T·ª™ 50 L√äN 200
  let baseReward = Math.round(
    200 *                     // TƒÉng t·ª´ 50 l√™n 200
    powerMultiplier *
    efficiencyMultiplier *
    circulationFactor *
    priceFactor *
    hardwareMultiplier *
    halvingMultiplier
  );

  // TƒÇNG BI·∫æN ƒê·ªòNG MAY M·∫ÆN
  const luckFactor = 0.8 + Math.random() * 1.7; // TƒÉng bi·∫øn ƒë·ªông t·ª´ 0.7-2.0 l√™n 0.8-2.5

  if (isCritical) {
    baseReward *= CONFIG.miningSuccess.criticalMultiplier * 2.0; // TƒÉng t·ª´ 1.5 l√™n 2.0
  }

  // TƒÇNG GI√Å TR·ªä T·ªêI ƒêA M·ªñI L·∫¶N ƒê√ÄO
  const maxRewardInUSD = 20000 * circulationFactor; // TƒÉng t·ª´ 10000 l√™n 20000
  const maxCoins = Math.ceil(maxRewardInUSD / marketData.price);

  // T√≠nh reward cu·ªëi c√πng
  let finalReward = Math.min(
    Math.round(baseReward * luckFactor),
    maxCoins
  );

  // TƒÇNG M·ª®C TH∆Ø·ªûNG T·ªêI THI·ªÇU T·ª™ 2 L√äN 5
  finalReward = Math.max(5, finalReward);

  const availableSupply = CONFIG.coinLimit.maxSupply - CONFIG.coinLimit.currentSupply;
  return Math.min(finalReward, availableSupply);
}
function ensurePlayerStructure(player) {
  if (!player.specialUpgrades) {
    player.specialUpgrades = {};
    console.log("ƒê√£ kh·ªüi t·∫°o specialUpgrades");
  }

  player.upgrades = player.upgrades || { power: 0, efficiency: 0, cooling: 0 };
  player.stats = player.stats || { totalMined: 0, successfulMines: 0, failedMines: 0 };
  player.settings = player.settings || {};

  return player;
}
function checkAndUpdateQuests(player) {
  const now = new Date();
  const currentDate = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate()
  );
  const lastResetDate = new Date(CONFIG.market.tradingVolume.lastReset);
  const lastResetDay = new Date(
    lastResetDate.getFullYear(),
    lastResetDate.getMonth(),
    lastResetDate.getDate()
  );

  if (currentDate > lastResetDay) {
    console.log(
      `[MARKET] Resetting trading volume at ${now.toLocaleString("vi-VN")}`
    );
    CONFIG.market.tradingVolume.buy = 0;
    CONFIG.market.tradingVolume.sell = 0;
    CONFIG.market.tradingVolume.lastReset = Date.now();
  }

  const questLastReset = new Date(player.quests.daily.lastReset || 0);
  const questLastResetDay = new Date(
    questLastReset.getFullYear(),
    questLastReset.getMonth(),
    questLastReset.getDate()
  );
  const daysPassed = Math.floor(
    (currentDate - questLastResetDay) / (24 * 60 * 60 * 1000)
  );

  if (daysPassed >= 1 || !player.quests.daily.type) {
    const questTypes = CONFIG.dailyQuests.types;
    const randomType =
      questTypes[Math.floor(Math.random() * questTypes.length)];
    player.quests.daily = {
      type: randomType,
      progress: 0,
      target: randomType === "mine" ? 10 : 3,
      lastReset: now,
    };
  }

  return player;
}

async function generatePriceChart(marketData, period = "45p") {
  try {
    let historyData = [...marketData.history];
    let timeLabel = "";
    let cutoffTime = Date.now();

    switch (period) {
      case "1h":
        cutoffTime -= 60 * 60 * 1000;
        timeLabel = "1 gi·ªù";
        break;
      case "4h":
        cutoffTime -= 4 * 60 * 60 * 1000;
        timeLabel = "4 gi·ªù";
        break;
      case "6h":
        cutoffTime -= 6 * 60 * 60 * 1000;
        timeLabel = "6 gi·ªù";
        break;
      case "12h":
        cutoffTime -= 12 * 60 * 60 * 1000;
        timeLabel = "12 gi·ªù";
        break;
      case "24h":
        cutoffTime -= 24 * 60 * 60 * 1000;
        timeLabel = "24 gi·ªù";
        break;
      case "45p":
      default:
        cutoffTime -= 45 * 60 * 1000;
        timeLabel = "45 ph√∫t";
        break;
    }

    const relevantHistory = historyData.filter(
      (item) => item.timestamp >= cutoffTime
    );

    if (relevantHistory.length < 2) {
      return {
        success: false,
        message: "Ch∆∞a ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì",
      };
    }

    relevantHistory.push({
      price: marketData.price,
      timestamp: Date.now(),
    });

    const timestamps = relevantHistory.map((item) => {
      const date = new Date(item.timestamp);
      if (period === "45p") {
        return date.toLocaleTimeString("vi-VN", {
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        });
      } else if (period === "1h") {
        return date.toLocaleTimeString("vi-VN", {
          hour: "2-digit",
          minute: "2-digit",
        });
      } else if (period === "4h" || period === "6h") {
        return date.toLocaleString("vi-VN", {
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        });
      } else {
        return date.toLocaleString("vi-VN", {
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        });
      }
    });

    const prices = relevantHistory.map((item) => item.price);
    const priceChange =
      ((prices[prices.length - 1] - prices[0]) / prices[0]) * 100;
    const volumeData = relevantHistory.map((item) => item.volumeImpact || 0);
    const scarcityData = relevantHistory.map(
      (item) => item.scarcityMultiplier || 1
    );

    const ma20 = calculateMA(prices, 20);
    const ma50 = calculateMA(prices, 50);
    const ma100 = calculateMA(prices, 100);
    const volatility = calculateVolatility(prices);
    const rsiPeriod = 14;
    const rsiValues = calculateRSI(prices, rsiPeriod);
    const { upperBand, lowerBand } = calculateBollingerBands(prices, 20, 2);
    const macdData = calculateMACD(prices);

    const width = 1200;
    const height = 800;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext("2d");

    ctx.clearRect(0, 0, width, height);

    const bgGradient = ctx.createLinearGradient(0, 0, 0, height);
    bgGradient.addColorStop(0, "#0B1221");
    bgGradient.addColorStop(0.5, "#0D1425");
    bgGradient.addColorStop(1, "#0F1628");
    ctx.fillStyle = bgGradient;
    ctx.fillRect(0, 0, width, height);

    const imageData = ctx.getImageData(0, 0, width, height);
    const pixels = imageData.data;
    for (let i = 0; i < pixels.length; i += 4) {
      const noise = Math.random() * 3;
      pixels[i] = Math.min(255, pixels[i] + noise);
      pixels[i + 1] = Math.min(255, pixels[i + 1] + noise);
      pixels[i + 2] = Math.min(255, pixels[i + 2] + noise);
    }
    ctx.putImageData(imageData, 0, 0);

    ctx.strokeStyle = "rgba(255, 255, 255, 0.05)";
    ctx.lineWidth = 0.5;
    for (let i = 0; i < width; i += 60) {
      ctx.beginPath();
      ctx.moveTo(i, 0);
      ctx.lineTo(i, height);
      ctx.stroke();
    }
    for (let i = 0; i < height; i += 60) {
      ctx.beginPath();
      ctx.moveTo(0, i);
      ctx.lineTo(width, i);
      ctx.stroke();
    }
    if (global.priceChart) {
      global.priceChart.destroy();
    }

    const upColor = "rgba(0, 192, 80, 1)";
    const downColor = "rgba(255, 56, 56, 1)";

    const primaryColor = priceChange >= 0 ? upColor : downColor;
    const fillColor =
      priceChange >= 0 ? "rgba(0, 192, 80, 0.1)" : "rgba(255, 56, 56, 0.1)";

    const gradientFill = ctx.createLinearGradient(0, 0, 0, height * 0.8);
    if (priceChange >= 0) {
      gradientFill.addColorStop(0, "rgba(0, 192, 80, 0.4)");
      gradientFill.addColorStop(0.2, "rgba(0, 192, 80, 0.25)");
      gradientFill.addColorStop(0.6, "rgba(0, 192, 80, 0.15)");
      gradientFill.addColorStop(1, "rgba(0, 192, 80, 0.05)");
    } else {
      gradientFill.addColorStop(0, "rgba(255, 56, 56, 0.4)");
      gradientFill.addColorStop(0.2, "rgba(255, 56, 56, 0.25)");
      gradientFill.addColorStop(0.6, "rgba(255, 56, 56, 0.15)");
      gradientFill.addColorStop(1, "rgba(255, 56, 56, 0.05)");
    }

    const patternCanvas = createCanvas(10, 10);
    const patternCtx = patternCanvas.getContext("2d");
    patternCtx.strokeStyle =
      priceChange >= 0 ? "rgba(0, 192, 80, 0.1)" : "rgba(255, 56, 56, 0.1)";
    patternCtx.lineWidth = 0.5;
    patternCtx.beginPath();
    patternCtx.moveTo(0, 10);
    patternCtx.lineTo(10, 0);
    patternCtx.stroke();
    const pattern = ctx.createPattern(patternCanvas, "repeat");

    global.priceChart = new Chart(ctx, {
      type: "line",
      data: {
        labels: timestamps,
        datasets: [
          {
            label: "LCoin/USDT",
            data: prices,
            borderColor: primaryColor,
            backgroundColor: gradientFill,
            borderWidth: 5,
            fill: true,
            tension: 0.3,
            order: 1,
            pointBackgroundColor: function (context) {
              const index = context.dataIndex;
              if (index === 0) return null;
              const currentPrice = prices[index];
              const previousPrice = prices[index - 1];

              return currentPrice > previousPrice
                ? "rgba(0, 220, 100, 1)"
                : "rgba(255, 70, 70, 1)";
            },
            pointBorderColor: "#FFFFFF",
            pointBorderWidth: 2,
            pointRadius: function (context) {
              const index = context.dataIndex;
              if (index === 0 || index === prices.length - 1) return 7;
              const currentPrice = prices[index];
              const previousPrice = prices[index - 1];
              const changePercent = Math.abs(
                ((currentPrice - previousPrice) / previousPrice) * 100
              );
              return changePercent > 0.3 ? 5 : 0;
            },
            pointHoverRadius: 10,
            pointHoverBackgroundColor: primaryColor,
            pointHoverBorderColor: "#FFFFFF",
            pointHoverBorderWidth: 3,
          },
          {
            label: "MA20",
            data: ma20,
            borderColor: "rgba(255, 206, 86, 0.8)",
            borderWidth: 2,
            fill: false,
            tension: 0.4,
            pointRadius: 0,
            borderDash: [5, 5],
            order: 2,
          },
          {
            label: "MA50",
            data: ma50,
            borderColor: "rgba(75, 192, 192, 0.8)",
            borderWidth: 2,
            fill: false,
            tension: 0.4,
            pointRadius: 0,
            borderDash: [5, 5],
            order: 3,
          },
          {
            label: "MA100",
            data: ma100,
            borderColor: "rgba(153, 102, 255, 0.8)",
            borderWidth: 2,
            fill: false,
            tension: 0.4,
            pointRadius: 0,
            borderDash: [5, 5],
            order: 4,
          },
          {
            label: "BB Upper",
            data: upperBand,
            borderColor: "rgba(255, 255, 255, 0.3)",
            borderWidth: 1,
            fill: false,
            tension: 0.4,
            pointRadius: 0,
            borderDash: [3, 3],
            order: 5,
          },
          {
            label: "BB Lower",
            data: lowerBand,
            borderColor: "rgba(255, 255, 255, 0.3)",
            borderWidth: 1,
            fill: {
              target: "+1",
              above: "rgba(255, 255, 255, 0.05)",
            },
            tension: 0.4,
            pointRadius: 0,
            borderDash: [3, 3],
            order: 6,
          },
        ],
      },
      options: {
        responsive: false,
        maintainAspectRatio: false,
        layout: {
          padding: {
            left: 15,
            right: 40,
            top: 30,
            bottom: 15,
          },
        },
        plugins: {
          title: {
            display: true,
            text: [
              "LCOIN/USDT",
              `${timeLabel} | Vol: ${formatNumber(
                volumeData.reduce((a, b) => a + b, 0)
              )} | Bi·∫øn ƒë·ªông: ${volatility.toFixed(2)}%`,
              `${formatPrice(prices[prices.length - 1])} ${priceChange >= 0 ? "‚ñ≤" : "‚ñº"
              } ${priceChange >= 0 ? "+" : ""}${priceChange.toFixed(2)}%`,
            ],
            color: "#ffffff",
            font: {
              size: 24,
              weight: "bold",
              family: "Arial, Consolas",
            },
            padding: {
              top: 20,
              bottom: 25,
            },
            align: "start",
          },
          legend: {
            display: true,
            labels: {
              color: "#8F959E",
              font: {
                family: "Consolas",
                size: 11,
              },
              usePointStyle: true,
              pointStyle: "circle",
              padding: 15,
              filter: function (item) {
                return !item.text.includes("BB");
              },
            },
            position: "top",
            align: "end",
          },
          tooltip: {
            mode: "index",
            intersect: false,
            backgroundColor: "rgba(17, 23, 29, 0.95)",
            titleColor: "#8F959E",
            bodyColor: "#ffffff",
            borderColor: "rgba(255, 255, 255, 0.1)",
            borderWidth: 1,
            titleFont: {
              family: "Consolas",
              size: 13,
              weight: "normal",
            },
            bodyFont: {
              family: "Consolas",
              size: 12,
            },
            padding: 12,
            displayColors: true,
            callbacks: {
              title: function (tooltipItems) {
                const date = new Date(
                  relevantHistory[tooltipItems[0].dataIndex]?.timestamp
                );
                return date.toLocaleString("vi-VN", {
                  hour: "2-digit",
                  minute: "2-digit",
                  second: "2-digit",
                  day: "2-digit",
                  month: "2-digit",
                  year: "numeric",
                });
              },
              label: function (context) {
                let label = context.dataset.label || "";
                if (label) {
                  if (label.includes("BB")) return null;
                  label = `${label}: `;
                  label += formatPrice(context.parsed.y);
                }
                return label;
              },
              afterBody: function (tooltipItems) {
                const index = tooltipItems[0].dataIndex;
                const volume = volumeData[index];
                const scarcity = scarcityData[index];
                const rsi = rsiValues[index];
                const macdInfo = macdData[index];

                return [
                  "",
                  `RSI(14): ${rsi?.toFixed(2) || "N/A"}`,
                  `MACD: ${macdInfo?.macd?.toFixed(4) || "N/A"} (${macdInfo?.signal?.toFixed(4) || "N/A"
                  })`,
                  `Kh·ªëi l∆∞·ª£ng: ${formatNumber(volume)}`,
                  `H·ªá s·ªë khan hi·∫øm: ${scarcity?.toFixed(3) || "N/A"}x`,
                ];
              },
            },
          },
        },
        interaction: {
          mode: "index",
          intersect: false,
        },
        scales: {
          x: {
            grid: {
              color: "rgba(255, 255, 255, 0.04)",
              drawBorder: false,
              tickLength: 10,
            },
            ticks: {
              color: "#8F959E",
              maxRotation: 0,
              font: {
                family: "Consolas",
                size: 11,
              },
              maxTicksLimit: 8,
              align: "inner",
            },
            offset: true,
          },
          y: {
            position: "right",
            grid: {
              color: "rgba(255, 255, 255, 0.04)",
              drawBorder: false,
            },
            ticks: {
              color: "#8F959E",
              callback: function (value) {
                return formatPrice(value);
              },
              font: {
                family: "Consolas",
                size: 11,
              },
              padding: 10,
            },
            min: 0,
            suggestedMin: Math.max(0, Math.min(...prices) * 0.9),
            suggestedMax: Math.max(...prices) * 1.1,
            beginAtZero: true,
            offset: true,
          },
        },
        animations: {
          y: {
            easing: "easeOutCubic",
            duration: 1500,
          },
        },
      },
    });

    ctx.save();
    ctx.globalAlpha = 0.5;
    ctx.font = "bold 16px Arial";
    ctx.fillStyle = "#8F959E";
    ctx.textAlign = "right";
    ctx.translate(width - 20, height - 20);
    ctx.fillText("Created by HNT", 0, 0);
    ctx.restore();

    const buffer = canvas.toBuffer("image/png");
    const chartPath = "./commands/cache/market_chart.png";
    fs.writeFileSync(chartPath, buffer);

    global.priceChart.destroy();
    global.priceChart = null;

    return {
      success: true,
      chartPath,
      priceChange,
      highPrice: Math.max(...prices),
      lowPrice: Math.min(...prices),
      volatility,
      dataPoints: relevantHistory.length,
    };
  } catch (error) {
    console.error("Error generating chart:", error);
    if (global.priceChart) {
      global.priceChart.destroy();
      global.priceChart = null;
    }
    return { success: false, message: "L·ªói khi t·∫°o bi·ªÉu ƒë·ªì" };
  }
}
function joinPool(player, poolId = "main") {
  if (!global.miningPools) {
    global.miningPools = {
      main: {
        members: [],
        totalHashrate: 0,
        blocksFound: 0,
        lastUpdated: Date.now()
      }
    };
  }

  if (!global.miningPools[poolId]) {
    global.miningPools[poolId] = {
      members: [],
      totalHashrate: 0,
      blocksFound: 0,
      lastUpdated: Date.now()
    };
  }

  const pool = global.miningPools[poolId];

  if (!pool.members.includes(player.id)) {
    pool.members.push(player.id);
  }

  player.settings = player.settings || {};
  player.settings.inPool = true;
  player.settings.poolId = poolId;
  player.settings.poolFee = CONFIG.miningPools.poolFee;
  player.settings.joinedPool = Date.now();

  return CONFIG.miningPools.bonusReward;
}
function drawHexagon(ctx, x, y, size) {
  ctx.beginPath();
  for (let i = 0; i < 6; i++) {
    const angle = (i * Math.PI) / 3;
    const xPos = x + size * Math.cos(angle);
    const yPos = y + size * Math.sin(angle);
    if (i === 0) {
      ctx.moveTo(xPos, yPos);
    } else {
      ctx.lineTo(xPos, yPos);
    }
  }
  ctx.closePath();
  ctx.stroke();
}

function calculateMACD(
  prices,
  fastPeriod = 12,
  slowPeriod = 26,
  signalPeriod = 9
) {
  const fastEMA = calculateEMA(prices, fastPeriod);
  const slowEMA = calculateEMA(prices, slowPeriod);
  const macdLine = [];

  for (let i = 0; i < prices.length; i++) {
    if (i < slowPeriod - 1) {
      macdLine.push(null);
      continue;
    }
    macdLine.push(fastEMA[i] - slowEMA[i]);
  }
  const signalLine = calculateEMA(
    macdLine.filter((x) => x !== null),
    signalPeriod
  );
  let signalIndex = 0;

  const result = [];
  for (let i = 0; i < prices.length; i++) {
    if (i < slowPeriod - 1 || !macdLine[i]) {
      result.push(null);
      continue;
    }

    const signal = signalLine[signalIndex++] || null;
    result.push({
      macd: macdLine[i],
      signal: signal,
      histogram: signal !== null ? macdLine[i] - signal : null,
    });
  }

  return result;
}

function calculateEMA(prices, period) {
  const results = [];
  const multiplier = 2 / (period + 1);

  let sma = 0;
  for (let i = 0; i < period; i++) {
    if (i < period - 1) {
      results.push(null);
    }
    sma += prices[i] || 0;
  }
  sma = sma / period;
  results.push(sma);

  for (let i = period; i < prices.length; i++) {
    const ema =
      (prices[i] - results[results.length - 1]) * multiplier +
      results[results.length - 1];
    results.push(ema);
  }

  return results;
}

function formatNumber(number) {
  if (number === null || number === undefined) return "N/A";
  if (number >= 1000000) return (number / 1000000).toFixed(2) + "M";
  if (number >= 1000) return (number / 1000).toFixed(2) + "K";
  return number.toFixed(2);
}

function formatPrice(price) {
  if (price === null || price === undefined) return "N/A";
  if (price >= 1000000) return (price / 1000000).toFixed(2) + "M $";
  if (price >= 1000) return (price / 1000).toFixed(2) + "K $";
  return price.toFixed(2) + " $";
}

function calculateMA(data, period) {
  const result = [];
  for (let i = 0; i < data.length; i++) {
    if (i < period - 1) {
      result.push(null);
      continue;
    }

    const sum = data.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0);
    result.push(sum / period);
  }
  return result;
}

function calculateVolatility(prices) {
  if (prices.length < 2) return 0;

  const returns = [];
  for (let i = 1; i < prices.length; i++) {
    returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);
  }

  const mean = returns.reduce((a, b) => a + b, 0) / returns.length;
  const variance =
    returns.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / returns.length;
  return Math.sqrt(variance) * 100;
}

function calculateRSI(prices, period = 14) {
  const changes = [];
  for (let i = 1; i < prices.length; i++) {
    changes.push(prices[i] - prices[i - 1]);
  }

  const rsi = [];
  let gains = [];
  let losses = [];

  for (let i = 0; i < period; i++) {
    const change = changes[i] || 0;
    gains.push(change > 0 ? change : 0);
    losses.push(change < 0 ? -change : 0);
    rsi.push(null);
  }

  let avgGain = gains.reduce((a, b) => a + b, 0) / period;
  let avgLoss = losses.reduce((a, b) => a + b, 0) / period;

  for (let i = period; i < changes.length; i++) {
    const change = changes[i];
    const gain = change > 0 ? change : 0;
    const loss = change < 0 ? -change : 0;

    avgGain = (avgGain * (period - 1) + gain) / period;
    avgLoss = (avgLoss * (period - 1) + loss) / period;

    const rs = avgGain / (avgLoss || 1);
    rsi.push(100 - 100 / (1 + rs));
  }

  return rsi;
}

function calculateBollingerBands(prices, period = 20, stdDev = 2) {
  const middleBand = calculateMA(prices, period);
  const upperBand = [];
  const lowerBand = [];

  for (let i = 0; i < prices.length; i++) {
    if (i < period - 1) {
      upperBand.push(null);
      lowerBand.push(null);
      continue;
    }

    const slice = prices.slice(i - period + 1, i + 1);
    const avg = middleBand[i];
    const variance =
      slice.reduce((sum, price) => sum + Math.pow(price - avg, 2), 0) / period;
    const standardDeviation = Math.sqrt(variance);

    upperBand.push(avg + standardDeviation * stdDev);
    lowerBand.push(avg - standardDeviation * stdDev);
  }

  return { upperBand, lowerBand, middleBand };
}

function checkAndResetDailyLimit(player) {
  ensurePlayerTradingInitialized(player);
  const now = new Date();
  const currentDate = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate()
  );
  const lastResetDate = new Date(player.trading.lastReset);
  const lastResetDay = new Date(
    lastResetDate.getFullYear(),
    lastResetDate.getMonth(),
    lastResetDate.getDate()
  );

  if (currentDate > lastResetDay) {
    player.trading.lastReset = now.getTime();
    player.trading.dailyBuy = 0;
    player.trading.dailySell = 0;
    return true;
  }
  return false;
}

function getRemainingTradeLimit(player, type = "buy") {
  ensurePlayerTradingInitialized(player);
  checkAndResetDailyLimit(player);
  const limit = CONFIG.coinLimit.dailyTradeLimit[type];
  const used =
    type === "buy" ? player.trading.dailyBuy : player.trading.dailySell;
  return Math.max(0, limit - used);
}

function calculateSellValue(player, amount, price) {
  let totalValue = 0;
  let remainingAmount = amount;

  if (player.minedCoins && player.minedCoins.length > 0) {
    player.minedCoins = player.minedCoins.filter(
      (coin) =>
        Date.now() - coin.timestamp < CONFIG.market.minedCoinValue.duration
    );

    for (let i = 0; i < player.minedCoins.length && remainingAmount > 0; i++) {
      const minedCoin = player.minedCoins[i];
      const useAmount = Math.min(remainingAmount, minedCoin.amount);

      totalValue += useAmount * price * CONFIG.market.minedCoinValue.multiplier;
      remainingAmount -= useAmount;
      minedCoin.amount -= useAmount;
    }

    player.minedCoins = player.minedCoins.filter((coin) => coin.amount > 0);
  }

  if (remainingAmount > 0) {
    totalValue += remainingAmount * price;
  }

  return Math.floor(totalValue);
}

module.exports = {
  name: "coin",
  dev: "HNT",
  category: "Games",
  info: "Tr√≤ ch∆°i ƒë√†o coin",
  usage: ".coin [mine/info/upgrade/market/sell/buy/quest]",
  onPrefix: true,
  cooldowns: 0,

  onLaunch: async function ({ api, event, target }) {
    const { threadID, messageID, senderID } = event;
    let { miningData, marketData } = initializeData();

    const data = initializeData();
    miningData = data.miningData;
    marketData = data.marketData;

    updateNPCActivities(); 
    updateNPCMiners();
    updateCirculationNPC(miningData, marketData, api, threadID);
    marketData = updateMarketPrice(marketData, miningData);

    if (!miningData[senderID]) {
      miningData[senderID] = initializePlayer(senderID);
    }


    if (Math.random() < 0.2) {
      const bestTrade = global.tradingSystem?.offers
        .filter(o => o.status === "active" && o.price < marketData.price * 0.95)
        .sort((a, b) => a.price - b.price)[0];

      if (bestTrade) {
        api.sendMessage(
          "üí° HOT DEAL: C√≥ ng∆∞·ªùi ƒëang b√°n coin v·ªõi gi√° t·ªët h∆°n 5% so v·ªõi th·ªã tr∆∞·ªùng!\n" +
          `ID: ${bestTrade.id} | Gi√°: ${bestTrade.price}$ (th·ªã tr∆∞·ªùng: ${marketData.price}$)\n` +
          "S·ª≠ d·ª•ng .coin trade accept ƒë·ªÉ mua!",
          threadID
        );
      }
    }
    const player = miningData[senderID];
    ensurePlayerStructure(player);
    updatePlayerEnergy(player);
    marketData = updateMarketPrice(marketData, miningData);
    const feeResult = applyStorageFee(player, miningData);

    player.miner = player.miner || { ...CONFIG.baseMiner };

    if (!player.name) {
      try {
        const userName = event.senderName || "Unknown";
        player.name = userName;
      } catch (error) {
        console.error("Error getting user name:", error);
      }
    }

    if (player.energy === undefined || player.energy === null) {
      player.energy = CONFIG.energySystem.maxEnergy;
      player.lastEnergyUpdate = Date.now();
    }

    updatePlayerEnergy(player);

    marketData = updateMarketPrice(marketData, miningData);
    miningData[senderID] = checkAndUpdateQuests(player);

    const helpMessage =
      `üéÆ LCOIN MINING GAME 2.0 üéÆ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚õèÔ∏è HO·∫†T ƒê·ªòNG C∆† B·∫¢N:
‚Ä¢ mine - ƒê√†o coin
‚Ä¢ info - Th√¥ng tin m√°y ƒë√†o
‚Ä¢ upgrade - N√¢ng c·∫•p thi·∫øt b·ªã
‚Ä¢ hash - ƒê√†o coin n√¢ng cao h∆°n
‚Ä¢ auto - T·ª± ƒë·ªông ƒë√†o coin

üí∞ GIAO D·ªäCH & TH·ªä TR∆Ø·ªúNG:
‚Ä¢ market - Xem th·ªã tr∆∞·ªùng
‚Ä¢ buy/sell [s·ªë l∆∞·ª£ng] - Mua/B√°n coin
‚Ä¢ autosell [on/off] - T·ª± ƒë·ªông b√°n
‚Ä¢ wallet - Xem v√≠ c·ªßa b·∫°n
‚Ä¢ trade - Giao d·ªãch coin n√¢ng cao

‚ö° H·ªÜ TH·ªêNG NƒÇNG L∆Ø·ª¢NG:
‚Ä¢ energy - Qu·∫£n l√Ω nƒÉng l∆∞·ª£ng
‚Ä¢ pool - Tham gia mining pool

üìä TH·ªêNG K√ä & TH√îNG TIN:
‚Ä¢ supply - Xem ngu·ªìn cung
‚Ä¢ halving - L·ªãch s·ª≠ halving
‚Ä¢ epoch - K·ª∑ nguy√™n coin
‚Ä¢ top - Xem b·∫£ng x·∫øp h·∫°ng

üíé T√ÄI S·∫¢N C·ª¶A B·∫†N:
‚Ä¢ S·ªë coin: ${player.coins.toLocaleString()}
‚Ä¢ Gi√° hi·ªán t·∫°i: ${marketData.price.toLocaleString()}$
‚Ä¢ T·ªïng gi√° tr·ªã: ${(player.coins * marketData.price).toLocaleString()}$

üí° M·∫∏O:
‚Ä¢ ƒê√†o v√†o gi·ªù th·∫•p ƒëi·ªÉm ƒë·ªÉ tƒÉng hi·ªáu qu·∫£
‚Ä¢ N√¢ng c·∫•p ƒë·ªìng b·ªô c√°c ch·ªâ s·ªë
‚Ä¢ Tham gia pool ƒë·ªÉ tƒÉng ph·∫ßn th∆∞·ªüng
‚Ä¢ Theo d√µi th·ªã tr∆∞·ªùng ƒë·ªÉ giao d·ªãch t·ªët

G√µ .coin + l·ªánh ƒë·ªÉ s·ª≠ d·ª•ng`;
    if (!target[0]) {
      return api.sendMessage(helpMessage, threadID, messageID);
    }

    const command = target[0].toLowerCase();

    switch (command) {
      case "mine":
        if (player.energy === undefined || player.energy === null) {
          player.energy = CONFIG.energySystem.maxEnergy;
          player.lastEnergyUpdate = Date.now();
        }
        updatePlayerEnergy(player);

        if (player.energy < CONFIG.energySystem.miningCost) {
          const timeToRecover =
            Math.ceil(
              (CONFIG.energySystem.miningCost - player.energy) /
              CONFIG.energySystem.recoveryRate
            ) *
            (CONFIG.energySystem.recoveryInterval / 1000 / 60);

          return api.sendMessage(
            `‚ö° NƒÇNG L∆Ø·ª¢NG KH√îNG ƒê·ª¶! ‚ö°\n\n` +
            `üîã NƒÉng l∆∞·ª£ng hi·ªán t·∫°i: ${player.energy}/${CONFIG.energySystem.maxEnergy}\n` +
            `‚è≥ Th·ªùi gian h·ªìi ph·ª•c: ~${timeToRecover} ph√∫t\n\n` +
            "üí° M·∫πo: N√¢ng c·∫•p cooling ƒë·ªÉ gi·∫£m ti√™u hao nƒÉng l∆∞·ª£ng!",
            threadID,
            messageID
          );
        }

        player.energy -=
          CONFIG.energySystem.miningCost * (1 - player.upgrades.cooling * 0.05);
        player.lastEnergyUpdate = Date.now();

        if (player.miner.durability <= 0) {
          const repairCost = Math.ceil(
            CONFIG.baseMiner.repairCost * (1 + player.upgrades.power * 0.2)
          );
          return api.sendMessage(
            "üîß M√°y ƒë√†o c·ªßa b·∫°n ƒë√£ h·ªèng!\n" +
            `üí∞ Chi ph√≠ s·ª≠a ch·ªØa: ${repairCost}$\n` +
            "S·ª≠ d·ª•ng: .coin repair ƒë·ªÉ s·ª≠a m√°y",
            threadID,
            messageID
          );
        }
        setInterval(() => {
          try {
              updateNPCActivities();
              updateNPCMiners();
              updateCirculationNPC(miningData, marketData);
              saveData(miningData, marketData);
          } catch (error) {
              console.error("[NPC UPDATE ERROR]", error);
          }
      }, 5 * 60 * 1000);
      setInterval(() => {
        try {
            const totalSupply = CONFIG.coinLimit.currentSupply;
            const totalHeld = Object.values(miningData).reduce((sum, p) => sum + p.coins, 0);
            const circulationRatio = (totalSupply - totalHeld) / totalSupply;
    
            if (circulationRatio < 0.1) { 
                CONFIG.npcPlayers.groups.forEach(group => {
                    if (group.type === "Investor") {
                        group.behavior.buyThreshold *= 0.8; 
                        group.behavior.sellThreshold *= 1.2; 
                    }
                });
            }
        } catch (error) {
            console.error("[MARKET CHECK ERROR]", error);
        }
    }, 15 * 60 * 1000); 
        const miningSuccess = Math.random() < calculateMiningSuccess(player);
        if (miningSuccess) {
          let eventBonus = 1;
          let eventName = null;

          const blockReward = attemptBlockMining(
            player,
            calculateMiningSuccess(player),
            miningData
          );

          if (blockReward > 0) {
          }

          if (
            CONFIG.miningEvents.activeEvent &&
            Date.now() < CONFIG.miningEvents.activeEvent.endTime
          ) {
            eventBonus = CONFIG.miningEvents.activeEvent.bonus || 1;
            eventName = CONFIG.miningEvents.activeEvent.name;
          }

          let poolBonus = 0;
          if (player.settings?.inPool) {
            poolBonus = joinPool(player, player.settings.poolId);
          }

          const isCritical =
            Math.random() < CONFIG.miningSuccess.criticalChance;
          let reward = calculateMiningReward(player, isCritical);

          const rareResource = checkRareResources(player);
          const expGained = Math.floor(reward * 0.1);
          const leveledUp = updateMinerLevel(player, expGained);

          const minerLevelBonus = player.minerLevel?.bonuses?.rewardBonus || 0;
          const totalBonus = eventBonus * (1 + poolBonus + minerLevelBonus);
          reward = Math.floor(reward * totalBonus);

          let eventmessage = [];
          if (eventName) {
            eventmessage.push(
              `üåü S·ª± ki·ªán ${eventName} ƒëang di·ªÖn ra! x${eventBonus} ph·∫ßn th∆∞·ªüng!`
            );
          }
          if (poolBonus > 0) {
            eventmessage.push(
              `üë• Mining Pool Bonus: +${poolBonus * 100}% ph·∫ßn th∆∞·ªüng`
            );
          }
          if (rareResource) {
            eventmessage.push(`üíé ƒê√†o ƒë∆∞·ª£c ${rareResource.name} qu√Ω hi·∫øm!`);
          }
          if (leveledUp) {
            eventmessage.push(`üèÜ Th·ª£ m·ªè l√™n c·∫•p ${player.minerLevel.level}!`);
          }

          player.coins += reward;
          player.stats.totalMined += reward;
          player.stats.successfulMines++;
          CONFIG.coinLimit.currentSupply += reward;

          if (!player.minedCoins) player.minedCoins = [];
          player.minedCoins.push({
            amount: reward,
            timestamp: Date.now(),
          });

          const eventMessages = isCritical
            ? CONFIG.baseMiner.miningEvents.critical
            : CONFIG.baseMiner.miningEvents.normal;
          const eventMessage =
            eventMessages[Math.floor(Math.random() * eventMessages.length)];

          let message = [
            `${eventMessage}\n`,
            isCritical ? "‚ú® CRITICAL HIT! x2 REWARDS ‚ú®" : "",
            `üíé ƒê√†o ƒë∆∞·ª£c: ${reward} LCoin`,
            `üí∞ Gi√° tr·ªã: ${Math.floor(reward * marketData.price)}$`,
            `üíé T·ªïng coin: ${player.coins}`,
            `üîã ƒê·ªô b·ªÅn m√°y: ${Math.round(player.miner.durability)}%`,
            `‚ö° NƒÉng l∆∞·ª£ng: ${Math.floor(player.energy)}/${CONFIG.energySystem.maxEnergy} (c√≤n ${Math.floor(player.energy / CONFIG.energySystem.miningCost)} l·∫ßn ƒë√†o)`,
            `‚ö° Hi·ªáu su·∫•t: ${Math.round(
              calculateMiningSuccess(player) * 100
            )}%`,
          ]
            .filter(Boolean)
            .join("\n");

          player.miningStreak = (player.miningStreak || 0) + 1;
          if (player.miningStreak >= 5) {
            const streakBonus = Math.floor(reward * 0.1);
            player.coins += streakBonus;
            message +=
              `\n\nüî• MINING STREAK x${player.miningStreak}!\n` +
              `‚ú® Bonus: +${streakBonus} LCoin`;
          }

          if (player.settings && player.settings.autoSell && reward > 0) {
            const sellValue = calculateSellValue(
              player,
              reward,
              marketData.price
            );
            player.coins -= reward;
            await updateBalance(senderID, sellValue);

            if (player.quests.daily.type === "market") {
              player.quests.daily.progress++;
            }

            message +=
              "\n\n" +
              [
                "üîÑ T·ª∞ ƒê·ªòNG B√ÅN COIN üîÑ",
                `üì§ ƒê√£ b√°n: ${reward} LCoin`,
                `üíµ Nh·∫≠n ƒë∆∞·ª£c: ${sellValue}$`,
                `üíé LCoin c√≤n l·∫°i: ${player.coins}`,
              ].join("\n");
          }

          api.sendMessage(message, threadID, messageID);
        } else {
          player.stats.failedMines++;
          player.miningStreak = 0;

          const failMessage =
            CONFIG.baseMiner.miningEvents.fail[
            Math.floor(
              Math.random() * CONFIG.baseMiner.miningEvents.fail.length
            )
            ];

          api.sendMessage(
            `‚ùå ${failMessage}\n\n` +
            "üìù Nguy√™n nh√¢n c√≥ th·ªÉ do:\n" +
            "- M√°y ƒë√†o qu√° n√≥ng\n" +
            "- Hi·ªáu su·∫•t th·∫•p\n" +
            "- Thi·∫øu may m·∫Øn\n\n" +
            `‚ö° NƒÉng l∆∞·ª£ng: ${Math.floor(player.energy)}/${CONFIG.energySystem.maxEnergy} (c√≤n ${Math.floor(player.energy / CONFIG.energySystem.miningCost)} l·∫ßn ƒë√†o)\n` +
            "üí° M·∫πo: N√¢ng c·∫•p cooling ƒë·ªÉ tƒÉng t·ª∑ l·ªá th√†nh c√¥ng!",
            threadID,
            messageID
          );
        }

        const durabilityLoss =
          CONFIG.baseMiner.consumption * (1 - player.upgrades.cooling * 0.05);
        player.miner.durability = Math.max(
          0,
          player.miner.durability - durabilityLoss
        );
        player.lastMining = Date.now();
        break;

      case "repair":
        if (player.miner.durability >= CONFIG.baseMiner.maxDurability) {
          return api.sendMessage(
            "‚úÖ M√°y ƒë√†o c·ªßa b·∫°n v·∫´n c√≤n t·ªët!",
            threadID,
            messageID
          );
        }

        const repairCost = Math.ceil(
          CONFIG.baseMiner.repairCost * (1 + player.upgrades.power * 0.2)
        );
        const balance = await getBalance(senderID);

        if (balance < repairCost) {
          return api.sendMessage(
            `‚ùå B·∫°n c·∫ßn ${repairCost} $ ƒë·ªÉ s·ª≠a m√°y!`,
            threadID,
            messageID
          );
        }

        await updateBalance(senderID, -repairCost);
        player.miner.durability = CONFIG.baseMiner.maxDurability;

        api.sendMessage(
          "üîß S·ª≠a ch·ªØa m√°y th√†nh c√¥ng!\n" +
          `üí∞ Chi ph√≠: ${repairCost} $\n` +
          "‚úÖ ƒê√£ ph·ª•c h·ªìi ƒë·ªô b·ªÅn v·ªÅ 100%",
          threadID,
          messageID
        );
        break;
        function ensureSpecialUpgrades(player) {
          if (!player.specialUpgrades) {
            player.specialUpgrades = {};
          }
          return player;
        }
      case "info":
        ensureSpecialUpgrades(player);
        const efficiency = Math.round(
          (1 + player.upgrades.efficiency * 0.15) * 100
        );
        const power = Math.round((1 + player.upgrades.power * 0.2) * 100);
        const cooling = Math.round((1 + player.upgrades.cooling * 0.1) * 100);
        const successRate = Math.round(calculateMiningSuccess(player) * 100);
        const minerLevelInfo = player.minerLevel
          ? `üèÜ C·∫•p ƒë·ªô th·ª£ m·ªè: ${player.minerLevel.level}\n` +
          `‚≠ê Kinh nghi·ªám: ${player.minerLevel.experience}/${player.minerLevel.requiredExp}\n` +
          `‚è±Ô∏è Gi·∫£m th·ªùi gian ch·ªù: ${player.minerLevel.bonuses.cooldownReduction}%\n` +
          `üéØ TƒÉng t·ª∑ l·ªá critical: ${player.minerLevel.bonuses.criticalChance * 100
          }%\n` +
          `üí∞ TƒÉng ph·∫ßn th∆∞·ªüng: ${player.minerLevel.bonuses.rewardBonus * 100
          }%\n\n`
          : "";

        const resourcesInfo = player.resources
          ? "üíé T√ÄI NGUY√äN QU√ù HI·∫æM:\n" +
          Object.entries(player.resources)
            .map(([id, count]) => {
              const resource = CONFIG.rareResources.types.find(
                (r) => r.id === id
              );
              return `${resource.name}: ${count} (Gi√° tr·ªã: ${resource.value * count
                })`;
            })
            .join("\n") +
          "\n\n"
          : "";

        const nextPowerCost =
          CONFIG.upgradeCosts.power[player.upgrades.power] || "ƒê√£ t·ªëi ƒëa";
        const nextEfficiencyCost =
          CONFIG.upgradeCosts.efficiency[player.upgrades.efficiency] ||
          "ƒê√£ t·ªëi ƒëa";
        const nextCoolingCost =
          CONFIG.upgradeCosts.cooling[player.upgrades.cooling] || "ƒê√£ t·ªëi ƒëa";

        const totalInvestment = Object.entries(player.upgrades).reduce(
          (total, [type, level]) => {
            return (
              total +
              Array(level)
                .fill()
                .reduce((sum, _, i) => sum + CONFIG.upgradeCosts[type][i], 0)
            );
          },
          0
        );
        const gpuInfo = player.specialUpgrades.gpu ?
          `üéÆ GPU: ${player.specialUpgrades.gpu.modelName} (x${player.specialUpgrades.gpu.bonus} hi·ªáu su·∫•t)\n` : "";

        const coolingInfo = player.specialUpgrades.coolingsystem ?
          `üßä H·ªá th·ªëng l√†m m√°t: ${player.specialUpgrades.coolingsystem.modelName}\n` : "";

        const estimatedValue = Math.round(player.coins * marketData.price);
        const playerHashrate = calculatePlayerHashrate(player);
        api.sendMessage(
          "üåü TH√îNG TIN M√ÅY ƒê√ÄO LCOIN üåü\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          "‚öôÔ∏è TH√îNG S·ªê M√ÅY ƒê√ÄO:\n" +
          `‚ö° C√¥ng su·∫•t: ${power}% (C·∫•p ${player.upgrades.power}/10)\n` +
          `üìä Hi·ªáu su·∫•t: ${efficiency}% (C·∫•p ${player.upgrades.efficiency}/10)\n` +
          `‚ùÑÔ∏è L√†m m√°t: ${cooling}% (C·∫•p ${player.upgrades.cooling}/10)\n` +
          (gpuInfo ? gpuInfo : "") +
          (coolingInfo ? coolingInfo : "") +
          `üéØ T·ª∑ l·ªá th√†nh c√¥ng: ${successRate}%\n` +
          `‚õèÔ∏è Hashrate: ${formatNumber(playerHashrate)} H/s\n` +
          `üîã NƒÉng l∆∞·ª£ng: ${player.energy}/${CONFIG.energySystem.maxEnergy}\n` +
          `üîã ƒê·ªô b·ªÅn: ${Math.round(player.miner.durability)}%\n\n` +
          (minerLevelInfo ? "üèÜ TH√îNG TIN C·∫§P ƒê·ªò:\n" + minerLevelInfo : "") +
          "üí∞ TH√îNG TIN T√ÄI CH√çNH:\n" +
          `üíé S·ªë LCoin: ${player.coins} (‚âà ${estimatedValue}$)\n` +
          `üíµ T·ªïng ƒë·∫ßu t∆∞: ${totalInvestment}$\n\n` +
          "üìà TH·ªêNG K√ä ƒê√ÄO COIN:\n" +
          `üíé T·ªïng ƒë√£ ƒë√†o: ${player.stats.totalMined}\n` +
          `‚úÖ Th√†nh c√¥ng: ${player.stats.successfulMines}\n` +
          `‚ùå Th·∫•t b·∫°i: ${player.stats.failedMines}\n` +
          `‚öúÔ∏è T·ª∑ l·ªá: ${Math.round(
            (player.stats.successfulMines /
              (player.stats.successfulMines + player.stats.failedMines ||
                1)) *
            100
          )}%\n\n` +
          (resourcesInfo || "") +
          "üîÑ N√ÇNG C·∫§P TI·∫æP THEO:\n" +
          `‚ö° Power: ${nextPowerCost}$\n` +
          `üìä Efficiency: ${nextEfficiencyCost}$\n` +
          `‚ùÑÔ∏è Cooling: ${nextCoolingCost}$\n\n` +
          "‚öôÔ∏è C√ÄI ƒê·∫∂T:\n" +
          `üîÑ T·ª± ƒë·ªông b√°n: ${player.settings?.autoSell ? "B·∫≠t ‚úÖ" : "T·∫Øt ‚ùå"
          }\n` +
          `üíé Gi√° LCoin hi·ªán t·∫°i: ${marketData.price}$\n\n` +
          "üí° M·∫πo: N√¢ng c·∫•p ƒë·ªìng b·ªô c√°c ch·ªâ s·ªë s·∫Ω mang l·∫°i hi·ªáu qu·∫£ t·ªët nh·∫•t!",
          threadID,
          messageID
        );
        break;

      case "upgrade": {
        let msg = "üîß N√ÇNG C·∫§P THI·∫æT B·ªä üîß\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

        if (!target[1]) {
          // Hi·ªÉn th·ªã th√¥ng tin n√¢ng c·∫•p c∆° b·∫£n
          msg += "‚öôÔ∏è N√ÇNG C·∫§P C∆† B·∫¢N:\n";
          ["power", "efficiency", "cooling"].forEach((type, i) => {
            const level = player.upgrades[type] || 0;
            const nextCost = CONFIG.upgradeCosts[type][level];
            const emoji = ["‚ö°", "üìä", "‚ùÑÔ∏è"][i];
            msg += `${emoji} ${type.charAt(0).toUpperCase() + type.slice(1)}: C·∫•p ${level}/10\n`;
            msg += nextCost ? `üí∞ N√¢ng c·∫•p: ${nextCost.toLocaleString()}$\n` : "‚ú® ƒê√£ t·ªëi ƒëa\n";
            msg += "\n";
          });

          // Hi·ªÉn th·ªã thi·∫øt b·ªã ƒë·∫∑c bi·ªát 
          msg += "\nüìå THI·∫æT B·ªä ƒê·∫∂C BI·ªÜT:\n";
          ["gpu", "cooler", "ram"].forEach((type, i) => {
            const current = player.specialUpgrades?.[type];
            const emoji = ["üéÆ", "üå°Ô∏è", "üíæ"][i];
            msg += `${emoji} ${type.toUpperCase()}: ${current?.modelName || "Ch∆∞a c√≥"}\n`;
            if (current?.bonus) msg += `‚ö° Hi·ªáu su·∫•t: x${current.bonus}\n`;
            msg += "\n";
          });

          msg += "\nüí° H∆Ø·ªöNG D·∫™N:\n";
          msg += "‚Ä¢ .coin upgrade [1-3] - N√¢ng c·∫•p c∆° b·∫£n\n";
          msg += "‚Ä¢ .coin upgrade [4-6] [s·ªë model] - Mua thi·∫øt b·ªã\n";
          msg += "‚Ä¢ .coin upgrade list - Xem danh s√°ch\n";

          return api.sendMessage(msg, threadID, messageID);
        }

        // Xem danh s√°ch thi·∫øt b·ªã
        if (target[1] === "list") {
          const type = parseInt(target[2]);

          if (!type) {
            msg = "üìã DANH S√ÅCH THI·∫æT B·ªä üìã\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
            msg += "1Ô∏è‚É£ Power (‚ö° TƒÉng s·ª©c m·∫°nh ƒë√†o)\n";
            msg += "2Ô∏è‚É£ Efficiency (üìä TƒÉng hi·ªáu su·∫•t)\n";
            msg += "3Ô∏è‚É£ Cooling (‚ùÑÔ∏è Gi·∫£m ti√™u hao)\n";
            msg += "4Ô∏è‚É£ GPU (üéÆ TƒÉng m·∫°nh s·ª©c m·∫°nh)\n";
            msg += "5Ô∏è‚É£ Cooling System (üå°Ô∏è TƒÉng hi·ªáu qu·∫£ l√†m m√°t)\n";
            msg += "6Ô∏è‚É£ RAM (üíæ TƒÉng x·ª≠ l√Ω)\n\n";
            msg += "üëâ .coin upgrade list [1-6] ƒë·ªÉ xem chi ti·∫øt";
            return api.sendMessage(msg, threadID, messageID);
          }

          // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng lo·∫°i
          if (type >= 4) {
            const component = CONFIG.upgradeSystem.componentTypes[type - 1];
            if (!component) return api.sendMessage("‚ùå Lo·∫°i thi·∫øt b·ªã kh√¥ng h·ª£p l·ªá!", threadID, messageID);

            msg = `üìã DANH S√ÅCH ${component.label.toUpperCase()} üìã\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

            component.models.forEach((model, i) => {
              const owned = player.specialUpgrades?.[component.name]?.modelName === model.name;
              msg += `${i + 1}. ${owned ? "‚úÖ " : ""}${model.name}\n`;
              msg += `‚ö° Hi·ªáu su·∫•t: x${model.bonus}\n`;
              msg += `üí∞ Gi√°: ${model.price.toLocaleString()}$\n\n`;
            });

            msg += `üí° Mua: .coin upgrade ${type} [s·ªë th·ª© t·ª±]`;
            return api.sendMessage(msg, threadID, messageID);
          }
        }

        // X·ª≠ l√Ω mua/n√¢ng c·∫•p
        const componentId = parseInt(target[1]);
        const modelIndex = parseInt(target[2]);

        if (isNaN(componentId) || componentId < 1 || componentId > 6) {
          return api.sendMessage("‚ùå Lo·∫°i n√¢ng c·∫•p kh√¥ng h·ª£p l·ªá!", threadID, messageID);
        }

        const balance = await getBalance(senderID);

        // N√¢ng c·∫•p c∆° b·∫£n
        if (componentId <= 3) {
          const types = ["power", "efficiency", "cooling"];
          const type = types[componentId - 1];
          const level = player.upgrades[type] || 0;

          if (level >= 10) {
            return api.sendMessage(`‚ùå ${type} ƒë√£ ƒë·∫°t c·∫•p t·ªëi ƒëa!`, threadID, messageID);
          }

          const cost = CONFIG.upgradeCosts[type][level];
          if (balance < cost) {
            return api.sendMessage(`‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${cost.toLocaleString()}$`, threadID, messageID);
          }

          await updateBalance(senderID, -cost);
          player.upgrades[type]++;

          return api.sendMessage(
            `‚úÖ N√¢ng c·∫•p th√†nh c√¥ng!\n\n` +
            `‚öôÔ∏è ${type}: C·∫•p ${level} ‚Üí ${level + 1}\n` +
            `üí∞ Chi ph√≠: ${cost.toLocaleString()}$`,
            threadID, messageID
          );
        }

        // Mua thi·∫øt b·ªã ƒë·∫∑c bi·ªát
        const component = CONFIG.upgradeSystem.componentTypes[componentId - 1];
        if (!component?.models || !component.models[modelIndex - 1]) {
          return api.sendMessage("‚ùå Thi·∫øt b·ªã kh√¥ng h·ª£p l·ªá!", threadID, messageID);
        }

        const model = component.models[modelIndex - 1];
        if (balance < model.price) {
          return api.sendMessage(
            `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${model.name}!\n` +
            `üí∞ Gi√°: ${model.price.toLocaleString()}$\n` +
            `üíµ C√≤n thi·∫øu: ${(model.price - balance).toLocaleString()}$`,
            threadID, messageID
          );
        }

        await updateBalance(senderID, -model.price);

        if (!player.specialUpgrades) player.specialUpgrades = {};
        const oldModel = player.specialUpgrades[component.name]?.modelName || "Ch∆∞a c√≥";

        player.specialUpgrades[component.name] = {
          modelName: model.name,
          bonus: model.bonus
        };

        return api.sendMessage(
          `‚úÖ MUA THI·∫æT B·ªä TH√ÄNH C√îNG!\n\n` +
          `${component.emoji} ${component.label}: ${oldModel} ‚Üí ${model.name}\n` +
          `‚ö° Hi·ªáu su·∫•t: x${model.bonus}\n` +
          `üí∞ Chi ph√≠: ${model.price.toLocaleString()}$`,
          threadID, messageID
        );

        break;
      }
      case "halving":
      case "halvings":
        if (HALVING_EVENTS.length === 0) {
          return api.sendMessage(
            "üìä L·ªäCH S·ª¨ HALVING üìä\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "Ch∆∞a c√≥ s·ª± ki·ªán halving n√†o x·∫£y ra.\n" +
            `‚õìÔ∏è Block hi·ªán t·∫°i: #${CONFIG.blockReward.blockHeight}\n` +
            `üí∞ Ph·∫ßn th∆∞·ªüng hi·ªán t·∫°i: ${CONFIG.blockReward.current} LCoin\n` +
            `‚è≥ Block ƒë·∫øn halving ti·∫øp theo: ${210000 - (CONFIG.blockReward.blockHeight % 210000)
            }`,
            threadID,
            messageID
          );
        }

        let halvingMessage =
          "üìä L·ªäCH S·ª¨ HALVING üìä\n" + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

        HALVING_EVENTS.forEach((event, index) => {
          const date = new Date(event.timestamp).toLocaleDateString("vi-VN");
          halvingMessage +=
            `üåü HALVING #${index + 1} - ${date}\n` +
            `üßä Block: #${event.blockHeight}\n` +
            `üí∞ Ph·∫ßn th∆∞·ªüng: ${event.previousReward} ‚Üí ${event.newReward} LCoin\n` +
            `üìâ Gi·∫£m: -${(
              (1 - event.newReward / event.previousReward) *
              100
            ).toFixed(0)}%\n\n`;
        });

        halvingMessage +=
          `‚õìÔ∏è Block hi·ªán t·∫°i: #${CONFIG.blockReward.blockHeight}\n` +
          `üí∞ Ph·∫ßn th∆∞·ªüng hi·ªán t·∫°i: ${CONFIG.blockReward.current} LCoin\n` +
          `‚è≥ Block ƒë·∫øn halving ti·∫øp theo: ${210000 - (CONFIG.blockReward.blockHeight % 210000)
          }`;

        api.sendMessage(halvingMessage, threadID, messageID);
        break;
      case "pool":
        const poolAction = target[1]?.toLowerCase();

        if (
          !poolAction ||
          !["join", "leave", "info", "create"].includes(poolAction)
        ) {
          return api.sendMessage(
            "üë• MINING POOL üë•\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üí° ƒê√†o theo nh√≥m - TƒÉng c∆° h·ªôi ƒë√†o block!\n\n" +
            "üìå C√°c l·ªánh c√≥ s·∫µn:\n" +
            "‚Ä¢ .coin pool join - Tham gia pool\n" +
            "‚Ä¢ .coin pool leave - R·ªùi kh·ªèi pool\n" +
            "‚Ä¢ .coin pool info - Xem th√¥ng tin pool\n\n" +
            "‚ÑπÔ∏è Khi tham gia pool:\n" +
            `‚Ä¢ Ph√≠ tham gia: ${(CONFIG.miningPools.poolFee * 100).toFixed(
              0
            )}%\n` +
            `‚Ä¢ Th∆∞·ªüng th√™m: +${(CONFIG.miningPools.bonusReward * 100).toFixed(
              0
            )}%\n` +
            "‚Ä¢ Ph·∫ßn th∆∞·ªüng chia theo hashrate ƒë√≥ng g√≥p",
            threadID,
            messageID
          );
        }

        if (poolAction === "join") {
          if (player.settings?.inPool) {
            return api.sendMessage(
              "‚ùå B·∫°n ƒë√£ ·ªü trong pool r·ªìi!",
              threadID,
              messageID
            );
          }

          player.settings = player.settings || {};
          player.settings.inPool = true;
          player.settings.poolFee = CONFIG.miningPools.poolFee;
          player.settings.joinedPool = Date.now();

          api.sendMessage(
            "‚úÖ THAM GIA MINING POOL TH√ÄNH C√îNG!\n\n" +
            `üë• Th√†nh vi√™n: ${Object.values(miningData).filter((p) => p.settings?.inPool)
              .length
            }/${CONFIG.miningPools.maxPoolSize}\n` +
            `üí∞ Ph√≠ pool: ${(CONFIG.miningPools.poolFee * 100).toFixed(
              0
            )}%\n` +
            `üéÅ Bonus ph·∫ßn th∆∞·ªüng: +${(
              CONFIG.miningPools.bonusReward * 100
            ).toFixed(0)}%\n\n` +
            "üí° Ph·∫ßn th∆∞·ªüng block s·∫Ω ƒë∆∞·ª£c chia theo % hashrate ƒë√≥ng g√≥p",
            threadID,
            messageID
          );
        } else if (poolAction === "leave") {
          if (!player.settings?.inPool) {
            return api.sendMessage(
              "‚ùå B·∫°n kh√¥ng trong pool n√†o c·∫£!",
              threadID,
              messageID
            );
          }

          player.settings.inPool = false;
          api.sendMessage(
            "‚úÖ B·∫°n ƒë√£ r·ªùi kh·ªèi mining pool!",
            threadID,
            messageID
          );
        } else if (poolAction === "info") {
          const poolMembers = Object.values(miningData).filter(
            (p) => p.settings?.inPool
          );
          const totalPoolHashrate = poolMembers.reduce(
            (sum, p) => sum + calculatePlayerHashrate(p),
            0
          );
          const playerInPool = player.settings?.inPool;
          const playerSharePercent = playerInPool
            ? (
              (calculatePlayerHashrate(player) / totalPoolHashrate) *
              100
            ).toFixed(2)
            : 0;

          return api.sendMessage(
            "üë• TH√îNG TIN MINING POOL üë•\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üßë‚Äçü§ù‚Äçüßë Th√†nh vi√™n: ${poolMembers.length}/${CONFIG.miningPools.maxPoolSize}\n` +
            `‚õèÔ∏è T·ªïng hashrate: ${formatNumber(totalPoolHashrate)}\n` +
            `üí∞ Ph√≠ pool: ${(CONFIG.miningPools.poolFee * 100).toFixed(
              0
            )}%\n` +
            `üéÅ Bonus: +${(CONFIG.miningPools.bonusReward * 100).toFixed(
              0
            )}%\n\n` +
            (playerInPool
              ? `‚úÖ B·∫°n ƒëang trong pool\n` +
              `üî¢ Hashrate: ${formatNumber(
                calculatePlayerHashrate(player)
              )}\n` +
              `üìä Ph·∫ßn trƒÉm ƒë√≥ng g√≥p: ${playerSharePercent}%\n`
              : "‚ùå B·∫°n kh√¥ng trong pool\n" +
              "üí° D√πng .coin pool join ƒë·ªÉ tham gia"),
            threadID,
            messageID
          );
        }
        break;

      case "check":
      case "market":
        const priceChange =
          marketData.history.length > 0
            ? (
              ((marketData.price - marketData.history[0].price) /
                marketData.history[0].price) *
              100
            ).toFixed(2)
            : "0.00";
        const marketPeriod =
          target[1] &&
            ["45p", "1h", "4h", "6h", "12h", "24h"].includes(target[1])
            ? target[1]
            : "45p";

        const trend = priceChange > 0 ? "‚ÜóÔ∏è" : priceChange < 0 ? "‚ÜòÔ∏è" : "‚û°Ô∏è";
        const sentiment =
          priceChange > 5
            ? "R·∫•t t√≠ch c·ª±c üöÄ"
            : priceChange > 2
              ? "T√≠ch c·ª±c üìà"
              : priceChange < -5
                ? "R·∫•t ti√™u c·ª±c üìâ"
                : priceChange < -2
                  ? "Ti√™u c·ª±c üîª"
                  : "·ªîn ƒë·ªãnh üìä";

        let highPrice = marketData.price;
        let lowPrice = marketData.price;
        if (marketData.history.length > 0) {
          const last24h = marketData.history.slice(-24);
          highPrice = Math.max(
            ...last24h.map((h) => h.price),
            marketData.price
          );
          lowPrice = Math.min(...last24h.map((h) => h.price), marketData.price);
        }

        const supplyRatio = (
          (CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply) *
          100
        ).toFixed(2);
        const availableSupply =
          CONFIG.coinLimit.maxSupply - CONFIG.coinLimit.currentSupply;
        const difficulty = calculateMiningDifficulty();
        const rewardMultiplier = calculateRewardMultiplier();

        const blockMinedPerDay =
          86400 / (CONFIG.blockReward.targetBlockTime / 1000);
        const blocksLeft = CONFIG.blockReward.blockHeight % 210000;
        const blocksUntilHalving = 210000 - blocksLeft;
        const estimatedDaysToHalving = Math.ceil(
          blocksUntilHalving / blockMinedPerDay
        );

        const tradingTip =
          priceChange > 3
            ? "N√™n xem x√©t b√°n ƒë·ªÉ l·∫•y l·ª£i nhu·∫≠n üí∞"
            : priceChange < -3
              ? "C√≥ th·ªÉ l√† th·ªùi ƒëi·ªÉm t·ªët ƒë·ªÉ mua v√†o üîç"
              : "Th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh, theo d√µi th√™m üëÄ";
        const timeSinceLastBlock =
          (Date.now() - CONFIG.blockReward.lastBlockTime) / 1000;
        const marketMessage =
          "üìä TH·ªä TR∆Ø·ªúNG LCOIN üìä\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `üíé Gi√°: ${marketData.price}$ ${trend} (${priceChange}%)\n` +
          `üìà Xu h∆∞·ªõng: ${sentiment}\n` +
          `‚¨ÜÔ∏è H: ${highPrice}$ | ‚¨áÔ∏è L: ${lowPrice}$\n\n` +

          "‚õìÔ∏è BLOCKCHAIN:\n" +
          `‚Ä¢ Block: #${CONFIG.blockReward.blockHeight}\n` +
          `‚Ä¢ Ph·∫ßn th∆∞·ªüng: ${CONFIG.blockReward.current} LC\n` +
          `‚Ä¢ ƒê·∫øn halving: ${blocksUntilHalving.toLocaleString()}\n` +
          `‚Ä¢ Hashrate: ${formatNumber(calculateTotalNetworkPower(miningData))}\n\n` +

          "üìà T·ªîNG QUAN:\n" +
          `‚Ä¢ ƒê√£ ƒë√†o: ${(CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply * 100).toFixed(1)}%\n` +
          `‚Ä¢ Giao d·ªãch: ${formatNumber(CONFIG.market.tradingVolume.totalVolume)}\n` +
          `‚Ä¢ ƒê·ªô kh√≥: x${difficulty.toFixed(1)}\n` +
          `‚Ä¢ Ph·∫ßn th∆∞·ªüng: x${rewardMultiplier.toFixed(2)}\n\n` +

          `üí° Nh·∫≠n ƒë·ªãnh: ${tradingTip}\n` +
          `üìå C·∫≠p nh·∫≠t sau: ${Math.ceil((CONFIG.market.updateInterval - (Date.now() - marketData.lastUpdate)) / 1000)}s`;

        if (marketData.history.length < 2) {
          return api.sendMessage(
            marketMessage + "\n\n‚ö†Ô∏è Ch∆∞a ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì!",
            threadID,
            messageID
          );
        }

        const marketChartResult = await generatePriceChart(
          marketData,
          marketPeriod
        );

        if (!marketChartResult.success) {
          return api.sendMessage(marketMessage, threadID, messageID);
        }

        api.sendMessage(
          {
            body: marketMessage,
            attachment: fs.createReadStream(marketChartResult.chartPath),
          },
          threadID,
          messageID
        );

        setTimeout(() => {
          try {
            if (fs.existsSync(marketChartResult.chartPath)) {
              fs.unlinkSync(marketChartResult.chartPath);
            }
          } catch (err) {
            console.error("Error deleting chart file:", err);
          }
        }, 10000);
        break;

      case "chart":
        const period = target[1] || "45p";
        if (!["45p", "1h", "4h", "6h", "12h", "24h"].includes(period)) {
          return api.sendMessage(
            "‚ùå Kho·∫£ng th·ªùi gian kh√¥ng h·ª£p l·ªá!\n" +
            "S·ª≠ d·ª•ng: .coin chart [45p/1h/4h/6h/12h/24h]",
            threadID,
            messageID
          );
        }

        if (marketData.history.length < 2) {
          return api.sendMessage(
            "‚ö†Ô∏è Ch∆∞a ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì!\n" +
            "Vui l√≤ng ch·ªù m·ªôt th·ªùi gian ƒë·ªÉ h·ªá th·ªëng thu th·∫≠p d·ªØ li·ªáu.",
            threadID,
            messageID
          );
        }

        const chartResult = await generatePriceChart(marketData, period);
        if (!chartResult.success) {
          return api.sendMessage(
            `‚ùå ${chartResult.message}`,
            threadID,
            messageID
          );
        }

        const changeEmoji = chartResult.priceChange >= 0 ? "üìà" : "üìâ";
        const chartMessage =
          "üìä BI·ªÇU ƒê·ªí GI√Å COIN üìä\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `${changeEmoji} Gi√° hi·ªán t·∫°i: ${marketData.price} $\n` +
          `‚ÜïÔ∏è Bi·∫øn ƒë·ªông: ${chartResult.priceChange >= 0 ? "+" : ""}${chartResult.priceChange
          } $ (${chartResult.changePercent}%)\n` +
          `üî∫ Cao nh·∫•t: ${chartResult.highPrice} $\n` +
          `üîª Th·∫•p nh·∫•t: ${chartResult.lowPrice} $\n\n` +
          `‚è∞ C·∫≠p nh·∫≠t: ${new Date().toLocaleString("vi-VN")}`;

        api.sendMessage(
          {
            body: chartMessage,
            attachment: fs.createReadStream(chartResult.chartPath),
          },
          threadID,
          messageID
        );

        setTimeout(() => {
          try {
            if (fs.existsSync(chartResult.chartPath)) {
              fs.unlinkSync(chartResult.chartPath);
            }
          } catch (err) {
            console.error("Error deleting chart file:", err);
          }
        }, 10000);
        break;

      case "market history":
        if (marketData.history.length === 0) {
          return api.sendMessage(
            "‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ gi√°!",
            threadID,
            messageID
          );
        }

        let historyMsg = "üìú L·ªäCH S·ª¨ GI√Å COIN üìú\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
        const historyEntries = [
          ...marketData.history.slice(-10),
          { price: marketData.price, timestamp: Date.now() },
        ];

        historyEntries.forEach((entry, index) => {
          const time = new Date(entry.timestamp).toLocaleTimeString();
          const prevPrice =
            index > 0 ? historyEntries[index - 1].price : entry.price;
          const changeIcon =
            entry.price > prevPrice
              ? "üìà"
              : entry.price < prevPrice
                ? "üìâ"
                : "üìä";

          historyMsg += `${changeIcon} ${time}: ${entry.price} $\n`;
        });

        historyMsg +=
          "\nüí° S·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh giao d·ªãch kh√¥n ngoan!";
        api.sendMessage(historyMsg, threadID, messageID);
        break;
      case "hash":
      case "hashmine":
        if (!target[1] || target[1] === "menu") {
          const playerHardware = player.hashMiningHardware || 0;
          const hardware = CONFIG.advancedMining.hardware[playerHardware];
          const diffTarget = CONFIG.advancedMining.difficulty.current;
          const networkHashrate = CONFIG.advancedMining.network.hashrate;
          const playerHashrate = hardware ? hardware.hashrate : 50;
          const networkShare = (playerHashrate / networkHashrate) * 100;

          return api.sendMessage(
            "‚õèÔ∏è BITCOIN HASH MINING ‚õèÔ∏è\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üìå C√ÅC L·ªÜNH HI·ªÜN C√ì:\n" +
            "‚Ä¢ .coin hash mine - ƒê√†o b·∫±ng SHA-256\n" +
            "‚Ä¢ .coin hash info - Xem th√¥ng tin hash mining\n" +
            "‚Ä¢ .coin hash upgrade [1-10] - N√¢ng c·∫•p ph·∫ßn c·ª©ng\n" +
            "‚Ä¢ .coin hash pool [1-4] - Tham gia mining pool\n" +
            "‚Ä¢ .coin hash list - Xem danh s√°ch ph·∫ßn c·ª©ng\n\n" +

            "üìä THI·∫æT B·ªä HI·ªÜN T·∫†I:\n" +
            `‚Ä¢ ${hardware ? hardware.name : "CPU Mining"}\n` +
            `‚Ä¢ Hashrate: ${(hardware ? hardware.hashrate : 50).toLocaleString()} H/s\n` +
            `‚Ä¢ Hi·ªáu su·∫•t: ${(hardware ? hardware.efficiency : 0.5).toFixed(1)} H/J\n\n` +

            "üí∞ TH·ªêNG K√ä ƒê√ÄO HASH:\n" +
            `‚Ä¢ Network hashrate: ${formatNumber(networkHashrate)}\n` +
            `‚Ä¢ Ph·∫ßn trƒÉm c·ªßa b·∫°n: ${networkShare.toFixed(6)}%\n` +
            `‚Ä¢ Block hi·ªán t·∫°i: #${CONFIG.blockReward.blockHeight}\n` +
            `‚Ä¢ Ph·∫ßn th∆∞·ªüng: ${CONFIG.blockReward.current} LCoin\n\n` +

            "üëâ D√πng .coin hash mine ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒë√†o!",
            threadID, messageID
          );
        }
        if (target[1] === "upgrade") {

          const hardwareIndex = parseInt(target[2]) - 1;

          if (isNaN(hardwareIndex) || hardwareIndex < 0 || hardwareIndex >= CONFIG.advancedMining.hardware.length) {
            return api.sendMessage(
              "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!\n\n" +
              "S·ª≠ d·ª•ng: .coin hash upgrade [1-5]",
              threadID, messageID
            );
          }

          if (player.hashMiningHardware === hardwareIndex) {
            return api.sendMessage(
              `‚ùå B·∫°n ƒë√£ s·ªü h·ªØu ${CONFIG.advancedMining.hardware[hardwareIndex].name} r·ªìi!`,
              threadID, messageID
            );
          }

          const hardware = CONFIG.advancedMining.hardware[hardwareIndex];
          const balance = await getBalance(senderID);

          if (hardwareIndex === 0) {
            player.hashMiningHardware = 0;

            return api.sendMessage(
              "‚úÖ ƒê√£ chuy·ªÉn v·ªÅ d√πng CPU Mining c∆° b·∫£n!\n\n" +
              "ƒê√¢y l√† ph∆∞∆°ng ph√°p k√©m hi·ªáu qu·∫£ nh·∫•t, nh∆∞ng mi·ªÖn ph√≠.\n" +
              "B·∫°n n√™n n√¢ng c·∫•p l√™n ASIC miner khi c√≥ ƒë·ªß ti·ªÅn.",
              threadID, messageID
            );
          }

          if (balance < hardware.price) {
            return api.sendMessage(
              `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua ${hardware.name}!\n\n` +
              `üí∞ Gi√°: ${hardware.price.toLocaleString()}$\n` +
              `üíµ S·ªë d∆∞: ${balance.toLocaleString()}$\n` +
              `üí∏ C√≤n thi·∫øu: ${(hardware.price - balance).toLocaleString()}$`,
              threadID, messageID
            );
          }

          await updateBalance(senderID, -hardware.price);
          player.hashMiningHardware = hardwareIndex;

          saveData(miningData, marketData);

          return api.sendMessage(
            `‚úÖ MUA TH√ÄNH C√îNG ${hardware.name}!\n\n` +
            `üí∞ Chi ph√≠: ${hardware.price.toLocaleString()}$\n` +
            `‚ö° Hashrate: ${hardware.hashrate.toLocaleString()} H/s\n` +
            `üîå Ti√™u th·ª•: ${hardware.power}W\n` +
            `‚öôÔ∏è Hi·ªáu su·∫•t: ${hardware.efficiency.toFixed(1)} H/J\n\n` +
            `Hashrate c·ªßa b·∫°n ƒë√£ tƒÉng ${hardware.hashrate / (CONFIG.advancedMining.hardware[player.hashMiningHardware || 0].hashrate || 50)}x l·∫ßn!`,
            threadID, messageID
          );
        }
        if (target[1] === "hardware" || target[1] === "list") {
          const hardwareList = CONFIG.advancedMining.hardware;
          let message = "üìã DANH S√ÅCH THI·∫æT B·ªä MINING üìã\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

          message += "üñ•Ô∏è CPU MINING:\n";
          hardwareList.slice(0, 1).forEach((hw, i) => {
            message += `${i + 1}. ${hw.name}\n` +
              `   ‚ö° Hashrate: ${formatNumber(hw.hashrate)} H/s\n` +
              `   üîå ƒêi·ªán: ${hw.power}W\n` +
              `   üí∞ Gi√°: Mi·ªÖn ph√≠\n` +
              `   üìä Hi·ªáu su·∫•t: ${hw.efficiency} H/J\n\n`;
          });

          message += "üéÆ GPU MINING:\n";
          hardwareList.slice(1, 4).forEach((hw, i) => {
            message += `${i + 2}. ${hw.name}\n` +
              `   ‚ö° Hashrate: ${formatNumber(hw.hashrate)} H/s\n` +
              `   üîå ƒêi·ªán: ${hw.power}W\n` +
              `   üí∞ Gi√°: ${formatNumber(hw.price)}$\n` +
              `   üìä Hi·ªáu su·∫•t: ${hw.efficiency} H/J\n\n`;
          });

          message += "üè≠ ASIC MINING:\n";
          hardwareList.slice(4, 7).forEach((hw, i) => {
            message += `${i + 5}. ${hw.name}\n` +
              `   ‚ö° Hashrate: ${formatNumber(hw.hashrate)} H/s\n` +
              `   üîå ƒêi·ªán: ${hw.power}W\n` +
              `   üí∞ Gi√°: ${formatNumber(hw.price)}$\n` +
              `   üìä Hi·ªáu su·∫•t: ${hw.efficiency} H/J\n\n`;
          });

          message += "üëë LEGENDARY MINERS:\n";
          hardwareList.slice(7).forEach((hw, i) => {
            message += `${i + 8}. ${hw.name}\n` +
              `   ‚ö° Hashrate: ${formatNumber(hw.hashrate)} H/s\n` +
              `   üîå ƒêi·ªán: ${hw.power}W\n` +
              `   üí∞ Gi√°: ${formatNumber(hw.price)}$\n` +
              `   üìä Hi·ªáu su·∫•t: ${hw.efficiency} H/J\n\n`;
          });

          message += "üí° Mua: .coin hash upgrade [s·ªë th·ª© t·ª±]\n";
          message += "üìù Th√¥ng tin chi ti·∫øt: .coin hash info";

          return api.sendMessage(message, threadID, messageID);
        }
        if (target[1] === "info") {
          const playerHardware = player.hashMiningHardware || 0;
          const hardware = CONFIG.advancedMining.hardware[playerHardware];
          const poolIndex = player.hashMiningPool || 0;
          const pool = CONFIG.advancedMining.pools[poolIndex];
          const diffTarget = CONFIG.advancedMining.difficulty.current;
          const difficultyBonus = Math.floor(player.upgrades.cooling / 3);
          const effectiveDifficulty = Math.max(1, diffTarget - difficultyBonus);

          const networkHashrate = CONFIG.advancedMining.network.hashrate;
          const playerHashrate = hardware ? hardware.hashrate : 50;
          const networkShare = (playerHashrate / networkHashrate) * 100;
          const successRate = Math.pow(0.5, effectiveDifficulty) * 100;
          const hashesPerBlock = Math.ceil(1 / (successRate / 100));
          const electricityCostPerHour = hardware ? (hardware.power / 1000) * CONFIG.advancedMining.electricityCost : 0;

          const diffBar = "üü©".repeat(Math.min(8, diffTarget)) +
            "üü®".repeat(Math.max(0, Math.min(4, diffTarget - 8))) +
            "üü•".repeat(Math.max(0, diffTarget - 12));

          const expectedSeconds = hashesPerBlock / playerHashrate;
          const expectedTimeStr = expectedSeconds > 86400
            ? `${(expectedSeconds / 86400).toFixed(1)} ng√†y`
            : expectedSeconds > 3600
              ? `${(expectedSeconds / 3600).toFixed(1)} gi·ªù`
              : expectedSeconds > 60
                ? `${(expectedSeconds / 60).toFixed(1)} ph√∫t`
                : `${expectedSeconds.toFixed(1)} gi√¢y`;

          const nextHardware = CONFIG.advancedMining.hardware[playerHardware + 1];
          const upgradeTip = nextHardware
            ? `üí° N√¢ng c·∫•p l√™n ${nextHardware.name} s·∫Ω tƒÉng hashrate ${(nextHardware.hashrate / playerHashrate).toFixed(1)}x\n`
            : "üí° B·∫°n ƒë√£ c√≥ thi·∫øt b·ªã mining t·ªët nh·∫•t!";

          return api.sendMessage(
            "‚õèÔ∏è TH√îNG TIN CHI TI·∫æT HASH MINING ‚õèÔ∏è\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +

            "üîß THI·∫æT B·ªä MINING:\n" +
            `‚Ä¢ Ph·∫ßn c·ª©ng: ${hardware ? hardware.name : "CPU Mining"}\n` +
            `‚Ä¢ Hashrate: ${formatNumber(playerHashrate)} H/s\n` +
            `‚Ä¢ Ti√™u th·ª• ƒëi·ªán: ${hardware ? hardware.power : 100}W (${electricityCostPerHour.toLocaleString()}$/gi·ªù)\n` +
            `‚Ä¢ Hi·ªáu su·∫•t: ${(hardware ? hardware.efficiency : 0.5).toFixed(2)} H/J\n` +
            `‚Ä¢ Pool: ${pool.name} (ph√≠: ${(pool.fee * 100).toFixed(1)}%)\n\n` +

            "üìä TH√îNG S·ªê M·∫†NG L∆Ø·ªöI:\n" +
            `‚Ä¢ Network hashrate: ${formatNumber(networkHashrate)} H/s\n` +
            `‚Ä¢ Ph·∫ßn trƒÉm c·ªßa b·∫°n: ${networkShare.toFixed(6)}%\n` +
            `‚Ä¢ Block hi·ªán t·∫°i: #${CONFIG.blockReward.blockHeight}\n` +
            `‚Ä¢ Ph·∫ßn th∆∞·ªüng: ${CONFIG.blockReward.current} LCoin\n\n` +

            "üéØ ƒê·ªò KH√ì & TH·ªêNG K√ä:\n" +
            `‚Ä¢ Difficulty: ${diffTarget} ${diffBar}\n` +
            `‚Ä¢ Difficulty th·ª±c t·∫ø: ${effectiveDifficulty} (${difficultyBonus > 0 ? `-${difficultyBonus} t·ª´ cooling` : "kh√¥ng gi·∫£m"})\n` +
            `‚Ä¢ X√°c su·∫•t t√¨m block: ${successRate.toExponential(4)}%\n` +
            `‚Ä¢ Hashes c·∫ßn thi·∫øt (trung b√¨nh): ${formatNumber(hashesPerBlock)}\n` +
            `‚Ä¢ Th·ªùi gian d·ª± ki·∫øn: ${expectedTimeStr}\n\n` +

            "üíª SHA-256 MINING INFO:\n" +
            "‚Ä¢ Target: " + "0".repeat(effectiveDifficulty) + "...\n" +
            "‚Ä¢ ƒê·ªô kh√≥ tƒÉng 1 = Kh√≥ g·∫•p ƒë√¥i\n" +
            "‚Ä¢ ƒê·ªô kh√≥ c·ªßa Bitcoin th·ª±c t·∫ø: 18-20+\n\n" +

            upgradeTip +
            "üí° N√¢ng c·∫•p Cooling ƒë·ªÉ gi·∫£m difficulty hi·ªáu qu·∫£!",
            threadID, messageID
          );
        }
        if (target[1] === "pool") {

          const poolIndex = parseInt(target[2]) - 1;

          if (isNaN(poolIndex)) {
            return api.sendMessage(
              "üèä‚Äç‚ôÇÔ∏è MINING POOLS üèä‚Äç‚ôÇÔ∏è\n" +
              "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
              CONFIG.advancedMining.pools.map((pool, i) =>
                `${i + 1}. ${pool.name}\n` +
                `   üìä Ph√≠: ${(pool.fee * 100).toFixed(1)}%\n` +
                `   üçÄ Luck: ${pool.luck.toFixed(2)}x\n` +
                `   üí∞ Ph∆∞∆°ng th·ª©c: ${pool.paymentMethod}\n` +
                `   üíµ Min. Payout: ${pool.minPayout} LCoin\n`
              ).join("\n") +
              "\nTham gia pool: .coin hash pool [1-4]",
              threadID, messageID
            );
          }

          if (poolIndex < 0 || poolIndex >= CONFIG.advancedMining.pools.length) {
            return api.sendMessage("‚ùå Mining pool kh√¥ng h·ª£p l·ªá!", threadID, messageID);
          }

          player.hashMiningPool = poolIndex;
          const pool = CONFIG.advancedMining.pools[poolIndex];

          return api.sendMessage(
            `‚úÖ ƒê√£ tham gia pool: ${pool.name}\n\n` +
            `üìä Th√¥ng tin pool:\n` +
            `‚Ä¢ Ph√≠: ${(pool.fee * 100).toFixed(1)}%\n` +
            `‚Ä¢ Luck Factor: ${pool.luck.toFixed(2)}x\n` +
            `‚Ä¢ Ph∆∞∆°ng th·ª©c thanh to√°n: ${pool.paymentMethod}\n` +
            `‚Ä¢ Min. Payout: ${pool.minPayout} LCoin\n\n` +
            `üí° ${poolIndex === 0 ?
              "Solo mining c√≥ th·ªÉ mang l·∫°i ph·∫ßn th∆∞·ªüng l·ªõn nh∆∞ng r·ªßi ro cao h∆°n." :
              "Mining pool gi√∫p ·ªïn ƒë·ªãnh thu nh·∫≠p nh∆∞ng s·∫Ω m·∫•t ph√≠."}`,
            threadID, messageID
          );
        }
        if (target[1] === "mine") {

          if (player.energy < CONFIG.advancedMining.energyCost) {
            return api.sendMessage(
              "‚ö†Ô∏è KH√îNG ƒê·ª¶ NƒÇNG L∆Ø·ª¢NG!\n" +
              `Hash mining c·∫ßn ${CONFIG.advancedMining.energyCost} nƒÉng l∆∞·ª£ng.\n` +
              `Hi·ªán t·∫°i: ${player.energy.toFixed(1)}/${CONFIG.energySystem.maxEnergy}`,
              threadID, messageID
            );
          }

          if (player.upgrades.power < CONFIG.advancedMining.minPowerLevel) {
            return api.sendMessage(
              "‚ö†Ô∏è THI·∫æT B·ªä KH√îNG ƒê·ª¶ M·∫†NH!\n" +
              `Hash mining y√™u c·∫ßu Power c·∫•p ${CONFIG.advancedMining.minPowerLevel}+\n` +
              `C·∫•p hi·ªán t·∫°i: ${player.upgrades.power}`,
              threadID, messageID
            );
          }

          player.energy -= CONFIG.advancedMining.energyCost;
          player.lastEnergyUpdate = Date.now();

          const playerHardware = player.hashMiningHardware || 0;
          const hardware = CONFIG.advancedMining.hardware[playerHardware];
          const poolIndex = player.hashMiningPool || 0;
          const pool = CONFIG.advancedMining.pools[poolIndex];
          const difficultyBonus = Math.floor(player.upgrades.cooling / 3);
          const playerDifficulty = Math.max(1, CONFIG.advancedMining.difficulty.current - difficultyBonus);

          api.sendMessage(
            "‚õèÔ∏è HASH MINING ƒêANG TI·∫æN H√ÄNH ‚õèÔ∏è\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üîç ƒêang t√¨m nonce h·ª£p l·ªá...\n" +
            "üßÆ Thu·∫≠t to√°n: SHA-256\n" +
            `‚ö° Hashrate: ${hardware ? hardware.hashrate.toLocaleString() : 50} H/s\n` +
            "üéØ Target: " + "0".repeat(playerDifficulty) + "...\n\n" +
            "‚è≥ Vui l√≤ng ƒë·ª£i k·∫øt qu·∫£ trong gi√¢y l√°t...",
            threadID, messageID
          );

          const startTime = Date.now();
          const hashMiningResult = mineWithSHA256(player, playerDifficulty);
          const duration = Math.floor((Date.now() - startTime) / 1000);

          const electricityCost = calculateHashMiningCost(player,
            hashMiningResult.process ? hashMiningResult.process.duration : 3000);

          const miningVisualization = visualizeHashMining(hashMiningResult.process);

          setTimeout(() => {
            if (hashMiningResult.success) {

              const baseReward = calculateMiningReward(player, false);
              const poolFee = pool.fee * baseReward * CONFIG.advancedMining.rewardMultiplier;
              const poolLuck = pool.luck;
              const hashReward = baseReward * CONFIG.advancedMining.rewardMultiplier * poolLuck * (1 - pool.fee);

              CONFIG.blockReward.blockHeight++;
              CONFIG.blockHistory.blocks.push(hashMiningResult.blockData);

              player.coins += hashReward;
              player.stats.totalMined += hashReward;
              CONFIG.coinLimit.currentSupply += hashReward;

              api.sendMessage(
                "üéâ HASH MINING TH√ÄNH C√îNG! üéâ\n" +
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                `‚õìÔ∏è Block #${CONFIG.blockReward.blockHeight} ƒë√£ ƒë∆∞·ª£c ƒë√†o!\n` +
                `üíé Ph·∫ßn th∆∞·ªüng: ${hashReward.toLocaleString()} LCoin\n` +
                `üèä‚Äç‚ôÇÔ∏è Pool: ${pool.name} (${pool.paymentMethod})\n` +
                `üí∏ Ph√≠ pool: ${poolFee.toLocaleString()} LCoin\n` +
                `‚ö° Chi ph√≠ ƒëi·ªán: ${electricityCost.toLocaleString()}$\n` +
                `üîç T√¨m th·∫•y sau: ${hashMiningResult.process.attempts.toLocaleString()} attempts\n` +
                `‚è±Ô∏è Th·ªùi gian: ${duration}s\n\n` +
                miningVisualization + "\n\n" +
                `üí∞ T·ªïng coin hi·ªán c√≥: ${player.coins.toLocaleString()}\n` +
                `‚ö° NƒÉng l∆∞·ª£ng c√≤n l·∫°i: ${player.energy.toFixed(1)}/${CONFIG.energySystem.maxEnergy}`,
                threadID
              );
            } else {
              api.sendMessage(
                "‚ùå HASH MINING TH·∫§T B·∫†I!\n" +
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                "üíª Kh√¥ng t√¨m th·∫•y hash h·ª£p l·ªá trong gi·ªõi h·∫°n th·ªùi gian\n" +
                `‚ö° Chi ph√≠ ƒëi·ªán ƒë√£ ti√™u t·ªën: ${electricityCost.toLocaleString()}$\n` +
                `‚è±Ô∏è Th·ªùi gian: ${duration}s\n\n` +
                miningVisualization + "\n\n" +
                "üîç NGUY√äN NH√ÇN C√ì TH·ªÇ DO:\n" +
                "‚Ä¢ Difficulty qu√° cao cho hardware hi·ªán t·∫°i\n" +
                "‚Ä¢ C·∫ßn n√¢ng c·∫•p l√™n ASIC miner t·ªët h∆°n\n" +
                "‚Ä¢ Thi·∫øt b·ªã l√†m m√°t ch∆∞a ƒë·ªß m·∫°nh\n" +
                `‚Ä¢ ‚âà${(100 / (2 ** playerDifficulty) * 100).toFixed(8)}% c∆° h·ªôi m·ªói l·∫ßn th·ª≠\n\n` +
                `‚ö° NƒÉng l∆∞·ª£ng c√≤n l·∫°i: ${player.energy.toFixed(1)}/${CONFIG.energySystem.maxEnergy}`,
                threadID
              );
            }

            saveData(miningData, marketData);
          }, 15000);

          break;
        }
      case "top": {
        const type = target[1]?.toLowerCase() || "richest";
        let userData = JSON.parse(fs.readFileSync("./events/cache/userData.json", "utf8"));
        let topData = [];

        if (type === "miner" || type === "mine") {

          for (let userID in miningData) {
            const player = miningData[userID];
            if (player.stats && player.stats.totalMined > 0) {
              let name = userData[userID]?.name || "Ng∆∞·ªùi d√πng Facebook";
              topData.push({
                userID,
                name: name,
                totalMined: player.stats.totalMined,
                successRate: (player.stats.successfulMines / (player.stats.successfulMines + player.stats.failedMines) * 100) || 0
              });
            }
          }

          topData.sort((a, b) => b.totalMined - a.totalMined);
          topData = topData.slice(0, 10);

          let msg = "‚õèÔ∏è TOP 10 TH·ª¢ ƒê√ÄO NHI·ªÄU NH·∫§T ‚õèÔ∏è\n";
          msg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

          topData.forEach((miner, index) => {
            const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
            msg += `${medal} ${miner.name}\n`;
            msg += `üíé ƒê√£ ƒë√†o: ${miner.totalMined.toLocaleString()} LC\n`;
            msg += `‚ö° T·ª∑ l·ªá: ${miner.successRate.toFixed(1)}%\n` +
              `üíµ Gi√° tr·ªã: ${(miner.totalMined * marketData.price).toLocaleString()}$\n\n`;
          });

          msg += "üí° Tip: N√¢ng c·∫•p thi·∫øt b·ªã ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ ƒë√†o!";

          return api.sendMessage(msg, threadID, messageID);
        } else {
          for (let userID in miningData) {
            const player = miningData[userID];
            if (player.coins > 0) {
              let name = userData[userID]?.name || "Ng∆∞·ªùi d√πng Facebook";
              topData.push({
                userID,
                name: name,
                coins: player.coins,
                value: player.coins * marketData.price
              });
            }
          }

          topData.sort((a, b) => b.coins - a.coins);
          topData = topData.slice(0, 10);

          let msg = "üìä TOP 10 NG∆Ø·ªúI GI√ÄU NH·∫§T üìä\n";
          msg += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

          topData.forEach((data, index) => {
            const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
            msg += `${medal} ${data.name}\n`;
            msg += `üí∞ Coins: ${data.coins.toLocaleString()} LC\n`;
            msg += `üíµ Gi√° tr·ªã: ${data.value.toLocaleString()}$\n\n`;
          });

          msg += "üí° Tip: D√πng .coin top miner ƒë·ªÉ xem top th·ª£ ƒë√†o!\n";
          msg += "ho·∫∑c .coin top ƒë·ªÉ xem top ng∆∞·ªùi gi√†u!";

          return api.sendMessage(msg, threadID, messageID);
        }
      }
      case "sell":
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!\n\n" +
            "üí° C√°ch s·ª≠ d·ª•ng:\n" +
            "‚Ä¢ .coin sell [s·ªë l∆∞·ª£ng] - B√°n s·ªë l∆∞·ª£ng c·ª• th·ªÉ\n" +
            "‚Ä¢ .coin sell all - B√°n t·∫•t c·∫£\n" +
            "‚Ä¢ .coin sell half - B√°n m·ªôt n·ª≠a\n\n" +
            "üí° Coin s·∫Ω tr·ªü l·∫°i l∆∞u th√¥ng tr√™n th·ªã tr∆∞·ªùng sau khi b√°n",
            threadID,
            messageID
          );
        }

        const currentTotalMined = CONFIG.coinLimit.currentSupply;
        const currentTotalHeld = Object.values(miningData).reduce(
          (total, p) => total + p.coins,
          0
        );
        const currentCirculating = Math.max(0, currentTotalMined - currentTotalHeld);

        let sellAmount;
        if (target[1].toLowerCase() === "all") {
          sellAmount = player.coins;
        } else if (target[1].toLowerCase() === "half") {
          sellAmount = Math.floor(player.coins / 2);
        } else {
          sellAmount = parseInt(target[1]);
          if (!sellAmount || sellAmount <= 0) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!",
              threadID,
              messageID
            );
          }
        }

        if (sellAmount > player.coins || player.coins < 0) {
          return api.sendMessage(
            "‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß LCoin!\n\n" +
            `üíé S·ªë LCoin hi·ªán c√≥: ${player.coins.toLocaleString()}\n` +
            `üí∞ Gi√° tr·ªã: ${Math.floor(player.coins * marketData.price).toLocaleString()}$`,
            threadID,
            messageID
          );
        }

        const sellValue = calculateSellValue(player, sellAmount, marketData.price);

        const sellRatio = sellAmount / (currentCirculating + 1);
        const sellTaxRate = Math.min(0.2, sellRatio * 0.4);
        const sellTax = Math.ceil(sellValue * sellTaxRate);
        const finalSellValue = sellValue - sellTax;

        player.coins = Math.max(0, player.coins - sellAmount);
        CONFIG.market.tradingVolume.sell += sellAmount;
        CONFIG.market.tradingVolume.totalVolume += sellAmount;
        await updateBalance(senderID, finalSellValue);

        let profitLossInfo = "";
        const avgBuyPrice = calculateAverageBuyPrice(player);

        if (avgBuyPrice) {
          const profitLoss = marketData.price - avgBuyPrice;
          const profitLossPercent = (profitLoss / avgBuyPrice) * 100;
          const isProfitable = profitLoss >= 0;

          if (!player.transactions) player.transactions = [];
          player.transactions.push({
            type: 'sell',
            amount: sellAmount,
            price: marketData.price,
            totalValue: finalSellValue,
            timestamp: Date.now(),
            profitLoss: profitLoss * sellAmount
          });

          profitLossInfo = `\nüìä TH·ªêNG K√ä L√ÉI/L·ªñ:\n` +
            `‚Ä¢ Gi√° mua TB: ${Math.round(avgBuyPrice)}$\n` +
            `‚Ä¢ Gi√° b√°n: ${marketData.price}$\n` +
            `‚Ä¢ ${isProfitable ? "L√£i" : "L·ªó"}: ${Math.abs(profitLoss.toFixed(1))}$/LC (${Math.abs(profitLossPercent).toFixed(1)}%)\n` +
            `‚Ä¢ T·ªïng ${isProfitable ? "l√£i" : "l·ªó"}: ${Math.abs(Math.round(profitLoss * sellAmount)).toLocaleString()}$`;
        }
        api.sendMessage(
          "üí∞ B√ÅN LCOIN TH√ÄNH C√îNG üí∞\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `üì§ S·ªë l∆∞·ª£ng: ${sellAmount.toLocaleString()} LCoin\n` +
          `üíµ Gi√° tr·ªã: ${sellValue.toLocaleString()}$\n` +
          (sellTax > 0 ? `üßæ Ph√≠: ${sellTax.toLocaleString()}$ (${(sellTaxRate * 100).toFixed(1)}%)\n` : "") +
          `üí∞ Nh·∫≠n: ${finalSellValue.toLocaleString()}$\n` +
          `üíé C√≤n l·∫°i: ${player.coins.toLocaleString()} LC\n` +
          (profitLossInfo ? profitLossInfo : "") +
          `\n\nüìä Gi√° hi·ªán t·∫°i: ${marketData.price}$/LC`,
          threadID,
          messageID
        );
        break;
      case "auto":
        if (!target[1]) {
          return api.sendMessage(
            "ü§ñ AUTO MINING SYSTEM ü§ñ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üìë H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:\n" +
            "‚Ä¢ .coin auto on [1/3/6/12] - B·∫≠t auto mine theo gi·ªù\n" +
            "‚Ä¢ .coin auto off - T·∫Øt auto mine\n" +
            "‚Ä¢ .coin auto info - Xem th√¥ng tin auto mine\n\n" +

            "üíé HI·ªÜU SU·∫§T AUTO:\n" +
            `‚Ä¢ Hi·ªáu qu·∫£ b·∫±ng ${CONFIG.autoMining.settings.efficiency * 100}% mine th·ªß c√¥ng\n` +
            `‚Ä¢ Ti√™u th·ª• ${CONFIG.autoMining.settings.energyCost} nƒÉng l∆∞·ª£ng/l·∫ßn\n` +
            `‚Ä¢ Th·ª±c hi·ªán m·ªói ${CONFIG.autoMining.tickRate / 60000} ph√∫t\n\n` +

            "üí∞ B·∫¢NG GI√Å THU√ä:\n" +
            CONFIG.autoMining.settings.prices.map(p =>
              `‚Ä¢ ${p.duration / 3600000}h: ${p.cost.toLocaleString()}$`
            ).join("\n") + "\n\n" +

            "‚ö†Ô∏è L∆ØU √ù:\n" +
            `‚Ä¢ Y√™u c·∫ßu Power c·∫•p ${CONFIG.autoMining.settings.minPowerLevel}+\n` +
            "‚Ä¢ V·∫´n ti√™u t·ªën nƒÉng l∆∞·ª£ng v√† ƒë·ªô b·ªÅn\n" +
            "‚Ä¢ Hi·ªáu qu·∫£ th·∫•p h∆°n ƒë√†o th·ªß c√¥ng\n" +
            "‚Ä¢ Th√≠ch h·ª£p cho ng∆∞·ªùi b·∫≠n r·ªôn",
            threadID, messageID
          );
        }

        const autoAction = target[1].toLowerCase();

        if (autoAction === "on") {
          // Ki·ªÉm tra ƒëi·ªÅu ki·ªán
          if (player.upgrades.power < CONFIG.autoMining.settings.minPowerLevel) {
            return api.sendMessage(
              `‚ùå C·∫ßn n√¢ng Power l√™n c·∫•p ${CONFIG.autoMining.settings.minPowerLevel}+ ƒë·ªÉ d√πng auto mine!`,
              threadID, messageID
            );
          }

          const duration = parseInt(target[2]);
          if (!duration || ![1, 3, 6, 12].includes(duration)) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng ch·ªçn th·ªùi gian h·ª£p l·ªá: 1/3/6/12 gi·ªù",
              threadID, messageID
            );
          }

          const price = CONFIG.autoMining.settings.prices.find(p =>
            p.duration === duration * 60 * 60 * 1000
          );

          const balance = await getBalance(senderID);
          if (balance < price.cost) {
            return api.sendMessage(
              `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${price.cost.toLocaleString()}$ ƒë·ªÉ thu√™ ${duration}h`,
              threadID, messageID
            );
          }

          await updateBalance(senderID, -price.cost);

          player.autoMining = {
            active: true,
            endTime: Date.now() + (duration * 60 * 60 * 1000),
            totalMined: 0,
            lastTick: Date.now()
          };

          return api.sendMessage(
            "‚úÖ ƒê√É B·∫¨T AUTO MINING!\n\n" +
            `‚è∞ Th·ªùi gian: ${duration} gi·ªù\n` +
            `üí∞ Chi ph√≠: ${price.cost.toLocaleString()}$\n` +
            `‚ö° NƒÉng l∆∞·ª£ng/l·∫ßn: ${CONFIG.autoMining.settings.energyCost}\n` +
            `üîÑ Chu k·ª≥: ${CONFIG.autoMining.tickRate / 60000} ph√∫t\n\n` +
            "üí° Auto s·∫Ω t·ª± ƒë·ªông t·∫Øt sau khi h·∫øt th·ªùi gian!",
            threadID, messageID
          );
        }

      case "energy":
        const energyAction = target[1]?.toLowerCase();
        if (!player.powerSystem) {
          player.powerSystem = {
            generatorLevel: 0,
            lastFuelUse: 0,
            fuelHistory: []
          };
        }
        if (!energyAction || !["info", "upgrade", "fuel"].includes(energyAction)) {
          return api.sendMessage(
            "‚ö° H·ªÜ TH·ªêNG NƒÇNG L∆Ø·ª¢NG ‚ö°\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üîã NƒÉng l∆∞·ª£ng hi·ªán t·∫°i: ${player.energy}/${CONFIG.energySystem.maxEnergy}\n` +
            "üìä Th√¥ng tin kh√¥i ph·ª•c:\n" +
            `- T·ªëc ƒë·ªô c∆° b·∫£n: ${CONFIG.energySystem.recoveryRate}/ph√∫t\n` +

            (() => {
              const generatorLevel = player.powerSystem?.generatorLevel || 0;
              const generatorBonus = CONFIG.powerGrid.generator.levels[generatorLevel].production;
              const currentHour = new Date().getHours();
              const isPeakHour = CONFIG.powerGrid.generator.peakHours.includes(currentHour);
              const timeBonus = !isPeakHour ? CONFIG.powerGrid.generator.offPeakBonus : 1;
              const efficiencyBonus = 1 + (player.upgrades.efficiency * 0.05);
              const poolBonus = player.settings?.inPool ? 1.1 : 1;

              const actualRate = CONFIG.energySystem.recoveryRate * generatorBonus * timeBonus * efficiencyBonus * poolBonus;
              return `- T·ªëc ƒë·ªô th·ª±c t·∫ø: ${actualRate.toFixed(2)}/ph√∫t`;
            })() + "\n\n" +

            "üìå C√°c l·ªánh c√≥ s·∫µn:\n" +
            "‚Ä¢ .coin energy info - Xem chi ti·∫øt h·ªá th·ªëng nƒÉng l∆∞·ª£ng\n" +
            "‚Ä¢ .coin energy upgrade - N√¢ng c·∫•p m√°y ph√°t ƒëi·ªán\n" +
            "‚Ä¢ .coin energy fuel - Mua nhi√™n li·ªáu n·∫°p nƒÉng l∆∞·ª£ng\n\n" +

            "üí° M·∫πo: ƒê√†o v√†o gi·ªù th·∫•p ƒëi·ªÉm (20:00-07:59) ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô kh√¥i ph·ª•c nƒÉng l∆∞·ª£ng!",
            threadID,
            messageID
          );
        }

        if (energyAction === "info") {
          const generatorLevel = player.powerSystem?.generatorLevel || 0;
          const generator = CONFIG.powerGrid.generator.levels[generatorLevel];
          const nextGenerator = CONFIG.powerGrid.generator.levels[generatorLevel + 1];

          const currentHour = new Date().getHours();
          const isPeakHour = CONFIG.powerGrid.generator.peakHours.includes(currentHour);

          let timeToFull = "‚àû";
          if (player.energy < CONFIG.energySystem.maxEnergy) {

            const generatorBonus = generator.production;
            const timeBonus = !isPeakHour ? CONFIG.powerGrid.generator.offPeakBonus : 1;
            const efficiencyBonus = 1 + (player.upgrades.efficiency * 0.05);
            const poolBonus = player.settings?.inPool ? 1.1 : 1;

            const actualRate = CONFIG.energySystem.recoveryRate * generatorBonus * timeBonus * efficiencyBonus * poolBonus;
            const energyNeeded = CONFIG.energySystem.maxEnergy - player.energy;
            const minutesToFull = Math.ceil(energyNeeded / actualRate);

            timeToFull = `${Math.floor(minutesToFull / 60)}h ${minutesToFull % 60}m`;
          }

          return api.sendMessage(
            "‚ö° CHI TI·∫æT H·ªÜ TH·ªêNG NƒÇNG L∆Ø·ª¢NG ‚ö°\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üîã NƒÉng l∆∞·ª£ng: ${player.energy}/${CONFIG.energySystem.maxEnergy}\n` +
            `‚è±Ô∏è Th·ªùi gian ƒë·∫øn full: ${timeToFull}\n\n` +

            "üè≠ M√ÅY PH√ÅT ƒêI·ªÜN:\n" +
            `- C·∫•p ƒë·ªô: ${generatorLevel} - ${generator.name || "M√°y ph√°t ƒëi·ªán c·∫•p " + generatorLevel}\n` +
            `- Hi·ªáu su·∫•t: x${generator.production.toFixed(1)}\n` +
            (nextGenerator ? `- N√¢ng c·∫•p ti·∫øp theo: ${nextGenerator.cost.toLocaleString()}$\n` : "- ƒê√£ ƒë·∫°t c·∫•p t·ªëi ƒëa\n") +
            "\n" +

            "‚è∞ TH√îNG TIN TH·ªúI GIAN:\n" +
            `- Hi·ªán t·∫°i: ${isPeakHour ? "Gi·ªù cao ƒëi·ªÉm ‚ö†Ô∏è" : "Gi·ªù th·∫•p ƒëi·ªÉm ‚úÖ"}\n` +
            `- H·ªá s·ªë hi·ªán t·∫°i: ${isPeakHour ? "x1.0" : `x${CONFIG.powerGrid.generator.offPeakBonus.toFixed(1)}`}\n` +
            "- Gi·ªù cao ƒëi·ªÉm: 08:00 - 19:59\n" +
            "- Gi·ªù th·∫•p ƒëi·ªÉm: 20:00 - 07:59\n\n" +

            "üîå HI·ªÜU SU·∫§T NƒÇNG L∆Ø·ª¢NG:\n" +
            `- Bonus t·ª´ Efficiency: +${(player.upgrades.efficiency * 5).toFixed(0)}%\n` +
            `- Bonus t·ª´ Mining Pool: ${player.settings?.inPool ? "+10%" : "Kh√¥ng c√≥ (ch∆∞a tham gia pool)"}\n\n` +

            "üí° M·∫πo: N√¢ng c·∫•p m√°y ph√°t ƒëi·ªán v√† ƒë√†o v√†o gi·ªù th·∫•p ƒëi·ªÉm ƒë·ªÉ t·ªëi ∆∞u hi·ªáu qu·∫£!",
            threadID,
            messageID
          );
        }

        if (energyAction === "upgrade") {
          if (!player.powerSystem) {
            player.powerSystem = {
              generatorLevel: 0,
              lastFuelUse: 0,
              fuelHistory: []
            };
          }

          const generatorLevel = player.powerSystem.generatorLevel || 0;
          const nextLevel = generatorLevel + 1;

          if (nextLevel >= CONFIG.powerGrid.generator.levels.length) {
            api.sendMessage(
              "‚ùå M√°y ph√°t ƒëi·ªán ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa!",
              threadID,
              messageID
            );
            break;
          }

          const upgradeCost = CONFIG.powerGrid.generator.levels[nextLevel].cost;
          const balance = await getBalance(senderID);

          if (balance < upgradeCost) {
            api.sendMessage(
              "‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ n√¢ng c·∫•p m√°y ph√°t ƒëi·ªán!\n\n" +
              `üí∞ S·ªë d∆∞: ${balance.toLocaleString()}$\n` +
              `üíµ Chi ph√≠ n√¢ng c·∫•p: ${upgradeCost.toLocaleString()}$\n` +
              `üí∏ Thi·∫øu: ${(upgradeCost - balance).toLocaleString()}$`,
              threadID,
              messageID
            );
            break;
          }

          await updateBalance(senderID, -upgradeCost);
          player.powerSystem.generatorLevel = nextLevel;

          saveData(miningData, marketData);

          const newGenerator = CONFIG.powerGrid.generator.levels[nextLevel];
          const productionIncrease = (newGenerator.production / CONFIG.powerGrid.generator.levels[generatorLevel].production - 1) * 100;

          api.sendMessage(
            "üîã N√ÇNG C·∫§P M√ÅY PH√ÅT ƒêI·ªÜN TH√ÄNH C√îNG! üîã\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `‚öôÔ∏è C·∫•p ƒë·ªô m√°y ph√°t: ${generatorLevel} ‚Üí ${nextLevel}\n` +
            `üìà TƒÉng hi·ªáu su·∫•t: +${productionIncrease.toFixed(0)}%\n` +
            `üí∞ Chi ph√≠: ${upgradeCost.toLocaleString()}$\n\n` +
            `‚ö° T·ªëc ƒë·ªô kh√¥i ph·ª•c nƒÉng l∆∞·ª£ng m·ªõi: x${newGenerator.production.toFixed(1)}\n` +
            "üí° NƒÉng l∆∞·ª£ng s·∫Ω h·ªìi ph·ª•c nhanh h∆°n ƒë√°ng k·ªÉ!",
            threadID,
            messageID
          );
          break;
        }

        if (energyAction === "fuel") {
          if (!CONFIG.powerGrid.fuelTypes || CONFIG.powerGrid.fuelTypes.length === 0) {
            return api.sendMessage(
              "‚ùå Kh√¥ng c√≥ nhi√™n li·ªáu n√†o c√≥ s·∫µn trong h·ªá th·ªëng!",
              threadID,
              messageID
            );
          }

          if (!target[2]) {
            let fuelMessage = "üîã NHI√äN LI·ªÜU H·ªíI NƒÇNG L∆Ø·ª¢NG üîã\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

            CONFIG.powerGrid.fuelTypes.forEach((fuel, index) => {
              const cooldownLeft = player.powerSystem.lastFuelUse && player.powerSystem.lastFuelUse[fuel.name]
                ? Math.max(0, (player.powerSystem.lastFuelUse[fuel.name] + fuel.cooldown - Date.now()) / 1000 / 60)
                : 0;

              fuelMessage += `${index + 1}. ${fuel.name}\n`;
              fuelMessage += `   üí∞ Gi√°: ${fuel.costPerUnit.toLocaleString()}$\n`;
              fuelMessage += `   ‚ö° NƒÉng l∆∞·ª£ng: +${fuel.energyPerUnit}\n`;
              fuelMessage += cooldownLeft > 0
                ? `   ‚è≥ Th·ªùi gian ch·ªù: ${Math.floor(cooldownLeft / 60)}h ${Math.floor(cooldownLeft % 60)}m\n`
                : `   ‚úÖ S·∫µn s√†ng s·ª≠ d·ª•ng\n`;
              fuelMessage += "\n";
            });

            fuelMessage += "üëâ D√πng .coin energy fuel [s·ªë th·ª© t·ª±] ƒë·ªÉ mua nhi√™n li·ªáu";

            return api.sendMessage(fuelMessage, threadID, messageID);
          }

          const fuelIndex = parseInt(target[2]) - 1;
          if (isNaN(fuelIndex) || fuelIndex < 0 || fuelIndex >= CONFIG.powerGrid.fuelTypes.length) {
            return api.sendMessage(
              "‚ùå S·ªë th·ª© t·ª± nhi√™n li·ªáu kh√¥ng h·ª£p l·ªá!",
              threadID,
              messageID
            );
          }

          const selectedFuel = CONFIG.powerGrid.fuelTypes[fuelIndex];

          if (!player.powerSystem.lastFuelUse) {
            player.powerSystem.lastFuelUse = {};
          }

          const lastUsed = player.powerSystem.lastFuelUse[selectedFuel.name] || 0;
          const cooldownLeft = Math.max(0, lastUsed + selectedFuel.cooldown - Date.now());

          if (cooldownLeft > 0) {
            const minutes = Math.floor(cooldownLeft / 60000);
            const hours = Math.floor(minutes / 60);
            const remainingMinutes = minutes % 60;

            return api.sendMessage(
              `‚è≥ Nhi√™n li·ªáu "${selectedFuel.name}" ƒëang trong th·ªùi gian h·ªìi!\n` +
              `‚åõ Vui l√≤ng ƒë·ª£i ${hours > 0 ? `${hours}h ` : ''}${remainingMinutes}m n·ªØa.`,
              threadID,
              messageID
            );
          }

          const balance = await getBalance(senderID);
          if (balance < selectedFuel.costPerUnit) {
            return api.sendMessage(
              `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn ${selectedFuel.costPerUnit.toLocaleString()}$ ƒë·ªÉ mua ${selectedFuel.name}.`,
              threadID,
              messageID
            );
          }

          if (player.energy >= CONFIG.energySystem.maxEnergy) {
            return api.sendMessage(
              "‚ùå NƒÉng l∆∞·ª£ng c·ªßa b·∫°n ƒë√£ ƒë·∫ßy!",
              threadID,
              messageID
            );
          }

          await updateBalance(senderID, -selectedFuel.costPerUnit);

          const oldEnergy = player.energy;
          player.energy = Math.min(CONFIG.energySystem.maxEnergy, player.energy + selectedFuel.energyPerUnit);
          const actualEnergyAdded = player.energy - oldEnergy;

          player.powerSystem.lastFuelUse[selectedFuel.name] = Date.now();

          if (!player.powerSystem.fuelHistory) {
            player.powerSystem.fuelHistory = [];
          }

          player.powerSystem.fuelHistory.push({
            type: selectedFuel.name,
            timestamp: Date.now(),
            energyAdded: actualEnergyAdded,
            cost: selectedFuel.costPerUnit
          });

          if (player.powerSystem.fuelHistory.length > 10) {
            player.powerSystem.fuelHistory = player.powerSystem.fuelHistory.slice(-10);
          }

          player.lastEnergyUpdate = Date.now();

          saveData(miningData, marketData);

          return api.sendMessage(
            `‚úÖ MUA NHI√äN LI·ªÜU TH√ÄNH C√îNG!\n\n` +
            `üîã ${selectedFuel.name} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng\n` +
            `‚ö° NƒÉng l∆∞·ª£ng: ${oldEnergy} ‚Üí ${player.energy} (+${actualEnergyAdded})\n` +
            `üí∞ Chi ph√≠: ${selectedFuel.costPerUnit.toLocaleString()}$\n` +
            `üíµ S·ªë d∆∞ c√≤n l·∫°i: ${(await getBalance(senderID)).toLocaleString()}$`,
            threadID,
            messageID
          );
        }


      case "epoch":
        const currentEpochData = CONFIG.epochs.list[CONFIG.epochs.currentEpoch];
        const currentsupplyRatio = CONFIG.coinLimit.currentSupply / CONFIG.coinLimit.maxSupply;
        const progressInEpoch = Math.min(100, Math.max(0,
          ((currentsupplyRatio - (CONFIG.epochs.currentEpoch > 0 ?
            CONFIG.epochs.list[CONFIG.epochs.currentEpoch - 1].supply : 0)) /
            (currentEpochData.supply - (CONFIG.epochs.currentEpoch > 0 ?
              CONFIG.epochs.list[CONFIG.epochs.currentEpoch - 1].supply : 0))) * 100
        ));

        const nextEpoch = CONFIG.epochs.list[CONFIG.epochs.currentEpoch + 1];

        api.sendMessage(
          "‚è≥ TH·ªúI ƒê·∫†I LCOIN ‚è≥\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `üåü K·ª∑ Nguy√™n Hi·ªán T·∫°i: ${currentEpochData.name}\n` +
          `üìù M√¥ t·∫£: ${currentEpochData.description}\n\n` +

          "üìä TH√îNG S·ªê HI·ªÜN T·∫†I:\n" +
          `‚Ä¢ Ti·∫øn ƒë·ªô: ${progressInEpoch.toFixed(1)}%\n` +
          `‚Ä¢ ƒê·ªô kh√≥: x${currentEpochData.difficultyMultiplier}\n` +
          `‚Ä¢ Ph·∫ßn th∆∞·ªüng: x${currentEpochData.rewardMultiplier}\n\n` +

          (nextEpoch ?
            `‚è≥ K·ª∑ nguy√™n ti·∫øp theo: ${nextEpoch.name}\n` +
            `‚Ä¢ B·∫Øt ƒë·∫ßu ·ªü: ${(nextEpoch.supply * 100).toFixed(0)}% t·ªïng cung\n` +
            `‚Ä¢ C√≤n thi·∫øu: ${((nextEpoch.supply * CONFIG.coinLimit.maxSupply) -
              CONFIG.coinLimit.currentSupply).toLocaleString()} LCoin\n\n`
            : "üéØ ƒê√£ ƒë·∫°t k·ª∑ nguy√™n cu·ªëi c√πng!\n\n") +

          "üìú L·ªäCH S·ª¨ C√ÅC M·ªêC:\n" +
          CONFIG.epochs.milestones.map(m =>
            `‚Ä¢ ${CONFIG.epochs.list[m.epoch].name}\n` +
            `  üìÖ ${new Date(m.timestamp).toLocaleDateString()}\n` +
            `  üí∞ Gi√°: ${m.price.toLocaleString()}$\n`
          ).join("\n"),
          threadID, messageID
        );
        break;

      case "admin": {
        const adminConfig = require('../admin.json');
        if (!adminConfig.adminUIDs.includes(senderID)) {
          return api.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn admin ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", threadID, messageID);
        }

        if (!target[1]) {
          return api.sendMessage(
            "üëë COIN ADMIN PANEL üëë\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üìå QU·∫¢N L√ù NG∆Ø·ªúI D√ôNG:\n" +
            "‚Ä¢ .coin admin give [UID] [amount] - C·∫•p coin\n" +
            "‚Ä¢ .coin admin take [UID] [amount] - Thu h·ªìi coin\n" +
            "‚Ä¢ .coin admin reset [UID] - Reset ng∆∞·ªùi d√πng\n\n" +

            "üìä QU·∫¢N L√ù TH·ªä TR∆Ø·ªúNG:\n" +
            "‚Ä¢ .coin admin setprice [amount] - ƒê·∫∑t gi√° coin\n" +
            "‚Ä¢ .coin admin event [eventType] - K√≠ch ho·∫°t s·ª± ki·ªán\n" +
            "‚Ä¢ .coin admin halving - K√≠ch ho·∫°t halving\n\n" +

            "‚öôÔ∏è C·∫§U H√åNH H·ªÜ TH·ªêNG:\n" +
            "‚Ä¢ .coin admin difficulty [amount] - ƒê·∫∑t ƒë·ªô kh√≥\n" +
            "‚Ä¢ .coin admin reward [amount] - ƒê·∫∑t ph·∫ßn th∆∞·ªüng\n" +
            "‚Ä¢ .coin admin energy [UID] [amount] - ƒê·∫∑t nƒÉng l∆∞·ª£ng\n\n" +

            "üëÅÔ∏è GI√ÅM S√ÅT & KI·ªÇM TRA:\n" +
            "‚Ä¢ .coin admin view [UID] - Xem th√¥ng tin ng∆∞·ªùi d√πng\n" +
            "‚Ä¢ .coin admin stats - Xem th·ªëng k√™ h·ªá th·ªëng\n" +
            "‚Ä¢ .coin admin export - Xu·∫•t d·ªØ li·ªáu sang JSON\n\n" +

            "üìà K√çCH TH√çCH TH·ªä TR∆Ø·ªúNG:\n" +
            "‚Ä¢ .coin admin boom - K√≠ch ho·∫°t th·ªã tr∆∞·ªùng tƒÉng m·∫°nh\n" +
            "‚Ä¢ .coin admin crash - K√≠ch ho·∫°t th·ªã tr∆∞·ªùng s·ª•p ƒë·ªï\n" +
            "‚Ä¢ .coin admin volatility [1-10] - ƒêi·ªÅu ch·ªânh bi·∫øn ƒë·ªông\n" +
            "‚Ä¢ .coin admin whale [buy/sell] [amount] - Giao d·ªãch c√° voi",

            threadID, messageID
          );
        }

        const adminAction = target[1].toLowerCase();

        if (adminAction === "give") {
          const targetUID = target[2];
          const amount = parseInt(target[3]);

          if (!targetUID || !amount || isNaN(amount) || amount <= 0) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin give [UID] [amount]", threadID, messageID);
          }

          if (!miningData[targetUID]) {
            miningData[targetUID] = initializePlayer(targetUID);
          }

          miningData[targetUID].coins += amount;
          CONFIG.coinLimit.currentSupply += amount;

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É C·∫§P COIN TH√ÄNH C√îNG!\n\n" +
            `üë§ UID: ${targetUID}\n` +
            `üí∞ S·ªë l∆∞·ª£ng: +${amount.toLocaleString()} LCoin\n` +
            `üíé T·ªïng coin hi·ªán t·∫°i: ${miningData[targetUID].coins.toLocaleString()} LCoin`,
            threadID, messageID
          );
        }

        if (adminAction === "take") {
          const targetUID = target[2];
          const amount = parseInt(target[3]);

          if (!targetUID || !amount || isNaN(amount) || amount <= 0) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin take [UID] [amount]", threadID, messageID);
          }

          if (!miningData[targetUID]) {
            return api.sendMessage("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.", threadID, messageID);
          }

          const actualTaken = Math.min(miningData[targetUID].coins, amount);
          miningData[targetUID].coins -= actualTaken;
          CONFIG.coinLimit.currentSupply -= actualTaken;

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É THU H·ªíI COIN TH√ÄNH C√îNG!\n\n" +
            `üë§ UID: ${targetUID}\n` +
            `üí∞ S·ªë l∆∞·ª£ng: -${actualTaken.toLocaleString()} LCoin\n` +
            `üíé T·ªïng coin hi·ªán t·∫°i: ${miningData[targetUID].coins.toLocaleString()} LCoin`,
            threadID, messageID
          );
        }

        if (adminAction === "reset") {
          const targetUID = target[2];

          if (!targetUID) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin reset [UID]", threadID, messageID);
          }

          if (!miningData[targetUID]) {
            return api.sendMessage("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.", threadID, messageID);
          }

          const oldCoins = miningData[targetUID].coins;
          CONFIG.coinLimit.currentSupply -= oldCoins;

          miningData[targetUID] = initializePlayer(targetUID);

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É RESET T√ÄI KHO·∫¢N TH√ÄNH C√îNG!\n\n" +
            `üë§ UID: ${targetUID}\n` +
            `üí∞ Coins ƒë√£ thu h·ªìi: ${oldCoins.toLocaleString()} LCoin\n` +
            "‚öôÔ∏è T·∫•t c·∫£ ch·ªâ s·ªë v√† n√¢ng c·∫•p ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ m·∫∑c ƒë·ªãnh.",
            threadID, messageID
          );
        }

        if (adminAction === "setprice") {
          const newPrice = parseInt(target[2]);

          if (!newPrice || isNaN(newPrice) || newPrice <= 0) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin setprice [amount]", threadID, messageID);
          }

          const oldPrice = marketData.price;
          marketData.price = newPrice;

          marketData.history.push({
            price: oldPrice,
            timestamp: Date.now() - 1000,
            type: "admin"
          });

          if (marketData.history.length > 50) {
            marketData.history = marketData.history.slice(-50);
          }

          marketData.lastUpdate = Date.now();
          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É THAY ƒê·ªîI GI√Å COIN TH√ÄNH C√îNG!\n\n" +
            `üìä Gi√° c≈©: ${oldPrice.toLocaleString()}$\n` +
            `üìà Gi√° m·ªõi: ${newPrice.toLocaleString()}$\n` +
            `üìâ Thay ƒë·ªïi: ${((newPrice - oldPrice) / oldPrice * 100).toFixed(2)}%`,
            threadID, messageID
          );
        }

        if (adminAction === "boom") {
          const boomIntensity = parseFloat(target[2]) || 1.5;
          const limitedIntensity = Math.min(3.0, Math.max(1.1, boomIntensity));

          const oldPrice = marketData.price;
          const newPrice = Math.min(CONFIG.market.maxPrice, Math.floor(oldPrice * limitedIntensity));

          marketData.history.push({
            price: oldPrice,
            timestamp: Date.now() - 1000,
            type: "admin_boom"
          });

          marketData.price = newPrice;
          marketData.lastUpdate = Date.now();

          marketData.npcActivities = marketData.npcActivities || [];
          marketData.npcActivities.push({
            type: "buy",
            trader: "Institutional Investor",
            amount: Math.floor(CONFIG.coinLimit.currentSupply * 0.05),
            price: newPrice * 0.95,
            timestamp: Date.now(),
            duration: 12 * 60 * 60 * 1000
          });

          saveData(miningData, marketData);

          return api.sendMessage(
            "üöÄ TH·ªä TR∆Ø·ªúNG B√ông N·ªî üöÄ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üìà Gi√° tƒÉng: ${oldPrice.toLocaleString()}$ ‚Üí ${newPrice.toLocaleString()}$ (+${((newPrice / oldPrice - 1) * 100).toFixed(1)}%)\n` +
            "üß† T√¢m l√Ω th·ªã tr∆∞·ªùng: C·ª±c k·ª≥ t√≠ch c·ª±c\n" +
            "üë• Ng∆∞·ªùi ch∆°i s·∫Ω b·ªã ·∫£nh h∆∞·ªüng t√¢m l√Ω FOMO\n" +
            "‚ôªÔ∏è Hi·ªáu ·ª©ng s·∫Ω lan t·ªèa trong 12 gi·ªù t·ªõi\n\n" +
            "üí° Nh·ªØng c√° voi ƒë√£ b·∫Øt ƒë·∫ßu mua v√†o m·∫°nh m·∫Ω!",
            threadID, messageID
          );
        }

        if (adminAction === "crash") {
          const crashIntensity = parseFloat(target[2]) || 0.6;
          const limitedIntensity = Math.max(0.3, Math.min(0.9, crashIntensity));

          const oldPrice = marketData.price;
          const newPrice = Math.max(CONFIG.market.minPrice, Math.floor(oldPrice * limitedIntensity));

          marketData.history.push({
            price: oldPrice,
            timestamp: Date.now() - 1000,
            type: "admin_crash"
          });

          marketData.price = newPrice;
          marketData.lastUpdate = Date.now();

          marketData.npcActivities = marketData.npcActivities || [];
          marketData.npcActivities.push({
            type: "sell",
            trader: "Panic Sellers",
            amount: Math.floor(CONFIG.coinLimit.currentSupply * 0.1),
            price: newPrice * 1.05,
            timestamp: Date.now(),
            duration: 6 * 60 * 60 * 1000
          });

          saveData(miningData, marketData);

          return api.sendMessage(
            "üìâ TH·ªä TR∆Ø·ªúNG S·ª§P ƒê·ªî üìâ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üìâ Gi√° gi·∫£m: ${oldPrice}$ ‚Üí ${newPrice}$ (${((newPrice / oldPrice - 1) * 100).toFixed(1)}%)\n` +
            "üò± T√¢m l√Ω th·ªã tr∆∞·ªùng: Ho·∫£ng lo·∫°n\n" +
            "üèÉ‚Äç‚ôÇÔ∏è Ng∆∞·ªùi ch∆°i ƒëang b√°n th√°o ƒë·ªÉ c·∫Øt l·ªó\n" +
            "‚ôªÔ∏è Hi·ªáu ·ª©ng s·∫Ω k√©o d√†i trong 6 gi·ªù t·ªõi\n\n" +
            "üí° C∆° h·ªôi t·ªët ƒë·ªÉ mua v√†o v·ªõi gi√° r·∫ª!",
            threadID, messageID
          );
        }

        if (adminAction === "volatility") {
          const newVolatility = parseFloat(target[2]);

          if (isNaN(newVolatility) || newVolatility < 1 || newVolatility > 10) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p m·ª©c ƒë·ªô bi·∫øn ƒë·ªông t·ª´ 1-10\n" +
              "S·ª≠ d·ª•ng: .coin admin volatility [1-10]",
              threadID, messageID
            );
          }

          const oldVolatility = CONFIG.market.volatility;
          CONFIG.market.volatility = newVolatility * 0.05;

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚öôÔ∏è ƒê√É THAY ƒê·ªîI ƒê·ªò BI·∫æN ƒê·ªòNG TH·ªä TR∆Ø·ªúNG\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üìä Bi·∫øn ƒë·ªông c≈©: x${(oldVolatility / 0.05).toFixed(1)}\n` +
            `üìä Bi·∫øn ƒë·ªông m·ªõi: x${newVolatility.toFixed(1)}\n\n` +
            "üí° ƒê·ªô bi·∫øn ƒë·ªông cao = Gi√° thay ƒë·ªïi nhi·ªÅu h∆°n m·ªói chu k·ª≥\n" +
            "üí° ƒê·ªô bi·∫øn ƒë·ªông th·∫•p = Gi√° ·ªïn ƒë·ªãnh h∆°n",
            threadID, messageID
          );
        }

        if (adminAction === "whale") {
          const whaleAction = target[2]?.toLowerCase();
          const whaleAmount = parseInt(target[3]);

          if (!whaleAction || !["buy", "sell"].includes(whaleAction) || !whaleAmount || whaleAmount <= 0) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng:\n" +
              ".coin admin whale [buy/sell] [amount]",
              threadID, messageID
            );
          }

          const maxAmount = Math.floor(CONFIG.coinLimit.currentSupply * 0.15);
          const actualAmount = Math.min(whaleAmount, maxAmount);

          const priceImpact = whaleAction === "buy" ? 0.1 : -0.08;
          const oldPrice = marketData.price;
          const newPrice = Math.max(
            CONFIG.market.minPrice,
            Math.min(
              CONFIG.market.maxPrice,
              Math.floor(oldPrice * (1 + priceImpact * (actualAmount / maxAmount)))
            )
          );

          marketData.history.push({
            price: oldPrice,
            timestamp: Date.now() - 1000,
            type: "admin_whale_" + whaleAction
          });

          marketData.price = newPrice;
          marketData.lastUpdate = Date.now();

          CONFIG.market.tradingVolume[whaleAction] += actualAmount;
          CONFIG.market.tradingVolume.totalVolume += actualAmount;

          marketData.npcActivities = marketData.npcActivities || [];
          marketData.npcActivities.push({
            type: whaleAction,
            trader: "Institutional Whale",
            amount: actualAmount,
            price: whaleAction === "buy" ? oldPrice * 1.02 : oldPrice * 0.98,
            timestamp: Date.now(),
            duration: 24 * 60 * 60 * 1000
          });

          saveData(miningData, marketData);

          return api.sendMessage(
            `üêã GIAO D·ªäCH C√Å VOI: ${whaleAction.toUpperCase()} üêã\n` +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üí∞ Kh·ªëi l∆∞·ª£ng: ${actualAmount.toLocaleString()} LCoin\n` +
            `üìä T√°c ƒë·ªông gi√°: ${oldPrice}$ ‚Üí ${newPrice}$ (${((newPrice / oldPrice - 1) * 100).toFixed(2)}%)\n` +
            `üìâ Gi√° ph·∫£n ·ª©ng: ${whaleAction === "buy" ? "TƒÉng m·∫°nh ‚§¥Ô∏è" : "Gi·∫£m m·∫°nh ‚§µÔ∏è"}\n\n` +
            "üí¨ Tin ƒë·ªìn th·ªã tr∆∞·ªùng: C√≥ ng∆∞·ªùi ƒëang √¢m th·∫ßm t√≠ch l≈©y/x·∫£ h√†ng!",
            threadID, messageID
          );
        }


        if (adminAction === "airdrops") {
          const amount = parseInt(target[2]);
          const message = target.slice(3).join(" ") || "Ch∆∞∆°ng tr√¨nh Airdrop t·ª´ Admin";

          if (!amount || isNaN(amount) || amount <= 0) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng coin h·ª£p l·ªá!\n" +
              "S·ª≠ d·ª•ng: .coin admin airdrops [amount] [message]",
              threadID, messageID
            );
          }

          const activePlayers = Object.entries(miningData)
            .filter(([_, data]) => data.stats && data.stats.successfulMines > 5)
            .map(([uid, _]) => uid);

          if (activePlayers.length === 0) {
            return api.sendMessage("‚ùå Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i t√≠ch c·ª±c ƒë·ªÉ ph√°t coin!", threadID, messageID);
          }

          const coinsPerPlayer = Math.floor(amount / activePlayers.length);

          if (coinsPerPlayer <= 0) {
            return api.sendMessage(
              "‚ùå S·ªë l∆∞·ª£ng coin qu√° √≠t ƒë·ªÉ ph√°t cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i t√≠ch c·ª±c!",
              threadID, messageID
            );
          }

          let distributedCount = 0;

          activePlayers.forEach(uid => {
            if (!miningData[uid]) return;

            miningData[uid].coins += coinsPerPlayer;
            miningData[uid].airdrops = miningData[uid].airdrops || [];
            miningData[uid].airdrops.push({
              amount: coinsPerPlayer,
              timestamp: Date.now(),
              message: message
            });

            distributedCount++;
          });
        }
        const event = CONFIG.miningEvents.possibleEvents.find(e => e.id === eventType);
        CONFIG.miningEvents.activeEvent = {
          ...event,
          startTime: Date.now(),
          endTime: Date.now() + event.duration
        };

        if (adminAction === "special") {
          const eventType = target[2]?.toLowerCase();
          const duration = parseInt(target[3]) || 24;

          if (!eventType || !["mining", "market", "reward", "energy"].includes(eventType)) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng ch·ªçn lo·∫°i s·ª± ki·ªán h·ª£p l·ªá!\n\n" +
              "C√°c s·ª± ki·ªán ƒë·∫∑c bi·ªát:\n" +
              "‚Ä¢ mining - TƒÉng t·ª∑ l·ªá ƒë√†o th√†nh c√¥ng\n" +
              "‚Ä¢ market - T·∫°o chu k·ª≥ th·ªã tr∆∞·ªùng s√¥i ƒë·ªông\n" +
              "‚Ä¢ reward - Nh√¢n ƒë√¥i ph·∫ßn th∆∞·ªüng\n" +
              "‚Ä¢ energy - H·ªìi nƒÉng l∆∞·ª£ng nhanh h∆°n\n\n" +
              "S·ª≠ d·ª•ng: .coin admin special [lo·∫°i] [s·ªë gi·ªù]",
              threadID, messageID
            );
          }

          CONFIG.specialEvents = CONFIG.specialEvents || {};
          CONFIG.specialEvents[eventType] = {
            active: true,
            startTime: Date.now(),
            endTime: Date.now() + duration * 60 * 60 * 1000,
            multiplier: eventType === "mining" ? 1.5 :
              eventType === "market" ? 2.0 :
                eventType === "reward" ? 2.0 : 2.0
          };

          return api.sendMessage(
            "‚úÖ ƒê√É K√çCH HO·∫†T S·ª∞ KI·ªÜN TH√ÄNH C√îNG!\n\n" +
            `üåü S·ª± ki·ªán: ${event.name}\n` +
            `üí∞ H·ªá s·ªë ph·∫ßn th∆∞·ªüng: x${event.bonus}\n` +
            `‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${(event.duration / 60000).toFixed(0)} ph√∫t\n` +
            `üìÖ K·∫øt th√∫c v√†o: ${new Date(Date.now() + event.duration).toLocaleTimeString()}`,
            threadID, messageID
          );
        }

        if (adminAction === "halving") {
          const oldReward = CONFIG.blockReward.current;
          const newReward = Math.floor(oldReward / 2);

          CONFIG.blockReward.current = Math.max(1, newReward);

          if (!global.HALVING_EVENTS) global.HALVING_EVENTS = [];
          global.HALVING_EVENTS.push({
            timestamp: Date.now(),
            blockHeight: CONFIG.blockReward.blockHeight,
            previousReward: oldReward,
            newReward: CONFIG.blockReward.current
          });

          saveData(miningData, marketData);

          if (adminAction === "event") {
            const eventType = target[2]?.toLowerCase();

            if (!eventType || !CONFIG.miningEvents.possibleEvents.find(e => e.id === eventType)) {
              const eventList = CONFIG.miningEvents.possibleEvents.map(e =>
                `‚Ä¢ ${e.id}: ${e.name} (x${e.bonus} ph·∫ßn th∆∞·ªüng, ${(e.duration / 60000).toFixed(0)} ph√∫t)`
              ).join('\n');

              return api.sendMessage(
                "‚ùå Vui l√≤ng ch·ªçn s·ª± ki·ªán h·ª£p l·ªá!\n\n" +
                "üìã Danh s√°ch s·ª± ki·ªán:\n" + eventList + "\n\n" +
                "S·ª≠ d·ª•ng: .coin admin event [eventType]",
                threadID, messageID
              );
            }

            const eventName = eventType === "mining" ? "C∆°n S·ªët ƒê√†o Coin" :
              eventType === "market" ? "Th·ªã Tr∆∞·ªùng S√¥i ƒê·ªông" :
                eventType === "reward" ? "M∆∞a Ph·∫ßn Th∆∞·ªüng" : "Si√™u NƒÉng L∆∞·ª£ng";

            return api.sendMessage(
              `üåü ƒê√É K√çCH HO·∫†T S·ª∞ KI·ªÜN ƒê·∫∂C BI·ªÜT üåü\n` +
              "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
              `‚ú® S·ª± ki·ªán: ${eventName}\n` +
              `‚è±Ô∏è Th·ªùi gian: ${duration} gi·ªù\n` +
              `üìÖ K·∫øt th√∫c: ${new Date(CONFIG.specialEvents[eventType].endTime).toLocaleString()}\n\n` +
              (eventType === "mining" ? "üí° T·ª∑ l·ªá ƒë√†o th√†nh c√¥ng tƒÉng 50%\n" :
                eventType === "market" ? "üí° Bi·∫øn ƒë·ªông th·ªã tr∆∞·ªùng tƒÉng g·∫•p ƒë√¥i\n" :
                  eventType === "reward" ? "üí° Ph·∫ßn th∆∞·ªüng tƒÉng g·∫•p ƒë√¥i\n" :
                    "üí° H·ªìi nƒÉng l∆∞·ª£ng nhanh g·∫•p ƒë√¥i\n") +
              "üí° S·ª± ki·ªán c√≥ hi·ªáu l·ª±c ngay l·∫≠p t·ª©c!",
              threadID, messageID
            );
          }
        }

        if (adminAction === "difficulty") {
          const newDifficulty = parseInt(target[2]);

          if (!newDifficulty || isNaN(newDifficulty) || newDifficulty < 1) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin difficulty [amount]", threadID, messageID);
          }

          const oldDiff = CONFIG.advancedMining.difficulty.current;
          CONFIG.advancedMining.difficulty.current = newDifficulty;
          CONFIG.advancedMining.difficulty.initial = newDifficulty;

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É THAY ƒê·ªîI ƒê·ªò KH√ì TH√ÄNH C√îNG!\n\n" +
            `üîÑ ƒê·ªô kh√≥ c≈©: ${oldDiff}\n` +
            `üîÑ ƒê·ªô kh√≥ m·ªõi: ${newDifficulty}\n` +
            `üéØ T·ª∑ l·ªá th√†nh c√¥ng kho·∫£ng: ${(100 / (2 ** newDifficulty)).toFixed(6)}%`,
            threadID, messageID
          );
        }

        if (adminAction === "reward") {
          const newReward = parseInt(target[2]);

          if (!newReward || isNaN(newReward) || newReward < 1) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin reward [amount]", threadID, messageID);
          }

          const oldReward = CONFIG.blockReward.current;
          CONFIG.blockReward.current = newReward;

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É THAY ƒê·ªîI PH·∫¶N TH∆Ø·ªûNG TH√ÄNH C√îNG!\n\n" +
            `üí∞ Ph·∫ßn th∆∞·ªüng c≈©: ${oldReward} LCoin\n` +
            `üí∞ Ph·∫ßn th∆∞·ªüng m·ªõi: ${newReward} LCoin\n` +
            `üìä Thay ƒë·ªïi: ${newReward > oldReward ? "+" : ""}${((newReward - oldReward) / oldReward * 100).toFixed(0)}%`,
            threadID, messageID
          );
        }

        if (adminAction === "energy") {
          const targetUID = target[2];
          const amount = parseInt(target[3]);

          if (!targetUID || !amount || isNaN(amount)) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin energy [UID] [amount]", threadID, messageID);
          }

          if (!miningData[targetUID]) {
            return api.sendMessage("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.", threadID, messageID);
          }

          const oldEnergy = miningData[targetUID].energy || 0;
          miningData[targetUID].energy = Math.min(CONFIG.energySystem.maxEnergy, Math.max(0, amount));
          miningData[targetUID].lastEnergyUpdate = Date.now();

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ ƒê√É THAY ƒê·ªîI NƒÇNG L∆Ø·ª¢NG TH√ÄNH C√îNG!\n\n" +
            `üë§ UID: ${targetUID}\n` +
            `‚ö° NƒÉng l∆∞·ª£ng c≈©: ${oldEnergy}/${CONFIG.energySystem.maxEnergy}\n` +
            `‚ö° NƒÉng l∆∞·ª£ng m·ªõi: ${miningData[targetUID].energy}/${CONFIG.energySystem.maxEnergy}`,
            threadID, messageID
          );
        }

        if (adminAction === "view") {
          const targetUID = target[2];

          if (!targetUID) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: .coin admin view [UID]", threadID, messageID);
          }

          if (!miningData[targetUID]) {
            return api.sendMessage("‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.", threadID, messageID);
          }

          const player = miningData[targetUID];
          const upgrades = player.upgrades;
          const specialUpgrades = player.specialUpgrades || {};

          return api.sendMessage(
            "üëÅÔ∏è XEM TH√îNG TIN NG∆Ø·ªúI D√ôNG üëÅÔ∏è\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üë§ UID: ${targetUID}\n` +
            `üë§ T√™n: ${player.name || "Kh√¥ng x√°c ƒë·ªãnh"}\n` +
            `üíé Coins: ${player.coins.toLocaleString()} LC (‚âà ${(player.coins * marketData.price).toLocaleString()}$)\n` +
            `‚ö° NƒÉng l∆∞·ª£ng: ${player.energy?.toFixed(1) || 0}/${CONFIG.energySystem.maxEnergy}\n\n` +

            "‚öôÔ∏è N√ÇNG C·∫§P:\n" +
            `‚Ä¢ Power: ${upgrades?.power || 0}/10\n` +
            `‚Ä¢ Efficiency: ${upgrades?.efficiency || 0}/10\n` +
            `‚Ä¢ Cooling: ${upgrades?.cooling || 0}/10\n` +
            (specialUpgrades.gpu ? `‚Ä¢ GPU: ${specialUpgrades.gpu.modelName}\n` : "") +
            (specialUpgrades.coolingsystem ? `‚Ä¢ Cooling: ${specialUpgrades.coolingsystem.modelName}\n` : "") +
            "\n" +

            "üìä TH·ªêNG K√ä:\n" +
            `‚Ä¢ T·ªïng ƒë√£ ƒë√†o: ${player.stats?.totalMined.toLocaleString() || 0} LC\n` +
            `‚Ä¢ ƒê√†o th√†nh c√¥ng: ${player.stats?.successfulMines || 0}\n` +
            `‚Ä¢ ƒê√†o th·∫•t b·∫°i: ${player.stats?.failedMines || 0}\n\n` +

            "üîß THAO T√ÅC:\n" +
            "‚Ä¢ .coin admin give [UID] [amount] - Th√™m coin\n" +
            "‚Ä¢ .coin admin take [UID] [amount] - Tr·ª´ coin\n" +
            "‚Ä¢ .coin admin reset [UID] - ƒê·∫∑t l·∫°i t√†i kho·∫£n",
            threadID, messageID
          );
        }

        if (adminAction === "stats") {
          const totalPlayers = Object.keys(miningData).length;
          const totalCoins = CONFIG.coinLimit.currentSupply;
          const percentMined = (totalCoins / CONFIG.coinLimit.maxSupply * 100).toFixed(2);
          const totalHeld = Object.values(miningData).reduce((sum, p) => sum + p.coins, 0);
          const circulatingSupply = Math.max(0, totalCoins - totalHeld);

          let richestPlayer = { uid: null, coins: 0 };
          for (const [uid, data] of Object.entries(miningData)) {
            if (data.coins > richestPlayer.coins) {
              richestPlayer = { uid, coins: data.coins };
            }
          }

          return api.sendMessage(
            "üìä TH·ªêNG K√ä H·ªÜ TH·ªêNG üìä\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üí∞ D·ªÆ LI·ªÜU COIN:\n" +
            `‚Ä¢ T·ªïng ƒë√£ ƒë√†o: ${totalCoins.toLocaleString()}/${CONFIG.coinLimit.maxSupply.toLocaleString()} (${percentMined}%)\n` +
            `‚Ä¢ ƒêang l∆∞u th√¥ng: ${circulatingSupply.toLocaleString()} (${(circulatingSupply / totalCoins * 100).toFixed(2)}%)\n` +
            `‚Ä¢ ƒêang ƒë∆∞·ª£c gi·ªØ: ${totalHeld.toLocaleString()} (${(totalHeld / totalCoins * 100).toFixed(2)}%)\n\n` +

            "üë• NG∆Ø·ªúI D√ôNG:\n" +
            `‚Ä¢ T·ªïng ng∆∞·ªùi ch∆°i: ${totalPlayers}\n` +
            `‚Ä¢ Ng∆∞·ªùi gi√†u nh·∫•t: ${richestPlayer.uid} (${richestPlayer.coins.toLocaleString()} LC)\n\n` +

            "üåê TH·ªä TR∆Ø·ªúNG:\n" +
            `‚Ä¢ Gi√° hi·ªán t·∫°i: ${marketData.price.toLocaleString()}$\n` +
            `‚Ä¢ T·ªïng gi√° tr·ªã: ${(totalCoins * marketData.price).toLocaleString()}$\n` +
            `‚Ä¢ Kh·ªëi l∆∞·ª£ng giao d·ªãch: ${CONFIG.market.tradingVolume.totalVolume.toLocaleString()} LC\n\n` +

            "‚õìÔ∏è BLOCKCHAIN:\n" +
            `‚Ä¢ Block hi·ªán t·∫°i: #${CONFIG.blockReward.blockHeight}\n` +
            `‚Ä¢ Ph·∫ßn th∆∞·ªüng: ${CONFIG.blockReward.current} LC\n` +
            `‚Ä¢ ƒê·ªô kh√≥: ${CONFIG.advancedMining.difficulty.current}\n` +
            `‚Ä¢ K·ª∑ nguy√™n: ${CONFIG.epochs.list[CONFIG.epochs.currentEpoch].name}`,
            threadID, messageID
          );
        }

        if (adminAction === "export") {
          const exportData = {
            config: CONFIG,
            marketData: marketData,
            players: Object.keys(miningData).length,
            timestamp: Date.now()
          };

          const exportFilePath = path.join(__dirname, '../exported_coin_data.json');
          fs.writeFileSync(exportFilePath, JSON.stringify(exportData, null, 2));

          return api.sendMessage(
            "‚úÖ XU·∫§T D·ªÆ LI·ªÜU TH√ÄNH C√îNG!\n\n" +
            `üìÇ File: exported_coin_data.json\n` +
            `üìä K√≠ch th∆∞·ªõc: ${(JSON.stringify(exportData).length / 1024).toFixed(2)} KB\n` +
            `‚è∞ Th·ªùi gian: ${new Date().toLocaleString()}`,
            threadID, messageID
          );
        }

        return api.sendMessage("‚ùå L·ªánh admin kh√¥ng h·ª£p l·ªá! D√πng .coin admin ƒë·ªÉ xem danh s√°ch l·ªánh.", threadID, messageID);
        break;
      }
      case "wallet": {
        // ƒê·∫£m b·∫£o ng∆∞·ªùi ch∆°i ƒë√£ c√≥ v√≠
        initializeWallet(player, senderID);

        // X·ª≠ l√Ω c√°c sub-command
        const subCommand = target[1]?.toLowerCase();

        if (!subCommand || subCommand === "info") {
          // Hi·ªÉn th·ªã th√¥ng tin v√≠
          let pendingIn = 0;
          let pendingOut = 0;

          player.wallet.pendingTx.forEach(tx => {
            if (tx.direction === 'in') pendingIn += tx.amount;
            else pendingOut += tx.amount + tx.fee;
          });

          return api.sendMessage(
            "üíº V√ç LCOIN C·ª¶A B·∫†N üíº\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +

            `üìá ƒê·ªäA CH·ªà V√ç:\n` +
            `${player.wallet.address}\n\n` +

            `üí∞ S·ªê D∆Ø:\n` +
            `‚Ä¢ Hi·ªán c√≥: ${player.coins.toLocaleString()} LC (‚âà ${(player.coins * marketData.price).toLocaleString()}$)\n` +
            (pendingIn > 0 ? `‚Ä¢ ƒêang nh·∫≠n: +${pendingIn.toLocaleString()} LC\n` : "") +
            (pendingOut > 0 ? `‚Ä¢ ƒêang g·ª≠i: -${pendingOut.toLocaleString()} LC\n` : "") +
            `‚Ä¢ Gi√° hi·ªán t·∫°i: ${marketData.price.toLocaleString()}$/LC\n\n` +

            `üìä GIAO D·ªäCH:\n` +
            `‚Ä¢ ƒêang ch·ªù x√°c nh·∫≠n: ${player.wallet.pendingTx.length}\n` +
            `‚Ä¢ L·ªãch s·ª≠ giao d·ªãch: ${player.wallet.transactions.length}\n\n` +

            `üìå H∆Ø·ªöNG D·∫™N:\n` +
            `‚Ä¢ .coin wallet send [ƒë·ªãa ch·ªâ] [s·ªë l∆∞·ª£ng] [ghi ch√∫] - G·ª≠i coin\n` +
            `‚Ä¢ .coin wallet history - Xem l·ªãch s·ª≠ giao d·ªãch\n` +
            `‚Ä¢ .coin wallet pending - Xem giao d·ªãch ƒëang x·ª≠ l√Ω\n\n` +

            `üí° M·∫πo: Sao ch√©p ƒë·ªãa ch·ªâ v√≠ n√†y ƒë·ªÉ nh·∫≠n coin t·ª´ ng∆∞·ªùi kh√°c!`,
            threadID, messageID
          );
        }

        if (subCommand === "send") {
          const receiverAddress = target[2];
          const amount = parseInt(target[3]);
          const memo = target.slice(4).join(' ');

          if (!receiverAddress || !amount || isNaN(amount) || amount <= 0) {
            return api.sendMessage(
              "‚ùå Th√¥ng tin giao d·ªãch kh√¥ng h·ª£p l·ªá!\n\n" +
              "S·ª≠ d·ª•ng: .coin wallet send [ƒë·ªãa ch·ªâ] [s·ªë l∆∞·ª£ng] [ghi ch√∫]\n" +
              "V√≠ d·ª•: .coin wallet send LC1234ABCD... 1000 Chuy·ªÉn ti·ªÅn mua h√†ng",
              threadID, messageID
            );
          }

          if (receiverAddress === player.wallet.address) {
            return api.sendMessage("‚ùå Kh√¥ng th·ªÉ g·ª≠i coin cho ch√≠nh m√¨nh!", threadID, messageID);
          }

          const result = processTransaction(player, receiverAddress, amount, memo, miningData);

          if (result.success) {
            saveData(miningData, marketData);
          }

          return api.sendMessage(result.message, threadID, messageID);
        }

        if (subCommand === "history") {
          if (player.wallet.transactions.length === 0) {
            return api.sendMessage(
              "üìú L·ªäCH S·ª¨ GIAO D·ªäCH\n\n" +
              "B·∫°n ch∆∞a c√≥ giao d·ªãch n√†o!",
              threadID, messageID
            );
          }

          let historyMsg = "üìú L·ªäCH S·ª¨ GIAO D·ªäCH G·∫¶N ƒê√ÇY üìú\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

          const sortedTx = [...player.wallet.transactions].sort((a, b) => b.timestamp - a.timestamp);

          sortedTx.slice(0, 5).forEach((tx, i) => {
            const dateStr = new Date(tx.timestamp).toLocaleString();
            const isReceived = tx.to === player.wallet.address;

            historyMsg += `${i + 1}. ${isReceived ? 'üì• NH·∫¨N' : 'üì§ G·ª¨I'} | ${dateStr}\n`;
            historyMsg += `üÜî TX: ${tx.txID.substring(0, 8)}...${tx.txID.substring(tx.txID.length - 4)}\n`;
            historyMsg += `üí∞ S·ªë l∆∞·ª£ng: ${tx.amount.toLocaleString()} LC\n`;

            if (isReceived) {
              historyMsg += `üì§ T·ª´: ${tx.from.substring(0, 6)}...${tx.from.substring(tx.from.length - 4)}\n`;
            } else {
              historyMsg += `üì• ƒê·∫øn: ${tx.to.substring(0, 6)}...${tx.to.substring(tx.to.length - 4)}\n`;
              historyMsg += `üîç Ph√≠: ${tx.fee.toLocaleString()} LC\n`;
            }

            if (tx.memo) historyMsg += `üìù Ghi ch√∫: ${tx.memo}\n`;
            historyMsg += `üîÑ Tr·∫°ng th√°i: ${tx.status === 'confirmed' ? '‚úÖ Ho√†n t·∫•t' : tx.status === 'failed' ? '‚ùå Th·∫•t b·∫°i' : '‚è≥ ƒêang x·ª≠ l√Ω'}\n\n`;
          });

          historyMsg += "Xem th√™m: .coin wallet history [s·ªë trang]";

          return api.sendMessage(historyMsg, threadID, messageID);
        }

        if (subCommand === "pending") {
          if (player.wallet.pendingTx.length === 0) {
            return api.sendMessage(
              "üìã GIAO D·ªäCH ƒêANG CH·ªú X√ÅC NH·∫¨N\n\n" +
              "Kh√¥ng c√≥ giao d·ªãch n√†o ƒëang ch·ªù x√°c nh·∫≠n!",
              threadID, messageID
            );
          }

          let pendingMsg = "üìã GIAO D·ªäCH ƒêANG CH·ªú X√ÅC NH·∫¨N üìã\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

          player.wallet.pendingTx.forEach((tx, i) => {
            const isReceived = tx.direction === 'in';

            pendingMsg += `${i + 1}. ${isReceived ? 'üì• NH·∫¨N' : 'üì§ G·ª¨I'} ${tx.txID.substring(0, 8)}...\n`;
            pendingMsg += `üí∞ S·ªë l∆∞·ª£ng: ${tx.amount.toLocaleString()} LC\n`;

            if (isReceived) {
              pendingMsg += `üì§ T·ª´: ${tx.from.substring(0, 6)}...${tx.from.substring(tx.from.length - 4)}\n`;
            } else {
              pendingMsg += `üì• ƒê·∫øn: ${tx.to.substring(0, 6)}...${tx.to.substring(tx.to.length - 4)}\n`;
              pendingMsg += `üîç Ph√≠: ${tx.fee.toLocaleString()} LC\n`;
            }

            pendingMsg += `üîÑ X√°c nh·∫≠n: ${tx.confirmations}/${CONFIG.walletSystem.confirmations}\n`;
            pendingMsg += `‚è±Ô∏è C√≤n kho·∫£ng: ${Math.max(0, CONFIG.walletSystem.confirmations - tx.confirmations)} blocks\n\n`;
          });

          return api.sendMessage(pendingMsg, threadID, messageID);
        }

        return api.sendMessage(
          "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng:\n" +
          "‚Ä¢ .coin wallet - Xem th√¥ng tin v√≠\n" +
          "‚Ä¢ .coin wallet send [ƒë·ªãa ch·ªâ] [s·ªë l∆∞·ª£ng] [ghi ch√∫] - G·ª≠i coin\n" +
          "‚Ä¢ .coin wallet history - Xem l·ªãch s·ª≠ giao d·ªãch\n" +
          "‚Ä¢ .coin wallet pending - Xem giao d·ªãch ƒëang x·ª≠ l√Ω",
          threadID, messageID
        );
        break;
      }
      case "buy":
        if (!target[1]) {
          return api.sendMessage(
            "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!\n\n" +
            "üí° C√°ch s·ª≠ d·ª•ng:\n" +
            "‚Ä¢ .coin buy [s·ªë l∆∞·ª£ng] - Mua s·ªë l∆∞·ª£ng c·ª• th·ªÉ\n" +
            "‚Ä¢ .coin buy max - Mua t·ªëi ƒëa c√≥ th·ªÉ\n" +
            "‚Ä¢ .coin buy half - D√πng m·ªôt n·ª≠a s·ªë ti·ªÅn ƒë·ªÉ mua\n\n" +
            "üí° LCoin ch·ªâ ƒë∆∞·ª£c ph√©p giao d·ªãch trong ph·∫°m vi ƒë√£ ƒë√†o",
            threadID,
            messageID
          );
        }

        const userBalance = await getBalance(senderID);
        const totalMined = CONFIG.coinLimit.currentSupply;
        const totalHeld = Object.values(miningData).reduce((total, p) => total + p.coins, 0);
        const circulatingSupply = Math.max(0, totalMined - totalHeld);

        let buyAmount;
        if (target[1].toLowerCase() === "max") {
          buyAmount = Math.min(
            Math.floor(userBalance / marketData.price),
            circulatingSupply,
            Math.floor(circulatingSupply * 0.25)
          );
        } else if (target[1].toLowerCase() === "half") {
          buyAmount = Math.min(
            Math.floor(userBalance / 2 / marketData.price),
            circulatingSupply,
            Math.floor(circulatingSupply * 0.25)
          );
        } else {
          buyAmount = parseInt(target[1]);
          if (!buyAmount || buyAmount <= 0) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!",
              threadID,
              messageID
            );
          }
        }

        const manipulationCheck = checkTradeManipulation(
          player,
          buyAmount,
          "buy",
          marketData,
          miningData
        );

        if (!manipulationCheck.allowed) {
          return api.sendMessage(
            `‚ùå GIAO D·ªäCH B·ªä T·ª™ CH·ªêI!\n\n` +
            `L√Ω do: ${manipulationCheck.reason}\n` +
            `üí° H·ªá th·ªëng ch·ªëng thao t√∫ng ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ b·∫£o v·ªá th·ªã tr∆∞·ªùng`,
            threadID, messageID
          );
        }
        if (circulatingSupply <= 0) {
          return api.sendMessage(
            "‚ùå KH√îNG TH·ªÇ MUA COIN!\n\n" +
            "L√Ω do: Kh√¥ng c√≥ coin l∆∞u th√¥ng tr√™n th·ªã tr∆∞·ªùng\n" +
            `üíé T·ªïng coin ƒë√£ ƒë√†o: ${totalMined.toLocaleString()} LCoin\n` +
            `üîí S·ªë coin ƒëang ƒë∆∞·ª£c gi·ªØ: ${totalHeld.toLocaleString()} LCoin\n\n` +
            "üí° H√£y ch·ªù ng∆∞·ªùi kh√°c b√°n ra ƒë·ªÉ c√≥ th·ªÉ mua v√†o!",
            threadID,
            messageID
          );
        }

        const maxBuyPerTransaction = Math.floor(circulatingSupply * 0.25);

        if (target[1].toLowerCase() === "max") {
          buyAmount = Math.min(
            Math.floor(userBalance / marketData.price),
            circulatingSupply,
            maxBuyPerTransaction
          );
        } else if (target[1].toLowerCase() === "half") {
          buyAmount = Math.min(
            Math.floor(userBalance / 2 / marketData.price),
            circulatingSupply,
            maxBuyPerTransaction
          );
        } else {
          buyAmount = parseInt(target[1]);
          if (!buyAmount || buyAmount <= 0) {
            return api.sendMessage(
              "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!",
              threadID,
              messageID
            );
          }

          if (buyAmount > circulatingSupply) {
            return api.sendMessage(
              "‚ùå KH√îNG ƒê·ª¶ COIN TRONG TH·ªä TR∆Ø·ªúNG!\n\n" +
              `üîÑ Coin ƒëang l∆∞u th√¥ng: ${circulatingSupply.toLocaleString()} LCoin\n` +
              `üí∞ S·ªë coin b·∫°n mu·ªën mua: ${buyAmount.toLocaleString()} LCoin\n` +
              "üí° H√£y th·ª≠ mua m·ªôt s·ªë l∆∞·ª£ng nh·ªè h∆°n!",
              threadID,
              messageID
            );
          }

          if (buyAmount > maxBuyPerTransaction) {
            return api.sendMessage(
              "‚ùå V∆Ø·ª¢T QU√Å GI·ªöI H·∫†N MUA M·ªñI GIAO D·ªäCH!\n\n" +
              `üí∞ S·ªë coin mu·ªën mua: ${buyAmount.toLocaleString()}\n` +
              `üîÑ Gi·ªõi h·∫°n m·ªói giao d·ªãch: ${maxBuyPerTransaction.toLocaleString()} (25% l∆∞·ª£ng coin l∆∞u th√¥ng)\n` +
              "üí° H√£y chia nh·ªè giao d·ªãch ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng th·ªã tr∆∞·ªùng",
              threadID,
              messageID
            );
          }
        }

        const baseCost = Math.ceil(buyAmount * marketData.price);
        const buyRatio = buyAmount / circulatingSupply;
        const taxRate = Math.min(0.3, buyRatio * 0.5);
        const tax = Math.ceil(baseCost * taxRate);
        const TaxtotalCost = baseCost + tax;

        if (TaxtotalCost > userBalance) {
          return api.sendMessage(
            "‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ mua (bao g·ªìm thu·∫ø giao d·ªãch)!\n\n" +
            `üíµ S·ªë d∆∞: ${userBalance.toLocaleString()}$\n` +
            `üí∞ Chi ph√≠ c∆° b·∫£n: ${baseCost.toLocaleString()}$\n` +
            `üßæ Thu·∫ø giao d·ªãch: ${tax.toLocaleString()}$ (${(taxRate * 100).toFixed(1)}%)\n` +
            `üí∏ T·ªïng c·∫ßn: ${TaxtotalCost.toLocaleString()}$\n\n` +
            "üí° Giao d·ªãch l·ªõn ch·ªãu thu·∫ø cao h∆°n ƒë·ªÉ ngƒÉn thao t√∫ng th·ªã tr∆∞·ªùng",
            threadID,
            messageID
          );
        }

        if (buyAmount <= 0) {
          return api.sendMessage(
            "‚ùå Kh√¥ng th·ªÉ mua s·ªë l∆∞·ª£ng n√†y!",
            threadID,
            messageID
          );
        }

        await updateBalance(senderID, -TaxtotalCost);
        player.coins += buyAmount;
        CONFIG.market.tradingVolume.buy += buyAmount;
        CONFIG.market.tradingVolume.totalVolume += buyAmount;

        if (player.coins > CONFIG.coinLimit.currentSupply * 0.4) {

          marketData.npcActivities = marketData.npcActivities || [];
          marketData.npcActivities.push({
            type: "sell",
            amount: Math.floor(player.coins * 0.1),
            price: marketData.price * 1.2,
            timestamp: Date.now(),
            duration: 48 * 60 * 60 * 1000
          });

          api.sendMessage(
            "‚ö†Ô∏è C·∫¢NH B√ÅO TH·ªä TR∆Ø·ªúNG: Ph√°t hi·ªán ƒë·∫ßu c∆° l·ªõn!\n" +
            "C√°c nh√† ƒë·∫ßu t∆∞ kh√°c s·∫Ω b·∫Øt ƒë·∫ßu b√°n coin ra th·ªã tr∆∞·ªùng ƒë·ªÉ c√¢n b·∫±ng gi√°.",
            threadID
          );
        }

        api.sendMessage(
          "üí∞ MUA LCOIN TH√ÄNH C√îNG üí∞\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          `üì• S·ªë l∆∞·ª£ng: ${buyAmount.toLocaleString()} LCoin\n` +
          `üíµ Chi ph√≠: ${baseCost.toLocaleString()}$\n` +
          (tax > 0 ? `üßæ Thu·∫ø giao d·ªãch: ${tax.toLocaleString()}$ (${(taxRate * 100).toFixed(1)}%)\n` : "") +
          `üí∏ T·ªïng chi: ${TaxtotalCost.toLocaleString()}$\n` +
          `üíé LCoin hi·ªán c√≥: ${player.coins.toLocaleString()}\n` +
          `üîÑ Coin c√≤n l∆∞u th√¥ng: ${(circulatingSupply - buyAmount).toLocaleString()}\n\n` +
          `üìä Gi√° th·ªã tr∆∞·ªùng: ${marketData.price}$/LCoin`,
          threadID,
          messageID
        );
        break;

      case "blocks":
        if (!CONFIG.blockHistory || CONFIG.blockHistory.blocks.length === 0) {
          return api.sendMessage(
            "üìã L·ªäCH S·ª¨ BLOCK üìã\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "Ch∆∞a c√≥ block n√†o ƒë∆∞·ª£c ƒë√†o.\n" +
            "üí° Khi c√≥ ng∆∞·ªùi ƒë√†o ƒë∆∞·ª£c block, th√¥ng tin s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y!",
            threadID,
            messageID
          );
        }

        const blockCount = parseInt(target[1]) || 5;
        const recentBlocks = CONFIG.blockHistory.blocks.slice(
          -Math.min(blockCount, 10)
        );

        let blocksMessage =
          "üìã L·ªäCH S·ª¨ BLOCK G·∫¶N NH·∫§T üìã\n" + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

        recentBlocks.forEach((block) => {
          const date = new Date(block.timestamp).toLocaleString("vi-VN");
          blocksMessage +=
            `üßä Block #${block.height}\n` +
            `‚õèÔ∏è ƒê√†o b·ªüi: ${block.miner}\n` +
            `üí∞ Ph·∫ßn th∆∞·ªüng: ${block.reward} LCoin\n` +
            `üî• ƒê·ªô kh√≥: ${block.difficulty.toFixed(2)}\n` +
            `‚è∞ Th·ªùi gian: ${date}\n\n`;
        });

        blocksMessage += `üí° Xem th√™m: .coin blocks [s·ªë l∆∞·ª£ng]`;

        api.sendMessage(blocksMessage, threadID, messageID);
        break;

      case "trade": {
        initializeWallet(player, senderID);

        const tradeAction = target[1]?.toLowerCase();

        if (!tradeAction || !["create", "accept", "cancel", "list", "info"].includes(tradeAction)) {
          return api.sendMessage(
            "üîÑ GIAO D·ªäCH P2P LCOIN üîÑ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            "üìå CH·ª®C NƒÇNG:\n" +
            "‚Ä¢ .coin trade create [s·ªë l∆∞·ª£ng] [gi√°/LC] - T·∫°o l·ªánh b√°n\n" +
            "‚Ä¢ .coin trade accept [ID giao d·ªãch] - Ch·∫•p nh·∫≠n giao d·ªãch\n" +
            "‚Ä¢ .coin trade list - Xem c√°c l·ªánh ƒëang c√≥\n" +
            "‚Ä¢ .coin trade cancel [ID giao d·ªãch] - H·ªßy l·ªánh c·ªßa b·∫°n\n" +
            "‚Ä¢ .coin trade info [ID giao d·ªãch] - Xem chi ti·∫øt giao d·ªãch\n\n" +
            "üí° Giao d·ªãch P2P cho ph√©p mua b√°n tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi ch∆°i kh√°c",
            threadID, messageID
          );
        }

        if (!global.tradingSystem) {
          global.tradingSystem = {
            offers: [],
            history: [],
            lastOfferId: 0
          };
        }

        if (tradeAction === "create") {
          const amount = parseInt(target[2]);
          const pricePerCoin = parseInt(target[3]);

          if (!amount || isNaN(amount) || amount <= 0 || !pricePerCoin || isNaN(pricePerCoin) || pricePerCoin <= 0) {
            return api.sendMessage(
              "‚ùå Th√¥ng tin giao d·ªãch kh√¥ng h·ª£p l·ªá!\n\n" +
              "S·ª≠ d·ª•ng: .coin trade create [s·ªë l∆∞·ª£ng] [gi√°/LC]\n" +
              "V√≠ d·ª•: .coin trade create 1000 2000 (b√°n 1000 LC, gi√° 2000$/LC)",
              threadID, messageID
            );
          }

          if (amount > player.coins) {
            return api.sendMessage(
              "‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß coin ƒë·ªÉ t·∫°o l·ªánh n√†y!\n\n" +
              `üí∞ S·ªë LCoin hi·ªán c√≥: ${player.coins.toLocaleString()}\n` +
              `üí∏ S·ªë c·∫ßn b√°n: ${amount.toLocaleString()}`,
              threadID, messageID
            );
          }

          const tradeFee = Math.ceil(amount * 0.01);
          const totalAmount = amount + tradeFee;

          if (totalAmount > player.coins) {
            return api.sendMessage(
              "‚ùå Kh√¥ng ƒë·ªß coin ƒë·ªÉ thanh to√°n ph√≠ giao d·ªãch!\n\n" +
              `üí∞ B·∫°n c√≥: ${player.coins.toLocaleString()} LC\n` +
              `üî¢ S·ªë c·∫ßn b√°n: ${amount.toLocaleString()} LC\n` +
              `üßæ Ph√≠ giao d·ªãch: ${tradeFee.toLocaleString()} LC (1%)\n` +
              `üí∏ T·ªïng c·∫ßn: ${totalAmount.toLocaleString()} LC`,
              threadID, messageID
            );
          }

          player.coins -= totalAmount;

          const tradeId = 'T' + (++global.tradingSystem.lastOfferId).toString().padStart(4, '0');

          const newTrade = {
            id: tradeId,
            sellerId: senderID,
            sellerAddress: player.wallet.address,
            sellerName: player.name || "Ng∆∞·ªùi b√°n",
            amount: amount,
            price: pricePerCoin,
            totalValue: amount * pricePerCoin,
            fee: tradeFee,
            status: "active",
            createdAt: Date.now(),
            expiresAt: Date.now() + 24 * 60 * 60 * 1000
          };

          global.tradingSystem.offers.push(newTrade);

          if (!player.wallet.pendingTrades) player.wallet.pendingTrades = [];
          player.wallet.pendingTrades.push(newTrade);

          saveData(miningData, marketData);

          return api.sendMessage(
            "‚úÖ T·∫†O L·ªÜNH B√ÅN TH√ÄNH C√îNG ‚úÖ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üÜî M√£ giao d·ªãch: ${tradeId}\n` +
            `üí∞ S·ªë l∆∞·ª£ng: ${amount.toLocaleString()} LC\n` +
            `üíµ Gi√°: ${pricePerCoin.toLocaleString()}$/LC\n` +
            `üí∏ T·ªïng gi√° tr·ªã: ${(amount * pricePerCoin).toLocaleString()}$\n` +
            `üßæ Ph√≠ giao d·ªãch: ${tradeFee.toLocaleString()} LC\n\n` +
            `‚è±Ô∏è H·∫øt h·∫°n sau: 24 gi·ªù\n\n` +
            `üìù L·ªánh ƒë√£ ƒë∆∞·ª£c ƒëƒÉng l√™n s√†n giao d·ªãch!\n` +
            `üí° Ng∆∞·ªùi mua s·∫Ω s·ª≠ d·ª•ng .coin trade accept ${tradeId} ƒë·ªÉ mua`,
            threadID, messageID
          );
        }

        if (tradeAction === "list") {
          const activeOffers = global.tradingSystem.offers.filter(offer =>
            offer.status === "active" && offer.expiresAt > Date.now()
          );

          if (activeOffers.length === 0) {
            return api.sendMessage(
              "üìã DANH S√ÅCH GIAO D·ªäCH üìã\n" +
              "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
              "Hi·ªán kh√¥ng c√≥ l·ªánh giao d·ªãch n√†o ƒëang ho·∫°t ƒë·ªông!\n\n" +
              "üí° T·∫°o l·ªánh b√°n m·ªõi: .coin trade create [s·ªë l∆∞·ª£ng] [gi√°/LC]",
              threadID, messageID
            );
          }

          activeOffers.sort((a, b) => a.price - b.price);

          let listMessage = "üìã DANH S√ÅCH GIAO D·ªäCH üìã\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";

          activeOffers.forEach((offer, index) => {
            const timeLeft = Math.max(0, Math.floor((offer.expiresAt - Date.now()) / (60 * 60 * 1000)));

            listMessage += `${index + 1}. ID: ${offer.id} | ${offer.sellerName}\n` +
              `üí∞ S·ªë l∆∞·ª£ng: ${offer.amount.toLocaleString()} LC\n` +
              `üíµ Gi√°: ${offer.price.toLocaleString()}$/LC\n` +
              `üí∏ T·ªïng: ${offer.totalValue.toLocaleString()}$\n` +
              `‚è±Ô∏è C√≤n: ${timeLeft} gi·ªù\n\n`;
          });

          listMessage += "üëâ Mua: .coin trade accept [ID giao d·ªãch]\n" +
            "üëâ Chi ti·∫øt: .coin trade info [ID giao d·ªãch]";

          return api.sendMessage(listMessage, threadID, messageID);
        }

        if (tradeAction === "info") {
          const tradeId = target[2];

          if (!tradeId) {
            return api.sendMessage("‚ùå Vui l√≤ng cung c·∫•p ID giao d·ªãch!", threadID, messageID);
          }

          const trade = global.tradingSystem.offers.find(o => o.id === tradeId);

          if (!trade) {
            return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi ID n√†y!", threadID, messageID);
          }

          const timeLeft = Math.max(0, Math.floor((trade.expiresAt - Date.now()) / (60 * 60 * 1000)));
          const marketComparison = trade.price > marketData.price ?
            `‚ö†Ô∏è Cao h∆°n th·ªã tr∆∞·ªùng ${((trade.price / marketData.price - 1) * 100).toFixed(1)}%` :
            `‚úÖ Th·∫•p h∆°n th·ªã tr∆∞·ªùng ${((1 - trade.price / marketData.price) * 100).toFixed(1)}%`;

          return api.sendMessage(
            "üìä CHI TI·∫æT GIAO D·ªäCH üìä\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üÜî M√£ giao d·ªãch: ${trade.id}\n` +
            `üë§ Ng∆∞·ªùi b√°n: ${trade.sellerName}\n` +
            `üìá ƒê·ªãa ch·ªâ v√≠: ${trade.sellerAddress.substring(0, 10)}...${trade.sellerAddress.substring(trade.sellerAddress.length - 6)}\n\n` +

            `üí∞ TH√îNG TIN GIAO D·ªäCH:\n` +
            `‚Ä¢ S·ªë l∆∞·ª£ng: ${trade.amount.toLocaleString()} LC\n` +
            `‚Ä¢ ƒê∆°n gi√°: ${trade.price.toLocaleString()}$/LC\n` +
            `‚Ä¢ T·ªïng gi√° tr·ªã: ${trade.totalValue.toLocaleString()}$\n` +
            `‚Ä¢ So v·ªõi th·ªã tr∆∞·ªùng: ${marketComparison}\n\n` +

            `‚è±Ô∏è TH·ªúI GIAN:\n` +
            `‚Ä¢ T·∫°o l√∫c: ${new Date(trade.createdAt).toLocaleString()}\n` +
            `‚Ä¢ C√≤n l·∫°i: ${timeLeft} gi·ªù\n` +
            `‚Ä¢ Tr·∫°ng th√°i: ${trade.status === "active" ? "‚úÖ ƒêang ho·∫°t ƒë·ªông" : "‚ùå ƒê√£ k·∫øt th√∫c"}\n\n` +

            `üí° THAO T√ÅC:\n` +
            `‚Ä¢ Mua: .coin trade accept ${trade.id}\n` +
            `‚Ä¢ H·ªßy: .coin trade cancel ${trade.id} (ch·ªâ ng∆∞·ªùi t·∫°o)`,
            threadID, messageID
          );
        }

        if (tradeAction === "accept") {
          const tradeId = target[2];

          if (!tradeId) {
            return api.sendMessage("‚ùå Vui l√≤ng cung c·∫•p ID giao d·ªãch!", threadID, messageID);
          }

          const trade = global.tradingSystem.offers.find(o => o.id === tradeId && o.status === "active");

          if (!trade) {
            return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch ho·∫°t ƒë·ªông v·ªõi ID n√†y!", threadID, messageID);
          }

          if (trade.sellerId === senderID) {
            return api.sendMessage("‚ùå B·∫°n kh√¥ng th·ªÉ mua l·ªánh do ch√≠nh m√¨nh t·∫°o ra!", threadID, messageID);
          }

          if (trade.expiresAt < Date.now()) {
            return api.sendMessage("‚ùå Giao d·ªãch n√†y ƒë√£ h·∫øt h·∫°n!", threadID, messageID);
          }

          const userBalance = await getBalance(senderID);

          if (userBalance < trade.totalValue) {
            return api.sendMessage(
              "‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ ch·∫•p nh·∫≠n giao d·ªãch n√†y!\n\n" +
              `üíµ S·ªë d∆∞: ${userBalance.toLocaleString()}$\n` +
              `üí∏ C·∫ßn: ${trade.totalValue.toLocaleString()}$`,
              threadID, messageID
            );
          }

          await updateBalance(senderID, -trade.totalValue);

          await updateBalance(trade.sellerId, trade.totalValue);

          player.coins += trade.amount;

          trade.status = "completed";
          trade.buyerId = senderID;
          trade.buyerName = player.name || "Ng∆∞·ªùi mua";
          trade.completedAt = Date.now();

          global.tradingSystem.history.push(trade);

          const seller = miningData[trade.sellerId];
          if (seller && seller.wallet) {
            if (seller.wallet.pendingTrades) {
              const pendingIndex = seller.wallet.pendingTrades.findIndex(t => t.id === trade.id);
              if (pendingIndex !== -1) {
                seller.wallet.pendingTrades.splice(pendingIndex, 1);
              }
            }

            if (!seller.wallet.tradeHistory) seller.wallet.tradeHistory = [];
            seller.wallet.tradeHistory.push({
              ...trade,
              type: "sell"
            });
          }

          if (!player.wallet.tradeHistory) player.wallet.tradeHistory = [];
          player.wallet.tradeHistory.push({
            ...trade,
            type: "buy"
          });

          marketData.history.push({
            price: trade.price,
            timestamp: Date.now(),
            volume: trade.amount,
            type: "p2p_trade"
          });

          CONFIG.market.tradingVolume.totalVolume += trade.amount;

          saveData(miningData, marketData);

          api.sendMessage(
            "üí∞ L·ªÜNH GIAO D·ªäCH ƒê√É ƒê∆Ø·ª¢C MUA üí∞\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üÜî M√£ giao d·ªãch: ${trade.id}\n` +
            `üë§ Ng∆∞·ªùi mua: ${trade.buyerName}\n` +
            `üí∞ S·ªë l∆∞·ª£ng: ${trade.amount.toLocaleString()} LC\n` +
            `üíµ ƒê∆°n gi√°: ${trade.price.toLocaleString()}$/LC\n` +
            `üí∏ T·ªïng thu: ${trade.totalValue.toLocaleString()}$\n\n` +
            `‚úÖ Ti·ªÅn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n c·ªßa b·∫°n!`,
            trade.sellerId
          );

          return api.sendMessage(
            "‚úÖ GIAO D·ªäCH TH√ÄNH C√îNG ‚úÖ\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üÜî M√£ giao d·ªãch: ${trade.id}\n` +
            `üë§ Ng∆∞·ªùi b√°n: ${trade.sellerName}\n` +
            `üí∞ ƒê√£ mua: ${trade.amount.toLocaleString()} LC\n` +
            `üíµ ƒê∆°n gi√°: ${trade.price.toLocaleString()}$/LC\n` +
            `üí∏ T·ªïng chi: ${trade.totalValue.toLocaleString()}$\n\n` +
            `‚úÖ Coin ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o v√≠ c·ªßa b·∫°n!\n` +
            `üìä Giao d·ªãch n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° th·ªã tr∆∞·ªùng.`,
            threadID, messageID
          );
        }

        if (tradeAction === "cancel") {
          const tradeId = target[2];

          if (!tradeId) {
            return api.sendMessage("‚ùå Vui l√≤ng cung c·∫•p ID giao d·ªãch!", threadID, messageID);
          }

          const tradeIndex = global.tradingSystem.offers.findIndex(o =>
            o.id === tradeId && o.status === "active" && o.sellerId === senderID
          );

          if (tradeIndex === -1) {
            return api.sendMessage(
              "‚ùå Kh√¥ng th·ªÉ h·ªßy giao d·ªãch!\n\n" +
              "L√Ω do c√≥ th·ªÉ l√†:\n" +
              "‚Ä¢ Kh√¥ng t√¨m th·∫•y giao d·ªãch\n" +
              "‚Ä¢ Giao d·ªãch kh√¥ng c√≤n ho·∫°t ƒë·ªông\n" +
              "‚Ä¢ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi t·∫°o giao d·ªãch n√†y",
              threadID, messageID
            );
          }

          const trade = global.tradingSystem.offers[tradeIndex];

          trade.status = "cancelled";
          trade.cancelledAt = Date.now();

          player.coins += trade.amount;

          if (!player.wallet.tradeHistory) player.wallet.tradeHistory = [];
          player.wallet.tradeHistory.push({
            ...trade,
            type: "cancelled"
          });

          if (player.wallet.pendingTrades) {
            const pendingIndex = player.wallet.pendingTrades.findIndex(t => t.id === trade.id);
            if (pendingIndex !== -1) {
              player.wallet.pendingTrades.splice(pendingIndex, 1);
            }
          }

          saveData(miningData, marketData);

          return api.sendMessage(
            "üö´ ƒê√É H·ª¶Y GIAO D·ªäCH üö´\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üÜî M√£ giao d·ªãch: ${trade.id}\n` +
            `üí∞ Ho√†n tr·∫£: ${trade.amount.toLocaleString()} LC\n` +
            `üßæ Ph√≠ giao d·ªãch: ${trade.fee.toLocaleString()} LC (kh√¥ng ho√†n l·∫°i)\n\n` +
            `‚úÖ L·ªánh ƒë√£ ƒë∆∞·ª£c h·ªßy kh·ªèi s√†n giao d·ªãch!`,
            threadID, messageID
          );
        }

        break;
      }
      case "quest":
        const quest = player.quests.daily;
        const questName = {
          mine: "ƒê√†o coin",
          upgrade: "N√¢ng c·∫•p m√°y",
          market: "Giao d·ªãch th·ªã tr∆∞·ªùng",
        }[quest.type];

        const questCompleted = quest.progress >= quest.target;
        if (questCompleted && !quest.claimed) {
          const reward = CONFIG.dailyQuests.rewards[quest.type];
          await updateBalance(senderID, reward);
          quest.claimed = true;

          api.sendMessage(
            "üéâ HO√ÄN TH√ÄNH NHI·ªÜM V·ª§ üéâ\n" +
            `üí∞ Ph·∫ßn th∆∞·ªüng: ${reward} $\n` +
            "üìù Nhi·ªám v·ª• m·ªõi s·∫Ω reset v√†o ng√†y mai!",
            threadID,
            messageID
          );
        } else {
          api.sendMessage(
            "üìã NHI·ªÜM V·ª§ H√ÄNG NG√ÄY üìã\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `üìå Nhi·ªám v·ª•: ${questName}\n` +
            `üìä Ti·∫øn ƒë·ªô: ${quest.progress}/${quest.target}\n` +
            `üí∞ Ph·∫ßn th∆∞·ªüng: ${CONFIG.dailyQuests.rewards[quest.type]} $\n` +
            (questCompleted ? "‚úÖ ƒê√£ ho√†n th√†nh!" : "‚è≥ ƒêang th·ª±c hi·ªán..."),
            threadID,
            messageID
          );
        }
        break;

      case "supply": {
        const totalMined = CONFIG.coinLimit.currentSupply;
        const totalMaximum = CONFIG.coinLimit.maxSupply;
        const totalHeld = Object.values(miningData).reduce((total, p) => total + p.coins, 0);
        const circulatingSupply = Math.max(0, totalMined - totalHeld);

        const supplyPercentage = (totalMined / totalMaximum) * 100;

        const blockMinedPerDay = 86400 / (CONFIG.blockReward.targetBlockTime / 1000);
        const blocksLeft = CONFIG.blockReward.blockHeight % 210000;
        const blocksUntilHalving = 210000 - blocksLeft;
        const estimatedDaysToHalving = Math.ceil(blocksUntilHalving / blockMinedPerDay);

        const currentEpochData = CONFIG.epochs.list[CONFIG.epochs.currentEpoch];

        const barLength = 16;
        const filledBlocks = Math.floor((supplyPercentage / 100) * barLength);
        const supplyBar = "‚ñà".repeat(filledBlocks) + "‚ñë".repeat(barLength - filledBlocks);

        let supplyMessage = "üíé TH√îNG TIN NGU·ªíN CUNG LCOIN üíé\n" +
          "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
          "üìä T√åNH TR·∫†NG NGU·ªíN CUNG:\n" +
          `[${supplyBar}] ${supplyPercentage.toFixed(2)}%\n\n` +

          "üí∞ TH·ªêNG K√ä CHUNG:\n" +
          `‚Ä¢ T·ªïng cung t·ªëi ƒëa: ${totalMaximum.toLocaleString()} LCoin\n` +
          `‚Ä¢ ƒê√£ ƒë√†o ƒë∆∞·ª£c: ${totalMined.toLocaleString()} LCoin (${supplyPercentage.toFixed(2)}%)\n` +
          `‚Ä¢ C√≤n l·∫°i: ${(totalMaximum - totalMined).toLocaleString()} LCoin\n\n` +

          "üîÑ L∆ØU TH√îNG:\n" +
          `‚Ä¢ ƒêang l∆∞u th√¥ng: ${circulatingSupply.toLocaleString()} LCoin (${(circulatingSupply / totalMined * 100).toFixed(2)}%)\n` +
          `‚Ä¢ ƒêang ƒë∆∞·ª£c gi·ªØ: ${totalHeld.toLocaleString()} LCoin (${(totalHeld / totalMined * 100).toFixed(2)}%)\n` +
          `‚Ä¢ Ph√¢n b·ªë: ${Object.keys(miningData).length} ng∆∞·ªùi ch∆°i\n\n` +

          "‚õìÔ∏è BLOCKCHAIN:\n" +
          `‚Ä¢ Block hi·ªán t·∫°i: #${CONFIG.blockReward.blockHeight}\n` +
          `‚Ä¢ Ph·∫ßn th∆∞·ªüng: ${CONFIG.blockReward.current} LCoin/block\n` +
          `‚Ä¢ Block ƒë·∫øn halving: ${blocksUntilHalving.toLocaleString()} (‚âà${estimatedDaysToHalving} ng√†y)\n\n` +

          "‚è≥ K·ª∂ NGUY√äN HI·ªÜN T·∫†I:\n" +
          `‚Ä¢ ${currentEpochData.name}: ${currentEpochData.description}\n` +
          `‚Ä¢ H·ªá s·ªë ph·∫ßn th∆∞·ªüng: x${currentEpochData.rewardMultiplier}\n` +
          `‚Ä¢ H·ªá s·ªë ƒë·ªô kh√≥: x${currentEpochData.difficultyMultiplier}\n\n` +

          "üí° Gi√° tr·ªã coin s·∫Ω tƒÉng khi ngu·ªìn cung gi·∫£m v√† nhu c·∫ßu tƒÉng!";

        api.sendMessage(supplyMessage, threadID, messageID);
        break;
      }
      case "autosell":
        if (!target[1]) {
          return api.sendMessage(
            "‚öôÔ∏è C√ÄI ƒê·∫∂T T·ª∞ ƒê·ªòNG B√ÅN COIN ‚öôÔ∏è\n" +
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
            `Tr·∫°ng th√°i hi·ªán t·∫°i: ${player.settings?.autoSell ? "B·∫≠t ‚úÖ" : "T·∫Øt ‚ùå"
            }\n\n` +
            "S·ª≠ d·ª•ng:\n" +
            "‚Ä¢ .coin autosell on - B·∫≠t t·ª± ƒë·ªông b√°n\n" +
            "‚Ä¢ .coin autosell off - T·∫Øt t·ª± ƒë·ªông b√°n\n\n" +
            "üí° Khi b·∫≠t ch·∫ø ƒë·ªô n√†y, coin s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c b√°n ngay sau khi ƒë√†o th√†nh c√¥ng v·ªõi gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i.",
            threadID,
            messageID
          );
        }

        const settingValue = target[1].toLowerCase();
        if (settingValue !== "on" && settingValue !== "off") {
          return api.sendMessage(
            "‚ùå Vui l√≤ng ch·ªçn 'on' ho·∫∑c 'off'!",
            threadID,
            messageID
          );
        }

        player.settings = player.settings || {};
        player.settings.autoSell = settingValue === "on";

        api.sendMessage(
          `‚úÖ ƒê√£ ${player.settings.autoSell ? "B·∫¨T" : "T·∫ÆT"
          } ch·∫ø ƒë·ªô t·ª± ƒë·ªông b√°n coin!\n\n` +
          (player.settings.autoSell
            ? "Gi·ªù ƒë√¢y coin s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c b√°n sau m·ªói l·∫ßn ƒë√†o th√†nh c√¥ng."
            : "Coin s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ sau m·ªói l·∫ßn ƒë√†o.") +
          `\n\nüíé Gi√° coin hi·ªán t·∫°i: ${marketData.price} $`,
          threadID,
          messageID
        );
        break;

      default:
        api.sendMessage("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!", threadID, messageID);
        break;
    }
    saveData(miningData, marketData);

    updateCirculationNPC(miningData, marketData, api, threadID);
  },
};
