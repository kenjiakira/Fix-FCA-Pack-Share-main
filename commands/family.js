const { updateBalance, getBalance } = require('../utils/currencies');
const FamilySystem = require('../family/FamilySystem');
const { MARRIAGE_COST, DIVORCE_COST } = require('../config/family/familyConfig');
const { SINGLE_TAX_RATE, TAX_INTERVAL } = require('../config/family/taxConfig');
const fs = require('fs');
const path = require('path');

function formatNumber(number) {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

const familySystem = new FamilySystem();

module.exports = {
    name: "family",
    dev: "HNT",
    usedby: 0,
    info: "H·ªá th·ªëng gia ƒë√¨nh",
    onPrefix: true,
    usages: ".family [info/marry/divorce/child/temple]",
    cooldowns: 5,

    onLaunch: async function({ api, event, target }) {
        const { threadID, senderID } = event;
        const command = target[0]?.toLowerCase();
        const subCommand = target[1]?.toLowerCase();

        try {
            if (!command) {
                return api.sendMessage(
                    "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ GIA ƒê√åNH NH·ªé üë®‚Äçüë©‚Äçüëß‚Äçüë¶\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                    "1. info - Xem th√¥ng tin gia ƒë√¨nh\n" +
                    "2. marry [@tag] - K·∫øt h√¥n\n" +
                    "3. divorce - Ly h√¥n\n" +
                    "4. love - ƒê·ªông ph√≤ng\n" +
                    "5. rename [s·ªë th·ª© t·ª±] [t√™n m·ªõi] - ƒê·ªïi t√™n con\n" +
                    "6. temple [s·ªë th·ª© t·ª±] - G·ª≠i con v√†o ch√πa tu h√†nh\n\n" +
                    "7. shop - Mua thu·ªëc, BHYT v√† BCS\n" +
                    "8. buy [id] - Mua v·∫≠t ph·∫©m\n" +
                    "9. health - Xem t√¨nh tr·∫°ng s·ª©c kh·ªèe\n" +
                    "10. home - Qu·∫£n l√Ω nh√† c·ª≠a\n" +
                    "11. travel - Du l·ªãch c√πng gia ƒë√¨nh\n\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                    "üìù C√ÅC L·ªÜNH LI√äN QUAN:\n" +
                    "‚Ä¢ .garage - Qu·∫£n l√Ω xe c·ªô\n" +
                    "‚Ä¢ .job - Xin vi·ªác l√†m\n" +
                    "‚Ä¢ .study - H·ªçc h√†nh, b·∫±ng c·∫•p\n" +
                    "‚Ä¢ .work - L√†m vi·ªác ki·∫øm ti·ªÅn\n\n" +
                    "üí° C√°c l·ªánh tr√™n ƒë√£ ƒë∆∞·ª£c t√°ch ri√™ng,\n" + 
                    "vui l√≤ng s·ª≠ d·ª•ng ƒë√∫ng c√∫ ph√°p ƒë·ªÉ truy c·∫≠p",
                    threadID
                );
            }

            const family = familySystem.getFamily(senderID);
            familySystem.updateHappiness(senderID);

            switch (command) {
                case "info": {
                    const marriageInfo = familySystem.getMarriageInfo(senderID);
                    const sharedVehicles = familySystem.getSharedVehicles(senderID);
                    const childrenInfo = familySystem.getChildInfo(senderID);
                    const balance = await getBalance(senderID);

                    let taxInfo = "";
                    if (!family.spouse) {
                        const dailyTax = Math.floor(balance * SINGLE_TAX_RATE);
                        const taxData = JSON.parse(fs.readFileSync(path.join(__dirname, 'json/tax.json'), 'utf8'));
                        const lastCollection = taxData.lastCollection[senderID] || 0;
                        const nextCollection = lastCollection + TAX_INTERVAL;
                        const hoursUntilTax = Math.max(0, Math.ceil((nextCollection - Date.now()) / (1000 * 60 * 60)));

                        taxInfo = "‚ï†‚ïê üí∏THU·∫æ ƒê·ªòC TH√ÇN\n" +
                                `‚ïë  ‚ñ∏ M·ª©c thu·∫ø: ${SINGLE_TAX_RATE * 100}%/ng√†y\n` +
                                `‚ïë  ‚ñ∏ S·ªë ti·ªÅn: ${formatNumber(dailyTax)} Xu/ng√†y\n` +
                                `‚ïë  ‚ñ∏ Thu sau: ${hoursUntilTax} gi·ªù\n` +
                                "‚ïë\n";
                    }

                    let childrenDisplay = "";
                    if (Array.isArray(childrenInfo) && childrenInfo.length > 0) {
                        childrenDisplay = "‚ï†‚ïê üë∂CON C√ÅI\n" +
                            childrenInfo.map((child, index) => 
                                `‚ïë  ‚ñ∏ ${index + 1}. ${child.gender} ${child.name}\n` +
                                `‚ïë    ‚îî Tu·ªïi: ${child.age}\n` +
                                `‚ïë    ‚îî H·∫°nh ph√∫c: ${child.happiness}%`
                            ).join("\n") + "\n‚ïë\n";
                    }

                    return api.sendMessage(
                        "‚ïî‚ïê „Äé TH√îNG TIN „Äè ‚ïê‚ïó\n" +
                        "‚ïë‚ïë\n" +
                        "‚ï†‚ïê üë§C√Å NH√ÇN\n" +
                        `‚ïë  ‚ñ∏ T√™n: ${familySystem.getUserName(senderID)}\n` +
                        `‚ïë  ‚ñ∏ ID: ${senderID}\n` +
                        `‚ïë  ‚ñ∏ H·ªçc v·∫•n: ${familySystem.getEducationInfo(senderID)}\n` +
                        `‚ïë  ‚ñ∏ Ngh·ªÅ nghi·ªáp: ${familySystem.getJobInfo(senderID)}\n` +
                        `‚ïë  ‚ñ∏ S·ª©c kh·ªèe: ${familySystem.getHealth(senderID)}%\n` +
                        "‚ïë\n" +
                        "‚ï†‚ïê üíëH√îN NH√ÇN\n" +
                        `‚ïë  ‚ñ∏ B·∫°n ƒë·ªùi: ${marriageInfo.spouse}\n` +
                        `‚ïë  ‚ñ∏ ƒê·ªô h·∫°nh ph√∫c: ${marriageInfo.happiness}%\n` +
                        `‚ïë  ‚ñ∏ S·ªë con: ${marriageInfo.childCount} ƒë·ª©a\n` +
                        "‚ïë\n" +
                        "‚ï†‚ïê üöó PH∆Ø∆†NG TI·ªÜN\n" +
                        (Object.keys(sharedVehicles || {}).length > 0 ? 
                            Object.entries(sharedVehicles).map(([carId, vehicle]) => {
                                const { CARS, BRANDS } = require('../config/family/carConfig');
                                const car = CARS[carId];
                                return `‚ïë  ‚ñ∏ ${BRANDS[car.brand]} ${car.name}\n` +
                                       `‚ïë    ‚îî ƒê·ªô b·ªÅn: ${vehicle.durability.toFixed(1)}%`;
                            }).join("\n") : 
                            "‚ïë  ‚ñ∏ Ch∆∞a c√≥ ph∆∞∆°ng ti·ªán\n"
                        ) +
                        "‚ïë\n" +
                        childrenDisplay +
                        taxInfo +
                        "‚ï†‚ïê üè† NH√Ä C·ª¨A\n" +
                        (marriageInfo.home ? 
                            `‚ïë  ‚ñ∏ Lo·∫°i nh√†: ${marriageInfo.home.name}\n` +
                            `‚ïë  ‚ñ∏ T√¨nh tr·∫°ng: ${marriageInfo.home.condition}%\n` +
                            `‚ïë  ‚ñ∏ H·∫°nh ph√∫c: +${marriageInfo.home.happiness}%\n` +
                            `‚ïë  ‚ñ∏ S·ª©c ch·ª©a: ${marriageInfo.home.capacity} ng∆∞·ªùi\n` +
                            (marriageInfo.home.maintenanceNeeded ? 
                                `‚ïë  ‚ñ∏ ‚ö†Ô∏è C·∫ßn b·∫£o d∆∞·ª°ng! (${marriageInfo.home.daysSinceLastMaintenance} ng√†y)\n` : 
                                `‚ïë  ‚ñ∏ üîß B·∫£o d∆∞·ª°ng sau: ${30 - marriageInfo.home.daysSinceLastMaintenance} ng√†y\n`) :
                            "‚ïë  ‚ñ∏ Ch∆∞a c√≥ nh√† ·ªü\n"
                        ) +
                        "‚ïë\n" +
                        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù",
                        threadID
                    );
                }

                case "marry": {
                    const mention = Object.keys(event.mentions)[0];
                    if (!mention) {
                        return api.sendMessage("‚ùå Vui l√≤ng tag ng∆∞·ªùi b·∫°n mu·ªën c∆∞·ªõi!", threadID);
                    }

                    const proposerFamily = familySystem.getFamily(senderID);
                    if (proposerFamily.spouse) {
                        return api.sendMessage("‚ùå B·∫°n ƒë√£ k·∫øt h√¥n r·ªìi, kh√¥ng th·ªÉ c·∫ßu h√¥n ng∆∞·ªùi kh√°c!", threadID);
                    }

                    const targetFamily = familySystem.getFamily(mention);
                    if (targetFamily.spouse) {
                        return api.sendMessage("‚ùå Ng∆∞·ªùi n√†y ƒë√£ k·∫øt h√¥n v·ªõi ng∆∞·ªùi kh√°c r·ªìi!", threadID);
                    }

                    const balance = await getBalance(senderID);
                    if (balance < MARRIAGE_COST) {
                        return api.sendMessage(
                            `‚ùå B·∫°n c·∫ßn ${formatNumber(MARRIAGE_COST)} Xu ƒë·ªÉ k·∫øt h√¥n!`,
                            threadID
                        );
                    }
                    await updateBalance(senderID, -MARRIAGE_COST);
                    const user1Name = familySystem.getUserName(senderID);
                    const user2Name = familySystem.getUserName(mention);

                    const confirmMsg = await api.sendMessage(
                        `üíç ${user1Name} mu·ªën k·∫øt h√¥n v·ªõi b·∫°n.\nReply "yes" ƒë·ªÉ ch·∫•p nh·∫≠n, ho·∫∑c "no" ƒë·ªÉ t·ª´ ch·ªëi.`,
                        threadID
                    );

                    global.client.onReply.push({
                        name: this.name,
                        messageID: confirmMsg.messageID,
                        author: mention,
                        type: "marriage-confirmation",
                        proposerID: senderID,
                        proposerName: user1Name
                    });

                    api.sendMessage(
                        `üíå ƒê√£ g·ª≠i l·ªùi c·∫ßu h√¥n ƒë·∫øn ${user2Name}, ch·ªù ph·∫£n h·ªìi...`,
                        threadID
                    );
                    break;
                }
                
                case "divorce": {
                    if (!family.spouse) {
                        return api.sendMessage("‚ùå B·∫°n ch∆∞a k·∫øt h√¥n!", threadID);
                    }
                    const balance = await getBalance(senderID);
                    if (balance < DIVORCE_COST) {
                        return api.sendMessage(
                            `‚ùå B·∫°n c·∫ßn ${formatNumber(DIVORCE_COST)} Xu ƒë·ªÉ ly h√¥n!`,
                            threadID
                        );
                    }

                    const spouseName = familySystem.getUserName(family.spouse);
                    const userName = familySystem.getUserName(senderID);

                    const confirmMsg = await api.sendMessage(
                        `üíî ${userName} mu·ªën ly h√¥n v·ªõi b·∫°n.\n` +
                        `üí∞ Chi ph√≠ ly h√¥n: ${formatNumber(DIVORCE_COST)} Xu\n` +
                        `Reply "yes" ƒë·ªÉ ƒë·ªìng √Ω ly h√¥n, ho·∫∑c "no" ƒë·ªÉ t·ª´ ch·ªëi.`,
                        threadID
                    );

                    global.client.onReply.push({
                        name: this.name,
                        messageID: confirmMsg.messageID,
                        author: family.spouse,
                        type: "divorce-confirmation",
                        requesterID: senderID,
                        requesterName: userName,
                        divorceCost: DIVORCE_COST
                    });

                    return api.sendMessage(
                        `üíå ƒê√£ g·ª≠i y√™u c·∫ßu ly h√¥n ƒë·∫øn ${spouseName}, ch·ªù ph·∫£n h·ªìi...`,
                        threadID
                    );
                }

                case "love": {
                    if (!family.spouse) {
                        return api.sendMessage("‚ùå B·∫°n c·∫ßn k·∫øt h√¥n tr∆∞·ªõc!", threadID);
                    }

                    try {
                        const spouseName = familySystem.getUserName(family.spouse);
                        
                        if (!familySystem.canHaveNewBaby(senderID)) {
                            return api.sendMessage(
                                "‚ùå V·ª£ ch·ªìng c·∫ßn ngh·ªâ ng∆°i 10 ph√∫t sau m·ªói l·∫ßn!",
                                threadID
                            );
                        }

                        await familySystem.intimate(senderID);
                        
                        const happinessIncrease = Math.floor(Math.random() * 5) + 5; // Random 5-10%
                        const healthIncrease = Math.floor(Math.random() * 3) + 3; // Random 3-5%
                        await familySystem.increaseHappiness(senderID, happinessIncrease);
                        await familySystem.increaseHappiness(family.spouse, happinessIncrease);
                        await familySystem.increaseHealth(senderID, healthIncrease);
                        await familySystem.increaseHealth(family.spouse, healthIncrease);
                        
                        const intimateMessages = [
                            "üíï pap pap papüëèüëè M·ªôt ƒë√™m ng·ªçt ng√†o v·ªõi ${spouseName}...",
                            "üíù CƒÉn ph√≤ng ng·∫≠p tr√†n ti·∫øng th·ªü d√†i...",
                            "üíñ pap pap papüëèüëè M·ªôt ƒë√™m ƒë√°ng nh·ªõ c√πng ${spouseName}...",
                            "üíì C√πng ${spouseName} t·∫°o n√™n kho·∫£nh kh·∫Øc ƒë·∫∑c bi·ªát... pap pap papüëèüëè"
                        ];
                        
                        const randomMsg = intimateMessages[Math.floor(Math.random() * intimateMessages.length)]
                            .replace("${spouseName}", spouseName);

                        const hasContraceptive = family.contraceptiveUntil && family.contraceptiveUntil > Date.now();

                        if (!hasContraceptive && Math.random() < 0.8) {
                            const babyGender = Math.random() < 0.5 ? "üë∂ B√© trai" : "üë∂ B√© g√°i";
                            const confirmMsg = await api.sendMessage(
                                `${randomMsg}\n\n` +
                                `üéä CH√öC M·ª™NG! Gia ƒë√¨nh c√≥ th√™m ${babyGender}!\n` +
                                `üíù H√£y reply tin nh·∫Øn n√†y ƒë·ªÉ ƒë·∫∑t t√™n cho b√©\n` +
                                `üíï ƒê·ªô h·∫°nh ph√∫c tƒÉng ${happinessIncrease}%\n` +
                                `‚ù§Ô∏è S·ª©c kh·ªèe tƒÉng ${healthIncrease}%`,
                                threadID
                            );

                            global.client.onReply.push({
                                name: this.name,
                                messageID: confirmMsg.messageID,
                                author: senderID,
                                type: "baby-naming",
                                spouseName: spouseName,
                                isSpouse: family.spouse
                            });
                        } else {
                            return api.sendMessage(
                                `${randomMsg}\n\n` +
                                (hasContraceptive ? 
                                    "üéà ƒê√£ s·ª≠ d·ª•ng BCS n√™n kh√¥ng c√≥ tin vui..." :
                                    "üòî Ti·∫øc qu√°! Ch∆∞a c√≥ tin vui l·∫ßn n√†y...") +
                                `\nüíï ƒê·ªô h·∫°nh ph√∫c tƒÉng ${happinessIncrease}%\n` +
                                `‚ù§Ô∏è S·ª©c kh·ªèe tƒÉng ${healthIncrease}%`,
                                threadID
                            );
                        }

                    } catch (error) {
                        return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID);
                    }
                    break;
                }

                case "rename": {
                    const index = parseInt(subCommand) - 1;
                    const newName = target.slice(2).join(" ");
                    
                    if (isNaN(index) || !newName) {
                        return api.sendMessage(
                            "‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\n.family rename [s·ªë th·ª© t·ª±] [t√™n m·ªõi]",
                            threadID
                        );
                    }

                    try {
                        const child = await familySystem.renameChild(senderID, index, newName);
                        return api.sendMessage(
                            `‚ú® ƒê·ªïi t√™n th√†nh c√¥ng!\n` +
                            `${child.gender} ${child.name}\n` +
                            `üíù Bi·ªát danh: ${child.nickname}`,
                            threadID
                        );
                    } catch (error) {
                        return api.sendMessage(`‚ùå ${error.message}`, threadID);
                    }
                }
                
                case "temple": {
                    const index = parseInt(subCommand) - 1;
                    
                    if (isNaN(index)) {
                        return api.sendMessage(
                            "‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\n.family temple [s·ªë th·ª© t·ª±]",
                            threadID
                        );
                    }

                    try {
                        const result = await familySystem.sendChildToTemple(senderID, index);
                        return api.sendMessage(
                            `üôè ƒê√£ g·ª≠i ${result.gender} ${result.name} v√†o ch√πa tu h√†nh\n` +
                            `üíù C·∫ßu mong ${result.name} s·∫Ω c√≥ m·ªôt t∆∞∆°ng lai t·ªët ƒë·∫πp tr√™n con ƒë∆∞·ªùng tu t·∫≠p`,
                            threadID
                        );
                    } catch (error) {
                        return api.sendMessage(`‚ùå ${error.message}`, threadID);
                    }
                }

                case "shop": {
                    const { CONTRACEPTIVES, MEDICINES, INSURANCE } = require('../config/family/familyConfig');
                    
                    if (!subCommand) {
                        return api.sendMessage(
                            "üè™ C·ª¨A H√ÄNG üè™\n" +
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                            "1Ô∏è‚É£ .family shop med - Thu·ªëc men\n" +
                            "2Ô∏è‚É£ .family shop ins - B·∫£o hi·ªÉm\n" +
                            "3Ô∏è‚É£ .family shop bcs - Bao cao su\n\n" +
                            "üí° Ch·ªçn danh m·ª•c ƒë·ªÉ xem chi ti·∫øt",
                            threadID
                        );
                    }

                    let items;
                    let title;
                    let prefix;

                    switch (subCommand) {
                        case "med":
                            items = MEDICINES;
                            title = "üíä THU·ªêC MEN";
                            prefix = "med";
                            break;
                        case "ins":
                            items = INSURANCE;
                            title = "üè• B·∫¢O HI·ªÇM";
                            prefix = "ins";
                            break;
                        case "bcs":
                            items = CONTRACEPTIVES;
                            title = "üéà BCS";
                            prefix = "bcs";
                            break;
                        default:
                            return api.sendMessage("‚ùå Danh m·ª•c kh√¥ng h·ª£p l·ªá!", threadID);
                    }

                    let message = `${title}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                    Object.entries(items).forEach(([id, item], index) => {
                        message += `${index + 1}. ${item.name}\n`;
                        message += `üí∞ Gi√°: ${formatNumber(item.price)} xu\n`;
                        message += `üìù ${item.description}\n`;
                        if (item.duration) {
                            message += `‚è∞ Th·ªùi h·∫°n: ${item.duration} ${item.type === 'health' ? 'ng√†y' : 'ph√∫t'}\n`;
                        }
                        if (item.discount) {
                            message += `üéâ Gi·∫£m gi√°: ${item.discount}%\n`;
                        }
                        message += `üõçÔ∏è Mua: .family buy ${prefix} ${index + 1}\n\n`;
                    });

                    return api.sendMessage(message, threadID);
                }

                case "health": {
                    const health = familySystem.getHealth(senderID);
                    const insuranceStatus = familySystem.getInsuranceStatus(senderID);
                    
                    let message = "‚ïî‚ïê „Äé T√åNH TR·∫†NG S·ª®C KH·ªéE & B·∫¢O HI·ªÇM „Äè ‚ïê‚ïó\n" +
                                "‚ïë\n" +
                                `‚ïë ‚ù§Ô∏è S·ª©c kh·ªèe: ${health}%\n` +
                                "‚ïë\n" +
                                "‚ï†‚ïê üè• B·∫¢O HI·ªÇM Y T·∫æ\n";
                    
                    if (insuranceStatus.health) {
                        message += `‚ïë  ‚ñ∏ Tr·∫°ng th√°i: ƒêang c√≥ hi·ªáu l·ª±c\n` +
                                 `‚ïë  ‚ñ∏ Gi·∫£m gi√°: ${insuranceStatus.health.discount}% chi ph√≠ kh√°m ch·ªØa b·ªánh\n` +
                                 `‚ïë  ‚ñ∏ C√≤n l·∫°i: ${insuranceStatus.health.daysLeft} ng√†y\n`;
                    } else {
                        message += "‚ïë  ‚ñ∏ Tr·∫°ng th√°i: Ch∆∞a c√≥ b·∫£o hi·ªÉm\n" +
                                 "‚ïë  ‚ñ∏ Mua BHYT ƒë·ªÉ ƒë∆∞·ª£c gi·∫£m chi ph√≠ kh√°m ch·ªØa b·ªánh\n";
                    }
                    
                    message += "‚ïë\n‚ï†‚ïê üöó B·∫¢O HI·ªÇM √î T√î\n";
                    if (insuranceStatus.car) {
                        message += `‚ïë  ‚ñ∏ Tr·∫°ng th√°i: ƒêang c√≥ hi·ªáu l·ª±c\n` +
                                 `‚ïë  ‚ñ∏ Gi·∫£m gi√°: ${insuranceStatus.car.discount}% chi ph√≠ s·ª≠a ch·ªØa\n` +
                                 `‚ïë  ‚ñ∏ C√≤n l·∫°i: ${insuranceStatus.car.daysLeft} ng√†y\n`;
                    } else {
                        message += "‚ïë  ‚ñ∏ Tr·∫°ng th√°i: Ch∆∞a c√≥ b·∫£o hi·ªÉm\n";
                    }

                    message += "‚ïë\n‚ï†‚ïê üõµ B·∫¢O HI·ªÇM XE M√ÅY\n";
                    if (insuranceStatus.bike) {
                        message += `‚ïë  ‚ñ∏ Tr·∫°ng th√°i: ƒêang c√≥ hi·ªáu l·ª±c\n` +
                                 `‚ïë  ‚ñ∏ Gi·∫£m gi√°: ${insuranceStatus.bike.discount}% chi ph√≠ s·ª≠a ch·ªØa\n` +
                                 `‚ïë  ‚ñ∏ C√≤n l·∫°i: ${insuranceStatus.bike.daysLeft} ng√†y\n`;
                    } else {
                        message += "‚ïë  ‚ñ∏ Tr·∫°ng th√°i: Ch∆∞a c√≥ b·∫£o hi·ªÉm\n";
                    }
                    
                    message += "‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù";
                    
                    return api.sendMessage(message, threadID);
                }

                case "buy": {
                    if (!subCommand || !target[2]) {
                        return api.sendMessage(
                            "‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\n" +
                            ".family buy [med/ins/bcs] [s·ªë th·ª© t·ª±]",
                            threadID
                        );
                    }

                    const { CONTRACEPTIVES, MEDICINES, INSURANCE } = require('../config/family/familyConfig');
                    const index = parseInt(target[2]) - 1;
                    let items;
                    let category;

                    switch (subCommand) {
                        case "med":
                            items = Object.values(MEDICINES);
                            category = "MEDICINES";
                            break;
                        case "ins":
                            items = Object.values(INSURANCE);
                            category = "INSURANCE";
                            break;
                        case "bcs":
                            items = Object.values(CONTRACEPTIVES);
                            category = "CONTRACEPTIVES";
                            break;
                        default:
                            return api.sendMessage("‚ùå Danh m·ª•c kh√¥ng h·ª£p l·ªá!", threadID);
                    }

                    if (isNaN(index) || index < 0 || index >= items.length) {
                        return api.sendMessage("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!", threadID);
                    }

                    const item = items[index];
                    const itemId = Object.keys(eval(category))[index];

                    const balance = await getBalance(senderID);
                    if (balance < item.price) {
                        return api.sendMessage(
                            `‚ùå B·∫°n c·∫ßn ${formatNumber(item.price)} xu ƒë·ªÉ mua ${item.name}!`,
                            threadID
                        );
                    }

                    await updateBalance(senderID, -item.price);

                    switch (category) {
                        case "CONTRACEPTIVES":
                            familySystem.useContraceptive(senderID);
                            return api.sendMessage(
                                `‚úÖ ƒê√£ mua ${item.name} th√†nh c√¥ng!\n` +
                                `üí∞ Chi ph√≠: ${formatNumber(item.price)} xu\n` +
                                `‚è∞ C√≥ t√°c d·ª•ng trong ${item.duration} ph√∫t`,
                                threadID
                            );
                        case "MEDICINES":
                            const healthIncrease = item.healthBoost || 20;
                            await familySystem.increaseHealth(senderID, healthIncrease);
                            return api.sendMessage(
                                `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${item.name} th√†nh c√¥ng!\n` +
                                `üí∞ Chi ph√≠: ${formatNumber(item.price)} xu\n` +
                                `‚ù§Ô∏è S·ª©c kh·ªèe +${healthIncrease}%`,
                                threadID
                            );
                        case "INSURANCE":
                            await familySystem.activateInsurance(senderID, item.type, item.duration, item.discount);
                            let message = `‚úÖ ƒê√£ mua ${item.name} th√†nh c√¥ng!\n` +
                                        `üí∞ Chi ph√≠: ${formatNumber(item.price)} xu\n` +
                                        `‚è∞ C√≥ hi·ªáu l·ª±c trong ${item.duration} ng√†y\n`;
                            
                            switch (item.type) {
                                case 'health':
                                    message += `üè• Gi·∫£m ${item.discount}% chi ph√≠ kh√°m ch·ªØa b·ªánh`;
                                    break;
                                case 'car':
                                    message += `üöó Gi·∫£m ${item.discount}% chi ph√≠ s·ª≠a ch·ªØa √¥ t√¥`;
                                    break;
                                case 'bike':
                                    message += `üõµ Gi·∫£m ${item.discount}% chi ph√≠ s·ª≠a ch·ªØa xe m√°y`;
                                    break;
                            }
                            
                            return api.sendMessage(message, threadID);
                    }
                }

                case "travel": {
                    if (!subCommand) {
                        return api.sendMessage(
                            "üåé DU L·ªäCH GIA ƒê√åNH üåé\n" +
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                            "1. .family travel list - Xem c√°c ƒëi·ªÉm du l·ªãch\n" +
                            "2. .family travel start [ƒë·ªãa ƒëi·ªÉm] - B·∫Øt ƒë·∫ßu chuy·∫øn ƒëi\n" +
                            "3. .family travel status - Xem tr·∫°ng th√°i chuy·∫øn ƒëi\n\n" +
                            "üí° L∆∞u √Ω:\n" +
                            "‚Ä¢ Chi ph√≠ ph·ª• thu·ªôc v√†o s·ªë l∆∞·ª£ng th√†nh vi√™n\n" +
                            "‚Ä¢ C·∫ßn ngh·ªâ ng∆°i 7 ng√†y gi·ªØa c√°c chuy·∫øn ƒëi\n" +
                            "‚Ä¢ ƒê·ªô h·∫°nh ph√∫c tƒÉng sau m·ªói chuy·∫øn ƒëi",
                            threadID
                        );
                    }

                    switch (subCommand) {
                        case "list": {
                            const destinations = familySystem.getAllDestinations();
                            let message = "üó∫Ô∏è ƒêI·ªÇM DU L·ªäCH üó∫Ô∏è\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
                            
                            Object.entries(destinations).forEach(([id, dest]) => {
                                const cost = familySystem.calculateTravelCost(senderID, id);
                                message += `${dest.name}\n`;
                                message += `üí∞ Chi ph√≠: ${formatNumber(cost)} xu\n`;
                                message += `üìù ${dest.description}\n`;
                                message += `‚è∞ Th·ªùi gian: ${dest.duration}\n`;
                                message += `üíï H·∫°nh ph√∫c: +${dest.happiness}%\n`;
                                message += `üõ´ ƒêi ngay: .family travel start ${id}\n\n`;
                            });

                            return api.sendMessage(message, threadID);
                        }

                        case "start": {
                            const destination = target[2]?.toLowerCase();
                            if (!destination) {
                                return api.sendMessage(
                                    "‚ùå Vui l√≤ng ch·ªçn ƒëi·ªÉm ƒë·∫øn!\n" +
                                    "üí° Xem danh s√°ch: .family travel list",
                                    threadID
                                );
                            }

                            const destInfo = familySystem.getDestinationInfo(destination);
                            if (!destInfo) {
                                return api.sendMessage("‚ùå ƒêi·ªÉm ƒë·∫øn kh√¥ng h·ª£p l·ªá!", threadID);
                            }

                            const travelCheck = familySystem.canTravel(senderID);
                            if (!travelCheck.canTravel) {
                                if (travelCheck.reason === 'onTrip') {
                                    const dest = familySystem.getDestinationInfo(travelCheck.destination);
                                    return api.sendMessage(
                                        `‚ùå Gia ƒë√¨nh ƒëang trong chuy·∫øn du l·ªãch t·∫°i ${dest.name}\n` +
                                        `‚è∞ C√≤n ${travelCheck.remainingTime} gi·ªù n·ªØa m·ªõi v·ªÅ`,
                                        threadID
                                    );
                                } else if (travelCheck.reason === 'cooldown') {
                                    return api.sendMessage(
                                        `‚ùå Gia ƒë√¨nh c·∫ßn ngh·ªâ ng∆°i th√™m ${travelCheck.remainingTime} gi·ªù n·ªØa\n` +
                                        "üí° M·ªói chuy·∫øn ƒëi c√°ch nhau 7 ng√†y",
                                        threadID
                                    );
                                }
                            }

                            const cost = familySystem.calculateTravelCost(senderID, destination);
                            const balance = await getBalance(senderID);
                            if (balance < cost) {
                                return api.sendMessage(
                                    `‚ùå B·∫°n c·∫ßn ${formatNumber(cost)} xu cho chuy·∫øn ƒëi!\n` +
                                    `üí∞ Hi·ªán c√≥: ${formatNumber(balance)} xu`,
                                    threadID
                                );
                            }

                            try {
                                await updateBalance(senderID, -cost);
                                const dest = familySystem.startTravel(senderID, destination);
                                return api.sendMessage(
                                    `üåé Gia ƒë√¨nh b·∫Øt ƒë·∫ßu chuy·∫øn du l·ªãch t·∫°i ${dest.name}!\n` +
                                    `üí∞ Chi ph√≠: ${formatNumber(cost)} xu\n` +
                                    `‚è∞ Th·ªùi gian: ${dest.duration}\n` +
                                    `üíï H·∫°nh ph√∫c: +${dest.happiness}% khi v·ªÅ\n\n` +
                                    `üí° Ki·ªÉm tra: .family travel status`,
                                    threadID
                                );
                            } catch (error) {
                                return api.sendMessage(`‚ùå ${error.message}`, threadID);
                            }
                        }

                        case "status": {
                            const status = familySystem.getTravelStatus(senderID);
                            if (!status) {
                                return api.sendMessage(
                                    "‚ùå Gia ƒë√¨nh kh√¥ng trong chuy·∫øn du l·ªãch n√†o!",
                                    threadID
                                );
                            }

                            if (status.remainingHours <= 0) {
                                const happiness = familySystem.endTravel(senderID);
                                return api.sendMessage(
                                    `üéâ Chuy·∫øn du l·ªãch t·∫°i ${status.destination.name} ƒë√£ k·∫øt th√∫c!\n` +
                                    `üíï ƒê·ªô h·∫°nh ph√∫c tƒÉng ${happiness}%\n\n` +
                                    "üí° Gia ƒë√¨nh c·∫ßn ngh·ªâ ng∆°i 7 ng√†y tr∆∞·ªõc chuy·∫øn ƒëi ti·∫øp theo",
                                    threadID
                                );
                            }

                            return api.sendMessage(
                                `üåé ƒêang du l·ªãch t·∫°i ${status.destination.name}\n` +
                                `‚è∞ C√≤n ${status.remainingHours} gi·ªù n·ªØa m·ªõi v·ªÅ\n` +
                                `üíï H·∫°nh ph√∫c: +${status.destination.happiness}% khi v·ªÅ`,
                                threadID
                            );
                        }

                        default:
                            return api.sendMessage(
                                "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!\n" +
                                "üí° S·ª≠ d·ª•ng: .family travel [list/start/status]",
                                threadID
                            );
                    }
                }

                case "home": {
                    const { HOMES } = require('../config/family/homeConfig');
                    
                    if (!subCommand) {
                        return api.sendMessage(
                            "üè† QU·∫¢N L√ù NH√Ä C·ª¨A üè†\n" +
                            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                            "1. .family home list - Xem c√°c lo·∫°i nh√†\n" +
                            "2. .family home buy [lo·∫°i] - Mua nh√†\n" +
                            "3. .family home sell - B√°n nh√†\n" +
                            "4. .family home repair - S·ª≠a ch·ªØa nh√†\n\n" +
                            "üí° L∆∞u √Ω:\n" +
                            "‚Ä¢ Nh√† c·∫ßn b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ m·ªói 30 ng√†y\n" +
                            "‚Ä¢ ƒê·ªô h·∫°nh ph√∫c ph·ª• thu·ªôc v√†o ƒëi·ªÅu ki·ªán nh√†\n" +
                            "‚Ä¢ Gi√° b√°n = 70% gi√° g·ªëc (tr·ª´ kh·∫•u hao)",
                            threadID
                        );
                    }

                    switch (subCommand) {
                        case "list": {
                            let message = "üèòÔ∏è C√ÅC LO·∫†I NH√Ä üèòÔ∏è\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
                            Object.entries(HOMES).forEach(([type, home]) => {
                                message += `${home.name}\n`;
                                message += `üí∞ Gi√°: ${formatNumber(home.price)} xu\n`;
                                message += `üìù ${home.description}\n`;
                                message += `üíï H·∫°nh ph√∫c c∆° b·∫£n: +${home.happiness}%\n`;
                                message += `üë• S·ª©c ch·ª©a: ${home.capacity} ng∆∞·ªùi\n`;
                                message += `üõçÔ∏è Mua: .family home buy ${type}\n\n`;
                            });
                            return api.sendMessage(message, threadID);
                        }

                        case "buy": {
                            const homeType = target[2]?.toLowerCase();
                            if (!homeType || !HOMES[homeType]) {
                                return api.sendMessage(
                                    "‚ùå Vui l√≤ng ch·ªçn lo·∫°i nh√† h·ª£p l·ªá!\n" +
                                    "üí° Xem danh s√°ch nh√†: .family home list",
                                    threadID
                                );
                            }

                            const home = HOMES[homeType];
                            const balance = await getBalance(senderID);
                            if (balance < home.price) {
                                return api.sendMessage(
                                    `‚ùå B·∫°n c·∫ßn ${formatNumber(home.price)} xu ƒë·ªÉ mua ${home.name}!\n` +
                                    `üí∞ Hi·ªán c√≥: ${formatNumber(balance)} xu`,
                                    threadID
                                );
                            }

                            try {
                                await familySystem.homeSystem.buyHome(senderID, homeType);
                                await updateBalance(senderID, -home.price);
                                return api.sendMessage(
                                    `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ mua ${home.name} th√†nh c√¥ng!\n` +
                                    `üí∞ Chi ph√≠: ${formatNumber(home.price)} xu\n` +
                                    `üíï H·∫°nh ph√∫c c∆° b·∫£n: +${home.happiness}%\n` +
                                    `üë• S·ª©c ch·ª©a: ${home.capacity} ng∆∞·ªùi\n\n` +
                                    `üí° L∆∞u √Ω:\n` +
                                    `‚Ä¢ Nh√† c·∫ßn b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥ m·ªói 30 ng√†y\n` +
                                    `‚Ä¢ ƒê·ªô h·∫°nh ph√∫c th·ª±c t·∫ø ph·ª• thu·ªôc v√†o ƒëi·ªÅu ki·ªán nh√†`,
                                    threadID
                                );
                            } catch (error) {
                                return api.sendMessage(`‚ùå ${error.message}`, threadID);
                            }
                        }

                        case "sell": {
                            try {
                                const sellPrice = await familySystem.homeSystem.sellHome(senderID);
                                await updateBalance(senderID, sellPrice);
                                return api.sendMessage(
                                    `üè† ƒê√£ b√°n nh√† th√†nh c√¥ng!\n` +
                                    `üí∞ S·ªë ti·ªÅn nh·∫≠n ƒë∆∞·ª£c: ${formatNumber(sellPrice)} xu\n` +
                                    `üí° Gi√° ƒë√£ tr·ª´ kh·∫•u hao theo th·ªùi gian v√† ƒëi·ªÅu ki·ªán nh√†`,
                                    threadID
                                );
                            } catch (error) {
                                return api.sendMessage(`‚ùå ${error.message}`, threadID);
                            }
                        }

                        case "repair": {
                            try {
                                const repairCost = await familySystem.homeSystem.repair(senderID);
                                const balance = await getBalance(senderID);
                                
                                if (balance < repairCost) {
                                    return api.sendMessage(
                                        `‚ùå B·∫°n c·∫ßn ${formatNumber(repairCost)} xu ƒë·ªÉ s·ª≠a ch·ªØa nh√†!\n` +
                                        `üí∞ Hi·ªán c√≥: ${formatNumber(balance)} xu`,
                                        threadID
                                    );
                                }

                                await updateBalance(senderID, -repairCost);
                                return api.sendMessage(
                                    `üîß ƒê√£ s·ª≠a ch·ªØa v√† b·∫£o d∆∞·ª°ng nh√† th√†nh c√¥ng!\n` +
                                    `üí∞ Chi ph√≠: ${formatNumber(repairCost)} xu\n` +
                                    `üè† T√¨nh tr·∫°ng nh√†: 100%\n` +
                                    `‚è∞ L·∫ßn b·∫£o d∆∞·ª°ng ti·∫øp theo: 30 ng√†y sau`,
                                    threadID
                                );
                            } catch (error) {
                                return api.sendMessage(`‚ùå ${error.message}`, threadID);
                            }
                        }

                        default:
                            return api.sendMessage(
                                "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!\n" +
                                "üí° S·ª≠ d·ª•ng: .family home [list/buy/sell/repair]",
                                threadID
                            );
                    }
                }

                default:
                    return api.sendMessage(
                        "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!\n" +
                        "üí° S·ª≠ d·ª•ng: .family [info/marry/divorce/child/temple/shop/buy/health/home/travel]",
                        threadID
                    );
            }
        } catch (error) {
            console.error("Family command error:", error);
            return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói!", threadID);
        }
    },

    onReply: async function({ api, event }) {
        const { threadID, messageID, senderID, body } = event;
        
        const getUserName = (userID) => {
            const userDataPath = path.join(__dirname, '../events/cache/userData.json');
            try {
                const userData = JSON.parse(fs.readFileSync(userDataPath, 'utf8'));
                return userData[userID]?.name || userID;
            } catch (error) {
                console.error('Error reading userData:', error);
                return userID;
            }
        };

        const reply = global.client.onReply.find(r => {
            if (r.messageID !== event.messageReply.messageID) return false;
            
            if (r.type === "marriage-confirmation" || r.type === "divorce-confirmation") {
                return r.author === senderID;
            } else if (r.type === "baby-confirmation" || r.type === "baby-naming") {
                const family = familySystem.getFamily(senderID);
                return (senderID === r.author || senderID === family.spouse);
            }
            return false;
        });

        if (!reply) return;
        
        global.client.onReply = global.client.onReply.filter(r => r.messageID !== reply.messageID);

        switch(reply.type) {
            case "marriage-confirmation":
                try {
                    const response = body.toLowerCase().trim();
                    if (response === "yes" || response === "accept" || response === "1") {
                        await familySystem.confirmMarriage(reply.proposerID, senderID);
                        const acceptorName = getUserName(senderID);
                        
                        return api.sendMessage(
                            `üíï ${acceptorName} ƒë√£ ƒë·ªìng √Ω k·∫øt h√¥n v·ªõi ${reply.proposerName}!\n` +
                            `üíù H·∫°nh ph√∫c: 100%`,
                            threadID
                        );
                    } else {
                        return api.sendMessage(
                            `üíî ${getUserName(senderID)} ƒë√£ t·ª´ ch·ªëi l·ªùi c·∫ßu h√¥n c·ªßa ${reply.proposerName}!`,
                            threadID
                        );
                    }
                } catch (error) {
                    console.error("Marriage confirmation error:", error);
                    return api.sendMessage(
                        `‚ùå L·ªói: ${error.message}`,
                        threadID
                    );
                }
                break;

            case "divorce-confirmation":
                try {
                    const response = body.toLowerCase().trim();
                    if (response === "yes" || response === "accept" || response === "1") {
                        await updateBalance(reply.requesterID, -reply.divorceCost);
                        const divorceResult = await familySystem.divorce(reply.requesterID);
                        
                        let message = `üíî ƒê√£ ly h√¥n th√†nh c√¥ng!\nüí∞ Chi ph√≠: ${formatNumber(reply.divorceCost)} Xu`;
                        
                        if (divorceResult.custodyInfo) {
                            const custodyParentName = familySystem.getUserName(divorceResult.custodyInfo.parent);
                            message += `\nüë∂ Quy·ªÅn nu√¥i ${divorceResult.custodyInfo.childCount} ƒë·ª©a con thu·ªôc v·ªÅ ${custodyParentName}`;
                        }
                        
                        return api.sendMessage(message, threadID);
                    } else {
                        return api.sendMessage(
                            `üíù ${getUserName(senderID)} ƒë√£ t·ª´ ch·ªëi y√™u c·∫ßu ly h√¥n c·ªßa ${reply.requesterName}!`,
                            threadID
                        );
                    }
                } catch (error) {
                    console.error("Divorce confirmation error:", error);
                    return api.sendMessage(
                        `‚ùå L·ªói: ${error.message}`,
                        threadID
                    );
                }
                break;

            case "baby-confirmation":
                {
                    const response = body.toLowerCase().trim();
                    if (["yes", "1", "ok", "ƒë·ªìng √Ω"].includes(response)) {
                        try {
                            const family = familySystem.getFamily(senderID);
                            
                            if (!familySystem.canHaveNewBaby(senderID)) {
                                return api.sendMessage(
                                    "‚ùå B·∫°n c·∫ßn ƒë·ª£i 3 ng√†y sau m·ªõi c√≥ th·ªÉ sinh em b√© ti·∫øp!",
                                    threadID
                                );
                            }

                            const nameMsg = await api.sendMessage(
                                "üíù H√£y ƒë·∫∑t t√™n cho em b√© (Reply tin nh·∫Øn n√†y)\n" +
                                "L∆∞u √Ω: T√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát",
                                threadID
                            );

                            global.client.onReply.push({
                                name: this.name,
                                messageID: nameMsg.messageID,
                                author: senderID,
                                type: "baby-naming",
                                spouseName: reply.spouseName
                            });

                        } catch (error) {
                            return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID);
                        }
                    }
                }
                break;

            case "baby-naming":
                {
                    const babyName = body.trim();
                    if (!familySystem.validateBabyName(babyName)) {
                        return api.sendMessage(
                            "‚ùå T√™n kh√¥ng h·ª£p l·ªá! T√™n ph·∫£i t·ª´ 2-20 k√Ω t·ª± v√† kh√¥ng ch·ª©a s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát",
                            threadID
                        );
                    }

                    try {
                        if (senderID !== reply.author && senderID !== reply.isSpouse) {
                            return api.sendMessage("‚ùå Ch·ªâ v·ª£/ch·ªìng m·ªõi c√≥ th·ªÉ ƒë·∫∑t t√™n cho b√©!", threadID);
                        }

                        const child = await familySystem.addChild(senderID, babyName);
                        return api.sendMessage(
                            `üë∂ Ch√∫c m·ª´ng gia ƒë√¨nh c√≥ th√™m th√†nh vi√™n m·ªõi!\n` +
                            `${child.gender} T√™n b√©: ${child.name}\n` +
                            `üíù Bi·ªát danh: ${child.nickname}\n` +
                            `üíñ Ch√∫c b√© lu√¥n kh·ªèe m·∫°nh v√† h·∫°nh ph√∫c!`,
                            threadID);
                    } catch (error) {
                        return api.sendMessage(`‚ùå L·ªói: ${error.message}`, threadID);
                    }
                }
                break;
        }
    },
};