const fs = require('fs');
const path = require('path');
const { createCanvas, loadImage } = require('canvas');

module.exports = {
    name: "masoi",
    aliases: ["werewolf", "ma_soi"],
    dev: "HNT",
    category: "Games",
    onPrefix: true,
    info: "Ch∆°i game Ma S√≥i (Werewolf)",
    usedby: 0,
    usages: ".masoi create/join/start/leave/list/end",
    cooldowns: 0,

    activeGames: new Map(),

    roles: {
        villager: {
            name: "D√¢n l√†ng",
            description: "Kh√¥ng c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát, nh∆∞ng c√≥ th·ªÉ b·ªè phi·∫øu treo c·ªï ma s√≥i.",
            team: "village",
            nightAction: false
        },
        werewolf: {
            name: "Ma s√≥i",
            description: "M·ªói ƒë√™m c√≥ th·ªÉ ch·ªçn m·ªôt ng∆∞·ªùi ƒë·ªÉ gi·∫øt.",
            team: "werewolf",
            nightAction: true
        },
        seer: {
            name: "Ti√™n tri",
            description: "M·ªói ƒë√™m c√≥ th·ªÉ ki·ªÉm tra danh t√≠nh c·ªßa m·ªôt ng∆∞·ªùi ch∆°i.",
            team: "village",
            nightAction: true
        },
        doctor: {
            name: "B√°c sƒ©",
            description: "M·ªói ƒë√™m c√≥ th·ªÉ b·∫£o v·ªá m·ªôt ng∆∞·ªùi ch∆°i kh·ªèi b·ªã t·∫•n c√¥ng.",
            team: "village",
            nightAction: true
        },
        hunter: {
            name: "Th·ª£ sƒÉn",
            description: "Khi b·ªã gi·∫øt, c√≥ th·ªÉ b·∫Øn ch·∫øt m·ªôt ng∆∞·ªùi kh√°c.",
            team: "village",
            nightAction: false
        },
        bodyguard: {
            name: "V·ªá sƒ©",
            description: "C√≥ th·ªÉ b·∫£o v·ªá m·ªôt ng∆∞·ªùi ch∆°i m·ªói ƒë√™m, nh∆∞ng kh√¥ng th·ªÉ b·∫£o v·ªá c√πng m·ªôt ng∆∞·ªùi hai ƒë√™m li√™n ti·∫øp.",
            team: "village",
            nightAction: true
        },
        witch: {
            name: "Ph√π th·ªßy",
            description: "C√≥ m·ªôt li·ªÅu thu·ªëc c·ª©u ng∆∞·ªùi v√† m·ªôt li·ªÅu thu·ªëc ƒë·ªôc, m·ªói lo·∫°i ch·ªâ d√πng ƒë∆∞·ª£c m·ªôt l·∫ßn trong tr√≤ ch∆°i.",
            team: "village",
            nightAction: true
        }
    },

    getRoleDistribution: function(playerCount) {
        if (playerCount < 5) return null;

        if (playerCount <= 6) {
            return {
                werewolf: 1,
                seer: 1,
                villager: playerCount - 2
            };
        } else if (playerCount <= 8) {
            return {
                werewolf: 2,
                seer: 1,
                doctor: 1,
                villager: playerCount - 4
            };
        } else if (playerCount <= 10) {
            return {
                werewolf: 2,
                seer: 1,
                doctor: 1,
                hunter: 1,
                witch: 1,
                villager: playerCount - 6
            };
        } else {
            return {
                werewolf: 3,
                seer: 1,
                doctor: 1,
                hunter: 1,
                bodyguard: 1,
                witch: 1,
                villager: playerCount - 8
            };
        }
    },

    getUserName: function(userID) {
        const userDataPath = path.join(__dirname, '../events/cache/rankData.json');
        try {
            const userData = JSON.parse(fs.readFileSync(userDataPath, 'utf8'));
            return userData[userID]?.name || "Ng∆∞·ªùi d√πng";
        } catch (error) {
            console.error("Error reading userData:", error);
            return "Ng∆∞·ªùi d√πng";
        }
    },

    createGame: function(threadID, creatorID) {
        const game = {
            threadID: threadID,
            creatorID: creatorID,
            players: new Map(),
            status: "waiting", 
            day: 0,
            votes: new Map(),
            nightActions: new Map(),
            history: [],
            startTime: null,
            lastActivityTime: Date.now(),
            checkInactivityInterval: null,
            protectedPlayer: null,
            witchPotions: { save: 1, kill: 1 },
            bodyguardLastProtected: null,
            lastKilled: null
        };

        game.players.set(creatorID, {
            id: creatorID,
            name: this.getUserName(creatorID),
            role: null,
            isAlive: true,
            voteTarget: null
        });

        game.checkInactivityInterval = setInterval(() => {
            const now = Date.now();
            const idleTime = now - game.lastActivityTime;
            
            if (idleTime >= 15 * 60 * 1000) { 
                clearInterval(game.checkInactivityInterval);
                this.activeGames.delete(threadID);
                global.api.sendMessage("‚åõ V√°n Ma S√≥i ƒë√£ b·ªã h·ªßy do kh√¥ng c√≥ ho·∫°t ƒë·ªông trong 15 ph√∫t!", threadID);
            }
        }, 60000);

        this.activeGames.set(threadID, game);
        return game;
    },

    startGame: async function(api, threadID) {
        const game = this.activeGames.get(threadID);
        if (!game) return "‚ùå Kh√¥ng t√¨m th·∫•y v√°n game!";

        if (game.players.size < 5) {
            return "‚ùå C·∫ßn √≠t nh·∫•t 5 ng∆∞·ªùi ch∆°i ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n Ma S√≥i!";
        }
        
        const roleDistribution = this.getRoleDistribution(game.players.size);
        const playerIds = Array.from(game.players.keys());
        const roleArray = [];

        // T·∫°o m·∫£ng vai tr√≤ d·ª±a tr√™n ph√¢n ph·ªëi
        for (const [role, count] of Object.entries(roleDistribution)) {
            for (let i = 0; i < count; i++) {
                roleArray.push(role);
            }
        }

        // Tr·ªôn ng·∫´u nhi√™n vai tr√≤
        for (let i = roleArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [roleArray[i], roleArray[j]] = [roleArray[j], roleArray[i]];
        }

        // G√°n vai tr√≤ cho ng∆∞·ªùi ch∆°i
        playerIds.forEach((playerId, index) => {
            const player = game.players.get(playerId);
            player.role = roleArray[index];
        });

        // B·∫Øt ƒë·∫ßu game
        game.status = "night";
        game.day = 1;
        game.startTime = Date.now();
        game.lastActivityTime = Date.now();

        // L∆∞u danh s√°ch ma s√≥i ƒë·ªÉ d·ªÖ d√†ng g·ª≠i tin nh·∫Øn
        game.werewolves = [];
        for (const [playerId, player] of game.players.entries()) {
            if (player.role === "werewolf") {
                game.werewolves.push(playerId);
            }

            // G·ª≠i tin nh·∫Øn ri√™ng cho t·ª´ng ng∆∞·ªùi ch∆°i v·ªÅ vai tr√≤ c·ªßa h·ªç
            const role = this.roles[player.role];
            await api.sendMessage(
                `üéÆ GAME MA S√ìI üéÆ\n\n` +
                `Vai tr√≤ c·ªßa b·∫°n: ${role.name}\n` +
                `M√¥ t·∫£: ${role.description}\n` +
                `Phe: ${role.team === "village" ? "D√¢n l√†ng" : "Ma s√≥i"}\n\n` +
                `‚è≥ H√£y ch·ªù h∆∞·ªõng d·∫´n trong nh√≥m!`,
                playerId
            );
        }

        // Th√¥ng b√°o cho ma s√≥i v·ªÅ ƒë·ªìng ƒë·ªôi
        if (game.werewolves.length > 1) {
            const werewolfNames = game.werewolves.map(id => this.getUserName(id)).join(", ");
            for (const wolfId of game.werewolves) {
                await api.sendMessage(
                    `üê∫ Danh s√°ch Ma S√≥i:\n${werewolfNames}\n\n` +
                    `H√£y li√™n l·∫°c v·ªõi nhau ƒë·ªÉ th·ªëng nh·∫•t n·∫°n nh√¢n!`,
                    wolfId
                );
            }
        }

        // B·∫Øt ƒë·∫ßu ƒë√™m ƒë·∫ßu ti√™n
        this.startNight(api, game);

        return `üéÆ GAME MA S√ìI B·∫ÆT ƒê·∫¶U üéÆ\n\n` +
               `üë• S·ªë ng∆∞·ªùi ch∆°i: ${game.players.size}\n` +
               `üåô ƒê√™m th·ª© ${game.day} b·∫Øt ƒë·∫ßu!\n\n` +
               `M·ªçi ng∆∞·ªùi h√£y ki·ªÉm tra tin nh·∫Øn ri√™ng ƒë·ªÉ bi·∫øt vai tr√≤ c·ªßa m√¨nh.`;
    },

    // B·∫Øt ƒë·∫ßu ƒë√™m
    startNight: async function(api, game) {
        game.status = "night";
        game.votes.clear();
        game.nightActions.clear();
        game.lastActivityTime = Date.now();

        // G·ª≠i th√¥ng b√°o chung trong nh√≥m
        await api.sendMessage(
            `üåô ƒê√äM TH·ª® ${game.day} üåô\n\n` +
            `Tr·ªùi ƒë√£ t·ªëi, m·ªçi ng∆∞·ªùi ƒëi ng·ªß v√† Ma S√≥i th·ª©c d·∫≠y...\n` +
            `Ng∆∞·ªùi ch∆°i c√≥ h√†nh ƒë·ªông ban ƒë√™m, h√£y check tin nh·∫Øn ri√™ng!`,
            game.threadID
        );

        // G·ª≠i tin nh·∫Øn cho t·ª´ng ng∆∞·ªùi ch∆°i c√≥ h√†nh ƒë·ªông ban ƒë√™m
        for (const [playerId, player] of game.players.entries()) {
            if (!player.isAlive) continue;

            const role = this.roles[player.role];
            if (role.nightAction) {
                const alivePlayersList = this.getAlivePlayersList(game);
                
                switch (player.role) {
                    case "werewolf":
                        await api.sendMessage(
                            `üê∫ Ma S√≥i, h√£y ch·ªçn n·∫°n nh√¢n c·ªßa b·∫°n!\n\n` +
                            `${alivePlayersList}\n\n` +
                            `Reply tin nh·∫Øn n√†y v·ªõi ID c·ªßa ng∆∞·ªùi b·∫°n mu·ªën gi·∫øt.`,
                            playerId,
                            (err, info) => {
                                if (!err) {
                                    global.client.onReply.push({
                                        name: this.name,
                                        messageID: info.messageID,
                                        author: playerId,
                                        threadID: game.threadID,
                                        type: "werewolf_kill"
                                    });
                                }
                            }
                        );
                        break;
                    case "seer":
                        await api.sendMessage(
                            `üîÆ Ti√™n tri, h√£y ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën soi!\n\n` +
                            `${alivePlayersList}\n\n` +
                            `Reply tin nh·∫Øn n√†y v·ªõi ID c·ªßa ng∆∞·ªùi b·∫°n mu·ªën ki·ªÉm tra.`,
                            playerId,
                            (err, info) => {
                                if (!err) {
                                    global.client.onReply.push({
                                        name: this.name,
                                        messageID: info.messageID,
                                        author: playerId,
                                        threadID: game.threadID,
                                        type: "seer_check"
                                    });
                                }
                            }
                        );
                        break;
                    case "doctor":
                        await api.sendMessage(
                            `üíâ B√°c sƒ©, h√£y ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën c·ª©u!\n\n` +
                            `${alivePlayersList}\n\n` +
                            `Reply tin nh·∫Øn n√†y v·ªõi ID c·ªßa ng∆∞·ªùi b·∫°n mu·ªën b·∫£o v·ªá.`,
                            playerId,
                            (err, info) => {
                                if (!err) {
                                    global.client.onReply.push({
                                        name: this.name,
                                        messageID: info.messageID,
                                        author: playerId,
                                        threadID: game.threadID,
                                        type: "doctor_save"
                                    });
                                }
                            }
                        );
                        break;
                    case "bodyguard":
                        const availablePlayers = Array.from(game.players.entries())
                            .filter(([id, p]) => p.isAlive && id !== game.bodyguardLastProtected)
                            .map(([id, p], i) => `${i+1}. ${p.name} (${id})`)
                            .join('\n');
                            
                        await api.sendMessage(
                            `üõ°Ô∏è V·ªá sƒ©, h√£y ch·ªçn ng∆∞·ªùi b·∫°n mu·ªën b·∫£o v·ªá!\n\n` +
                            `${availablePlayers}\n\n` +
                            `Reply tin nh·∫Øn n√†y v·ªõi ID c·ªßa ng∆∞·ªùi b·∫°n mu·ªën b·∫£o v·ªá.`,
                            playerId,
                            (err, info) => {
                                if (!err) {
                                    global.client.onReply.push({
                                        name: this.name,
                                        messageID: info.messageID,
                                        author: playerId,
                                        threadID: game.threadID,
                                        type: "bodyguard_protect"
                                    });
                                }
                            }
                        );
                        break;
                    case "witch":
                        if (game.witchPotions.save > 0 || game.witchPotions.kill > 0) {
                            let message = `üßô‚Äç‚ôÄÔ∏è Ph√π th·ªßy, b·∫°n c√≥ c√°c thu·ªëc sau:\n`;
                            
                            if (game.witchPotions.save > 0) {
                                message += `- üíä Thu·ªëc c·ª©u: C√≤n ${game.witchPotions.save} li·ªÅu\n`;
                            }
                            
                            if (game.witchPotions.kill > 0) {
                                message += `- ‚ò†Ô∏è Thu·ªëc ƒë·ªôc: C√≤n ${game.witchPotions.kill} li·ªÅu\n`;
                            }
                            
                            message += `\n${alivePlayersList}\n\n`;
                            message += `ƒê·ªÉ s·ª≠ d·ª•ng thu·ªëc, reply theo c√∫ ph√°p: [save/kill] [ID]`;
                            message += `\nV√≠ d·ª•: save 123456789 ho·∫∑c kill 123456789`;
                            message += `\nN·∫øu kh√¥ng mu·ªën s·ª≠ d·ª•ng, h√£y reply: skip`;
                            
                            await api.sendMessage(
                                message,
                                playerId,
                                (err, info) => {
                                    if (!err) {
                                        global.client.onReply.push({
                                            name: this.name,
                                            messageID: info.messageID,
                                            author: playerId,
                                            threadID: game.threadID,
                                            type: "witch_action"
                                        });
                                    }
                                }
                            );
                        }
                        break;
                }
            }
        }

        // Ki·ªÉm tra sau 2 ph√∫t n·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ƒë√£ ho√†n t·∫•t ho·∫∑c h·∫øt th·ªùi gian
        setTimeout(() => {
            this.checkNightActionsComplete(api, game);
        }, 2 * 60 * 1000);
    },

    // Ki·ªÉm tra xem t·∫•t c·∫£ h√†nh ƒë·ªông ban ƒë√™m ƒë√£ ho√†n t·∫•t ch∆∞a
    checkNightActionsComplete: async function(api, game) {
        // N·∫øu game ƒë√£ k·∫øt th√∫c ho·∫∑c ƒë√£ chuy·ªÉn sang ng√†y
        if (game.status !== "night") return;

        const requiredActions = new Set();
        
        // X√°c ƒë·ªãnh nh·ªØng h√†nh ƒë·ªông c·∫ßn thi·∫øt
        for (const [playerId, player] of game.players.entries()) {
            if (!player.isAlive) continue;
            
            if (player.role === "werewolf" && game.werewolves.includes(playerId)) {
                requiredActions.add("werewolf_kill");
            }
            
            if (player.role === "seer") {
                requiredActions.add("seer_check");
            }

            if (player.role === "doctor") {
                requiredActions.add("doctor_save");
            }
        }

        // Ki·ªÉm tra xem t·∫•t c·∫£ h√†nh ƒë·ªông c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán ch∆∞a
        let allActionsComplete = true;
        for (const action of requiredActions) {
            if (!game.nightActions.has(action)) {
                allActionsComplete = false;
                break;
            }
        }

        // N·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ƒë√£ ho√†n t·∫•t ho·∫∑c ƒë√£ h·∫øt th·ªùi gian, ti·∫øn h√†nh x·ª≠ l√Ω k·∫øt qu·∫£ ƒë√™m
        if (allActionsComplete || (Date.now() - game.lastActivityTime > 2 * 60 * 1000)) {
            await this.processNightResults(api, game);
        }
    },

    // X·ª≠ l√Ω k·∫øt qu·∫£ c·ªßa ƒë√™m
    processNightResults: async function(api, game) {
        // X√°c ƒë·ªãnh ng∆∞·ªùi b·ªã ma s√≥i gi·∫øt
        let killedPlayer = null;
        const werewolfTarget = game.nightActions.get("werewolf_kill");

        if (werewolfTarget) {
            killedPlayer = werewolfTarget;
            game.lastKilled = werewolfTarget;
        }

        // Ki·ªÉm tra b·∫£o v·ªá c·ªßa b√°c sƒ© v√† v·ªá sƒ©
        const doctorTarget = game.nightActions.get("doctor_save");
        const bodyguardTarget = game.nightActions.get("bodyguard_protect");

        // N·∫øu n·∫°n nh√¢n ƒë∆∞·ª£c b·∫£o v·ªá, h·ªç s·∫Ω kh√¥ng ch·∫øt
        if (killedPlayer && (killedPlayer === doctorTarget || killedPlayer === bodyguardTarget)) {
            killedPlayer = null;
        }

        // X·ª≠ l√Ω h√†nh ƒë·ªông c·ªßa ph√π th·ªßy
        const witchAction = game.nightActions.get("witch_action");
        if (witchAction) {
            if (witchAction.type === "save" && killedPlayer) {
                killedPlayer = null;
                game.witchPotions.save = 0;
            } else if (witchAction.type === "kill") {
                // N·∫øu ng∆∞·ªùi n√†y ƒë√£ b·ªã s√≥i gi·∫øt, kh√¥ng c·∫ßn gi·∫øt n·ªØa
                if (witchAction.target !== killedPlayer) {
                    // Ki·ªÉm tra xem n·∫°n nh√¢n c·ªßa ph√π th·ªßy c√≥ ƒë∆∞·ª£c b·∫£o v·ªá kh√¥ng
                    if (witchAction.target !== doctorTarget && witchAction.target !== bodyguardTarget) {
                        if (killedPlayer) {
                            // C√≥ 2 ng∆∞·ªùi ch·∫øt
                            const witchKilled = game.players.get(witchAction.target);
                            if (witchKilled) {
                                witchKilled.isAlive = false;
                                game.history.push(`ƒê√™m ${game.day}: ${witchKilled.name} ƒë√£ b·ªã ph√π th·ªßy ƒë·∫ßu ƒë·ªôc.`);
                            }
                        } else {
                            killedPlayer = witchAction.target;
                        }
                        game.witchPotions.kill = 0;
                    }
                }
            }
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi ch∆°i n·∫øu c√≥ ai ƒë√≥ b·ªã gi·∫øt
        let killMessage = "";
        if (killedPlayer) {
            const player = game.players.get(killedPlayer);
            if (player) {
                player.isAlive = false;
                killMessage = `‚ò†Ô∏è ${player.name} ƒë√£ b·ªã gi·∫øt trong ƒë√™m. H·ªç l√† ${this.roles[player.role].name}.`;
                game.history.push(`ƒê√™m ${game.day}: ${player.name} (${this.roles[player.role].name}) ƒë√£ b·ªã gi·∫øt.`);
                
                // N·∫øu th·ª£ sƒÉn b·ªã gi·∫øt, h·ªç c√≥ th·ªÉ b·∫Øn m·ªôt ng∆∞·ªùi
                if (player.role === "hunter") {
                    // Th√¥ng b√°o cho th·ª£ sƒÉn
                    await api.sendMessage(
                        `üèπ Th·ª£ sƒÉn, b·∫°n ƒë√£ b·ªã gi·∫øt! H√£y ch·ªçn m·ªôt ng∆∞·ªùi ƒë·ªÉ b·∫Øn tr∆∞·ªõc khi ch·∫øt.\n\n` +
                        this.getAlivePlayersList(game) + `\n\n` +
                        `Reply tin nh·∫Øn n√†y v·ªõi ID c·ªßa ng∆∞·ªùi b·∫°n mu·ªën b·∫Øn.`,
                        killedPlayer,
                        (err, info) => {
                            if (!err) {
                                global.client.onReply.push({
                                    name: this.name,
                                    messageID: info.messageID,
                                    author: killedPlayer,
                                    threadID: game.threadID,
                                    type: "hunter_shoot"
                                });
                            }
                        }
                    );
                }
            }
        } else {
            killMessage = "üåü Kh√¥ng ai b·ªã gi·∫øt trong ƒë√™m qua!";
            game.history.push(`ƒê√™m ${game.day}: Kh√¥ng ai b·ªã gi·∫øt.`);
        }

        // Ki·ªÉm tra xem game ƒë√£ k·∫øt th√∫c ch∆∞a
        const gameStatus = this.checkGameEnd(game);
        if (gameStatus) {
            await this.endGame(api, game, gameStatus);
            return;
        }

        // L∆∞u ng∆∞·ªùi ƒë∆∞·ª£c v·ªá sƒ© b·∫£o v·ªá ƒë·ªÉ ƒë√™m sau kh√¥ng th·ªÉ b·∫£o v·ªá
        if (bodyguardTarget) {
            game.bodyguardLastProtected = bodyguardTarget;
        }

        // B·∫Øt ƒë·∫ßu ng√†y m·ªõi
        await this.startDay(api, game, killMessage);
    },

    // B·∫Øt ƒë·∫ßu ng√†y m·ªõi
    startDay: async function(api, game, killMessage) {
        game.status = "day";
        game.votes.clear();
        game.lastActivityTime = Date.now();

        // Th√¥ng b√°o ban ng√†y
        await api.sendMessage(
            `‚òÄÔ∏è NG√ÄY TH·ª® ${game.day} ‚òÄÔ∏è\n\n` +
            `${killMessage}\n\n` +
            `üë• Ng∆∞·ªùi ch∆°i c√≤n s·ªëng:\n` +
            this.getAlivePlayersList(game) + `\n\n` +
            `H√£y th·∫£o lu·∫≠n ƒë·ªÉ t√¨m ra ma s√≥i. B·∫°n c√≥ 3 ph√∫t ƒë·ªÉ th·∫£o lu·∫≠n.\n` +
            `Sau ƒë√≥ s·∫Ω b·∫Øt ƒë·∫ßu b·ªè phi·∫øu treo c·ªï.`,
            game.threadID
        );

        // Sau 3 ph√∫t, b·∫Øt ƒë·∫ßu b·ªè phi·∫øu
        setTimeout(() => {
            this.startVoting(api, game);
        }, 3 * 60 * 1000);
    },

    // B·∫Øt ƒë·∫ßu b·ªè phi·∫øu
    startVoting: async function(api, game) {
        if (game.status !== "day") return; // Ph√≤ng tr∆∞·ªùng h·ª£p game ƒë√£ k·∫øt th√∫c

        game.status = "voting";
        game.votes.clear();
        game.lastActivityTime = Date.now();

        await api.sendMessage(
            `üó≥Ô∏è B·∫ÆT ƒê·∫¶U B·ªé PHI·∫æU üó≥Ô∏è\n\n` +
            `H√£y vote treo c·ªï ng∆∞·ªùi m√† b·∫°n nghi ng·ªù l√† ma s√≥i.\n` +
            `üë• Ng∆∞·ªùi ch∆°i c√≤n s·ªëng:\n` +
            this.getAlivePlayersList(game) + `\n\n` +
            `C√°ch vote: .masoi vote [ID ng∆∞·ªùi ch∆°i]`,
            game.threadID
        );

        // Sau 2 ph√∫t, k·∫øt th√∫c b·ªè phi·∫øu
        setTimeout(() => {
            this.processVotes(api, game);
        }, 2 * 60 * 1000);
    },

    // X·ª≠ l√Ω k·∫øt qu·∫£ b·ªè phi·∫øu
    processVotes: async function(api, game) {
        if (game.status !== "voting") return; // Ph√≤ng tr∆∞·ªùng h·ª£p game ƒë√£ k·∫øt th√∫c

        // ƒê·∫øm phi·∫øu b·∫ßu
        const voteCounts = new Map();
        
        // Kh·ªüi t·∫°o s·ªë phi·∫øu cho m·ªói ng∆∞·ªùi ch∆°i c√≤n s·ªëng
        for (const [playerId, player] of game.players.entries()) {
            if (player.isAlive) {
                voteCounts.set(playerId, 0);
            }
        }

        // ƒê·∫øm s·ªë phi·∫øu
        for (const [voterId, targetId] of game.votes.entries()) {
            if (voteCounts.has(targetId)) {
                voteCounts.set(targetId, voteCounts.get(targetId) + 1);
            }
        }

        // T√¨m ng∆∞·ªùi c√≥ s·ªë phi·∫øu cao nh·∫•t
        let maxVotes = 0;
        let hangedPlayers = [];

        for (const [playerId, voteCount] of voteCounts.entries()) {
            if (voteCount > maxVotes) {
                maxVotes = voteCount;
                hangedPlayers = [playerId];
            } else if (voteCount === maxVotes && voteCount > 0) {
                hangedPlayers.push(playerId);
            }
        }

        // X·ª≠ l√Ω k·∫øt qu·∫£
        let resultMessage = "";
        
        if (hangedPlayers.length === 0 || maxVotes === 0) {
            resultMessage = "‚ùó Kh√¥ng ai b·ªã treo c·ªï v√¨ kh√¥ng ƒë·ªß phi·∫øu b·∫ßu.";
            game.history.push(`Ng√†y ${game.day}: Kh√¥ng ai b·ªã treo c·ªï.`);
        } else if (hangedPlayers.length > 1) {
            resultMessage = `‚ùó Kh√¥ng ai b·ªã treo c·ªï v√¨ c√≥ ${hangedPlayers.length} ng∆∞·ªùi c√≥ s·ªë phi·∫øu b·∫±ng nhau.`;
            game.history.push(`Ng√†y ${game.day}: Kh√¥ng ai b·ªã treo c·ªï do c√≥ ${hangedPlayers.length} ng∆∞·ªùi c√πng s·ªë phi·∫øu.`);
        } else {
            // M·ªôt ng∆∞·ªùi b·ªã treo c·ªï
            const hangedId = hangedPlayers[0];
            const hangedPlayer = game.players.get(hangedId);
            
            hangedPlayer.isAlive = false;
            
            resultMessage = `‚ò†Ô∏è ${hangedPlayer.name} ƒë√£ b·ªã treo c·ªï v·ªõi ${maxVotes} phi·∫øu. H·ªç l√† ${this.roles[hangedPlayer.role].name}.`;
            game.history.push(`Ng√†y ${game.day}: ${hangedPlayer.name} (${this.roles[hangedPlayer.role].name}) ƒë√£ b·ªã treo c·ªï v·ªõi ${maxVotes} phi·∫øu.`);
        }

        await api.sendMessage(resultMessage, game.threadID);

        // Ki·ªÉm tra k·∫øt th√∫c game
        const gameStatus = this.checkGameEnd(game);
        if (gameStatus) {
            await this.endGame(api, game, gameStatus);
            return;
        }

        // Chuy·ªÉn sang ƒë√™m ti·∫øp theo
        game.day++;
        setTimeout(() => {
            this.startNight(api, game);
        }, 20000); // ƒê·ª£i 20 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ƒë√™m m·ªõi
    },

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán k·∫øt th√∫c game
    checkGameEnd: function(game) {
        let villageCount = 0;
        let werewolfCount = 0;

        // ƒê·∫øm s·ªë l∆∞·ª£ng ng∆∞·ªùi c√≤n s·ªëng c·ªßa m·ªói phe
        for (const [_, player] of game.players.entries()) {
            if (player.isAlive) {
                if (player.role === "werewolf") {
                    werewolfCount++;
                } else {
                    villageCount++;
                }
            }
        }

        // Ki·ªÉm tra ƒëi·ªÅu ki·ªán chi·∫øn th·∫Øng
        if (werewolfCount === 0) {
            return "village"; // D√¢n l√†ng th·∫Øng
        } else if (werewolfCount >= villageCount) {
            return "werewolf"; // Ma s√≥i th·∫Øng
        }

        return null; // Game ch∆∞a k·∫øt th√∫c
    },

    // K·∫øt th√∫c game
    endGame: async function(api, game, winner) {
        game.status = "ended";
        clearInterval(game.checkInactivityInterval);
        this.activeGames.delete(game.threadID);

        // T·∫°o danh s√°ch vai tr√≤ c·ªßa t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
        let playerRoles = "";
        for (const [_, player] of game.players.entries()) {
            const role = this.roles[player.role];
            playerRoles += `üë§ ${player.name}: ${role.name} (${player.isAlive ? "c√≤n s·ªëng" : "ƒë√£ ch·∫øt"})\n`;
        }

        // T·∫°o t√≥m t·∫Øt l·ªãch s·ª≠ game
        let gameHistory = "üìú L·ªãch s·ª≠ game:\n";
        game.history.forEach(event => {
            gameHistory += `- ${event}\n`;
        });

        // T√≠nh th·ªùi gian ch∆°i
        const gameTime = this.formatTime(Date.now() - game.startTime);

        // G·ª≠i th√¥ng b√°o k·∫øt th√∫c game
        await api.sendMessage(
            `üéÆ GAME MA S√ìI K·∫æT TH√öC üéÆ\n\n` +
            `${winner === "village" ? "üèÜ D√ÇN L√ÄNG CHI·∫æN TH·∫ÆNG! T·∫•t c·∫£ Ma S√≥i ƒë√£ b·ªã ti√™u di·ªát." : "üê∫ MA S√ìI CHI·∫æN TH·∫ÆNG! Ma s√≥i ƒë√£ √°p ƒë·∫£o d√¢n l√†ng."}\n\n` +
            `‚è±Ô∏è Th·ªùi gian ch∆°i: ${gameTime}\n\n` +
            `üë• Vai tr√≤ ng∆∞·ªùi ch∆°i:\n${playerRoles}\n\n` +
            gameHistory,
            game.threadID
        );
    },

    // L·∫•y danh s√°ch ng∆∞·ªùi ch∆°i c√≤n s·ªëng
    getAlivePlayersList: function(game) {
        return Array.from(game.players.entries())
            .filter(([_, player]) => player.isAlive)
            .map(([id, player], index) => `${index+1}. ${player.name} (${id})`)
            .join('\n');
    },

    // Format th·ªùi gian
    formatTime: function(milliseconds) {
        const minutes = Math.floor(milliseconds / 60000);
        const seconds = Math.floor((milliseconds % 60000) / 1000);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    },

    // X·ª≠ l√Ω d·ªçn d·∫πp khi module ƒë∆∞·ª£c t·∫£i l·∫°i
    onLoad: function() {
        for (const [threadID, game] of this.activeGames) {
            if (game.checkInactivityInterval) {
                clearInterval(game.checkInactivityInterval);
            }
        }
        this.activeGames.clear();
    },

    // X·ª≠ l√Ω l·ªánh
    onLaunch: async function({ api, event, target = [] }) {
        try {
            const { threadID, messageID, senderID } = event;
            
            if (!target[0]) {
                return api.sendMessage(
                    "üéÆ GAME MA S√ìI (WEREWOLF) üéÆ\n\n" +
                    "üìå C√°ch ch∆°i:\n" +
                    "- .masoi create: T·∫°o v√°n m·ªõi\n" +
                    "- .masoi join: Tham gia v√°n ƒëang ch·ªù\n" +
                    "- .masoi start: B·∫Øt ƒë·∫ßu v√°n (ch·ªâ host)\n" +
                    "- .masoi leave: R·ªùi kh·ªèi v√°n\n" +
                    "- .masoi list: Xem danh s√°ch ng∆∞·ªùi ch∆°i\n" +
                    "- .masoi vote [ID]: B·ªè phi·∫øu treo c·ªï\n" +
                    "- .masoi end: K·∫øt th√∫c v√°n (ch·ªâ host)\n" +
                    "- .masoi help: Xem h∆∞·ªõng d·∫´n\n\n" +
                    "üìã Lu·∫≠t ch∆°i: D√¢n l√†ng t√¨m v√† ti√™u di·ªát Ma s√≥i, Ma s√≥i c·ªë g·∫Øng gi·∫øt h·∫øt d√¢n l√†ng.",
                    threadID, messageID
                );
            }

            const action = target[0].toLowerCase();
            const game = this.activeGames.get(threadID);

            switch (action) {
                case "create":
                    if (game) {
                        return api.sendMessage("‚ùå ƒê√£ c√≥ v√°n Ma S√≥i ƒëang di·ªÖn ra trong nh√≥m n√†y!", threadID, messageID);
                    }
                    
                    this.createGame(threadID, senderID);
                    return api.sendMessage(
                        "üéÆ ƒê√£ t·∫°o v√°n Ma S√≥i m·ªõi!\n\n" +
                        `üëë Host: ${this.getUserName(senderID)}\n` +
                        "üë• S·ªë ng∆∞·ªùi ch∆°i: 1/12\n\n" +
                        "üìå D√πng .masoi join ƒë·ªÉ tham gia\n" +
                        "üìå C·∫ßn √≠t nh·∫•t 5 ng∆∞·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu\n" +
                        "üìå Host d√πng .masoi start ƒë·ªÉ b·∫Øt ƒë·∫ßu game",
                        threadID, messageID
                    );

                case "join":
                    if (!game) {
                        return api.sendMessage("‚ùå Ch∆∞a c√≥ v√°n Ma S√≥i n√†o ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
                    }
                    
                    if (game.status !== "waiting") {
                        return api.sendMessage("‚ùå V√°n Ma S√≥i ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ tham gia!", threadID, messageID);
                    }
                    
                    if (game.players.has(senderID)) {
                        return api.sendMessage("‚ùå B·∫°n ƒë√£ tham gia v√°n n√†y r·ªìi!", threadID, messageID);
                    }
                    
                    if (game.players.size >= 12) {
                        return api.sendMessage("‚ùå V√°n ƒë√£ ƒë·∫ßy ng∆∞·ªùi ch∆°i (t·ªëi ƒëa 12 ng∆∞·ªùi)!", threadID, messageID);
                    }
                    
                    game.players.set(senderID, {
                        id: senderID,
                        name: this.getUserName(senderID),
                        role: null,
                        isAlive: true,
                        voteTarget: null
                    });
                    
                    return api.sendMessage(
                        `‚úÖ ${this.getUserName(senderID)} ƒë√£ tham gia v√°n Ma S√≥i!\n` +
                        `üë• S·ªë ng∆∞·ªùi ch∆°i: ${game.players.size}/12`,
                        threadID, messageID
                    );

                case "start":
                    if (!game) {
                        return api.sendMessage("‚ùå Ch∆∞a c√≥ v√°n Ma S√≥i n√†o ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
                    }
                    
                    if (senderID !== game.creatorID) {
                        return api.sendMessage("‚ùå Ch·ªâ host m·ªõi c√≥ th·ªÉ b·∫Øt ƒë·∫ßu game!", threadID, messageID);
                    }
                    
                    if (game.status !== "waiting") {
                        return api.sendMessage("‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu r·ªìi!", threadID, messageID);
                    }
                    
                    const startMessage = await this.startGame(api, threadID);
                    return api.sendMessage(startMessage, threadID, messageID);

                case "list":
                    if (!game) {
                        return api.sendMessage("‚ùå Ch∆∞a c√≥ v√°n Ma S√≥i n√†o ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
                    }
                    
                    let playerList = "";
                    let count = 1;
                    
                    for (const [playerId, player] of game.players.entries()) {
                        const statusEmoji = game.status === "waiting" ? "‚åõ" : (player.isAlive ? "‚úÖ" : "‚ò†Ô∏è");
                        playerList += `${count}. ${statusEmoji} ${player.name}${playerId === game.creatorID ? " üëë" : ""}\n`;
                        count++;
                    }
                    
                    const gameState = game.status === "waiting" ? "ƒêang ch·ªù" : 
                                     game.status === "night" ? "ƒê√™m " + game.day :
                                     game.status === "day" ? "Ng√†y " + game.day :
                                     game.status === "voting" ? "ƒêang b·ªè phi·∫øu" : "ƒê√£ k·∫øt th√∫c";
                    
                    return api.sendMessage(
                        `üë• DANH S√ÅCH NG∆Ø·ªúI CH∆†I (${game.players.size})\n` +
                        `üéÆ Tr·∫°ng th√°i: ${gameState}\n\n` +
                        playerList,
                        threadID, messageID
                    );

                case "leave":
                    if (!game) {
                        return api.sendMessage("‚ùå Ch∆∞a c√≥ v√°n Ma S√≥i n√†o ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
                    }
                    
                    if (!game.players.has(senderID)) {
                        return api.sendMessage("‚ùå B·∫°n kh√¥ng tham gia v√°n n√†y!", threadID, messageID);
                    }
                    
                    if (game.status !== "waiting") {
                        return api.sendMessage("‚ùå Game ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ r·ªùi ƒëi!", threadID, messageID);
                    }
                    
                    game.players.delete(senderID);
                    
                    // N·∫øu host r·ªùi ƒëi, game s·∫Ω b·ªã h·ªßy ho·∫∑c chuy·ªÉn host
                    if (senderID === game.creatorID) {
                        if (game.players.size === 0) {
                            // H·ªßy game n·∫øu kh√¥ng c√≤n ai
                            clearInterval(game.checkInactivityInterval);
                            this.activeGames.delete(threadID);
                            return api.sendMessage(
                                "üéÆ V√°n Ma S√≥i ƒë√£ b·ªã h·ªßy v√¨ host ƒë√£ r·ªùi ƒëi v√† kh√¥ng c√≤n ng∆∞·ªùi ch∆°i n√†o!",
                                threadID, messageID
                            );
                        } else {
                            // Chuy·ªÉn host cho ng∆∞·ªùi ƒë·∫ßu ti√™n c√≤n l·∫°i
                            const newHostId = game.players.keys().next().value;
                            game.creatorID = newHostId;
                            
                            return api.sendMessage(
                                `üéÆ ${this.getUserName(senderID)} ƒë√£ r·ªùi kh·ªèi v√°n Ma S√≥i!\n` +
                                `üëë Host m·ªõi: ${this.getUserName(newHostId)}\n` +
                                `üë• S·ªë ng∆∞·ªùi ch∆°i: ${game.players.size}/12`,
                                threadID, messageID
                            );
                        }
                    }
                    
                    return api.sendMessage(
                        `üéÆ ${this.getUserName(senderID)} ƒë√£ r·ªùi kh·ªèi v√°n Ma S√≥i!\n` +
                        `üë• S·ªë ng∆∞·ªùi ch∆°i: ${game.players.size}/12`,
                        threadID, messageID
                    );

                case "vote":
                    if (!game) {
                        return api.sendMessage("‚ùå Ch∆∞a c√≥ v√°n Ma S√≥i n√†o ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
                    }
                    
                    if (game.status !== "voting") {
                        return api.sendMessage("‚ùå Hi·ªán kh√¥ng ph·∫£i th·ªùi gian b·ªè phi·∫øu!", threadID, messageID);
                    }
                    
                    if (!game.players.has(senderID) || !game.players.get(senderID).isAlive) {
                        return api.sendMessage("‚ùå B·∫°n kh√¥ng th·ªÉ b·ªè phi·∫øu!", threadID, messageID);
                    }
                    
                    const targetId = target[1];
                    if (!targetId) {
                        return api.sendMessage("‚ùå B·∫°n c·∫ßn ch·ªâ ƒë·ªãnh ID ng∆∞·ªùi ch∆°i ƒë·ªÉ vote!", threadID, messageID);
                    }
                    
                    if (!game.players.has(targetId) || !game.players.get(targetId).isAlive) {
                        return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ch·∫øt!", threadID, messageID);
                    }
                    
                    // L∆∞u phi·∫øu b·∫ßu
                    game.votes.set(senderID, targetId);
                    game.lastActivityTime = Date.now();
                    
                    return api.sendMessage(
                        `‚úÖ ${this.getUserName(senderID)} ƒë√£ b·ªè phi·∫øu treo c·ªï ${this.getUserName(targetId)}!`,
                        threadID, messageID
                    );

                case "end":
                    if (!game) {
                        return api.sendMessage("‚ùå Ch∆∞a c√≥ v√°n Ma S√≥i n√†o ƒë∆∞·ª£c t·∫°o!", threadID, messageID);
                    }
                    
                    if (senderID !== game.creatorID) {
                        return api.sendMessage("‚ùå Ch·ªâ host m·ªõi c√≥ th·ªÉ k·∫øt th√∫c game!", threadID, messageID);
                    }
                    
                    clearInterval(game.checkInactivityInterval);
                    this.activeGames.delete(threadID);
                    
                    return api.sendMessage(
                        "üéÆ V√°n Ma S√≥i ƒë√£ b·ªã h·ªßy b·ªüi host!",
                        threadID, messageID
                    );

                case "help":
                    return api.sendMessage(
                        "üéÆ H∆Ø·ªöNG D·∫™N CH∆†I MA S√ìI üéÆ\n\n" +
                        "üìå Vai tr√≤:\n" +
                        "- D√¢n l√†ng: Kh√¥ng c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát, ch·ªâ ƒë∆∞·ª£c b·ªè phi·∫øu\n" +
                        "- Ma s√≥i: M·ªói ƒë√™m gi·∫øt m·ªôt ng∆∞·ªùi\n" +
                        "- Ti√™n tri: M·ªói ƒë√™m soi danh t√≠nh m·ªôt ng∆∞·ªùi\n" +
                        "- B√°c sƒ©: M·ªói ƒë√™m b·∫£o v·ªá m·ªôt ng∆∞·ªùi\n" +
                        "- Th·ª£ sƒÉn: Khi ch·∫øt c√≥ th·ªÉ b·∫Øn ch·∫øt m·ªôt ng∆∞·ªùi\n" +
                        "- Ph√π th·ªßy: C√≥ thu·ªëc c·ª©u v√† thu·ªëc ƒë·ªôc\n" +
                        "- V·ªá sƒ©: B·∫£o v·ªá ng∆∞·ªùi ch∆°i, kh√¥ng th·ªÉ b·∫£o v·ªá c√πng m·ªôt ng∆∞·ªùi 2 ƒë√™m li√™n ti·∫øp\n\n" +
                        
                        "üìã Lu·∫≠t ch∆°i:\n" +
                        "- Ban ƒë√™m: Ma s√≥i ch·ªçn ng∆∞·ªùi ƒë·ªÉ gi·∫øt, c√°c vai tr√≤ ƒë·∫∑c bi·ªát th·ª±c hi·ªán h√†nh ƒë·ªông\n" +
                        "- Ban ng√†y: M·ªçi ng∆∞·ªùi th·∫£o lu·∫≠n v√† b·ªè phi·∫øu treo c·ªï m·ªôt ng∆∞·ªùi\n" +
                        "- K·∫øt th√∫c: D√¢n l√†ng th·∫Øng khi ti√™u di·ªát h·∫øt Ma s√≥i; Ma s√≥i th·∫Øng khi s·ªë Ma s√≥i >= s·ªë d√¢n l√†ng\n\n" +
                        
                        "‚ùì M·∫πo ch∆°i:\n" +
                        "- Quan s√°t k·ªπ ph·∫£n ·ª©ng c·ªßa ng∆∞·ªùi ch∆°i khi th·∫£o lu·∫≠n\n" +
                        "- Vai tr√≤ ƒë·∫∑c bi·ªát n√™n c·∫©n th·∫≠n khi ti·∫øt l·ªô th√¥ng tin\n" +
                        "- Ma s√≥i n√™n ph·ªëi h·ª£p v√† t·∫°o alibi t·ªët\n\n" +
                        
                        "üì± L·ªánh trong game:\n" +
                        ".masoi vote [ID]: B·ªè phi·∫øu treo c·ªï\n" +
                        ".masoi list: Xem danh s√°ch ng∆∞·ªùi ch∆°i\n" +
                        ".masoi end: K·∫øt th√∫c game (ch·ªâ host)",
                        threadID, messageID
                    );

                default:
                    return api.sendMessage(
                        "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! D√πng .masoi help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.",
                        threadID, messageID
                    );
            }
        } catch (error) {
            console.error("Error in masoi command:", error);
            return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói! Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID, event.messageID);
        }
    },

    // X·ª≠ l√Ω ph·∫£n h·ªìi
    onReply: async function({ api, event }) {
        const { threadID, messageID, senderID, body } = event;
        const reply = global.client.onReply.find(r => 
            r.messageID === event.messageReply.messageID && 
            r.author === senderID &&
            r.name === this.name
        );

        if (!reply) return;

        const game = this.activeGames.get(threadID);
        if (!game) {
            return api.sendMessage("‚ùå V√°n Ma S√≥i ƒë√£ k·∫øt th√∫c ho·∫∑c kh√¥ng t·ªìn t·∫°i!", threadID, messageID);
        }

        game.lastActivityTime = Date.now();
        const input = body.trim();

        switch (reply.type) {
            case "werewolf_kill":
                // X·ª≠ l√Ω khi ma s√≥i ch·ªçn n·∫°n nh√¢n
                if (!game.players.has(input)) {
                    return api.sendMessage("‚ùå ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!", senderID);
                }

                const targetPlayer = game.players.get(input);
                if (!targetPlayer.isAlive) {
                    return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i n√†y ƒë√£ ch·∫øt!", senderID);
                }

                // L∆∞u l·ª±a ch·ªçn c·ªßa ma s√≥i
                game.nightActions.set("werewolf_kill", input);
                
                await api.sendMessage(`‚úÖ B·∫°n ƒë√£ ch·ªçn gi·∫øt ${targetPlayer.name}!`, senderID);
                
                // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ban ƒë√™m ƒë√£ ho√†n t·∫•t
                this.checkNightActionsComplete(api, game);
                break;

            case "seer_check":
                // X·ª≠ l√Ω khi ti√™n tri soi ng∆∞·ªùi ch∆°i
                if (!game.players.has(input)) {
                    return api.sendMessage("‚ùå ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!", senderID);
                }

                const checkPlayer = game.players.get(input);
                if (!checkPlayer.isAlive) {
                    return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i n√†y ƒë√£ ch·∫øt!", senderID);
                }

                // L∆∞u l·ª±a ch·ªçn c·ªßa ti√™n tri
                game.nightActions.set("seer_check", input);
                
                // Th√¥ng b√°o k·∫øt qu·∫£ cho ti√™n tri
                const isSeerWerewolf = checkPlayer.role === "werewolf";
                await api.sendMessage(
                    `üîÆ K·∫øt qu·∫£ soi:\n` +
                    `${checkPlayer.name} ${isSeerWerewolf ? "L√Ä MA S√ìI! üê∫" : "KH√îNG PH·∫¢I l√† ma s√≥i. ‚úÖ"}`,
                    senderID
                );
                
                // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ban ƒë√™m ƒë√£ ho√†n t·∫•t
                this.checkNightActionsComplete(api, game);
                break;

            case "doctor_save":
                // X·ª≠ l√Ω khi b√°c sƒ© c·ª©u ng∆∞·ªùi
                if (!game.players.has(input)) {
                    return api.sendMessage("‚ùå ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!", senderID);
                }

                const savePlayer = game.players.get(input);
                if (!savePlayer.isAlive) {
                    return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i n√†y ƒë√£ ch·∫øt!", senderID);
                }

                // L∆∞u l·ª±a ch·ªçn c·ªßa b√°c sƒ©
                game.nightActions.set("doctor_save", input);
                
                await api.sendMessage(`‚úÖ B·∫°n ƒë√£ ch·ªçn b·∫£o v·ªá ${savePlayer.name}!`, senderID);
                
                // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ban ƒë√™m ƒë√£ ho√†n t·∫•t
                this.checkNightActionsComplete(api, game);
                break;

            case "bodyguard_protect":
                // X·ª≠ l√Ω khi v·ªá sƒ© b·∫£o v·ªá ng∆∞·ªùi ch∆°i
                if (!game.players.has(input)) {
                    return api.sendMessage("‚ùå ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!", senderID);
                }

                const protectPlayer = game.players.get(input);
                if (!protectPlayer.isAlive) {
                    return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i n√†y ƒë√£ ch·∫øt!", senderID);
                }

                // Ki·ªÉm tra xem ng∆∞·ªùi n√†y c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c b·∫£o v·ªá ƒë√™m tr∆∞·ªõc kh√¥ng
                if (input === game.bodyguardLastProtected) {
                    return api.sendMessage("‚ùå B·∫°n kh√¥ng th·ªÉ b·∫£o v·ªá c√πng m·ªôt ng∆∞·ªùi hai ƒë√™m li√™n ti·∫øp!", senderID);
                }

                // L∆∞u l·ª±a ch·ªçn c·ªßa v·ªá sƒ©
                game.nightActions.set("bodyguard_protect", input);
                
                await api.sendMessage(`‚úÖ B·∫°n ƒë√£ ch·ªçn b·∫£o v·ªá ${protectPlayer.name}!`, senderID);
                
                // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ban ƒë√™m ƒë√£ ho√†n t·∫•t
                this.checkNightActionsComplete(api, game);
                break;

            case "witch_action":
                // X·ª≠ l√Ω khi ph√π th·ªßy s·ª≠ d·ª•ng thu·ªëc
                if (input.toLowerCase() === "skip") {
                    game.nightActions.set("witch_action", { type: "skip" });
                    await api.sendMessage("‚úÖ B·∫°n ƒë√£ ch·ªçn kh√¥ng s·ª≠ d·ª•ng thu·ªëc!", senderID);
                } else {
                    const parts = input.split(" ");
                    if (parts.length !== 2) {
                        return api.sendMessage("‚ùå C√∫ ph√°p kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: save/kill [ID] ho·∫∑c skip", senderID);
                    }

                    const action = parts[0].toLowerCase();
                    const targetId = parts[1];

                    if (action !== "save" && action !== "kill") {
                        return api.sendMessage("‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá! Ch·ªâ c√≥ th·ªÉ 'save' ho·∫∑c 'kill'", senderID);
                    }

                    if (!game.players.has(targetId)) {
                        return api.sendMessage("‚ùå ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!", senderID);
                    }

                    const targetWitchPlayer = game.players.get(targetId);
                    if (!targetWitchPlayer.isAlive) {
                        return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i n√†y ƒë√£ ch·∫øt!", senderID);
                    }

                    // Ki·ªÉm tra xem c√≥ thu·ªëc kh√¥ng
                    if (action === "save" && game.witchPotions.save === 0) {
                        return api.sendMessage("‚ùå B·∫°n ƒë√£ h·∫øt thu·ªëc c·ª©u!", senderID);
                    }

                    if (action === "kill" && game.witchPotions.kill === 0) {
                        return api.sendMessage("‚ùå B·∫°n ƒë√£ h·∫øt thu·ªëc ƒë·ªôc!", senderID);
                    }

                    // L∆∞u l·ª±a ch·ªçn c·ªßa ph√π th·ªßy
                    game.nightActions.set("witch_action", { type: action, target: targetId });
                    
                    await api.sendMessage(
                        `‚úÖ B·∫°n ƒë√£ ch·ªçn ${action === "save" ? "c·ª©u" : "ƒë·∫ßu ƒë·ªôc"} ${targetWitchPlayer.name}!`,
                        senderID
                    );
                }
                
                // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ h√†nh ƒë·ªông ban ƒë√™m ƒë√£ ho√†n t·∫•t
                this.checkNightActionsComplete(api, game);
                break;

            case "hunter_shoot":
                // X·ª≠ l√Ω khi th·ª£ sƒÉn b·∫Øn ng∆∞·ªùi ch∆°i
                if (!game.players.has(input)) {
                    return api.sendMessage("‚ùå ID ng∆∞·ªùi ch∆°i kh√¥ng h·ª£p l·ªá!", senderID);
                }

                const shootPlayer = game.players.get(input);
                if (!shootPlayer.isAlive) {
                    return api.sendMessage("‚ùå Ng∆∞·ªùi ch∆°i n√†y ƒë√£ ch·∫øt!", senderID);
                }

                // Gi·∫øt ng∆∞·ªùi ch∆°i b·ªã b·∫Øn
                shootPlayer.isAlive = false;
                
                await api.sendMessage(`‚úÖ B·∫°n ƒë√£ b·∫Øn ch·∫øt ${shootPlayer.name}!`, senderID);
                
                // Th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
                await api.sendMessage(
                    `üèπ Th·ª£ sƒÉn ${game.players.get(senderID).name} ƒë√£ b·∫Øn ch·∫øt ${shootPlayer.name} tr∆∞·ªõc khi ch·∫øt! H·ªç l√† ${this.roles[shootPlayer.role].name}.`,
                    threadID
                );
                
                game.history.push(`Ng√†y ${game.day}: Th·ª£ sƒÉn ${game.players.get(senderID).name} ƒë√£ b·∫Øn ch·∫øt ${shootPlayer.name} (${this.roles[shootPlayer.role].name}).`);
                
                // Ki·ªÉm tra k·∫øt th√∫c game
                const gameStatus = this.checkGameEnd(game);
                if (gameStatus) {
                    await this.endGame(api, game, gameStatus);
                }
                break;
        }
    }
};