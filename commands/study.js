const { getBalance, updateBalance } = require('../utils/currencies');
const { DEGREES, STUDY_TIME, LEARNING_SPEED, DEGREE_CATEGORIES } = require('../config/educationConfig');
const fs = require('fs');
const path = require('path');

function formatNumber(number) {
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

module.exports = {
    name: "study",
    dev: "HNT",
    usedby: 0,
    info: "H·ªá th·ªëng h·ªçc t·∫≠p",
    onPrefix: true,
    usages: ".study [list/enroll/info]",
    cooldowns: 5,

    onLaunch: async function({ api, event, target }) {
        const { threadID, senderID } = event;
        const command = target[0]?.toLowerCase();

        try {
            const education = this.loadEducation(senderID);

            if (!command) {
                return api.sendMessage(
                    "üéì H·ªÜ TH·ªêNG H·ªåC T·∫¨P üéì\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                    "1. list - Xem c√°c b·∫±ng c·∫•p\n" +
                    "2. enroll [m√£] - ƒêƒÉng k√Ω h·ªçc\n" +
                    "3. info - Xem th√¥ng tin h·ªçc v·∫•n\n\n" +
                    "üí° H·ªçc v·∫•n s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn c√¥ng vi·ªác",
                    threadID
                );
            }

            switch (command) {
                case "list": {
                    let msg = "üéì DANH S√ÅCH B·∫∞NG C·∫§P üéì\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
                    
                    for (const [categoryId, category] of Object.entries(DEGREE_CATEGORIES)) {
                        msg += `„Äê${category.name}„Äë\n`;
                        
                        for (const degreeId of category.degrees) {
                            const degree = DEGREES[degreeId];
                            if (!degree) continue;

                            msg += `‚Ä¢ M√£: ${degreeId} (${degree.name})\n`;
                            msg += `‚Ä¢ Chi ph√≠: ${degree.instantGrant ? 'Mi·ªÖn ph√≠' : formatNumber(degree.cost) + ' Xu'}\n`;
                            msg += `‚Ä¢ Th·ªùi gian: ${degree.instantGrant ? 'C·∫•p ngay' : degree.timeNeeded + ' ng√†y'}\n`;
                            
                            if (degree.requirements.length > 0) {
                                msg += `‚Ä¢ Y√™u c·∫ßu: ${degree.requirements.map(req => DEGREES[req].name).join(", ")}\n`;
                            }
                            msg += '\n';
                        }
                    }

                    msg += "üí° H∆Ø·ªöNG D·∫™N:\n";
                    msg += "‚Ä¢ ƒêƒÉng k√Ω h·ªçc: .study enroll <m√£>\n";
                    msg += "‚Ä¢ Xem ti·∫øn ƒë·ªô: .study info\n\n";
                    msg += "üíµ S·ªë d∆∞: " + formatNumber(await getBalance(senderID)) + " Xu";
                    
                    return api.sendMessage(msg, threadID);
                }

                case "enroll": {
                    const degreeId = target[1]?.toLowerCase();
                    if (!degreeId || !DEGREES[degreeId]) {
                        return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p m√£ b·∫±ng c·∫•p h·ª£p l·ªá!", threadID);
                    }

                    const degree = DEGREES[degreeId];
                    if (education.currentDegree) {
                        return api.sendMessage("‚ùå B·∫°n ƒëang theo h·ªçc m·ªôt ch∆∞∆°ng tr√¨nh kh√°c!", threadID);
                    }
                    
                    for (const req of degree.requirements) {
                        if (!education.degrees.includes(req)) {
                            return api.sendMessage(
                                `‚ùå B·∫°n c·∫ßn c√≥ b·∫±ng ${DEGREES[req].name} tr∆∞·ªõc!`,
                                threadID
                            );
                        }
                    }

                    if (degree.instantGrant) {
                        education.degrees = education.degrees || []; // Th√™m d√≤ng n√†y
                        education.degrees.push(degreeId);
                        this.saveEducation(senderID, education);
                        return api.sendMessage(
                            "üéì CH√öC M·ª™NG B·∫†N ƒê√É T·ªêT NGHI·ªÜP THPT!\n\n" +
                            `B·∫±ng c·∫•p: ${degree.name}\n` +
                            "üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ h·ªçc l√™n Cao ƒë·∫≥ng ho·∫∑c ƒê·∫°i h·ªçc",
                            threadID
                        );
                    }

                    const balance = await getBalance(senderID);
                    if (balance < degree.cost) {
                        return api.sendMessage(
                            `‚ùå B·∫°n c·∫ßn ${formatNumber(degree.cost)} Xu ƒë·ªÉ ƒëƒÉng k√Ω h·ªçc!`,
                            threadID
                        );
                    }

                    await updateBalance(senderID, -degree.cost);
                    education.currentDegree = {
                        id: degreeId,
                        startTime: Date.now(),
                        progress: 0
                    };
                    this.saveEducation(senderID, education);

                    return api.sendMessage(
                        "üéì ƒêƒÇNG K√ù TH√ÄNH C√îNG!\n\n" +
                        `B·∫±ng c·∫•p: ${degree.name}\n` +
                        `Th·ªùi gian h·ªçc: ${degree.timeNeeded} ng√†y\n` +
                        `Chi ph√≠: ${formatNumber(degree.cost)} Xu\n\n` +
                        "üí° D√πng .study info ƒë·ªÉ xem ti·∫øn ƒë·ªô",
                        threadID
                    );
                }

                case "info": {
                    let msg = "üéì TH√îNG TIN H·ªåC V·∫§N üéì\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n";
                    
                    if (education.degrees.length === 0) {
                        msg += "üìö Tr√¨nh ƒë·ªô: Ch∆∞a t·ªët nghi·ªáp\n";
                    } else {
                        const highestDegree = education.degrees[education.degrees.length - 1];
                        msg += `üìö Tr√¨nh ƒë·ªô cao nh·∫•t: ${DEGREES[highestDegree].name}\n\n`;
                        msg += "üéì C√°c b·∫±ng c·∫•p ƒë√£ c√≥:\n";
                        education.degrees.forEach(degreeId => {
                            msg += `‚Ä¢ ${DEGREES[degreeId].name}\n`;
                        });
                    }

                    if (education.currentDegree) {
                        const degree = DEGREES[education.currentDegree.id];
                        const daysPassed = (Date.now() - education.currentDegree.startTime) / STUDY_TIME;
                        const progress = Math.min(100, (daysPassed / degree.timeNeeded) * 100);
                        
                        msg += "\nüìù ƒêang theo h·ªçc:\n";
                        msg += `‚Ä¢ ${degree.name}\n`;
                        msg += `‚Ä¢ Ti·∫øn ƒë·ªô: ${Math.floor(progress)}%\n`;
                        
                        if (progress >= 100) {
                            education.degrees.push(education.currentDegree.id);
                            education.currentDegree = null;
                            this.saveEducation(senderID, education);
                            msg += "\nüéä CH√öC M·ª™NG B·∫†N ƒê√É T·ªêT NGHI·ªÜP!";
                        }
                    }

                    return api.sendMessage(msg, threadID);
                }
            }
        } catch (error) {
            console.error(error);
            return api.sendMessage("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra!", threadID);
        }
    },

    loadEducation: function(userID) {
        const educationPath = path.join(__dirname, '../database/json/family/familyeducation.json');
        try {
            if (!fs.existsSync(educationPath)) {
                fs.writeFileSync(educationPath, '{}');
            }
            const data = JSON.parse(fs.readFileSync(educationPath));
            let education = data[userID] || { degrees: [], currentDegree: null };

            // Th√™m ph·∫ßn chuy·ªÉn ƒë·ªïi m√£ c≈© sang m√£ m·ªõi
            if (education.degrees) {
                education.degrees = education.degrees.map(degree => {
                    // Chuy·ªÉn ƒë·ªïi m√£ c≈© sang m√£ m·ªõi
                    if (degree === "highschool") return "e1";
                    return degree;
                });
            }

            return education;
        } catch (error) {
            console.error(error);
            return { degrees: [], currentDegree: null };
        }
    },

    saveEducation: function(userID, data) {
        const educationPath = path.join(__dirname, '../database/json/family/familyeducation.json');
        try {
            let eduData = {};
            if (fs.existsSync(educationPath)) {
                eduData = JSON.parse(fs.readFileSync(educationPath));
            }
            eduData[userID] = data;
            fs.writeFileSync(educationPath, JSON.stringify(eduData, null, 2));
            return true;
        } catch (error) {
            console.error(error);
            return false;
        }
    }
};
