const axios = require('axios');

module.exports = {
    name: "phatnguoi",
    dev: "HNT",
    info: "Tra c·ª©u th√¥ng tin ph·∫°t ngu·ªôi xe",
    onPrefix: true,
    usages: "phatnguoi [bi·ªÉn s·ªë xe]",
    cooldowns: 5,

    onLaunch: async function({ api, event, target }) {
        const { threadID, messageID } = event;
        if (!target[0]) {
            return api.sendMessage(
                "üöó PH·∫†T NGU·ªòI - TRA C·ª®U VI PH·∫†M\n" +
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                "C√°ch s·ª≠ d·ª•ng: .phatnguoi [bi·ªÉn s·ªë xe]\n" +
                "V√≠ d·ª•: .phatnguoi 51F12345\n\n" +
                "L∆∞u √Ω: Bi·ªÉn s·ªë xe ph·∫£i theo ƒë·ªãnh d·∫°ng:\n" +
                "- 51F12345 ho·∫∑c\n" +
                "- 51F-123.45",
                threadID, messageID
            );
        }

        let bienso = target[0].trim();
        // Chu·∫©n h√≥a bi·ªÉn s·ªë
        bienso = bienso.replace(/[-. ]/g, '');

        if (!/^\d{2}[A-Z]\d{5,6}$/.test(bienso)) {
            return api.sendMessage(
                "‚ö†Ô∏è Bi·ªÉn s·ªë kh√¥ng h·ª£p l·ªá!\n\n" +
                "ƒê·ªãnh d·∫°ng ƒë√∫ng:\n" +
                "- 51F12345 ho·∫∑c\n" +
                "- 51F-123.45",
                threadID, messageID
            );
        }

        api.sendMessage("üîç ƒêang tra c·ª©u th√¥ng tin... Vui l√≤ng ƒë·ª£i", threadID, messageID);

        try {
            const response = await axios.post('https://api.checkphatnguoi.vn/phatnguoi', {
                bienso: bienso
            }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept': 'application/json'
                }
            });

            const violations = response.data.data;

            if (!Array.isArray(violations) || violations.length === 0) {
                return api.sendMessage(
                    "‚úÖ KH√îNG C√ì VI PH·∫†M\n" +
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                    `Bi·ªÉn s·ªë ${bienso} kh√¥ng c√≥ th√¥ng tin vi ph·∫°m.`,
                    threadID, messageID
                );
            }

            let messages = violations.map((violation, index) => {
                return `üö® VI PH·∫†M ${index + 1}/${violations.length}\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
                    `üöó Bi·ªÉn s·ªë: ${violation['Bi·ªÉn ki·ªÉm so√°t']}\n` +
                    `üé® M√†u bi·ªÉn: ${violation['M√†u bi·ªÉn']}\n` +
                    `üöô Lo·∫°i xe: ${violation['Lo·∫°i ph∆∞∆°ng ti·ªán']}\n` +
                    `‚è∞ Th·ªùi gian: ${violation['Th·ªùi gian vi ph·∫°m']}\n` +
                    `üìç ƒê·ªãa ƒëi·ªÉm: ${violation['ƒê·ªãa ƒëi·ªÉm vi ph·∫°m']}\n` +
                    `‚ùå L·ªói vi ph·∫°m: ${violation['H√†nh vi vi ph·∫°m']}\n` +
                    `üëÆ ƒê∆°n v·ªã ph√°t hi·ªán: ${violation['ƒê∆°n v·ªã ph√°t hi·ªán vi ph·∫°m']}\n` +
                    `üìå N∆°i gi·∫£i quy·∫øt:\n${Array.isArray(violation['N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác']) ? 
                        violation['N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác'].map(loc => `- ${loc}`).join('\n') : 
                        violation['N∆°i gi·∫£i quy·∫øt v·ª• vi·ªác']}\n` +
                    `‚ö° Tr·∫°ng th√°i: ${violation['Tr·∫°ng th√°i']}`;
            });

            // G·ª≠i t·ª´ng vi ph·∫°m m·ªôt ƒë·ªÉ tr√°nh tin nh·∫Øn qu√° d√†i
            for (let msg of messages) {
                await api.sendMessage(msg, threadID);
                // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh spam
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

        } catch (error) {
            console.error('Error:', error);
            return api.sendMessage(
                "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra!\n" +
                "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra l·∫°i bi·ªÉn s·ªë.",
                threadID, messageID
            );
        }
    }
};
