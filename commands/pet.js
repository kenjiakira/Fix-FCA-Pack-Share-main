const fs = require('fs');
const path = require('path');
const { getBalance, updateBalance } = require('../utils/currencies');
const { getVIPBenefits } = require('../game/vip/vipCheck');

const PET_DATA_PATH = path.join(__dirname, '../database/json/pet');

if (!fs.existsSync(PET_DATA_PATH)) {
  fs.mkdirSync(PET_DATA_PATH, { recursive: true });
}

const PET_TYPES = {
  DOG: {
    id: 'dog',
    name: 'Ch√≥',
    emoji: 'üêï',
    baseStats: { hunger: 100, mood: 100, energy: 100, health: 100 },
    breedVariants: {
      COMMON: { id: 'husky', name: 'Husky', rarity: 'common', price: 5000, imageUrl: 'husky.png' },
      UNCOMMON: { id: 'golden', name: 'Golden Retriever', rarity: 'uncommon', price: 10000, imageUrl: 'golden.png' },
      RARE: { id: 'corgi', name: 'Corgi', rarity: 'rare', price: 20000, imageUrl: 'corgi.png' },
      EPIC: { id: 'shiba', name: 'Shiba Inu', rarity: 'epic', price: 50000, imageUrl: 'shiba.png' }
    },
    skills: {
      GUARD: { id: 'guard', name: 'B·∫£o v·ªá', effect: 'TƒÉng 20% ti·ªÅn t·ª´ Daily Bonus' },
      FETCH: { id: 'fetch', name: 'T√¨m ki·∫øm', effect: 'C√≥ c∆° h·ªôi t√¨m th·∫•y v·∫≠t ph·∫©m khi ƒëi d·∫°o' }
    }
  },
  CAT: {
    id: 'cat',
    name: 'M√®o',
    emoji: 'üêà',
    baseStats: { hunger: 100, mood: 100, energy: 100, health: 100 },
    breedVariants: {
      COMMON: { id: 'tabby', name: 'M√®o Tabby', rarity: 'common', price: 5000, imageUrl: 'tabby.png' },
      UNCOMMON: { id: 'siamese', name: 'M√®o Siamese', rarity: 'uncommon', price: 12000, imageUrl: 'siamese.png' },
      RARE: { id: 'persian', name: 'M√®o Persian', rarity: 'rare', price: 25000, imageUrl: 'persian.png' },
      EPIC: { id: 'sphynx', name: 'M√®o Sphynx', rarity: 'epic', price: 60000, imageUrl: 'sphynx.png' }
    },
    skills: {
      HUNT: { id: 'hunt', name: 'SƒÉn b·∫Øt', effect: 'TƒÉng 15% c∆° h·ªôi c√° hi·∫øm khi c√¢u c√°' },
      CHARM: { id: 'charm', name: 'Quy·∫øn r≈©', effect: 'Gi·∫£m 10% gi√° v·∫≠t ph·∫©m khi mua s·∫Øm' }
    }
  },
  BIRD: {
    id: 'bird',
    name: 'Chim',
    emoji: 'ü¶ú',
    baseStats: { hunger: 100, mood: 100, energy: 100, health: 100 },
    breedVariants: {
      COMMON: { id: 'sparrow', name: 'Chim S·∫ª', rarity: 'common', price: 3000, imageUrl: 'sparrow.png' },
      UNCOMMON: { id: 'parrot', name: 'V·∫πt', rarity: 'uncommon', price: 8000, imageUrl: 'parrot.png' },
      RARE: { id: 'falcon', name: 'Chim ∆Øng', rarity: 'rare', price: 18000, imageUrl: 'falcon.png' },
      EPIC: { id: 'phoenix', name: 'Ph∆∞·ª£ng Ho√†ng', rarity: 'epic', price: 70000, imageUrl: 'phoenix.png' }
    },
    skills: {
      SCOUT: { id: 'scout', name: 'Trinh s√°t', effect: 'TƒÉng 25% XP khi l√†m nhi·ªám v·ª•' },
      MESSENGER: { id: 'messenger', name: 'ƒê∆∞a th∆∞', effect: 'Nh·∫≠n tin nh·∫Øn h·ªá th·ªëng v·ªÅ s·ª± ki·ªán ƒë·∫∑c bi·ªát' }
    }
  }
};


const PET_ITEMS = {
  FOODS: {
    basic_food: { id: 'basic_food', name: 'Th·ª©c ƒÉn c∆° b·∫£n', price: 50, effect: { hunger: 10 }, emoji: 'üçó' },
    premium_food: { id: 'premium_food', name: 'Th·ª©c ƒÉn cao c·∫•p', price: 200, effect: { hunger: 25, health: 5 }, emoji: 'üçñ' },
    gourmet_food: { id: 'gourmet_food', name: 'Th·ª©c ƒÉn ƒë·∫∑c bi·ªát', price: 500, effect: { hunger: 50, health: 15, mood: 10 }, emoji: 'ü•©' }
  },
  TOYS: {
    ball: { id: 'ball', name: 'B√≥ng', price: 100, effect: { mood: 15, energy: -5 }, emoji: '‚öΩ' },
    plush: { id: 'plush', name: 'Th√∫ nh·ªìi b√¥ng', price: 250, effect: { mood: 25 }, emoji: 'üß∏' },
    robot: { id: 'robot', name: 'Robot ƒë·ªì ch∆°i', price: 800, effect: { mood: 40, energy: -10 }, emoji: 'ü§ñ' }
  },
  MEDICINE: {
    basic_medicine: { id: 'basic_medicine', name: 'Thu·ªëc c∆° b·∫£n', price: 300, effect: { health: 20 }, emoji: 'üíä' },
    advanced_medicine: { id: 'advanced_medicine', name: 'Thu·ªëc cao c·∫•p', price: 1000, effect: { health: 50 }, emoji: 'üíâ' }
  },
  ACCESSORIES: {
    collar: { id: 'collar', name: 'V√≤ng c·ªï', price: 500, effect: { mood: 5 }, special: 'TƒÉng 5% EXP', emoji: 'üìø' },
    sunglasses: { id: 'sunglasses', name: 'K√≠nh m√°t', price: 1000, effect: { mood: 10 }, special: 'TƒÉng 5% ti·ªÅn th∆∞·ªüng', emoji: 'üï∂Ô∏è' },
    crown: { id: 'crown', name: 'V∆∞∆°ng mi·ªán', price: 5000, effect: { mood: 20 }, special: 'TƒÉng 15% t·ªïng stat', emoji: 'üëë' }
  }
};


const VIP_PET_BENEFITS = {
  1: { 
    statDecayReduction: 0.1, 
    itemDiscounts: 0.05,     
    expBonus: 0.1,           
    exclusivePets: false,
    maxPets: 2               
  },
  2: { 
    statDecayReduction: 0.2, 
    itemDiscounts: 0.1,      
    expBonus: 0.2,           
    exclusivePets: false,
    maxPets: 3               
  },
  3: { 
    statDecayReduction: 0.3, 
    itemDiscounts: 0.15,     
    expBonus: 0.3,           
    exclusivePets: true,     
    maxPets: 5               
  }
};


const DEFAULT_PET_SETTINGS = {
  statDecayReduction: 0,
  itemDiscounts: 0,
  expBonus: 0,
  exclusivePets: false,
  maxPets: 1  
};


const PET_LEVELS = {
  expToLevelUp: (level) => level * 100,
  maxLevel: 50,
  statBonusPerLevel: 2
};


const PET_ACTIVITIES = {
  WALK: {
    name: 'ƒêi d·∫°o',
    cooldown: 30 * 60 * 1000, 
    rewards: {
      exp: { min: 10, max: 20 },
      mood: { min: 10, max: 20 },
      energy: { min: -15, max: -5 }
    },
    vipReduction: { 1: 0.1, 2: 0.2, 3: 0.3 } 
  },
  TRAIN: {
    name: 'Hu·∫•n luy·ªán',
    cooldown: 60 * 60 * 1000, 
    rewards: {
      exp: { min: 20, max: 40 },
      mood: { min: -10, max: 0 },
      energy: { min: -25, max: -15 }
    },
    vipReduction: { 1: 0.1, 2: 0.2, 3: 0.3 }
  },
  COMPETE: {
    name: 'Thi ƒë·∫•u',
    cooldown: 3 * 60 * 60 * 1000, 
    minLevel: 5,
    rewards: {
      exp: { min: 50, max: 100 },
      mood: { min: -20, max: 20 },
      energy: { min: -50, max: -30 },
      money: { min: 500, max: 5000 }
    },
    vipReduction: { 1: 0.1, 2: 0.2, 3: 0.3 }
  }
};


function loadUserPets(userId) {
  const filePath = path.join(PET_DATA_PATH, `${userId}.json`);
  if (!fs.existsSync(filePath)) {
    return { pets: [], lastUpdate: Date.now(), inventory: {} };
  }
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

function saveUserPets(userId, petData) {
  const filePath = path.join(PET_DATA_PATH, `${userId}.json`);
  fs.writeFileSync(filePath, JSON.stringify(petData, null, 2));
}

async function getPetBenefits(userId) {
  try {
    const vipBenefits = await getVIPBenefits(userId);

    
    
    const vipLevel = vipBenefits?.packageId || 0;

    
    let benefits = DEFAULT_PET_SETTINGS;

    if (vipLevel > 0 && VIP_PET_BENEFITS[vipLevel]) {
      benefits = {
        ...VIP_PET_BENEFITS[vipLevel],
        packageId: vipLevel  
      };
    }

    return benefits;
  } catch (error) {
    console.error("L·ªói khi l·∫•y quy·ªÅn l·ª£i VIP cho Pet:", error);
    return { ...DEFAULT_PET_SETTINGS, packageId: 0 };
  }
}

function formatTime(ms) {
  const seconds = Math.floor(ms / 1000);
  if (seconds < 60) return `${seconds}s`;

  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes}m ${seconds % 60}s`;

  const hours = Math.floor(minutes / 60);
  return `${hours}h ${minutes % 60}m`;
}

function calculateStatDecay(lastUpdate, currentBenefits) {
  const now = Date.now();
  const hoursPassed = (now - lastUpdate) / (60 * 60 * 1000);

  
  const baseDecay = 5;

  
  const reducedDecay = baseDecay * (1 - currentBenefits.statDecayReduction);

  return Math.min(100, Math.floor(reducedDecay * hoursPassed));
}

function updatePetStats(pet, lastUpdate, currentBenefits) {
  const decay = calculateStatDecay(lastUpdate, currentBenefits);

  
  pet.stats.hunger = Math.max(0, pet.stats.hunger - decay);
  pet.stats.mood = Math.max(0, pet.stats.mood - decay);
  pet.stats.energy = Math.max(0, pet.stats.energy - decay * 0.7); 

  
  if (pet.stats.hunger < 30 || pet.stats.mood < 30) {
    pet.stats.health = Math.max(0, pet.stats.health - decay * 0.5);
  }

  return pet;
}

function calculateItemPrice(item, currentBenefits) {
  return Math.round(item.price * (1 - currentBenefits.itemDiscounts));
}

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}


function createNewPet(type, breed, name) {
  const petType = PET_TYPES[type.toUpperCase()];
  const breedInfo = petType.breedVariants[breed.toUpperCase()];

  return {
    id: Date.now().toString(36) + Math.random().toString(36).substring(2, 5),
    name: name,
    type: petType.id,
    breed: breedInfo.id,
    breedName: breedInfo.name,
    rarity: breedInfo.rarity,
    emoji: petType.emoji,
    level: 1,
    exp: 0,
    expToNext: PET_LEVELS.expToLevelUp(1),
    stats: { ...petType.baseStats },
    skills: [],
    equipped: {
      accessory: null
    },
    lastFed: Date.now(),
    lastPlayed: Date.now(),
    createdAt: Date.now(),
    activities: {
      WALK: { lastUsed: 0 },
      TRAIN: { lastUsed: 0 },
      COMPETE: { lastUsed: 0 }
    }
  };
}


function formatPetInfo(pet, benefits) {
  const { hunger, mood, energy, health } = pet.stats;
  const statEmojis = {
    hunger: hunger > 70 ? 'üü¢' : hunger > 30 ? 'üü°' : 'üî¥',
    mood: mood > 70 ? 'üü¢' : mood > 30 ? 'üü°' : 'üî¥',
    energy: energy > 70 ? 'üü¢' : energy > 30 ? 'üü°' : 'üî¥',
    health: health > 70 ? 'üü¢' : health > 30 ? 'üü°' : 'üî¥'
  };

  const rarityStars = {
    'common': '‚≠ê',
    'uncommon': '‚≠ê‚≠ê',
    'rare': '‚≠ê‚≠ê‚≠ê',
    'epic': '‚≠ê‚≠ê‚≠ê‚≠ê',
    'legendary': '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê'
  };

  let status = 'Kh·ªèe m·∫°nh';
  if (health < 30) status = 'B·ªánh';
  else if (hunger < 30) status = 'ƒê√≥i';
  else if (mood < 30) status = 'Bu·ªìn';
  else if (energy < 30) status = 'M·ªát m·ªèi';

  return `üß© Th√¥ng tin th√∫ c∆∞ng üß©
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚î£ T√™n: ${pet.name} ${pet.emoji}
‚î£ Lo·∫°i: ${PET_TYPES[pet.type.toUpperCase()]?.name} - ${pet.breedName}
‚î£ Hi·∫øm: ${rarityStars[pet.rarity] || '‚≠ê'}
‚î£ Level: ${pet.level} (${pet.exp}/${pet.expToNext} EXP)
‚î£ Tr·∫°ng th√°i: ${status}
‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´
‚î£ Ch·ªâ s·ªë:
‚î£ ${statEmojis.hunger} ƒê√≥i: ${hunger}/100
‚î£ ${statEmojis.mood} T√¢m tr·∫°ng: ${mood}/100
‚î£ ${statEmojis.energy} NƒÉng l∆∞·ª£ng: ${energy}/100
‚î£ ${statEmojis.health} S·ª©c kh·ªèe: ${health}/100
‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´
‚î£ K·ªπ nƒÉng: ${pet.skills.length > 0 ?
      pet.skills.map(s => `${s.name} (${s.level})`).join(', ') :
      'Ch∆∞a c√≥ k·ªπ nƒÉng'}
‚î£ Ph·ª• ki·ªán: ${pet.equipped.accessory ?
      PET_ITEMS.ACCESSORIES[pet.equipped.accessory].name :
      'Kh√¥ng c√≥'}
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`;
}


function addPetExperience(pet, expAmount, benefits) {
  
  const finalExp = Math.round(expAmount * (1 + benefits.expBonus));
  pet.exp += finalExp;

  
  let message = `+${finalExp} kinh nghi·ªám!`;
  let leveledUp = false;

  while (pet.exp >= pet.expToNext && pet.level < PET_LEVELS.maxLevel) {
    pet.level++;
    pet.exp -= pet.expToNext;
    pet.expToNext = PET_LEVELS.expToLevelUp(pet.level);
    leveledUp = true;

    
    Object.keys(pet.stats).forEach(stat => {
      pet.stats[stat] = Math.min(100, pet.stats[stat] + PET_LEVELS.statBonusPerLevel);
    });

    
    if (pet.level % 5 === 0 && pet.skills.length < 3) {
      const petType = PET_TYPES[pet.type.toUpperCase()];
      const availableSkills = Object.values(petType.skills);

      
      const newSkills = availableSkills.filter(skill =>
        !pet.skills.some(s => s.id === skill.id)
      );

      if (newSkills.length > 0) {
        const newSkill = newSkills[Math.floor(Math.random() * newSkills.length)];
        pet.skills.push({
          id: newSkill.id,
          name: newSkill.name,
          effect: newSkill.effect,
          level: 1
        });

        message += `\nüéØ ƒê√£ m·ªü kh√≥a k·ªπ nƒÉng m·ªõi: ${newSkill.name}!`;
      }
    }
  }

  if (leveledUp) {
    message += `\nüéâ LEVEL UP! Th√∫ c∆∞ng c·ªßa b·∫°n ƒë√£ ƒë·∫°t level ${pet.level}!`;
  }

  return { pet, message };
}

async function petActivity(userId, petId, activityType) {
  const userData = loadUserPets(userId);
  const petIndex = userData.pets.findIndex(p => p.id === petId);

  if (petIndex === -1) {
    return { success: false, message: '‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng.' };
  }

  
  const benefits = await getPetBenefits(userId);
  const vipLevel = benefits.packageId || 0;

  userData.pets[petIndex] = updatePetStats(userData.pets[petIndex], userData.lastUpdate, benefits);

  const pet = userData.pets[petIndex];
  const activity = PET_ACTIVITIES[activityType];

  if (!activity) {
    return { success: false, message: '‚ùå Ho·∫°t ƒë·ªông kh√¥ng h·ª£p l·ªá.' };
  }

  
  const lastUsed = pet.activities[activityType]?.lastUsed || 0;
  const cooldownReduction = activity.vipReduction[vipLevel] || 0;
  const reducedCooldown = activity.cooldown * (1 - cooldownReduction);

  const cooldownRemaining = (lastUsed + reducedCooldown) - Date.now();
  if (cooldownRemaining > 0) {
    return {
      success: false,
      message: `‚è≥ Th√∫ c∆∞ng c·∫ßn ngh·ªâ ng∆°i. C√≥ th·ªÉ ${activity.name} l·∫°i sau ${formatTime(cooldownRemaining)}.`
    };
  }

  if (activity.minLevel && pet.level < activity.minLevel) {
    return {
      success: false,
      message: `‚ùå Th√∫ c∆∞ng c·∫ßn ƒë·∫°t level ${activity.minLevel} ƒë·ªÉ c√≥ th·ªÉ ${activity.name}.`
    };
  }

  if (pet.stats.energy < 20) {
    return {
      success: false,
      message: '‚ùå Th√∫ c∆∞ng qu√° m·ªát m·ªèi ƒë·ªÉ th·ª±c hi·ªán ho·∫°t ƒë·ªông n√†y. H√£y cho ngh·ªâ ng∆°i.'
    };
  }

  const rewards = {
    exp: getRandomInt(activity.rewards.exp.min, activity.rewards.exp.max),
    mood: getRandomInt(activity.rewards.mood.min, activity.rewards.mood.max),
    energy: getRandomInt(activity.rewards.energy.min, activity.rewards.energy.max)
  };

  let moneyReward = 0;
  if (activity.rewards.money) {
    moneyReward = getRandomInt(activity.rewards.money.min, activity.rewards.money.max);

    if (vipLevel > 0) {
      moneyReward = Math.floor(moneyReward * (1 + vipLevel * 0.1));
    }
  }

  pet.stats.mood = Math.min(100, Math.max(0, pet.stats.mood + rewards.mood));
  pet.stats.energy = Math.min(100, Math.max(0, pet.stats.energy + rewards.energy));

  const expResult = addPetExperience(pet, rewards.exp, benefits);
  pet = expResult.pet;

  pet.activities[activityType] = { lastUsed: Date.now() };

  userData.pets[petIndex] = pet;
  userData.lastUpdate = Date.now();
  saveUserPets(userId, userData);

  if (moneyReward > 0) {
    updateBalance(userId, moneyReward);
  }

  let message = `üéÆ ${activity.name} th√†nh c√¥ng!\n${expResult.message}\n`;

  if (rewards.mood > 0) {
    message += `\nüòä T√¢m tr·∫°ng +${rewards.mood}`;
  } else if (rewards.mood < 0) {
    message += `\nüòî T√¢m tr·∫°ng ${rewards.mood}`;
  }

  if (rewards.energy < 0) {
    message += `\n‚ö° NƒÉng l∆∞·ª£ng ${rewards.energy}`;
  }

  if (moneyReward > 0) {
    message += `\nüí∞ Nh·∫≠n ƒë∆∞·ª£c ${moneyReward} xu!`;
  }

  
  if (Math.random() < 0.2) { 
    const petSkills = pet.skills.map(s => s.id);

    if (activityType === 'WALK' && petSkills.includes('fetch')) {
      const randomItem = Math.random() < 0.5 ? 'basic_food' : 'ball';

      
      userData.inventory[randomItem] = (userData.inventory[randomItem] || 0) + 1;
      saveUserPets(userId, userData);

      const itemName = PET_ITEMS.FOODS[randomItem]?.name || PET_ITEMS.TOYS[randomItem]?.name;
      message += `\n\nüéÅ Th√∫ c∆∞ng ƒë√£ t√¨m th·∫•y: ${itemName}!`;
    }
  }

  return { success: true, message };
}


module.exports = {
  name: "pet",
  dev: "HNT",
  category: "Games",
  onPrefix: true,
  usages: ".pet [mua/info/feed/play/train/shop/inventory]\n",
  info: "H·ªá th·ªëng nu√¥i th√∫ c∆∞ng",
  cooldowns: 5,

  onLaunch: async function ({ api, event, target }) {
    const { threadID, messageID, senderID } = event;
    const userId = senderID;

    const benefits = await getPetBenefits(userId);

    if (!target[0]) {
      return api.sendMessage(
        `üêæ H·ªÜ TH·ªêNG TH√ö C∆ØNG üêæ\n\n` +
        `‚ùØ .pet shop - Xem c·ª≠a h√†ng th√∫ c∆∞ng\n` +
        `‚ùØ .pet mua [gi·ªëng] [t√™n] - Mua th√∫ c∆∞ng\n` +
        `‚ùØ .pet info - Xem th√¥ng tin th√∫ c∆∞ng\n` +
        `‚ùØ .pet feed - Cho th√∫ c∆∞ng ƒÉn\n` +
        `‚ùØ .pet play - Ch∆°i v·ªõi th√∫ c∆∞ng\n` +
        `‚ùØ .pet walk - ƒêi d·∫°o v·ªõi th√∫ c∆∞ng\n` +
        `‚ùØ .pet train - Hu·∫•n luy·ªán th√∫ c∆∞ng\n` +
        `‚ùØ .pet compete - Tham gia thi ƒë·∫•u\n` +
        `‚ùØ .pet item - Qu·∫£n l√Ω v·∫≠t ph·∫©m\n` +
        `‚ùØ .pet rename [t√™n m·ªõi] - ƒê·ªïi t√™n th√∫ c∆∞ng\n\n` +
        `üëë VIP: ${benefits.packageId > 0 ?
          `Level ${benefits.packageId} - T·ªëi ƒëa ${benefits.maxPets} th√∫ c∆∞ng, +${Math.round(benefits.expBonus * 100)}% EXP` :
          'Ch∆∞a k√≠ch ho·∫°t - Gi·ªõi h·∫°n 1 th√∫ c∆∞ng'}\n` +
        `üìå D√πng .vip ƒë·ªÉ n√¢ng c·∫•p v√† m·ªü kh√≥a ƒë·∫∑c quy·ªÅn!`,
        threadID, messageID
      );
    }

    const command = target[0].toLowerCase();

    const userData = loadUserPets(userId);

    if (userData.pets.length > 0) {
      userData.pets = userData.pets.map(pet =>
        updatePetStats(pet, userData.lastUpdate || Date.now(), benefits)
      );
      userData.lastUpdate = Date.now();
      saveUserPets(userId, userData);
    }

    switch (command) {
      case "shop":
        
        let shopMessage = `üè™ C·ª¨A H√ÄNG TH√ö C∆ØNG üè™\n\n`;

        
        shopMessage += `üêæ C√ÅC LO·∫†I TH√ö C∆ØNG:\n`;

        for (const [typeKey, typeInfo] of Object.entries(PET_TYPES)) {
          shopMessage += `\n${typeInfo.emoji} ${typeInfo.name}:\n`;

          for (const [breedKey, breedInfo] of Object.entries(typeInfo.breedVariants)) {
            if (breedInfo.rarity === 'legendary' && !benefits.exclusivePets) {
              shopMessage += `- üëë ${breedInfo.name}: ${breedInfo.price.toLocaleString()}$ (Ch·ªâ VIP GOLD)\n`;
            } else {
              shopMessage += `- ${breedInfo.name}: ${breedInfo.price.toLocaleString()}$\n`;
            }
          }
        }

        
        shopMessage += `\nüõí V·∫¨T PH·∫®M:\n`;

        
        shopMessage += `\nüçñ Th·ª©c ƒÉn:\n`;
        for (const [itemKey, item] of Object.entries(PET_ITEMS.FOODS)) {
          const price = calculateItemPrice(item, benefits);
          shopMessage += `- ${item.emoji} ${item.name}: ${price.toLocaleString()}$ ${benefits.itemDiscounts > 0 ? '(Gi·∫£m gi√° VIP)' : ''}\n`;
        }

        
        shopMessage += `\nüß∏ ƒê·ªì ch∆°i:\n`;
        for (const [itemKey, item] of Object.entries(PET_ITEMS.TOYS)) {
          const price = calculateItemPrice(item, benefits);
          shopMessage += `- ${item.emoji} ${item.name}: ${price.toLocaleString()}$ ${benefits.itemDiscounts > 0 ? '(Gi·∫£m gi√° VIP)' : ''}\n`;
        }

        
        shopMessage += `\nüíä Thu·ªëc & Ph·ª• ki·ªán:\n`;
        for (const [itemKey, item] of Object.entries(PET_ITEMS.MEDICINE)) {
          const price = calculateItemPrice(item, benefits);
          shopMessage += `- ${item.emoji} ${item.name}: ${price.toLocaleString()}$ ${benefits.itemDiscounts > 0 ? '(Gi·∫£m gi√° VIP)' : ''}\n`;
        }

        for (const [itemKey, item] of Object.entries(PET_ITEMS.ACCESSORIES)) {
          const price = calculateItemPrice(item, benefits);
          shopMessage += `- ${item.emoji} ${item.name}: ${price.toLocaleString()}$ ${benefits.itemDiscounts > 0 ? '(Gi·∫£m gi√° VIP)' : ''}\n`;
        }

        shopMessage += `\nüí° ƒê·ªÉ mua th√∫ c∆∞ng: .pet mua [lo·∫°i] [gi·ªëng] [t√™n]\n`;
        shopMessage += `üí° ƒê·ªÉ mua v·∫≠t ph·∫©m: .pet item mua [t√™n v·∫≠t ph·∫©m] [s·ªë l∆∞·ª£ng]`;

        return api.sendMessage(shopMessage, threadID, messageID);

      case "mua":
        
        const breedInput = target[1]?.toLowerCase();
        const petName = target.slice(2).join(' ');

        if (!breedInput || !petName) {
          return api.sendMessage(
            `‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß: .pet mua [lo·∫°i/gi·ªëng] [t√™n]\n` +
            `üìå V√≠ d·ª•:\n- .pet mua husky Lucky\n- .pet mua ch√≥ Lucky (s·∫Ω ch·ªçn ng·∫´u nhi√™n 1 gi·ªëng ch√≥)\n` +
            `üìå C√°c lo·∫°i th√∫: ch√≥, m√®o, chim\n` +
            `üìå C√°c gi·ªëng: husky, golden, corgi, shiba, tabby, siamese, persian, sphynx, sparrow, parrot, falcon, phoenix`,
            threadID, messageID
          );
        }

        
        if (userData.pets.length >= benefits.maxPets) {
          return api.sendMessage(
            `‚ùå B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l∆∞·ª£ng th√∫ c∆∞ng (${benefits.maxPets}).\n` +
            `üëë N√¢ng c·∫•p VIP ƒë·ªÉ nu√¥i nhi·ªÅu th√∫ c∆∞ng h∆°n!`,
            threadID, messageID
          );
        }

        
        const petTypeMap = {
          "ch√≥": "DOG",
          "m√®o": "CAT",
          "chim": "BIRD",
          "dog": "DOG",
          "cat": "CAT",
          "bird": "BIRD"
        };

        if (petTypeMap[breedInput]) {
          
          const petType = petTypeMap[breedInput];
          const breedVariants = Object.keys(PET_TYPES[petType].breedVariants);

          
          const eligibleBreeds = breedVariants.filter(breed => {
            const breedInfo = PET_TYPES[petType].breedVariants[breed];
            return !(breedInfo.rarity === 'legendary' && !benefits.exclusivePets);
          });

          if (eligibleBreeds.length === 0) {
            return api.sendMessage(
              `‚ùå Kh√¥ng c√≥ gi·ªëng ${PET_TYPES[petType].name} n√†o ph√π h·ª£p v·ªõi b·∫°n.\n` +
              `üëë N√¢ng c·∫•p VIP ƒë·ªÉ m·ªü kh√≥a c√°c gi·ªëng hi·∫øm!`,
              threadID, messageID
            );
          }

          
          const randomBreed = eligibleBreeds[Math.floor(Math.random() * eligibleBreeds.length)];
          const breedInfo = PET_TYPES[petType].breedVariants[randomBreed];

          
          const petPrice = breedInfo.price;
          const balance = getBalance(userId);

          if (balance < petPrice) {
            return api.sendMessage(
              `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn ${petPrice.toLocaleString()}$, hi·ªán c√≥ ${balance.toLocaleString()}$.`,
              threadID, messageID
            );
          }

          
          const newPet = createNewPet(petType, randomBreed, petName);

          
          updateBalance(userId, -petPrice);

          
          userData.pets.push(newPet);
          userData.lastUpdate = Date.now();
          saveUserPets(userId, userData);

          
          const rarityStars = {
            'common': '‚≠ê',
            'uncommon': '‚≠ê‚≠ê',
            'rare': '‚≠ê‚≠ê‚≠ê',
            'epic': '‚≠ê‚≠ê‚≠ê‚≠ê',
            'legendary': '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê'
          };

          return api.sendMessage(
            `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ mua ${newPet.emoji} ${newPet.breedName} v·ªõi gi√° ${petPrice.toLocaleString()}$!\n\n` +
            `T√™n: ${newPet.name}\n` +
            `Lo·∫°i: ${PET_TYPES[petType].name}\n` +
            `Gi·ªëng: ${newPet.breedName}\n` +
            `Hi·∫øm: ${rarityStars[breedInfo.rarity] || '‚≠ê'}\n\n` +
            `üí° D√πng .pet info ƒë·ªÉ xem th√¥ng tin chi ti·∫øt.`,
            threadID, messageID
          );
        }

        
        let matchingBreed = null;
        let matchingType = null;
        let breedInfo = null;

        for (const [typeKey, typeInfo] of Object.entries(PET_TYPES)) {
          for (const [breedKey, breed] of Object.entries(typeInfo.breedVariants)) {
            if (breed.id === breedInput || breed.name.toLowerCase().includes(breedInput)) {
              matchingBreed = breedKey;
              matchingType = typeKey;
              breedInfo = breed;
              break;
            }
          }
          if (matchingBreed) break;
        }

        if (!matchingBreed) {
          let allBreeds = [];
          for (const [typeKey, typeInfo] of Object.entries(PET_TYPES)) {
            for (const [breedKey, breed] of Object.entries(typeInfo.breedVariants)) {
              allBreeds.push(`${breed.emoji} ${breed.name} (${breed.id})`);
            }
          }

          return api.sendMessage(
            `‚ùå Kh√¥ng t√¨m th·∫•y gi·ªëng th√∫ c∆∞ng: "${breedInput}"\n` +
            `üí° C√°c gi·ªëng th√∫ c∆∞ng c√≥ s·∫µn:\n${allBreeds.join('\n')}\n\n` +
            `üí° Ho·∫∑c b·∫°n c√≥ th·ªÉ d√πng: .pet mua [lo·∫°i] [t√™n]\n` +
            `üìå C√°c lo·∫°i: ch√≥, m√®o, chim`,
            threadID, messageID
          );
        }

        
        const selectedType = PET_TYPES[matchingType];

        
        if (breedInfo.rarity === 'legendary' && !benefits.exclusivePets) {
          return api.sendMessage(
            `üëë Th√∫ c∆∞ng hi·∫øm n√†y ch·ªâ d√†nh cho VIP GOLD tr·ªü l√™n.\n` +
            `D√πng .vip ƒë·ªÉ n√¢ng c·∫•p v√† m·ªü kh√≥a!`,
            threadID, messageID
          );
        }

        
        const petPrice = breedInfo.price;
        const balance = getBalance(userId);

        if (balance < petPrice) {
          return api.sendMessage(
            `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn ${petPrice.toLocaleString()}$, hi·ªán c√≥ ${balance.toLocaleString()}$.`,
            threadID, messageID
          );
        }

        
        const newPet = createNewPet(matchingType, matchingBreed, petName);

        
        updateBalance(userId, -petPrice);

        
        userData.pets.push(newPet);
        userData.lastUpdate = Date.now();
        saveUserPets(userId, userData);

        
        const rarityStars = {
          'common': '‚≠ê',
          'uncommon': '‚≠ê‚≠ê',
          'rare': '‚≠ê‚≠ê‚≠ê',
          'epic': '‚≠ê‚≠ê‚≠ê‚≠ê',
          'legendary': '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê'
        };

        return api.sendMessage(
          `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ mua ${newPet.emoji} ${newPet.breedName} v·ªõi gi√° ${petPrice.toLocaleString()}$!\n\n` +
          `T√™n: ${newPet.name}\n` +
          `Lo·∫°i: ${selectedType.name}\n` +
          `Gi·ªëng: ${newPet.breedName}\n` +
          `Hi·∫øm: ${rarityStars[breedInfo.rarity] || '‚≠ê'}\n\n` +
          `üí° D√πng .pet info ƒë·ªÉ xem th√¥ng tin chi ti·∫øt.`,
          threadID, messageID
        );

      case "info":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(
            `‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.\n` +
            `üí° D√πng .pet shop ƒë·ªÉ xem danh s√°ch th√∫ c∆∞ng c√≥ th·ªÉ mua.`,
            threadID, messageID
          );
        }

        
        const petIndex = target[1] ? parseInt(target[1]) - 1 : 0;

        if (isNaN(petIndex) || petIndex < 0 || petIndex >= userData.pets.length) {
          if (userData.pets.length === 1) {
            return api.sendMessage(formatPetInfo(userData.pets[0], benefits), threadID, messageID);
          } else {
            let petList = `üêæ Danh s√°ch th√∫ c∆∞ng (${userData.pets.length}/${benefits.maxPets}):\n\n`;
            userData.pets.forEach((pet, idx) => {
              petList += `${idx + 1}. ${pet.emoji} ${pet.name} (Lv.${pet.level})\n`;
            });
            petList += `\nüí° D√πng .pet info [s·ªë th·ª© t·ª±] ƒë·ªÉ xem chi ti·∫øt.`;
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        return api.sendMessage(formatPetInfo(userData.pets[petIndex], benefits), threadID, messageID);

      case "feed":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(`‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.`, threadID, messageID);
        }

        
        const feedPetIndex = target[1] ? parseInt(target[1]) - 1 : 0;

        if (isNaN(feedPetIndex) || feedPetIndex < 0 || feedPetIndex >= userData.pets.length) {
          if (userData.pets.length > 1) {
            let petList = `üêæ B·∫°n c√≥ nhi·ªÅu th√∫ c∆∞ng, ch·ªçn m·ªôt ƒë·ªÉ cho ƒÉn:\n\n`;
            userData.pets.forEach((pet, idx) => {
              petList += `${idx + 1}. ${pet.emoji} ${pet.name} (ƒê√≥i: ${pet.stats.hunger}/100)\n`;
            });
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        const pet = userData.pets[feedPetIndex || 0];

        
        const hasFood = Object.entries(userData.inventory || {})
          .filter(([itemId, count]) =>
            itemId in PET_ITEMS.FOODS && count > 0
          );

        if (hasFood.length === 0) {
          return api.sendMessage(
            `‚ùå B·∫°n kh√¥ng c√≥ th·ª©c ƒÉn n√†o trong t√∫i ƒë·ªì.\n` +
            `üí° D√πng .pet item mua basic_food ƒë·ªÉ mua th·ª©c ƒÉn.`,
            threadID, messageID
          );
        }

        
        const foodId = target[2] || hasFood[0][0];

        if (!foodId || !(foodId in PET_ITEMS.FOODS) || !userData.inventory[foodId]) {
          let foodList = `üçñ Ch·ªçn th·ª©c ƒÉn t·ª´ t√∫i ƒë·ªì:\n\n`;
          hasFood.forEach(([itemId, count]) => {
            const food = PET_ITEMS.FOODS[itemId];
            foodList += `- ${food.emoji} ${food.name} (${count})\n`;
          });
          foodList += `\nüí° D√πng .pet feed [s·ªë th√∫] [id_th·ª©c_ƒÉn]`;
          return api.sendMessage(foodList, threadID, messageID);
        }

        
        const food = PET_ITEMS.FOODS[foodId];

        
        if (food.effect.hunger) {
          pet.stats.hunger = Math.min(100, pet.stats.hunger + food.effect.hunger);
        }
        if (food.effect.health) {
          pet.stats.health = Math.min(100, pet.stats.health + food.effect.health);
        }
        if (food.effect.mood) {
          pet.stats.mood = Math.min(100, pet.stats.mood + food.effect.mood);
        }

        
        userData.inventory[foodId]--;
        if (userData.inventory[foodId] <= 0) {
          delete userData.inventory[foodId];
        }

        
        const expResult = addPetExperience(pet, 5, benefits);
        userData.pets[feedPetIndex || 0] = expResult.pet;

        
        userData.lastUpdate = Date.now();
        saveUserPets(userId, userData);

        return api.sendMessage(
          `üçñ ƒê√£ cho ${pet.name} ƒÉn ${food.emoji} ${food.name}!\n\n` +
          `ƒê√≥i: +${food.effect.hunger || 0} (${pet.stats.hunger}/100)\n` +
          (food.effect.health ? `S·ª©c kh·ªèe: +${food.effect.health} (${pet.stats.health}/100)\n` : '') +
          (food.effect.mood ? `T√¢m tr·∫°ng: +${food.effect.mood} (${pet.stats.mood}/100)\n` : '') +
          `${expResult.message}`,
          threadID, messageID
        );

      case "play":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(`‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.`, threadID, messageID);
        }

        
        const playPetIndex = target[1] ? parseInt(target[1]) - 1 : 0;

        if (isNaN(playPetIndex) || playPetIndex < 0 || playPetIndex >= userData.pets.length) {
          if (userData.pets.length > 1) {
            let petList = `üêæ Ch·ªçn th√∫ c∆∞ng ƒë·ªÉ ch∆°i c√πng:\n\n`;
            userData.pets.forEach((pet, idx) => {
              petList += `${idx + 1}. ${pet.emoji} ${pet.name} (T√¢m tr·∫°ng: ${pet.stats.mood}/100)\n`;
            });
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        const playPet = userData.pets[playPetIndex || 0];

        
        const hasToys = Object.entries(userData.inventory || {})
          .filter(([itemId, count]) =>
            itemId in PET_ITEMS.TOYS && count > 0
          );

        if (hasToys.length === 0) {
          
          playPet.stats.mood = Math.min(100, playPet.stats.mood + 10);
          playPet.stats.energy = Math.max(0, playPet.stats.energy - 5);

          
          const playExpResult = addPetExperience(playPet, 10, benefits);
          userData.pets[playPetIndex || 0] = playExpResult.pet;

          
          userData.lastUpdate = Date.now();
          saveUserPets(userId, userData);

          return api.sendMessage(
            `üéÆ B·∫°n ƒë√£ ch∆°i v·ªõi ${playPet.name}!\n\n` +
            `T√¢m tr·∫°ng: +10 (${playPet.stats.mood}/100)\n` +
            `NƒÉng l∆∞·ª£ng: -5 (${playPet.stats.energy}/100)\n` +
            `${playExpResult.message}\n\n` +
            `üí° Mua ƒë·ªì ch∆°i ƒë·ªÉ tƒÉng hi·ªáu qu·∫£ khi ch∆°i.`,
            threadID, messageID
          );
        }

        
        const toyId = target[2] || hasToys[0][0];

        if (!toyId || !(toyId in PET_ITEMS.TOYS) || !userData.inventory[toyId]) {
          let toyList = `üß∏ Ch·ªçn ƒë·ªì ch∆°i t·ª´ t√∫i ƒë·ªì:\n\n`;
          hasToys.forEach(([itemId, count]) => {
            const toy = PET_ITEMS.TOYS[itemId];
            toyList += `- ${toy.emoji} ${toy.name} (${count})\n`;
          });
          toyList += `\nüí° D√πng .pet play [s·ªë th√∫] [id_ƒë·ªì_ch∆°i]`;
          return api.sendMessage(toyList, threadID, messageID);
        }

        
        const toy = PET_ITEMS.TOYS[toyId];

        
        if (toy.effect.mood) {
          playPet.stats.mood = Math.min(100, playPet.stats.mood + toy.effect.mood);
        }
        if (toy.effect.energy) {
          playPet.stats.energy = Math.max(0, playPet.stats.energy + toy.effect.energy);
        }

        
        const toyExpResult = addPetExperience(playPet, 15, benefits);
        userData.pets[playPetIndex || 0] = toyExpResult.pet;

        
        userData.lastUpdate = Date.now();
        saveUserPets(userId, userData);

        return api.sendMessage(
          `üéÆ B·∫°n ƒë√£ ch∆°i v·ªõi ${playPet.name} b·∫±ng ${toy.emoji} ${toy.name}!\n\n` +
          `T√¢m tr·∫°ng: +${toy.effect.mood || 0} (${playPet.stats.mood}/100)\n` +
          (toy.effect.energy ? `NƒÉng l∆∞·ª£ng: ${toy.effect.energy} (${playPet.stats.energy}/100)\n` : '') +
          `${toyExpResult.message}`,
          threadID, messageID
        );

      case "walk":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(`‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.`, threadID, messageID);
        }

        
        const walkPetIndex = target[1] ? parseInt(target[1]) - 1 : 0;

        if (isNaN(walkPetIndex) || walkPetIndex < 0 || walkPetIndex >= userData.pets.length) {
          if (userData.pets.length > 1) {
            let petList = `üêæ Ch·ªçn th√∫ c∆∞ng ƒë·ªÉ ƒëi d·∫°o c√πng:\n\n`;
            userData.pets.forEach((pet, idx) => {
              const lastUsed = pet.activities?.WALK?.lastUsed || 0;
              const cooldownReduction = PET_ACTIVITIES.WALK.vipReduction[benefits.packageId] || 0;
              const reducedCooldown = PET_ACTIVITIES.WALK.cooldown * (1 - cooldownReduction);
              const cooldownRemaining = (lastUsed + reducedCooldown) - Date.now();

              petList += `${idx + 1}. ${pet.emoji} ${pet.name} (Lv.${pet.level}) - ${cooldownRemaining > 0 ? `‚è≥ C√≤n ${formatTime(cooldownRemaining)}` : '‚úÖ S·∫µn s√†ng'
                }\n`;
            });
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        const walkPet = userData.pets[walkPetIndex || 0];
        const walkResult = await petActivity(userId, walkPet.id, 'WALK');

        return api.sendMessage(walkResult.message, threadID, messageID);

      case "train":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(`‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.`, threadID, messageID);
        }

        
        const trainPetIndex = target[1] ? parseInt(target[1]) - 1 : 0;

        if (isNaN(trainPetIndex) || trainPetIndex < 0 || trainPetIndex >= userData.pets.length) {
          if (userData.pets.length > 1) {
            let petList = `üêæ Ch·ªçn th√∫ c∆∞ng ƒë·ªÉ hu·∫•n luy·ªán:\n\n`;
            userData.pets.forEach((pet, idx) => {
              const lastUsed = pet.activities?.TRAIN?.lastUsed || 0;
              const cooldownReduction = PET_ACTIVITIES.TRAIN.vipReduction[benefits.packageId] || 0;
              const reducedCooldown = PET_ACTIVITIES.TRAIN.cooldown * (1 - cooldownReduction);
              const cooldownRemaining = (lastUsed + reducedCooldown) - Date.now();

              petList += `${idx + 1}. ${pet.emoji} ${pet.name} (Lv.${pet.level}) - ${cooldownRemaining > 0 ? `‚è≥ C√≤n ${formatTime(cooldownRemaining)}` : '‚úÖ S·∫µn s√†ng'
                }\n`;
            });
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        const trainPet = userData.pets[trainPetIndex || 0];
        const trainResult = await petActivity(userId, trainPet.id, 'TRAIN');

        return api.sendMessage(trainResult.message, threadID, messageID);

      case "compete":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(`‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.`, threadID, messageID);
        }

        
        const competePetIndex = target[1] ? parseInt(target[1]) - 1 : 0;

        if (isNaN(competePetIndex) || competePetIndex < 0 || competePetIndex >= userData.pets.length) {
          if (userData.pets.length > 1) {
            let petList = `üêæ Ch·ªçn th√∫ c∆∞ng ƒë·ªÉ thi ƒë·∫•u:\n\n`;
            userData.pets.forEach((pet, idx) => {
              const lastUsed = pet.activities?.COMPETE?.lastUsed || 0;
              const cooldownReduction = PET_ACTIVITIES.COMPETE.vipReduction[benefits.packageId] || 0;
              const reducedCooldown = PET_ACTIVITIES.COMPETE.cooldown * (1 - cooldownReduction);
              const cooldownRemaining = (lastUsed + reducedCooldown) - Date.now();

              petList += `${idx + 1}. ${pet.emoji} ${pet.name} (Lv.${pet.level}) - ${cooldownRemaining > 0 ? `‚è≥ C√≤n ${formatTime(cooldownRemaining)}` : '‚úÖ S·∫µn s√†ng'
                }\n`;
            });
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        const competePet = userData.pets[competePetIndex || 0];
        const competeResult = await petActivity(userId, competePet.id, 'COMPETE');

        return api.sendMessage(competeResult.message, threadID, messageID);

      case "item":
        
        const itemSubcmd = target[1]?.toLowerCase();

        if (!itemSubcmd || itemSubcmd === "list") {
          
          if (!userData.inventory || Object.keys(userData.inventory).length === 0) {
            return api.sendMessage(
              `üéí T√∫i ƒë·ªì tr·ªëng.\n` +
              `üí° D√πng .pet item mua [id_item] [s·ªë l∆∞·ª£ng] ƒë·ªÉ mua v·∫≠t ph·∫©m.`,
              threadID, messageID
            );
          }

          let inventoryMsg = `üéí T√öI ƒê·ªí C·ª¶A B·∫†N:\n\n`;

          
          const groupedItems = {
            "Th·ª©c ƒÉn": [],
            "ƒê·ªì ch∆°i": [],
            "Thu·ªëc": [],
            "Ph·ª• ki·ªán": []
          };

          for (const [itemId, count] of Object.entries(userData.inventory)) {
            if (count <= 0) continue;

            if (itemId in PET_ITEMS.FOODS) {
              groupedItems["Th·ª©c ƒÉn"].push({ ...PET_ITEMS.FOODS[itemId], id: itemId, count });
            } else if (itemId in PET_ITEMS.TOYS) {
              groupedItems["ƒê·ªì ch∆°i"].push({ ...PET_ITEMS.TOYS[itemId], id: itemId, count });
            } else if (itemId in PET_ITEMS.MEDICINE) {
              groupedItems["Thu·ªëc"].push({ ...PET_ITEMS.MEDICINE[itemId], id: itemId, count });
            } else if (itemId in PET_ITEMS.ACCESSORIES) {
              groupedItems["Ph·ª• ki·ªán"].push({ ...PET_ITEMS.ACCESSORIES[itemId], id: itemId, count });
            }
          }

          
          for (const [category, items] of Object.entries(groupedItems)) {
            if (items.length > 0) {
              inventoryMsg += `üì¶ ${category}:\n`;
              items.forEach(item => {
                inventoryMsg += `- ${item.emoji} ${item.name} (${item.count}) [${item.id}]\n`;
              });
              inventoryMsg += '\n';
            }
          }

          inventoryMsg += `üí° S·ª≠ d·ª•ng: .pet feed ƒë·ªÉ cho ƒÉn ho·∫∑c .pet play ƒë·ªÉ ch∆°i`;

          return api.sendMessage(inventoryMsg, threadID, messageID);

        } else if (itemSubcmd === "mua" || itemSubcmd === "buy") {
          
          const itemId = target[2]?.toLowerCase();
          const quantity = parseInt(target[3]) || 1;

          if (!itemId) {
            return api.sendMessage(
              `‚ùå Vui l√≤ng nh·∫≠p ID v·∫≠t ph·∫©m.\n` +
              `üí° Xem danh s√°ch v·∫≠t ph·∫©m t·∫°i .pet shop`,
              threadID, messageID
            );
          }

          
          let itemInfo = null;
          let category = null;

          for (const [cat, items] of Object.entries({
            FOODS: PET_ITEMS.FOODS,
            TOYS: PET_ITEMS.TOYS,
            MEDICINE: PET_ITEMS.MEDICINE,
            ACCESSORIES: PET_ITEMS.ACCESSORIES
          })) {
            if (itemId in items) {
              itemInfo = items[itemId];
              category = cat;
              break;
            }
          }

          if (!itemInfo) {
            return api.sendMessage(`‚ùå Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID: ${itemId}`, threadID, messageID);
          }

          
          const itemPrice = calculateItemPrice(itemInfo, benefits);
          const totalPrice = itemPrice * quantity;

          
          const userBalance = getBalance(userId);

          if (userBalance < totalPrice) {
            return api.sendMessage(
              `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${totalPrice.toLocaleString()}$, hi·ªán c√≥ ${userBalance.toLocaleString()}$.`,
              threadID, messageID
            );
          }

          
          userData.inventory = userData.inventory || {};
          userData.inventory[itemId] = (userData.inventory[itemId] || 0) + quantity;

          
          updateBalance(userId, -totalPrice);

          
          saveUserPets(userId, userData);

          return api.sendMessage(
            `‚úÖ ƒê√£ mua th√†nh c√¥ng ${quantity}x ${itemInfo.emoji} ${itemInfo.name} v·ªõi gi√° ${totalPrice.toLocaleString()}$.\n\n` +
            `S·ªë l∆∞·ª£ng hi·ªán t·∫°i: ${userData.inventory[itemId]}\n` +
            `S·ªë d∆∞ c√≤n l·∫°i: ${getBalance(userId).toLocaleString()}$`,
            threadID, messageID
          );
        }

        break;

      case "rename":
        
        if (userData.pets.length === 0) {
          return api.sendMessage(`‚ùå B·∫°n ch∆∞a c√≥ th√∫ c∆∞ng n√†o.`, threadID, messageID);
        }

        const renamePetIndex = target[1] && !isNaN(parseInt(target[1]))
          ? parseInt(target[1]) - 1
          : 0;

        const newName = target[1] && !isNaN(parseInt(target[1]))
          ? target.slice(2).join(' ')
          : target.slice(1).join(' ');

        if (!newName || newName.length < 1) {
          return api.sendMessage(
            `‚ùå Vui l√≤ng nh·∫≠p t√™n m·ªõi cho th√∫ c∆∞ng.\n` +
            `üí° C√∫ ph√°p: .pet rename [s·ªë th√∫] [t√™n m·ªõi]`,
            threadID, messageID
          );
        }

        if (isNaN(renamePetIndex) || renamePetIndex < 0 || renamePetIndex >= userData.pets.length) {
          if (userData.pets.length > 1) {
            let petList = `üêæ Ch·ªçn th√∫ c∆∞ng ƒë·ªÉ ƒë·ªïi t√™n:\n\n`;
            userData.pets.forEach((pet, idx) => {
              petList += `${idx + 1}. ${pet.emoji} ${pet.name}\n`;
            });
            petList += `\nüí° C√∫ ph√°p: .pet rename [s·ªë th√∫] [t√™n m·ªõi]`;
            return api.sendMessage(petList, threadID, messageID);
          }
        }

        const oldName = userData.pets[renamePetIndex].name;
        userData.pets[renamePetIndex].name = newName;
        saveUserPets(userId, userData);

        return api.sendMessage(
          `‚úÖ ƒê√£ ƒë·ªïi t√™n th√∫ c∆∞ng t·ª´ "${oldName}" th√†nh "${newName}"!`,
          threadID, messageID
        );

      default:
        return api.sendMessage(
          `‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. G√µ .pet ƒë·ªÉ xem h∆∞·ªõng d·∫´n.`,
          threadID, messageID
        );
    }
  }
};