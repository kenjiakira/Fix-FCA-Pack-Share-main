const crypto = require('crypto');
const axios = require("axios");

module.exports = {
    name: "tools",
    info: "C√¥ng c·ª• ƒëa nƒÉng: Gi·∫£i m√£, m√£ h√≥a, g·ª≠i tin nh·∫Øn ·∫©n danh",
    category: "Tools",
    usages: "tools [encode|decode|emoji|anon] [options]",
    cooldowns: 5,
    dev: "HNT",
    onPrefix: true,

    onLaunch: async function({ api, event, target }) {
        const { threadID, messageID } = event;

        if (target.length < 2) {
            return api.sendMessage(
                "üîß TOOLS\n" +
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
                "üìå C√°c l·ªánh h·ªó tr·ª£:\n" +
                "‚Ä¢ encode [method] [text]: M√£ h√≥a vƒÉn b·∫£n\n" +
                "‚Ä¢ decode [method] [text]: Gi·∫£i m√£ vƒÉn b·∫£n\n" +
                "‚Ä¢ emoji [encode|decode] [text]: M√£ h√≥a/Gi·∫£i m√£ Emoji\n" +
                "‚Ä¢ anon [username] [message]: G·ª≠i tin nh·∫Øn ·∫©n danh\n\n" +
                "üí° G√µ 'tools' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt.",
                threadID, messageID
            );
        }

        const command = target[0]?.toLowerCase();
        const args = target.slice(1);

        try {
            if (command === "encode") {
                const method = args[0]?.toLowerCase();
                const text = args.slice(1).join(" ");
                if (!method || !text) throw new Error("Thi·∫øu ph∆∞∆°ng th·ª©c ho·∫∑c n·ªôi dung c·∫ßn m√£ h√≥a!");
                const result = await processEncode(method, text);
                return api.sendMessage(
                    `üîí K·∫æT QU·∫¢ M√É H√ìA:\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                    `üì• Input (${method}):\n${text}\n\n` +
                    `üì§ Output:\n${result}`,
                    threadID, messageID
                );
            } else if (command === "decode") {
                const method = args[0]?.toLowerCase();
                const text = args.slice(1).join(" ");
                if (!method || !text) throw new Error("Thi·∫øu ph∆∞∆°ng th·ª©c ho·∫∑c n·ªôi dung c·∫ßn gi·∫£i m√£!");
                const result = await processDecode(method, text);
                return api.sendMessage(
                    `üîì K·∫æT QU·∫¢ GI·∫¢I M√É:\n` +
                    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
                    `üì• Input (${method}):\n${text}\n\n` +
                    `üì§ Output:\n${result}`,
                    threadID, messageID
                );
            } else if (command === "emoji") {
                const subCommand = args[0]?.toLowerCase();
                const text = args.slice(1).join(" ");
                if (!subCommand || !text) throw new Error("Thi·∫øu l·ªánh con ho·∫∑c n·ªôi dung c·∫ßn x·ª≠ l√Ω!");
                const result = processEmoji(subCommand, text);
                return api.sendMessage(result, threadID, messageID);
            } else if (command === "anon") {
                await handleAnonCommand(api, event, args);
            } else {
                throw new Error("L·ªánh kh√¥ng h·ª£p l·ªá!");
            }
        } catch (error) {
            return api.sendMessage(
                `‚ùå L·ªói: ${error.message}\n` +
                `üí° G√µ 'tools' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt.`,
                threadID, messageID
            );
        }
    }
};

async function handleAnonCommand(api, event, target) {
    const { threadID, messageID } = event;

    if (!target[0]) {
        return api.sendMessage(
            "üïäÔ∏è G·ª≠i tin nh·∫Øn ·∫©n danh:\n\n" +
            "C√°ch d√πng: tools anon <username> <n·ªôi dung>\n" +
            "Ho·∫∑c: tools anon <username> -c <s·ªë l·∫ßn> <n·ªôi dung>\n\n" +
            "V√≠ d·ª•:\n" +
            "1. tools anon johndoe Hello!\n" +
            "2. tools anon johndoe -c 5 Hello!\n\n" +
            "L∆∞u √Ω:\n" +
            "- Username l√† t√™n ngl.link c·ªßa ng∆∞·ªùi nh·∫≠n\n" +
            "- S·ªë l·∫ßn g·ª≠i t·ªëi ƒëa l√† 10 tin/l·∫ßn\n" +
            "- Tin nh·∫Øn s·∫Ω ƒë∆∞·ª£c g·ª≠i ·∫©n danh",
            threadID,
            messageID
        );
    }

    const username = target[0];
    let count = 1;
    let message;

    if (target[1] === "-c") {
        count = parseInt(target[2]);
        if (isNaN(count) || count < 1 || count > 10) {
            return api.sendMessage(
                "‚ö†Ô∏è S·ªë l·∫ßn g·ª≠i ph·∫£i t·ª´ 1 ƒë·∫øn 10!",
                threadID,
                messageID
            );
        }
        message = target.slice(3).join(" ");
    } else {
        message = target.slice(1).join(" ");
    }

    if (!message) {
        return api.sendMessage(
            "‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn!",
            threadID,
            messageID
        );
    }

    try {
        const headers = {
            referer: `https://ngl.link/${username}`,
            "accept-language": "vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7",
        };

        const data = {
            username: username,
            question: message,
            deviceId: "anon-" + Math.random().toString(36).substr(2, 9),
            gameSlug: "",
            referrer: "",
        };

        let successCount = 0;
        const progressMsg = await api.sendMessage(
            "üïäÔ∏è ƒêang g·ª≠i tin nh·∫Øn...",
            threadID
        );

        for (let i = 0; i < count; i++) {
            try {
                const response = await axios.post(
                    "https://ngl.link/api/submit",
                    data,
                    { headers }
                );
                if (response.status === 200) successCount++;
                await new Promise((resolve) => setTimeout(resolve, 1000));
            } catch {
                continue;
            }
        }

        if (successCount > 0) {
            await api.editMessage({
                body:
                    `‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng!\n\n` +
                    `üìù N·ªôi dung: ${message}\n` +
                    `üë§ ƒê·∫øn: @${username}\n` +
                    `üì® S·ªë tin ƒë√£ g·ª≠i: ${successCount}/${count}`,
                messageID: progressMsg.messageID,
                threadID: event.threadID,
            });
        } else {
            throw new Error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn");
        }

        setTimeout(() => api.unsendMessage(progressMsg.messageID), 10000);
    } catch (error) {
        return api.sendMessage(
            "‚ùå L·ªói: Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng ki·ªÉm tra l·∫°i username ho·∫∑c th·ª≠ l·∫°i sau!",
            threadID,
            messageID
        );
    }
}

async function processEncode(method, text) {
    switch (method) {
        case 'base64':
            return Buffer.from(text).toString('base64');
        case 'hex':
            return Buffer.from(text).toString('hex');
        case 'uri':
            return encodeURIComponent(text);
        case 'md5':
            return crypto.createHash('md5').update(text).digest('hex');
        case 'sha1':
            return crypto.createHash('sha1').update(text).digest('hex');
        case 'sha256':
            return crypto.createHash('sha256').update(text).digest('hex');
        default:
            throw new Error("Ph∆∞∆°ng th·ª©c m√£ h√≥a kh√¥ng h·ª£p l·ªá!");
    }
}

async function processDecode(method, text) {
    switch (method) {
        case 'base64':
            return Buffer.from(text, 'base64').toString();
        case 'hex':
            return Buffer.from(text, 'hex').toString();
        case 'uri':
            return decodeURIComponent(text);
        default:
            throw new Error("Ph∆∞∆°ng th·ª©c gi·∫£i m√£ kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ gi·∫£i m√£!");
    }
}

function processEmoji(subCommand, text) {
    const emojiMap = {
        "a": "üÖ∞Ô∏è", "b": "üÖ±Ô∏è", "c": "üá®üá¶", "d": "üá©üá™", "e": "üá™üá∏", "f": "üá´üá∑", "g": "üá¨üá∑", "h": "üá≠üá∫", "i": "üáÆüáπ", "j": "üáØüá±",
        "k": "üá∞üá∑", "l": "üá±üá∏", "m": "üá≤üáæ", "n": "üá≥üá¨", "o": "üÖæÔ∏è", "p": "üÖøÔ∏è", "q": "üá∂üá¶", "r": "üá∑üá¥", "s": "üá∏üáÆ", "t": "üáπüáø",
        "u": "üá∫üá∏", "v": "üáªüáÆ", "w": "üáºüá∏", "x": "üáΩüáÆ", "y": "üáæüá≤", "z": "üáøüá¶",
        "0": "0Ô∏è‚É£", "1": "1Ô∏è‚É£", "2": "2Ô∏è‚É£", "3": "3Ô∏è‚É£", "4": "4Ô∏è‚É£", "5": "5Ô∏è‚É£", "6": "6Ô∏è‚É£", "7": "7Ô∏è‚É£", "8": "8Ô∏è‚É£", "9": "9Ô∏è‚É£",
        " ": "‚ê£", ".": "üîò", ",": "‚ùó", "!": "‚ùï", "?": "‚ùì", "@": "üìß", "#": "‚ôØ", "$": "üí≤", "%": "üíØ"
    };
    const reverseEmojiMap = Object.fromEntries(Object.entries(emojiMap).map(([key, value]) => [value, key]));

    if (subCommand === "encode") {
        return text.split("").map(char => emojiMap[char] || char).join(" ");
    } else if (subCommand === "decode") {
        return text.split(" ").map(emoji => reverseEmojiMap[emoji] || emoji).join("");
    } else {
        throw new Error("L·ªánh con kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng 'encode' ho·∫∑c 'decode'.");
    }
}
