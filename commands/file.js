const fs = require('fs');
const path = require('path');

const MAX_MESSAGE_LENGTH = 4000; 

const chunkMessage = (message) => {
    if (message.length <= MAX_MESSAGE_LENGTH) return [message];
    
    const chunks = [];
    let currentChunk = '';
    const lines = message.split('\n');
    
    for (const line of lines) {
        if (currentChunk.length + line.length + 1 > MAX_MESSAGE_LENGTH) {
            chunks.push(currentChunk);
            currentChunk = line;
        } else {
            currentChunk += (currentChunk ? '\n' : '') + line;
        }
    }
    if (currentChunk) chunks.push(currentChunk);
    
    return chunks.map((chunk, i) => `Ph·∫ßn ${i + 1}/${chunks.length}\n\n${chunk}`);
};

const validateRequest = ({ api, event, target }) => {
    if (!api || !api.sendMessage) throw new Error('API kh√¥ng h·ª£p l·ªá');
    if (!event || !event.threadID) throw new Error('Event kh√¥ng h·ª£p l·ªá');
    if (!Array.isArray(target)) throw new Error('Target kh√¥ng h·ª£p l·ªá');
    return true;
};

const safeApiSend = async (api, message, threadID, messageID) => {
    try {
        const chunks = chunkMessage(message);
        for (const chunk of chunks) {
            await api.sendMessage(chunk, threadID, messageID);
            if (chunks.length > 1) await new Promise(r => setTimeout(r, 1000)); // Delay between chunks
        }
    } catch (err) {
        console.error('API Error:', err);
        throw new Error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: ' + (err.errorDescription || err.message));
    }
};

module.exports = {
    name: "file",
    dev: "HNT",
    info: "Qu·∫£n l√Ω file l·ªánh",
    usages: "[list | new | del | edit | read | rename | view] <t√™n file> <n·ªôi dung>",
    cooldowns: 3,
    onPrefix: true,

    onLaunch: async ({ api, event, target }) => {
        const { threadID, messageID, senderID } = event;

        try {
            validateRequest({ api, event, target });
            
            try {
                const adminConfig = JSON.parse(fs.readFileSync('./admin.json', 'utf8'));
                if (!adminConfig.adminUIDs.includes(senderID)) {
                    return safeApiSend(api, "‚ö†Ô∏è Ch·ªâ admin m·ªõi c√≥ th·ªÉ qu·∫£n l√Ω file l·ªánh!", threadID, messageID);
                }
            } catch (error) {
                throw new Error('L·ªói ki·ªÉm tra quy·ªÅn admin: ' + error.message);
            }

            const commandsDir = __dirname;

            if (!target[0]) {
                return safeApiSend(
                    api,
                    "üìù Qu·∫£n l√Ω File L·ªánh:\n\n" +
                    "1. list - Xem danh s√°ch v√† th√¥ng tin l·ªánh\n" +
                    "2. info <t√™n> - Xem chi ti·∫øt m·ªôt l·ªánh\n" +
                    "3. new <t√™n> <code> - T·∫°o l·ªánh m·ªõi\n" +
                    "4. del <t√™n> - X√≥a l·ªánh\n" +
                    "5. edit <t√™n> <code> - S·ª≠a l·ªánh\n" +
                    "6. read <t√™n> - ƒê·ªçc n·ªôi dung l·ªánh\n" +
                    "7. rename <t√™n c≈©> <t√™n m·ªõi> - ƒê·ªïi t√™n l·ªánh\n" +
                    "8. view <ƒë∆∞·ªùng d·∫´n> - Xem n·ªôi dung th∆∞ m·ª•c\n\n" +
                    "V√≠ d·ª•: file info help.js",
                    threadID, messageID
                );
            }

            const cmd = target[0].toLowerCase();
            const fileName = target[1];
            const content = target.slice(2).join(" ");

            const getFileDetails = (filePath) => {
                const stats = fs.statSync(filePath);
                const content = fs.readFileSync(filePath, 'utf8');
                const moduleInfo = require(filePath);
                
                return {
                    name: path.basename(filePath),
                    size: (stats.size / 1024).toFixed(2) + ' KB',
                    created: stats.birthtime.toLocaleString(),
                    modified: stats.mtime.toLocaleString(),
                    developer: moduleInfo.dev || 'Kh√¥ng c√≥',
                    description: moduleInfo.info || 'Kh√¥ng c√≥ m√¥ t·∫£',
                    usage: moduleInfo.usages || 'Kh√¥ng c√≥ h∆∞·ªõng d·∫´n',
                    prefix: moduleInfo.onPrefix ? 'C√≥' : 'Kh√¥ng',
                    cooldown: moduleInfo.cooldowns || 0,
                    lineCount: content.split('\n').length
                };
            };

            const formatFileInfo = (fileInfo) => {
                return `üìÑ ${fileInfo.name}\n` +
                       `üë§ Dev: ${fileInfo.developer}\n` +
                       `üìù M√¥ t·∫£: ${fileInfo.description}\n` +
                       `üí° C√°ch d√πng: ${fileInfo.usage}\n` +
                       `‚ö° Prefix: ${fileInfo.prefix}\n` +
                       `‚è±Ô∏è Cooldown: ${fileInfo.cooldown}s\n` +
                       `üìä Dung l∆∞·ª£ng: ${fileInfo.size}\n` +
                       `üìà S·ªë d√≤ng: ${fileInfo.lineCount}\n` +
                       `üïê T·∫°o l√∫c: ${fileInfo.created}\n` +
                       `‚úèÔ∏è S·ª≠a l√∫c: ${fileInfo.modified}\n` +
                       `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
            };

            const formatSimpleFileInfo = (filePath) => {
                try {
                    const stats = fs.statSync(filePath);
                    const moduleInfo = require(filePath);
                    return `üìÑ ${path.basename(filePath)} (${(stats.size / 1024).toFixed(1)}KB) - ${moduleInfo.info || 'Kh√¥ng c√≥ m√¥ t·∫£'}`;
                } catch (err) {
                    return `üìÑ ${path.basename(filePath)} (L·ªói ƒë·ªçc th√¥ng tin)`;
                }
            };

            const listFilesInDir = (dirPath) => {
                try {
                    const items = fs.readdirSync(dirPath);
                    const result = items.map(item => {
                        const fullPath = path.join(dirPath, item);
                        const stats = fs.statSync(fullPath);
                        return `${stats.isDirectory() ? 'üìÅ' : 'üìÑ'} ${item} (${(stats.size / 1024).toFixed(2)} KB)`;
                    });
                    return result.join('\n');
                } catch (error) {
                    throw new Error(`Kh√¥ng th·ªÉ ƒë·ªçc th∆∞ m·ª•c: ${error.message}`);
                }
            };

            const handleError = (error, api, threadID) => {
                const errorMessage = error.code === 'ENOENT' ? '‚ö†Ô∏è File ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!' :
                                    error.code === 'EACCES' ? '‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!' :
                                    error.code === 'EISDIR' ? '‚ö†Ô∏è ƒê√¢y l√† m·ªôt th∆∞ m·ª•c!' :
                                    `‚ùå L·ªói: ${error.message}`;
                return safeApiSend(api, errorMessage, threadID);
            };

            const validateInput = (fileName) => {
                if (!fileName) throw new Error('Thi·∫øu t√™n file!');
                if (fileName.includes('..')) throw new Error('ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá!');
                const invalidChars = /[<>:"|?*]/g;
                if (invalidChars.test(fileName)) throw new Error('T√™n file ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá!');
                return true;
            };

            try {
                switch (cmd) {
                    case 'list':
                        try {
                            const files = fs.readdirSync(commandsDir)
                                .filter(file => file.endsWith('.js'))
                                .map(file => formatSimpleFileInfo(path.join(commandsDir, file)))
                                .join('\n');
                            
                            return safeApiSend(api, `üìö DANH S√ÅCH L·ªÜNH:\n\n${files}`, threadID, messageID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'info':
                        try {
                            validateInput(fileName);
                            const infoPath = path.join(commandsDir, fileName.endsWith('.js') ? fileName : `${fileName}.js`);
                            if (!fs.existsSync(infoPath)) return safeApiSend(api, "‚ö†Ô∏è L·ªánh kh√¥ng t·ªìn t·∫°i!", threadID);
                            const fileInfo = getFileDetails(infoPath);
                            return safeApiSend(api, formatFileInfo(fileInfo), threadID, messageID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'new':
                        try {
                            validateInput(fileName);
                            if (!content) throw new Error('Thi·∫øu n·ªôi dung file!');
                            const newPath = path.join(commandsDir, fileName.endsWith('.js') ? fileName : `${fileName}.js`);
                            if (fs.existsSync(newPath)) return safeApiSend(api, "‚ö†Ô∏è L·ªánh n√†y ƒë√£ t·ªìn t·∫°i!", threadID);
                            fs.writeFileSync(newPath, content, 'utf8');
                            return safeApiSend(api, `‚úÖ ƒê√£ t·∫°o l·ªánh ${fileName}`, threadID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'del':
                        try {
                            validateInput(fileName);
                            const delPath = path.join(commandsDir, fileName.endsWith('.js') ? fileName : `${fileName}.js`);
                            if (!fs.existsSync(delPath)) return safeApiSend(api, "‚ö†Ô∏è L·ªánh kh√¥ng t·ªìn t·∫°i!", threadID);
                            fs.unlinkSync(delPath);
                            return safeApiSend(api, `‚úÖ ƒê√£ x√≥a l·ªánh ${fileName}`, threadID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'edit':
                        try {
                            validateInput(fileName);
                            if (!content) throw new Error('Thi·∫øu n·ªôi dung c·∫ßn s·ª≠a!');
                            const editPath = path.join(commandsDir, fileName.endsWith('.js') ? fileName : `${fileName}.js`);
                            if (!fs.existsSync(editPath)) return safeApiSend(api, "‚ö†Ô∏è L·ªánh kh√¥ng t·ªìn t·∫°i!", threadID);
                            fs.writeFileSync(editPath, content, 'utf8');
                            return safeApiSend(api, `‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªánh ${fileName}`, threadID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'read':
                        try {
                            validateInput(fileName);
                            const readPath = path.join(commandsDir, fileName.endsWith('.js') ? fileName : `${fileName}.js`);
                            if (!fs.existsSync(readPath)) return safeApiSend(api, "‚ö†Ô∏è L·ªánh kh√¥ng t·ªìn t·∫°i!", threadID);
                            const fileContent = fs.readFileSync(readPath, 'utf8');
                            return safeApiSend(api, `üìÑ N·ªôi dung ${fileName}:\n\n${fileContent}`, threadID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'rename':
                        try {
                            validateInput(fileName);
                            validateInput(target[2]);
                            
                            const oldPath = path.join(commandsDir, fileName);
                            const newPath = path.join(commandsDir, target[2]);
                            
                            if (!fs.existsSync(oldPath) && !fs.existsSync(oldPath + '.js')) {
                                return safeApiSend(api, "‚ö†Ô∏è L·ªánh kh√¥ng t·ªìn t·∫°i!", threadID);
                            }
                            
                            const actualOldPath = fs.existsSync(oldPath) ? oldPath : oldPath + '.js';
                            
                            const originalExt = path.extname(actualOldPath);
                            const newExt = path.extname(target[2]);
                            const finalNewPath = newExt ? newPath : newPath + originalExt;
                            
                            fs.renameSync(actualOldPath, finalNewPath);
                            return safeApiSend(api, `‚úÖ ƒê√£ ƒë·ªïi t√™n ${path.basename(actualOldPath)} th√†nh ${path.basename(finalNewPath)}`, threadID);
                        } catch (err) {
                            return handleError(err, api, threadID);
                        }
                        break;

                    case 'view':
                        try {
                            validateInput(fileName);
                            const viewPath = path.resolve(fileName);
                            const files = listFilesInDir(viewPath);
                            return safeApiSend(api, `üìÇ N·ªôi dung th∆∞ m·ª•c ${fileName}:\n\n${files}`, threadID);
                        } catch (error) {
                            return handleError(error, api, threadID);
                        }
                        break;

                    default:
                        return safeApiSend(
                            api,
                            "üìù Qu·∫£n l√Ω File L·ªánh:\n\n" +
                            "1. list - Xem danh s√°ch v√† th√¥ng tin l·ªánh\n" +
                            "2. info <t√™n> - Xem chi ti·∫øt m·ªôt l·ªánh\n" +
                            "3. new <t√™n> <code> - T·∫°o l·ªánh m·ªõi\n" +
                            "4. del <t√™n> - X√≥a l·ªánh\n" +
                            "5. edit <t√™n> <code> - S·ª≠a l·ªánh\n" +
                            "6. read <t√™n> - ƒê·ªçc n·ªôi dung l·ªánh\n" +
                            "7. rename <t√™n c≈©> <t√™n m·ªõi> - ƒê·ªïi t√™n l·ªánh\n" +
                            "8. view <ƒë∆∞·ªùng d·∫´n> - Xem n·ªôi dung th∆∞ m·ª•c\n\n" +
                            "V√≠ d·ª•: file info help.js",
                            threadID, messageID
                        );x
                }
            } catch (error) {
                console.error('Command Error:', error);
                return safeApiSend(api, `‚ùå L·ªói th·ª±c thi l·ªánh: ${error.message}`, threadID, messageID);
            }

        } catch (error) {
            console.error('Critical Error:', error);
            return safeApiSend(api, `‚ùå L·ªói h·ªá th·ªëng: ${error.message}`, threadID);
        }
    }
};