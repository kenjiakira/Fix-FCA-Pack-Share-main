const { getBalance, updateBalance, updateQuestProgress } = require('../utils/currencies');
const { randomInt } = require("crypto");

function formatNumber(number) {
    return number.toLocaleString('vi-VN');
}

module.exports = {
    name: "coinflip",
    dev: "HNT",
    info: "Tung ƒë·ªìng xu.",
    onPrefix: true,
    usages: "coinflip",
    usedby: 0,
    cooldowns: 0,

    lastPlayed: {},
    winStreak: {},  

    onLaunch: async function({ api, event, target = [] }) {
        try {
            const { threadID, messageID, senderID } = event;

            const currentTime = Date.now();
       
            if (this.lastPlayed[senderID] && currentTime - this.lastPlayed[senderID] < 90000) {
                const waitTime = Math.ceil((90000 - (currentTime - this.lastPlayed[senderID])) / 1000);
                return api.sendMessage(`Vui l√≤ng ƒë·ª£i ${waitTime} gi√¢y n·ªØa ƒë·ªÉ ch∆°i l·∫°i!`, threadID, messageID);
            }

            const balance = getBalance(senderID);

            if (target.length < 2) {
                return api.sendMessage(
                    "COINFLIP - TUNG ƒê·ªíNG XU\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nH∆∞·ªõng d·∫´n c√°ch ch∆°i:\n" +
                    "G√µ .coinflip <up/ng·ª≠a> <s·ªë ti·ªÅn> ho·∫∑c\n.coinflip <up/ng·ª≠a> allin\n\nallin l√† c∆∞·ª£c to√†n b·ªô s·ªë d∆∞.",
                    threadID, messageID
                );
            }

            const choice = target[0].toLowerCase();
            if (!["up", "ng·ª≠a"].includes(choice)) {
                return api.sendMessage("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn 'up' ho·∫∑c 'ng·ª≠a'.", threadID, messageID);
            }

            let betAmount;
            if (target[1].toLowerCase() === "allin") {
                if (balance === 0) {
                    return api.sendMessage("B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ allin.", threadID, messageID);
                }
                betAmount = balance;
            } else {
                betAmount = parseInt(target[1], 10);
                if (isNaN(betAmount) || betAmount <= 0) {
                    return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng.", threadID, messageID);
                }
                if (betAmount < 10000) {
                    return api.sendMessage("S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 10,000 Xu!", threadID, messageID);
                }
            }

            if (betAmount > balance) {
                return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c s·ªë ti·ªÅn n√†y!", threadID, messageID);
            }

            this.lastPlayed[senderID] = currentTime;
            updateBalance(senderID, -betAmount);

            if (!this.winStreak[senderID]) this.winStreak[senderID] = 0;

            let message = `ƒêang tung ƒë·ªìng xu... ƒê·ª£i ${4} gi√¢y...`;
            await api.sendMessage(message, threadID, messageID);

            setTimeout(async () => {
                const COIN_FACES = {
                    "up": "üëÜ",
                    "ng·ª≠a": "‚≠ï"
                };

                let winChance = 0.5; 
                if (this.winStreak[senderID] >= 2) {
                    winChance = 0.3; 
                }
                if (this.winStreak[senderID] >= 4) {
                    winChance = 0.2;
                }

                const result = Math.random() < winChance ? choice : (choice === "up" ? "ng·ª≠a" : "up");
                const resultMessage = `K·∫øt qu·∫£: ${COIN_FACES[result]} (${result.toUpperCase()})\n`;

                if (result === choice) {
                    this.winStreak[senderID]++;
                    
                    let multiplier = 1.8;
                    
                    const specialRoll = randomInt(0, 100);
                    if (specialRoll < 5) { 
                        multiplier = 3.0;
                    } else if (specialRoll < 15) { 
                        multiplier = 2.2;
                    }

                    const winnings = Math.floor(betAmount * multiplier);
                    updateBalance(senderID, winnings);
                    updateQuestProgress(senderID, "play_games");
                    updateQuestProgress(senderID, "win_games");
                    updateQuestProgress(senderID, "play_coinflip");
                    updateQuestProgress(senderID, "win_coinflip");

                    const finalMessage = resultMessage +
                        `üéâ Ch√∫c m·ª´ng! B·∫°n th·∫Øng v·ªõi h·ªá s·ªë x${multiplier} v√† nh·∫≠n ƒë∆∞·ª£c ${formatNumber(winnings)} Xu.\n` +
                        `üî• Chu·ªói th·∫Øng hi·ªán t·∫°i: ${this.winStreak[senderID]}\n` +
                        `üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${formatNumber(getBalance(senderID))} Xu.`;

                    return api.sendMessage(finalMessage, threadID, messageID);
                } else {
                    this.winStreak[senderID] = 0;
                    updateQuestProgress(senderID, "play_games");
                    updateQuestProgress(senderID, "play_coinflip");

                    const finalMessage = resultMessage +
                        `üò¢ B·∫°n ƒë√£ thua v√† m·∫•t ${formatNumber(betAmount)} Xu.\n` +
                        `üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${formatNumber(getBalance(senderID))} Xu.`;

                    return api.sendMessage(finalMessage, threadID, messageID);
                }
            }, 4000);

        } catch (error) {
            console.error('Main error:', error);
            return api.sendMessage("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }
    }
};
