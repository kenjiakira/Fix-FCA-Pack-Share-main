const axios = require('axios');
const fs = require('fs');
const path = require('path');
const Downloader = require('../utils/downloader');
const vipService = require('../game/vip/vipService');

const PLATFORM_INFO = {
    NO_WATERMARK: ['tiktok', 'douyin', 'capcut', 'hipi', 'xiaohongshu'],
    STABLE: [
        'tiktok', 'douyin', 'capcut', 'threads', 'instagram', 'facebook',
        'pinterest', 'youtube', 'twitter', 'vimeo', 'bilibili', 'dailymotion',
        'linkedin', 'telegram', 'soundcloud', 'spotify', 'zingmp3'
    ],
    CHINA: ['douyin', 'xiaohongshu', 'ixigua', 'weibo'],
    UNSTABLE: ['instagram-stories', 'instagram-private', 'facebook-private']
};

const patterns = {
    capcut: /https:\/\/www\.capcut\.com\/t\/\S*/,
    facebook: /https:\/\/www\.facebook\.com\/\S*/,
    tiktok: /https:\/\/(vm|vt|www|v)?\.?tiktok\.com\/.+/, 
    douyin: /https:\/\/(v\.|www\.)?(douyin\.com|iesdouyin\.com)\/.+/,
    youtube: /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/,
    instagram: /https?:\/\/(www\.)?instagram\.com\/(p|reel|stories)\/\S+/,
    twitter: /https?:\/\/(www\.)?(twitter\.com|x\.com)\/\S+/,
    weibo: /https?:\/\/(www\.)?(weibo\.com|weibo\.cn)\/\S+/,
    xiaohongshu: /https?:\/\/(www\.)?(xiaohongshu\.com|xhslink\.com)\/\S+/,
    threads: /https?:\/\/(www\.)?threads\.net\/@?[a-zA-Z0-9._-]+\/post\/[a-zA-Z0-9]+/,
    pinterest: /https?:\/\/(www\.)?pinterest\.(com|ca|fr|jp|co\.uk)\/pin\/[0-9]+/,
};

module.exports = {
    name: "download",
    dev: "HNT",
    category: "Ti·ªán √çch",
    info: "T·∫£i media t·ª´ nhi·ªÅu n·ªÅn t·∫£ng x√£ h·ªôi ho·∫∑c l·∫•y link t·∫£i xu·ªëng",
    usages: `download [l·ªánh] [link]
- down [link]: T·∫£i media t·ª´ nhi·ªÅu n·ªÅn t·∫£ng
- getlink: L·∫•y URL t·∫£i xu·ªëng t·ª´ video, √¢m thanh ƒë∆∞·ª£c g·ª≠i t·ª´ nh√≥m
- capcut [link]: T·∫£i template t·ª´ Capcut`,
    cooldowns: 5,
    onPrefix: true,

    async onLaunch({ api, event, target }) {
        const [subcommand, ...params] = target;

        if (!subcommand) {
            return api.sendMessage(this.usages, event.threadID);
        }

        switch (subcommand.toLowerCase()) {
            case 'down':
                await this.downloadMedia(api, event, params[0]);
                break;
            case 'getlink':
                await this.getLink(api, event);
                break;
            case 'capcut':
                await this.downloadCapcut(api, event, params[0]);
                break;
            default:
                return api.sendMessage("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!\n\n" + this.usages, event.threadID);
        }
    },

    async downloadMedia(api, event, url) {
        let loadingMsg = null;
        try {
            if (!url) {
                return api.sendMessage(
                    "üì• ZM Media Downloader\n\n" +
                    "üÜì N·ªÅn t·∫£ng mi·ªÖn ph√≠:\n" +
                    "tiktok, facebook\n\n" +
                    "üíé N·ªÅn t·∫£ng y√™u c·∫ßu VIP GOLD:\n" +
                    "1. Kh√¥ng watermark:\n" +
                    `${PLATFORM_INFO.NO_WATERMARK.filter(p => !['tiktok', 'facebook'].includes(p)).join(', ')}\n\n` +
                    "2. N·ªÅn t·∫£ng ·ªïn ƒë·ªãnh:\n" +
                    `${PLATFORM_INFO.STABLE.filter(p => !['tiktok', 'facebook'].includes(p)).join(', ')}\n\n` +
                    "3. N·ªÅn t·∫£ng Trung Qu·ªëc:\n" +
                    `${PLATFORM_INFO.CHINA.join(', ')}\n\n` +
                    "4. N·ªÅn t·∫£ng kh√¥ng ·ªïn ƒë·ªãnh:\n" +
                    `${PLATFORM_INFO.UNSTABLE.join(', ')}\n\n` +
                    "C√°ch d√πng: download down [link]",
                    event.threadID
                );
            }

            const platform = Object.entries(patterns).find(([_, pattern]) => pattern.test(url))?.[0];
            if (platform && !['facebook', 'tiktok'].includes(platform)) {
                const benefits = vipService.getVIPBenefits(event.senderID);
                if (benefits.packageId !== 3) {
                    return api.sendMessage(
                        "‚ö†Ô∏è B·∫°n c·∫ßn c√≥ VIP GOLD ƒë·ªÉ t·∫£i n·ªôi dung t·ª´ n·ªÅn t·∫£ng n√†y.\n" +
                        "üíé G√µ '.vip gold' ƒë·ªÉ xem th√¥ng tin n√¢ng c·∫•p VIP GOLD.",
                        event.threadID
                    );
                }
            }

            loadingMsg = await api.sendMessage("‚è≥ ƒêang x·ª≠ l√Ω...", event.threadID);

            const data = await Downloader.getMediaInfo(url);
            const mediaDownloads = [];

            if (data.medias && data.medias.length > 0) {
                const sortedMedias = Downloader.sortMediaByQuality(data.medias);

                for (const media of sortedMedias) {
                    if (mediaDownloads.length >= 10) break;
                    const download = await Downloader.downloadMedia(media);
                    mediaDownloads.push(download);
                }
            }

            if (mediaDownloads.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y media ƒë·ªÉ t·∫£i');
            }

            await api.sendMessage({
                body: `üì• T·∫£i th√†nh c√¥ng!\n` +
                      `üë§ T√°c gi·∫£: ${data.author || 'Kh√¥ng x√°c ƒë·ªãnh'}\n` +
                      `üí¨ Ti√™u ƒë·ªÅ: ${data.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}\n` +
                      `üìä S·ªë l∆∞·ª£ng: ${mediaDownloads.length} file\n` +
                      `üîç Ngu·ªìn: ${data.source}\n` +
                      (data.description ? `üìù M√¥ t·∫£: ${data.description}\n` : '') +
                      `üîó Link g·ªëc: ${data.url}`,
                attachment: mediaDownloads.map(m => fs.createReadStream(m.path))
            }, event.threadID, () => {
                mediaDownloads.forEach(m => fs.unlinkSync(m.path));
                if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            });

        } catch (error) {
            console.error('Download Error:', error);
            if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            return api.sendMessage(
                `‚ùå L·ªói: ${error.message}\nVui l√≤ng th·ª≠ l·∫°i sau.`,
                event.threadID
            );
        }
    },

    async getLink(api, event) {
        const errorMessage = "‚ùå B·∫°n c·∫ßn tr·∫£ l·ªùi m·ªôt tin nh·∫Øn c√≥ ch·ª©a √¢m thanh, video ho·∫∑c h√¨nh ·∫£nh";

        if (event.type !== "message_reply") {
            return api.sendMessage(errorMessage, event.threadID, event.messageID);
        }

        if (!event.messageReply.attachments || event.messageReply.attachments.length === 0) {
            return api.sendMessage(errorMessage, event.threadID, event.messageID);
        }

        if (event.messageReply.attachments.length > 1) {
            return api.sendMessage(errorMessage, event.threadID, event.messageID);
        }

        return api.sendMessage(
            event.messageReply.attachments[0].url,
            event.threadID,
            event.messageID
        );
    },

    async downloadCapcut(api, event, url) {
        let loadingMsg = null;
        try {
            if (!url) {
                return api.sendMessage(
                    "üì• Capcut Template Downloader\n\nC√°ch d√πng: download capcut [link]",
                    event.threadID
                );
            }

            if (!url.includes('capcut.com')) {
                return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p link Capcut h·ª£p l·ªá!", event.threadID);
            }

            loadingMsg = await api.sendMessage("‚è≥ ƒêang t·∫£i template Capcut...", event.threadID);

            const data = await Downloader.getMediaInfo(url);
            const mediaDownloads = [];

            if (data.medias && data.medias.length > 0) {
                const media = data.medias[0]; 
                const download = await Downloader.downloadMedia(media, 'capcut');
                mediaDownloads.push(download);
            }

            if (mediaDownloads.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y template ƒë·ªÉ t·∫£i');
            }

            await api.sendMessage({
                body: `üì• T·∫£i template th√†nh c√¥ng!\n` +
                      `‚ú® T√™n template: ${data.title || 'Kh√¥ng c√≥ t√™n'}\n` +
                      `üë§ T√°c gi·∫£: ${data.author || 'Kh√¥ng x√°c ƒë·ªãnh'}\n` +
                      `üîó Link g·ªëc: ${data.url}`,
                attachment: mediaDownloads.map(m => fs.createReadStream(m.path))
            }, event.threadID, () => {
                mediaDownloads.forEach(m => fs.unlinkSync(m.path));
                if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            });

        } catch (error) {
            console.error('Capcut Download Error:', error);
            if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            return api.sendMessage(
                `‚ùå L·ªói: ${error.message}\nVui l√≤ng th·ª≠ l·∫°i sau.`,
                event.threadID
            );
        }
    }
};
