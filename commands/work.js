const { updateBalance, updateQuestProgress } = require('../utils/currencies');
const { createUserData } = require('../utils/userData');

const workCooldowns = new Map();

module.exports = {
    name: "work",
    dev: "HNT",
    category: "Games",
    info: "L√†m vi·ªác ki·∫øm ti·ªÅn",
    onPrefix: true,
    usages: "work",
    cooldowns: 0,
    
    onLaunch: async function({ api, event }) {
        const { threadID, messageID, senderID } = event;

        try {
            await createUserData(senderID);
        } catch (error) {
            return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o d·ªØ li·ªáu ng∆∞·ªùi d√πng!", threadID, messageID);
        }

        const now = Date.now();
        const cooldownEnd = workCooldowns.get(senderID);
        
        if (cooldownEnd && now < cooldownEnd) {
            const remaining = cooldownEnd - now;
            const hours = Math.floor(remaining / 3600000);
            const minutes = Math.floor((remaining % 3600000) / 60000);
            const seconds = Math.ceil((remaining % 60000) / 1000);
            
            let timeMessage = '';
            if (hours > 0) timeMessage += `${hours} gi·ªù `;
            if (minutes > 0) timeMessage += `${minutes} ph√∫t `;
            if (seconds > 0) timeMessage += `${seconds} gi√¢y`;
            
            return api.sendMessage(
                `‚è≥ B·∫°n c·∫ßn ngh·ªâ ng∆°i ${timeMessage} n·ªØa m·ªõi c√≥ th·ªÉ l√†m vi·ªác ti·∫øp!`,
                threadID,
                messageID
            );
        }

        try {
            const earnings = Math.floor(Math.random() * 9001) + 100000;
            
            await updateBalance(senderID, earnings);
            await updateQuestProgress(senderID, "work");
            
            workCooldowns.set(senderID, now + 3600000);
            
            const message = `üí∞ B·∫°n ƒë√£ l√†m vi·ªác v√† ki·∫øm ƒë∆∞·ª£c ${earnings.toLocaleString('vi-VN')} $!`;
            
            return api.sendMessage(message, threadID, messageID);

        } catch (error) {
            console.error("Work command error:", error);
            return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi l√†m vi·ªác!", threadID, messageID);
        }
    }
};