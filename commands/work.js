const { updateBalance, updateQuestProgress, } = require('../utils/currencies');
const { getVIPBenefits } = require('../vip/vipCheck');
const { createUserData } = require('../utils/userData');
const JobSystem = require('../family/JobSystem');
const createWorkResultImage = require('../canvas/workImageGenerator');
const fs = require('fs');

module.exports = {
    name: "work",
    dev: "HNT",
    category: "Games",
    info: "L√†m vi·ªác ki·∫øm ti·ªÅn",
    onPrefix: true,
    usages: "work",
    cooldowns: 0,
    
    onLaunch: async function({ api, event }) {
        const { threadID, messageID, senderID } = event;

        try {
            await createUserData(senderID);
        } catch (error) {
            return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o d·ªØ li·ªáu ng∆∞·ªùi d√πng!", threadID, messageID);
        }

        const jobSystem = new JobSystem();
        const vipBenefits = getVIPBenefits(senderID);
        
        const cooldown = jobSystem.getWorkCooldown(senderID, vipBenefits);
        
        if (cooldown > 0) {
            const hours = Math.floor(cooldown / 3600000);
            const minutes = Math.floor((cooldown % 3600000) / 60000);
            const seconds = Math.ceil((cooldown % 60000) / 1000);
            
            let timeMessage = '';
            if (hours > 0) timeMessage += `${hours} gi·ªù `;
            if (minutes > 0) timeMessage += `${minutes} ph√∫t `;
            if (seconds > 0) timeMessage += `${seconds} gi√¢y`;
            
            return api.sendMessage(
                `‚è≥ B·∫°n c·∫ßn ngh·ªâ ng∆°i ${timeMessage} n·ªØa m·ªõi c√≥ th·ªÉ l√†m vi·ªác ti·∫øp!`,
                threadID,
                messageID
            );
        }

        try {

            const result = await jobSystem.work(senderID, vipBenefits);
            
            const nextCooldown = jobSystem.getJobBasedCooldown(senderID);
            const tax = Math.floor(result.salary * ((result.tax || 0) / 100));
            const netEarnings = result.salary - tax;
            
            result.tax = (tax/result.salary)*100; 
            result.cooldown = nextCooldown;

            await updateBalance(senderID, netEarnings);
            await updateQuestProgress(senderID, "work");
            
            if (vipBenefits?.workBonus) {
                const vipBonus = Math.floor(result.salary * vipBenefits.workBonus / 100);
                await updateBalance(senderID, vipBonus);
                result.vipBonus = vipBonus;
            }

            const imagePath = await createWorkResultImage(result, vipBenefits, senderID);

            let textMessage = "‚îè‚îÅ‚îÅ„Äé L√ÄM VI·ªÜC „Äè‚îÅ‚îÅ‚îì\n\n";
            textMessage += `[üè¢] C√¥ng vi·ªác: ${result.name}\n`;
            textMessage += `[üëî] C·∫•p b·∫≠c: ${result.levelName}\n`;
            textMessage += `[üí∞] Th·ª±c l√£nh: ${netEarnings.toLocaleString('vi-VN')} $\n`;
            
            if (vipBenefits?.workBonus) {
                textMessage += `[üëë] Th∆∞·ªüng VIP: +${vipBenefits.workBonus}% (${result.vipBonus.toLocaleString('vi-VN')} $)\n`;
            }
            
            textMessage += `[‚è≥] Th·ªùi gian ngh·ªâ: ${Math.floor(nextCooldown / 3600000) > 0 ? `${Math.floor(nextCooldown / 3600000)} gi·ªù ` : ''}${Math.floor((nextCooldown % 3600000) / 60000)} ph√∫t\n`;
            
            if (result.leveledUp) {
                textMessage += `\nüéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ thƒÉng c·∫•p l√™n ${result.leveledUp.name}!\n`;
                textMessage += `üåü Gi·ªù ƒë√¢y b·∫°n nh·∫≠n ƒë∆∞·ª£c +${((result.leveledUp.bonus - 1) * 100).toFixed(0)}% l∆∞∆°ng!\n`;
            }
            
            return api.sendMessage(
                {
                    body: textMessage,
                    attachment: fs.createReadStream(imagePath)
                },
                threadID,
                (err) => {
                    if (err) {
                        console.error("Error sending image:", err);
                        api.sendMessage(textMessage, threadID, messageID);
                    }
                    
    
                    if (fs.existsSync(imagePath)) {
                        fs.unlinkSync(imagePath);
                    }
                }
            );

        } catch (error) {
            console.error("Work command error:", error);
            return api.sendMessage(`‚ùå ${error.message || "C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán c√¥ng vi·ªác!"}`, threadID, messageID);
        }
    }
};