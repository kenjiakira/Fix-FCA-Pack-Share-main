const fs = require('fs');
const path = require('path');

const BANWORDS_DIR = path.join(__dirname, '.', 'json');
const BANWORDS_FILE = path.join(BANWORDS_DIR, 'banwords.json');
const WARNINGS_FILE = path.join(BANWORDS_DIR, 'warnings.json');

// Ensure directories exist
if (!fs.existsSync(BANWORDS_DIR)) {
    fs.mkdirSync(BANWORDS_DIR, { recursive: true });
}

// Initialize files if they don't exist
if (!fs.existsSync(BANWORDS_FILE)) {
    fs.writeFileSync(BANWORDS_FILE, JSON.stringify({}, null, 2));
}
if (!fs.existsSync(WARNINGS_FILE)) {
    fs.writeFileSync(WARNINGS_FILE, JSON.stringify({}, null, 2));
}

module.exports = {
    name: "banwords",
    dev: "HNT",
    usedby: 5,
    category: "Groups",
    info: "Qu·∫£n l√Ω t·ª´ ng·ªØ c·∫•m trong nh√≥m",
    onPrefix: true,
    cooldowns: 3,

    onLaunch: async function({ api, event, target }) {
        const { threadID, messageID } = event;
        const cmd = target[0]?.toLowerCase();
        const words = target.slice(1).join(" ");

        try {
            let banwords = JSON.parse(fs.readFileSync(BANWORDS_FILE));
            
            if (!banwords[threadID]) {
                banwords[threadID] = [];
            }

            switch(cmd) {
                case "add": {
                    if (!words) {
                        return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ c·∫ßn c·∫•m!", threadID, messageID);
                    }

                    const newWords = words.split(",").map(w => w.trim().toLowerCase());
                    const addedWords = newWords.filter(w => !banwords[threadID].includes(w));
                    
                    if (addedWords.length > 0) {
                        banwords[threadID].push(...addedWords);
                        fs.writeFileSync(BANWORDS_FILE, JSON.stringify(banwords, null, 2));
                        return api.sendMessage(
                            `‚úÖ ƒê√£ th√™m ${addedWords.length} t·ª´ c·∫•m:\n${addedWords.join(", ")}`,
                            threadID, messageID
                        );
                    } else {
                        return api.sendMessage("‚ö†Ô∏è Nh·ªØng t·ª´ n√†y ƒë√£ c√≥ trong danh s√°ch c·∫•m!", threadID, messageID);
                    }
                }

                case "remove": {
                    if (!words) {
                        return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ c·∫ßn g·ª°!", threadID, messageID);
                    }

                    const removeWords = words.split(",").map(w => w.trim().toLowerCase());
                    const removed = removeWords.filter(w => banwords[threadID].includes(w));
                    
                    if (removed.length > 0) {
                        banwords[threadID] = banwords[threadID].filter(w => !removed.includes(w));
                        fs.writeFileSync(BANWORDS_FILE, JSON.stringify(banwords, null, 2));
                        return api.sendMessage(
                            `‚úÖ ƒê√£ g·ª° ${removed.length} t·ª´ c·∫•m:\n${removed.join(", ")}`,
                            threadID, messageID
                        );
                    } else {
                        return api.sendMessage("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ª´ c·∫ßn g·ª°!", threadID, messageID);
                    }
                }

                case "list": {
                    const threadBanwords = banwords[threadID];
                    if (!threadBanwords || threadBanwords.length === 0) {
                        return api.sendMessage("üìù Ch∆∞a c√≥ t·ª´ c·∫•m n√†o trong nh√≥m!", threadID, messageID);
                    }
                    return api.sendMessage(
                        `üìù Danh s√°ch t·ª´ c·∫•m (${threadBanwords.length}):\n${threadBanwords.join(", ")}`,
                        threadID, messageID
                    );
                }

                case "reset": {
                    banwords[threadID] = [];
                    let warnings = JSON.parse(fs.readFileSync(WARNINGS_FILE));
                    delete warnings[threadID];
                    
                    fs.writeFileSync(BANWORDS_FILE, JSON.stringify(banwords, null, 2));
                    fs.writeFileSync(WARNINGS_FILE, JSON.stringify(warnings, null, 2));
                    
                    return api.sendMessage("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ t·ª´ c·∫•m v√† c·∫£nh b√°o trong nh√≥m!", threadID, messageID);
                }

                default: {
                    return api.sendMessage(
                        "üö´ QU·∫¢N L√ù T·ª™ C·∫§M üö´\n" +
                        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n" +
                        "1. Th√™m t·ª´ c·∫•m:\n" +
                        "   .banwords add [t·ª´1, t·ª´2,...]\n\n" +
                        "2. X√≥a t·ª´ c·∫•m:\n" +
                        "   .banwords remove [t·ª´1, t·ª´2,...]\n\n" +
                        "3. Xem danh s√°ch:\n" +
                        "   .banwords list\n\n" +
                        "4. X√≥a t·∫•t c·∫£:\n" +
                        "   .banwords reset\n\n" +
                        "‚ö†Ô∏è Ng∆∞·ªùi d√πng s·∫Ω b·ªã:\n" +
                        "- C·∫£nh b√°o l·∫ßn 1: Nh·∫Øc nh·ªü\n" +
                        "- C·∫£nh b√°o l·∫ßn 2: C·∫£nh b√°o cu·ªëi\n" +
                        "- C·∫£nh b√°o l·∫ßn 3: T·ª± ƒë·ªông kick",
                        threadID, messageID
                    );
                }
            }
        } catch (error) {
            console.error("Banwords error:", error);
            return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói!", threadID, messageID);
        }
    },

    noPrefix: async function({ api, event }) {
        const { threadID, messageID, senderID, body } = event;
        if (!body) return;

        try {
            const adminConfig = JSON.parse(fs.readFileSync("./admin.json", "utf8"));
            const isAdmin = adminConfig.adminUIDs.includes(senderID) || 
                          (adminConfig.moderatorUIDs && adminConfig.moderatorUIDs.includes(senderID));
            
            if (isAdmin) return;

            const banwords = JSON.parse(fs.readFileSync(BANWORDS_FILE));
            const threadBanwords = banwords[threadID] || [];
            
            if (threadBanwords.length === 0) return;

            const containsBannedWord = threadBanwords.some(word => 
                body.toLowerCase().includes(word.toLowerCase())
            );

            if (containsBannedWord) {
                let warnings = JSON.parse(fs.readFileSync(WARNINGS_FILE));
                
                if (!warnings[threadID]) {
                    warnings[threadID] = {};
                }
                if (!warnings[threadID][senderID]) {
                    warnings[threadID][senderID] = 0;
                }

                warnings[threadID][senderID]++;
                const warningCount = warnings[threadID][senderID];

                fs.writeFileSync(WARNINGS_FILE, JSON.stringify(warnings, null, 2));

                if (warningCount >= 3) {
           
                    warnings[threadID][senderID] = 0;
                    fs.writeFileSync(WARNINGS_FILE, JSON.stringify(warnings, null, 2));

                    await api.removeUserFromGroup(senderID, threadID);
                    return api.sendMessage(
                        `üö´ Ng∆∞·ªùi d√πng ƒë√£ b·ªã kick v√¨ vi ph·∫°m 3 l·∫ßn s·ª≠ d·ª•ng t·ª´ c·∫•m!`,
                        threadID
                    );
                }

                return api.sendMessage(
                    `‚ö†Ô∏è C·∫£nh b√°o ${warningCount}/3:\n` +
                    `Tin nh·∫Øn c·ªßa b·∫°n ch·ª©a t·ª´ c·∫•m!\n` +
                    `${warningCount === 2 ? "‚ùó ƒê√¢y l√† c·∫£nh b√°o cu·ªëi c√πng!" : ""}`,
                    threadID
                );
            }
        } catch (error) {
            console.error("Banwords check error:", error);
        }
    }
};
