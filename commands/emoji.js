module.exports = {
    name: "emoji",
    dev: "HNT",
    usedby: 0,
    info: "M√£ h√≥a v√† gi·∫£i m√£ vƒÉn b·∫£n th√†nh Emoji.",
    onPrefix: true,
    usages: ".emoji encode [vƒÉn b·∫£n] | .emoji decode [emoji]: M√£ h√≥a v√† gi·∫£i m√£ vƒÉn b·∫£n th√†nh Emoji.",
    cooldowns: 0,

    onLaunch: async function({ api, event, target = [] }) {
        const { threadID, messageID } = event;

        if (target.length === 0) {
            return api.sendMessage("‚ùé Vui l√≤ng nh·∫≠p l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng: .emojiencode encode [vƒÉn b·∫£n] | .emojiencode decode [emoji].", threadID, messageID);
        }

        const command = target[0].toLowerCase();
        const emojiMap = {
            "a": "üÖ∞Ô∏è", "b": "üÖ±Ô∏è", "c": "üá®üá¶", "d": "üá©üá™", "e": "üá™üá∏", "f": "üá´üá∑", "g": "üá¨üá∑", "h": "üá≠üá∫", "i": "üáÆüáπ", "j": "üáØüá±",
            "k": "üá∞üá∑", "l": "üá±üá∏", "m": "üá≤üáæ", "n": "üá≥üá¨", "o": "üÖæÔ∏è", "p": "üÖøÔ∏è", "q": "üá∂üá¶", "r": "üá∑üá¥", "s": "üá∏üáÆ", "t": "üáπüáø",
            "u": "üá∫üá∏", "v": "üáªüáÆ", "w": "üáºüá∏", "x": "üáΩüáÆ", "y": "üáæüá≤", "z": "üáøüá¶",
            "0": "0Ô∏è‚É£", "1": "1Ô∏è‚É£", "2": "2Ô∏è‚É£", "3": "3Ô∏è‚É£", "4": "4Ô∏è‚É£", "5": "5Ô∏è‚É£", "6": "6Ô∏è‚É£", "7": "7Ô∏è‚É£", "8": "8Ô∏è‚É£", "9": "9Ô∏è‚É£",
            " ": "‚ê£", ".": "üîò", ",": "‚ùó", "!": "‚ùï", "?": "‚ùì", "@": "üìß", "#": "‚ôØ", "$": "üí≤", "%": "üíØ"
        };

        const reverseEmojiMap = Object.fromEntries(Object.entries(emojiMap).map(([key, value]) => [value, key]));

        if (command === "encode") {
            const inputText = target.slice(1).join(" ").toLowerCase();
            let encodedText = "";

            for (let char of inputText) {
                if (emojiMap[char]) {
                    encodedText += emojiMap[char] + " ";
                } else {
                    encodedText += char + " ";
                }
            }

            return api.sendMessage(`${encodedText}`, threadID, messageID);
        } else if (command === "decode") {
            const emojiText = target.slice(1).join(" ");
            const emojiArray = emojiText.split(" ");
            let decodedText = "";

            for (let emoji of emojiArray) {
                if (reverseEmojiMap[emoji]) {
                    decodedText += reverseEmojiMap[emoji];
                } else {
                    decodedText += emoji; 
                }
            }

            return api.sendMessage(`${decodedText}`, threadID, messageID);
        } else {
            return api.sendMessage("‚ùé L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng .emoji encode [vƒÉn b·∫£n] | .emoji decode [emoji].", threadID, messageID);
        }
    }
};
