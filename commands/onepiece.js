const axios = require('axios');

module.exports = {
    name: "onepiece",
    dev: "HNT",
    info: "Xem th√¥ng tin v·ªÅ One Piece",
    usages: "onepiece [character/random]",
    cooldowns: 5,
    onPrefix: true,

    onLaunch: async function({ api, event, target }) {
        const { threadID, messageID } = event;

        if (!target[0]) {
            return api.sendMessage(
                "üè¥‚Äç‚ò†Ô∏è One Piece Info\n\n" +
                "1. Xem th√¥ng tin nh√¢n v·∫≠t:\n" +
                "‚Üí onepiece character [t√™n]\n" +
                "VD: onepiece character luffy\n\n" +
                "2. Xem th√¥ng tin random:\n" +
                "‚Üí onepiece random\n\n" +
                "3. T√¨m ki·∫øm nh√¢n v·∫≠t:\n" +
                "‚Üí onepiece search [t·ª´ kh√≥a]\n" +
                "VD: onepiece search admiral",
                threadID, messageID
            );
        }

        const command = target[0].toLowerCase();
        const query = target.slice(1).join(" ");
        let loadingMsg;

        try {
            loadingMsg = await api.sendMessage("‚è≥ ƒêang t·∫£i th√¥ng tin...", threadID);

            switch (command) {
                case "character": {
                    if (!query) throw new Error("Vui l√≤ng nh·∫≠p t√™n nh√¢n v·∫≠t!");
                    const response = await axios.get(`https://api.api-onepiece.com/v2/characters/en/search/?name=${encodeURIComponent(query)}`);
                    
                    if (!response.data || response.data.length === 0) {
                        throw new Error("Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t!");
                    }

                    const character = response.data[0];
                    let message = `üè¥‚Äç‚ò†Ô∏è Th√¥ng tin nh√¢n v·∫≠t:\n\n`;
                    message += `T√™n: ${character.name}\n`;
                    message += `Ch·ª©c v·ª•: ${character.job || 'Kh√¥ng r√µ'}\n`;
                    message += `Chi·ªÅu cao: ${character.size || 'Kh√¥ng r√µ'}\n`;
                    message += `Sinh nh·∫≠t: ${character.birthday || 'Kh√¥ng r√µ'}\n`;
                    message += `Tu·ªïi: ${character.age || 'Kh√¥ng r√µ'}\n`;
                    message += `Ti·ªÅn truy n√£: ${character.bounty || 'Kh√¥ng c√≥'}\n`;
                    message += `Tr·∫°ng th√°i: ${character.status || 'Kh√¥ng r√µ'}\n\n`;

                    if (character.crew) {
                        message += `‚õµ BƒÉng h·∫£i t·∫∑c:\n`;
                        message += `‚Üí T√™n: ${character.crew.name}\n`;
                        message += `‚Üí S·ªë th√†nh vi√™n: ${character.crew.number || 'Kh√¥ng r√µ'}\n`;
                    }

                    if (character.fruit) {
                        message += `\nüçé Tr√°i √°c qu·ª∑:\n`;
                        message += `‚Üí T√™n: ${character.fruit.name}\n`;
                        message += `‚Üí Lo·∫°i: ${character.fruit.type}\n`;
                        message += `‚Üí M√¥ t·∫£: ${character.fruit.description || 'Kh√¥ng r√µ'}\n`;
                    }

                    await api.sendMessage(message, threadID, messageID);
                    break;
                }

                case "random": {
                    const response = await axios.get('https://api.api-onepiece.com/v2/characters/en');
                    const characters = response.data;
                    const randomChar = characters[Math.floor(Math.random() * characters.length)];

                    let message = `üé≤ Random One Piece Character:\n\n`;
                    message += `T√™n: ${randomChar.name}\n`;
                    message += `Ch·ª©c v·ª•: ${randomChar.job || 'Kh√¥ng r√µ'}\n`;
                    message += `Chi·ªÅu cao: ${randomChar.size || 'Kh√¥ng r√µ'}\n`;
                    message += `Ti·ªÅn truy n√£: ${randomChar.bounty || 'Kh√¥ng c√≥'}\n`;
                    
                    if (randomChar.crew) {
                        message += `\n‚õµ BƒÉng h·∫£i t·∫∑c: ${randomChar.crew.name}\n`;
                    }
                    
                    if (randomChar.fruit) {
                        message += `üçé Tr√°i √°c qu·ª∑: ${randomChar.fruit.name}\n`;
                    }

                    await api.sendMessage(message, threadID, messageID);
                    break;
                }

                case "search": {
                    if (!query) throw new Error("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!");
                    const response = await axios.get(`https://api.api-onepiece.com/v2/characters/en/search/?job=${encodeURIComponent(query)}`);
                    
                    if (!response.data || response.data.length === 0) {
                        throw new Error("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£!");
                    }

                    let message = `üîç K·∫øt qu·∫£ t√¨m ki·∫øm (${response.data.length}):\n\n`;
                    response.data.slice(0, 10).forEach((char, index) => {
                        message += `${index + 1}. ${char.name}\n`;
                        message += `‚Üí Ch·ª©c v·ª•: ${char.job || 'Kh√¥ng r√µ'}\n`;
                        message += `‚Üí Ti·ªÅn truy n√£: ${char.bounty || 'Kh√¥ng c√≥'}\n\n`;
                    });

                    if (response.data.length > 10) {
                        message += `\n...v√† ${response.data.length - 10} k·∫øt qu·∫£ kh√°c`;
                    }

                    await api.sendMessage(message, threadID, messageID);
                    break;
                }

                default:
                    throw new Error("L·ªánh kh√¥ng h·ª£p l·ªá! G√µ 'onepiece' ƒë·ªÉ xem h∆∞·ªõng d·∫´n.");
            }

            if (loadingMsg) api.unsendMessage(loadingMsg.messageID);

        } catch (error) {
            console.error('One Piece Error:', error);
            if (loadingMsg) api.unsendMessage(loadingMsg.messageID);
            return api.sendMessage(
                `‚ùå L·ªói: ${error.message}`,
                threadID, messageID
            );
        }
    }
};
