const { GoogleGenerativeAI } = require("@google/generative-ai");
const path = require("path");
const fs = require("fs-extra");
const NodeCache = require("node-cache");
const fetch = require('node-fetch');
global.fetch = fetch;

const responseCache = new NodeCache({ stdTTL: 1800 });
const conversationHistory = {};

const apiKeysPath = path.join(__dirname, 'json', 'key.json');
let API_KEYS = [];

const loadAPIKeys = async () => {
  try {
    const data = await fs.readJson(apiKeysPath);
    API_KEYS = data.api_keys;
    API_KEYS = API_KEYS.filter(key => key && key.length > 0);
    if (API_KEYS.length === 0) throw new Error("No valid API keys found");
  } catch (error) {
    console.error("Error loading API keys:", error);
    API_KEYS = [];
  }
};

loadAPIKeys();

const Model_Name = "gemini-1.5-flash";
const generationConfig = {
  temperature: 1,
  topK: 0,
  topP: 0.95,
  maxOutputTokens: 4096,
};

const systemInstruction = `
Bạn là AI trợ lý ảo có tên là AKI AI. Hãy trò chuyện một cách thân thiện và tự nhiên.
Trả lời ngắn gọn, súc tích và luôn bằng tiếng Việt.`;

const generateResponse = async (prompt, userId) => {
  try {
    const cacheKey = `${prompt}-${userId}`;
    const cached = responseCache.get(cacheKey);
    if (cached) return cached;

    for (const apiKey of API_KEYS) {
      try {
        const genAI = new GoogleGenerativeAI(apiKey);
        const model = genAI.getGenerativeModel({ 
          model: Model_Name,
          generationConfig
        });

        const context = conversationHistory[userId] ? 
          conversationHistory[userId].join("\n") : "";
        
        const fullPrompt = `${systemInstruction}\n${context}\nUser: ${prompt}\nBot:`;
        
        const result = await model.generateContent(fullPrompt);
        const response = await result.response;
        const text = response.text();
        
        responseCache.set(cacheKey, text);
        return text;
      } catch (error) {
        if (error.message.includes('quota')) continue;
        throw error;
      }
    }
    throw new Error("All API keys exhausted");
  } catch (error) {
    console.error("Generate response error:", error);
    throw error;
  }
};

const updateConversationHistory = (userId, message) => {
  if (!conversationHistory[userId]) {
    conversationHistory[userId] = [];
  }
  conversationHistory[userId].push(message);
  if (conversationHistory[userId].length > 10) {
    conversationHistory[userId].shift();
  }
};

module.exports = {
  name: "bot",
  usedby: 0,
  dmUser: false,
  dev: "HNT",
  nickName: ["assistant", "botchat"],
  info: "Chat with AI assistant",
  onPrefix: false,
  cooldowns: 3,

  onReply: async function({ event, api }) {
    const { threadID, messageID, body, senderID } = event;
    try {
      updateConversationHistory(senderID, `User: ${body}`);
      const response = await generateResponse(body, senderID);
      updateConversationHistory(senderID, `Bot: ${response}`);
      
      const msg = await api.sendMessage(response, threadID, messageID);
      
      global.client.onReply.push({
        name: this.name,
        messageID: msg.messageID,
        author: senderID
      });
    } catch (error) {
      api.sendMessage("❌ Xin lỗi, hiện tại tôi không thể trả lời. Vui lòng thử lại sau.", threadID, messageID);
    }
  },

  onLaunch: async function ({ event, api }) {
    const { threadID, messageID, body, senderID } = event;
    try {
      updateConversationHistory(senderID, `User: ${body}`);
      const response = await generateResponse(body, senderID);
      updateConversationHistory(senderID, `Bot: ${response}`);

      const msg = await api.sendMessage(response, threadID, messageID);

      global.client.onReply.push({
        name: this.name,
        messageID: msg.messageID,
        author: senderID
      });
    } catch (error) {
      api.sendMessage("❌ Xin lỗi, hiện tại tôi không thể trả lời. Vui lòng thử lại sau.", threadID, messageID);
    }
  }
};
